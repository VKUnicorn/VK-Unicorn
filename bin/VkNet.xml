<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VkNet</name>
    </assembly>
    <members>
        <member name="T:VkNet.Abstractions.Authorization.IAuthorizationFlow">
            <summary>
            Поток авторизации
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.Authorization.IAuthorizationFlow.AuthorizeAsync">
            <summary>
            Авторизация
            </summary>
            <returns> Access token. </returns>
        </member>
        <member name="M:VkNet.Abstractions.Authorization.IAuthorizationFlow.SetAuthorizationParams(VkNet.Model.IApiAuthParams)">
            <summary>
            Задать параметры авторизации
            </summary>
            <param name="authorizationParams">Параметры авторизации</param>
        </member>
        <member name="T:VkNet.Abstractions.Authorization.IImplicitFlow">
            <inheritdoc />
            <summary>
            Implicit flow — самый короткий и простой вариант.
            Ключ возвращается на устройство пользователя, где был открыт диалог авторизации
            (в виде дополнительного параметра URL).
            Такой ключ может быть использован только для запросов непосредственно с
            устройства пользователя
            (например, для выполнения вызовов из Javascript на веб-сайте или из мобильного
            приложения).
            </summary>
            <remarks>
            https://vk.com/dev/implicit_flow_user
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Authorization.IImplicitFlow.CreateAuthorizeUrl(System.UInt64,System.UInt64,VkNet.Enums.SafetyEnums.Display,System.String)">
            <summary>
            Построить URL для авторизации.
            </summary>
            <param name="clientId"> Идентификатор Вашего приложения. </param>
            <param name="scope">
            Битовая маска настроек доступа приложения, которые необходимо проверить при
            авторизации
            пользователя и запросить отсутствующие.
            </param>
            <param name="display"> Указывает тип отображения страницы авторизации. </param>
            <param name="state">
            Произвольная строка, которая будет возвращена вместе с
            результатом авторизации.
            </param>
            <returns> Возвращает Uri для авторизации </returns>
        </member>
        <member name="M:VkNet.Abstractions.Authorization.IImplicitFlow.CreateAuthorizeUrl">
            <summary>
            Построить URL для авторизации.
            </summary>
            <returns> Возвращает Uri для авторизации </returns>
        </member>
        <member name="T:VkNet.Abstractions.IAccountCategoryAsync">
            <summary>
            Методы этого класса позволяют асинхронно производить действия с аккаунтом
            пользователя.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategoryAsync.GetCountersAsync(VkNet.Enums.Filters.CountersFilter)">
            <summary>
            Возвращает ненулевые значения счетчиков пользователя.
            </summary>
            <param name="filter">
            Счетчики, информацию о которых нужно вернуть Async(friends, messages, photos,
            videos, notes, gifts, events, groups,
            notifications, sdk, app_requests).
            sdk - возвращает количество запросов в приложениях.
            app_requests - возвращает количество непрочитанных запросов в приложениях.
            список слов, разделенных через запятую
            Async(Список слов, разделенных через запятую).
            </param>
            <returns>
            Возвращает объект, который может содержать поля friends, messages, photos,
            videos, notes, gifts, events, groups,
            notifications, sdk, app_requests.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.getCounters
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategoryAsync.SetNameInMenuAsync(System.String,System.Nullable{System.Int64})">
            <summary>
            Устанавливает короткое название приложения Async(до 17 символов), которое
            выводится пользователю в левом меню.
            </summary>
            <param name="userId">
            Идентификатор пользователя. положительное число, по умолчанию идентификатор
            текущего пользователя,
            обязательный параметр Async(Положительное число, по умолчанию идентификатор
            текущего пользователя, обязательный
            параметр).
            </param>
            <param name="name"> Короткое название приложения. строка Async(Строка). </param>
            <returns>
            Возвращает 1 в случае успешной установки короткого названия.
            Если пользователь не установил приложение в левое меню, метод вернет ошибку 148
            Async(Access to the menu of the
            user denied). Избежать этой ошибки можно с помощью метода
            account.getAppPermissions.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.setNameInMenu
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategoryAsync.SetOnlineAsync(System.Nullable{System.Boolean})">
            <summary>
            Помечает текущего пользователя как online на 15 минут.
            </summary>
            <param name="voip">
            Возможны ли видеозвонки для данного устройства флаг, может принимать значения 1
            или 0 Async(Флаг,
            может принимать значения 1 или 0).
            </param>
            <returns>
            В случае успешного выполнения метода будет возвращён код 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.setOnline
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategoryAsync.SetOfflineAsync">
            <summary>
            Помечает текущего пользователя как offline.
            </summary>
            <returns>
            В случае успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.setOffline
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategoryAsync.RegisterDeviceAsync(VkNet.Model.RequestParams.AccountRegisterDeviceParams)">
            <summary>
            Подписывает устройство на базе iOS, Android или Windows Phone на получение
            Push-уведомлений.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            Возвращает 1 в случае успешного выполнения метода.
            На iOS и Windows Phone push-уведомления будут отображены без какой либо
            обработки.
            На Android будут приходить события в следующем формате.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.registerDevice
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategoryAsync.UnregisterDeviceAsync(System.String,System.Nullable{System.Boolean})">
            <summary>
            Отписывает устройство от Push уведомлений.
            </summary>
            <param name="deviceId">
            Уникальный идентификатор устройства. строка, доступен начиная с версии 5.31
            Async(Строка,
            доступен начиная с версии 5.31).
            </param>
            <param name="sandbox">
            Флаг предназначен для iOS устройств. 1 — отписать устройство, использующего
            sandbox сервер для
            отправки push-уведомлений, 0 — отписать устройство, не использующее sandbox
            сервер флаг, может принимать значения 1
            или 0, по умолчанию 0 Async(Флаг, может принимать значения 1 или 0, по
            умолчанию 0).
            </param>
            <returns>
            Возвращает <c> true </c> в случае успешного выполнения метода.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.unregisterDevice
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategoryAsync.SetSilenceModeAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Отключает push-уведомления на заданный промежуток времени.
            </summary>
            <param name="deviceId"> Идентификатор устройства для сервиса push уведомлений. </param>
            <param name="time">
            Время в секундах на которое требуется отключить уведомления. Async(-1 -
            отключить навсегда)
            </param>
            <param name="peerId">
            Идентификатор чата, для которого следует отключить
            уведомления.
            </param>
            <param name="sound">
            1 - включить звук в данном диалоге, 0 - отключить звук Async(параметр работает
            только если указан в
            peer_id передан идентификатор групповой беседы или пользователя)
            </param>
            <returns>
            Возвращает результат выполнения метода.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.setSilenceMode
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategoryAsync.GetPushSettingsAsync(System.String)">
            <summary>
            Позволяет получать настройки Push уведомлений.
            </summary>
            <param name="deviceId">
            Уникальный идентификатор устройства. строка, доступен начиная с версии 5.31
            Async(Строка,
            доступен начиная с версии 5.31).
            </param>
            <returns>
            Возвращает объект, содержащий поля:
            disabled — отключены ли уведомления.
            disabled_until — unixtime-значение времени, до которого временно отключены
            уведомления.
            conversations — список, содержащий настройки конкретных диалогов, и их
            количество первым элементом.
            settings — объект с настройками Push-уведомлений в специальном формате.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.getPushSettings
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategoryAsync.SetPushSettingsAsync(System.String,VkNet.Model.PushSettings,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Изменяет настройку Push-уведомлений.
            </summary>
            <param name="deviceId">
            Уникальный идентификатор устройства. строка, обязательный параметр
            Async(Строка, обязательный
            параметр).
            </param>
            <param name="settings">
            Сериализованный JSON-объект, описывающий настройки уведомлений в специальном
            формате данные в
            формате JSON Async(Данные в формате JSON).
            </param>
            <param name="key"> Ключ уведомления. строка Async(Строка). </param>
            <param name="value">
            Новое значение уведомления в специальном формате. список слов, разделенных
            через запятую
            Async(Список слов, разделенных через запятую).
            </param>
            <returns>
            Возвращает 1 в случае успешного выполнения метода.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.setPushSettings
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategoryAsync.GetAppPermissionsAsync(System.Int64)">
            <summary>
            Получает настройки текущего пользователя в данном приложении.
            </summary>
            <param name="userId">
            Идентификатор пользователя, информацию о настройках которого необходимо
            получить. По умолчанию —
            текущий пользователь. положительное число, по умолчанию идентификатор текущего
            пользователя, обязательный параметр
            Async(Положительное число, по умолчанию идентификатор текущего пользователя,
            обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает битовую маску настроек текущего
            пользователя в данном приложении.
            Пример Если Вы хотите получить права на Доступ к друзьям и Доступ к статусам
            пользователя, то Ваша битовая маска
            будет равна: 2   1024 = 1026.
            Если, имея битовую маску 1026, Вы хотите проверить, имеет ли она доступ к
            друзьям — Вы можете сделать 1026 &amp; 2.
            Например alertAsync(1026 &amp; 2);
            см. Список возможных настроек прав доступа.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.getAppPermissions
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategoryAsync.GetActiveOffersAsync(System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <summary>
            Возвращает список активных рекламных предложений Async(офферов), выполнив
            которые пользователь сможет получить
            соответствующее количество голосов на свой счёт внутри приложения.
            </summary>
            <param name="offset">
            Смещение, необходимое для выборки определенного подмножества офферов.
            положительное число, по
            умолчанию 0 Async(Положительное число, по умолчанию 0).
            </param>
            <param name="count">
            Количество офферов, которое необходимо получить положительное число, по
            умолчанию 100, максимальное
            значение 100 Async(Положительное число, по умолчанию 100, максимальное значение
            100).
            </param>
            <returns>
            Возвращает массив, состоящий из общего количества старгетированных на текущего
            пользователя специальных предложений
            Async(первый элемент), и списка объектов с информацией о предложениях.
            В случае, если на пользователя не старгетировано ни одного специального
            предложения, массив будет содержать элемент
            0 Async(количество специальных предложений).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.getActiveOffers
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategoryAsync.BanUserAsync(System.Int64)">
            <summary>
            Добавляет пользователя в черный список.
            </summary>
            <param name="userId">
            Идентификатор пользователя, которого нужно добавить в черный список.
            положительное число,
            обязательный параметр Async(Положительное число, обязательный параметр).
            </param>
            <returns>
            В случае успеха метод вернет <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.banUser
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategoryAsync.UnbanUserAsync(System.Int64)">
            <summary>
            Убирает пользователя из черного списка.
            </summary>
            <param name="userId">
            Идентификатор пользователя, которого нужно убрать из черного списка.
            положительное число,
            обязательный параметр Async(Положительное число, обязательный параметр).
            </param>
            <returns>
            В случае успеха метод вернет <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.unbanUser
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategoryAsync.GetBannedAsync(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает список пользователей, находящихся в черном списке.
            </summary>
            <param name="offset">
            Смещение необходимое для выборки определенного подмножества черного списка.
            положительное число
            Async(Положительное число).
            </param>
            <param name="count">
            Количество записей, которое необходимо вернуть. положительное число, по
            умолчанию 20, максимальное
            значение 200 Async(Положительное число, по умолчанию 20, максимальное значение
            200).
            </param>
            <returns>
            Возвращает набор объектов пользователей, находящихся в черном списке.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.getBanned
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategoryAsync.GetInfoAsync(VkNet.Enums.Filters.AccountFields)">
            <summary>
            Возвращает информацию о текущем аккаунте.
            </summary>
            <param name="fields">
            Список полей, которые необходимо вернуть. Возможные значения: Async(country,
            http_required,
            own_posts_default, no_wall_replies, intro, lang, По умолчанию будут возвращены
            все поля. список слов, разделенных
            через запятую Async(Список слов, разделенных через запятую).
            </param>
            <returns>
            Метод возвращает объект, содержащий следующие поля:
            country – строковой код страны, определенный по IP адресу, с которого сделан
            запрос;
            https_required – 1 - пользователь установил на сайте настройку "Всегда
            использовать безопасное соединение"; 0 -
            безопасное соединение не требуется;
            own_posts_default – 1 - на стене пользователя по-умолчанию должны отображаться
            только собственные записи.
            Соответствует настройке на сайте "Показывать только мои записи", 0 - на стене
            пользователя должны отображаться все
            записи;
            no_wall_replies – 1 - пользователь отключил комментирование записей на стене, 0
            - комментирование записей
            разрешено;
            intro – битовая маска отвечающая за прохождение обучения использованию
            приложения;
            lang – числовой идентификатор текущего языка пользователя.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.getInfo
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategoryAsync.SetInfoAsync(System.String,System.String)">
            <summary>
            Позволяет редактировать информацию о текущем аккаунте.
            </summary>
            <param name="name"> Имя настройки. </param>
            <param name="value"> Значение настройки. </param>
            <returns>
            В результате успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.setInfo
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategoryAsync.ChangePasswordAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Позволяет сменить пароль пользователя после успешного восстановления доступа к
            аккаунту через СМС, используя метод
            auth.restore.
            </summary>
            <param name="restoreSid">
            Идентификатор сессии, полученный при восстановлении доступа используя метод
            auth.restore.
            Async(В случае если пароль меняется сразу после восстановления доступа) строка
            Async(Строка).
            </param>
            <param name="changePasswordHash">
            Хэш, полученный при успешной OAuth авторизации по коду полученному по СМС
            Async(В
            случае если пароль меняется сразу после восстановления доступа) строка
            Async(Строка).
            </param>
            <param name="oldPassword"> Текущий пароль пользователя. строка Async(Строка). </param>
            <param name="newPassword">
            Новый пароль, который будет установлен в качестве текущего. строка, минимальная
            длина 6,
            обязательный параметр Async(Строка, минимальная длина 6, обязательный
            параметр).
            </param>
            <returns>
            В результате выполнения этого метода будет возвращен объект с полем token,
            содержащим новый токен, и полем secret в
            случае, если токен был nohttps.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.changePassword
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategoryAsync.GetProfileInfoAsync">
            <summary>
            Возвращает информацию о текущем профиле.
            </summary>
            <returns> Информация о текущем профиле в виде Model.User </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.getProfileInfo
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategoryAsync.SaveProfileInfoAsync(System.Int32)">
            <summary>
            Редактирует информацию текущего профиля.
            </summary>
            <param name="cancelRequestId">
            Идентификатор заявки на смену имени, которую
            необходимо отменить.
            </param>
            <returns> Результат отмены заявки. </returns>
            <remarks>
            Метод вынесен как отдельный, потому что если в запросе передан параметр
            <paramref name="cancelRequestId" />,
            все остальные параметры игнорируются.
            </remarks>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.saveProfileInfo
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategoryAsync.SaveProfileInfoAsync(VkNet.Model.RequestParams.AccountSaveProfileInfoParams)">
            <summary>
            Редактирует информацию текущего профиля.
            </summary>
            <param name="params"> The parameters. </param>
            <returns>
            Результат отмены заявки.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.saveProfileInfo
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategoryAsync.GetPrivacySettingsAsync(System.Threading.CancellationToken)">
            <summary>
            Получить список приватных настроек
            </summary>
            <returns> Список приватных настроек </returns>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategoryAsync.SetPrivacyAsync(System.String,System.String)">
            <summary>
            Установить приватные настройки
            </summary>
            <param name="key"> Ключ </param>
            <param name="value"> Значение </param>
            <returns> Значение параметра <see cref="!:value" /> </returns>
        </member>
        <member name="T:VkNet.Abstractions.IAdsCategoryAsync">
            <summary>
            Асинхронные методы для работы со стеной пользователя.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.AddOfficeUsersAsync(System.Int64,System.String)">
            <summary>
            Добавляет администраторов и/или наблюдателей в рекламный кабинет.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "data">
            Сериализованный JSON-массив объектов, описывающих добавляемых администраторов. Описание объектов user_specification см. ниже. обязательный параметр, строка
            </param>
            <returns>
            Возвращает массив значений - ответов на каждый запрос в массиве data. Соответствующее значение в выходном массиве равно true, если администратор успешно добавлен, и false в другом случае.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.addOfficeUsers
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.CheckLinkAsync(System.Int64,VkNet.Enums.SafetyEnums.AdsLinkType,System.String,System.Nullable{System.Int64})">
            <summary>
            Проверяет ссылку на рекламируемый объект.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "linkType">
            Вид рекламируемого объекта:
            community — сообщество;
            post — запись в сообществе;
            application — приложение ВКонтакте;
            video — видеозапись;
            site — внешний сайт.
            обязательный параметр, строка
            </param>
            <param name = "linkUrl">
            Ссылка на рекламируемый объект. обязательный параметр, строка
            </param>
            <param name = "campaignId">
            Id кампании, в которой будет создаваться объявление. целое число
            </param>
            <returns>
            Возвращается структура со следующими полями:
            status — статус ссылки:
            allowed — ссылку допустимо использовать в рекламных объявлениях;
            disallowed — ссылку недопустимо использовать для указанного вида рекламируемого объекта;
            in_progress — ссылка проверяется, необходимо немного подождать.
            description (если status равен disallowed, необязательное поле) — описание причины недопустимости использования ссылки.
            redirect_url (если конечная ссылка отличается от исходной и если status равен allowed) — конечная ссылка.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.checkLink
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.CreateAdsAsync(System.Int64,System.String)">
            <summary>
            Создает рекламные объявления.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "data">
            Сериализованный JSON-массив объектов, описывающих создаваемые объявления. Описание объектов ad_specification см. ниже.
            Пример значения data: [{
            "campaign_id": 123456,
            "ad_format": 1,
            "cost_type": 0,
            "cpc": 2.00,
            "category1_id" : 5,
            "title": "Test Title",
            "link_url" : "https://mysite.com",
            "name": "My ad"
            }] обязательный параметр, строка
            </param>
            <returns>
            Возвращает массив объектов - ответов на каждый запрос в массиве data. Соответствующий объект в выходном массиве имеет свойство id, соответствующее id созданного объявления (или 0 в случае неудачи), а также, возможно, поля error_code и error_desc, описывающие ошибку, при ее возникновении. Наличие одновременно ненулевого id и error_code говорит о том, что объявление было создано, однако, возможно, не все параметры установлены (например, объявление не запущено).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.createAds
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.CreateCampaignsAsync(System.Int64,System.String)">
            <summary>
            Создает рекламные кампании.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "data">
            Сериализованный JSON-массив объектов, описывающих создаваемые кампании. Описание объектов campaign_specification см. ниже. обязательный параметр, строка
            </param>
            <returns>
            Возвращает массив ответов на запросы в массиве data. Соответствующий объект в выходном массиве содержит id созданной кампании (ноль в случае неудачи), и поля error_code и error_desc в случае возникновения ошибки. Ненулевой id и наличие error_code 602 говорит о том, что кампания создана, но, возможно, некоторые поля не были ей присвоены по причине их некорректности.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.createCampaigns
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.CreateClientsAsync(System.Int64,System.String)">
            <summary>
            Создаёт клиентов рекламного агентства.
            </summary>
            <param name = "accountId">
            Id рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "data">
            Сериализованный JSON-массив объектов, описывающих создаваемые кампании. Описание объектов client_specification см. ниже. обязательный параметр, строка
            </param>
            <returns>
            Возвращает массив ответов на запросы в массиве data. Соответствующий объект в выходном массиве содержит id созданного клиента (ноль в случае неудачи), и поля error_code и error_desc в случае возникновения ошибки. Ненулевой id и наличие error_code 602 говорит о том, что клиент создан, но, возможно, некоторые поля не были ему присвоены по причине их некорректности.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.createClients
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.CreateLookalikeRequestAsync(System.Int64,System.String,System.Nullable{System.Int64},System.Object)">
            <summary>
            Создаёт запрос на поиск похожей аудитории.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "sourceType">
            Тип источника исходной аудитории. На данный момент может принимать единственное значение retargeting_group. строка, обязательный параметр
            </param>
            <param name = "clientId">
            Только для рекламных агентств.
            идентификатор клиента, для которого будет создаваться аудитория. целое число
            </param>
            <param name = "retargetingGroupId">
            Только для источника типа retargeting_group: идентификатор аудитории ретаргетинга.
            </param>
            <returns>
            Поле request_id, в котором указан идентификатор созданного запроса на поиск похожей аудитории.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.createLookalikeRequest
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.CreateTargetGroupAsync(VkNet.Model.RequestParams.Ads.CreateTargetGroupParams)">
            <summary>
            Создает аудиторию для ретаргетинга рекламных объявлений на пользователей, которые посетили сайт рекламодателя (просмотрели информации о товаре, зарегистрировались и т.д.).
            </summary>
            <param name = "createTargetGroupParams">
            Входные параметры запроса.
            </param>
            <returns>
            Возвращает объект со следующими полями:
            id — идентификатор аудитории.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.createTargetGroup
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.CreateTargetPixelAsync(System.Int64,System.String,System.String,System.Int64,System.Nullable{System.Int64})">
            <summary>
            Создаёт пиксель ретаргетинга.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "name">
            Название пикселя — строка до 64 символов. обязательный параметр, строка
            </param>
            <param name = "domain">
            Домен сайта, на котором будет размещен пиксель. строка
            </param>
            <param name = "categoryId">
            Идентификатор категории сайта, на котором будет размещен пиксель. Для получения списка возможных идентификаторов следует использовать метод ads.getSuggestions (раздел interest_categories_v2). обязательный параметр, целое число
            </param>
            <param name = "clientId">
            Только для рекламных агентств.
            id клиента, в рекламном кабинете которого будет создаваться пиксель. целое число
            </param>
            <returns>
            Возвращает объект со следующими полями:
            id — идентификатор пикселя
            pixel — код для размещения на сайте рекламодателя
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.createTargetPixel
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.DeleteAdsAsync(System.Int64,System.String)">
            <summary>
            Архивирует рекламные объявления.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "ids">
            Сериализованный JSON-массив, содержащий идентификаторы объявлений. обязательный параметр, строка
            </param>
            <returns>
            Возвращает массив ответов на каждый запрос. Каждый ответ является либо 0, что означает успешное удаление, либо код ошибки.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.deleteAds
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.DeleteCampaignsAsync(System.Int64,System.String)">
            <summary>
            Архивирует рекламные кампании.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "ids">
            Сериализованный JSON-массив, содержащий id удаляемых кампаний. обязательный параметр, строка
            </param>
            <returns>
            Возвращает массив ответов на каждый запрос. Каждый ответ является либо 0, что означает успешное удаление, либо код ошибки.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.deleteCampaigns
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.DeleteClientsAsync(System.Int64,System.String)">
            <summary>
            Архивирует клиентов рекламного агентства.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "ids">
            Сериализованный JSON-массив, содержащий id удаляемых клиентов. обязательный параметр, строка
            </param>
            <returns>
            Возвращает массив ответов на каждый запрос. Каждый ответ является либо 0, что означает успешное удаление, либо код ошибки.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.deleteClients
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.DeleteTargetGroupAsync(System.Int64,System.Int64,System.Nullable{System.Int64})">
            <summary>
            Удаляет аудиторию ретаргетинга.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "targetGroupId">
            Идентификатор аудитории. обязательный параметр, целое число
            </param>
            <param name = "clientId">
            Только для рекламных агентств.
            id клиента, в рекламном кабинете которого будет удаляться аудитория. целое число
            </param>
            <returns>
            В случае успеха метод возвратит 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.deleteTargetGroup
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.DeleteTargetPixelAsync(System.Int64,System.Int64,System.Nullable{System.Int64})">
            <summary>
            Удаляет пиксель ретаргетинга.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "targetPixelId">
            Идентификатор пикселя. обязательный параметр, целое число
            </param>
            <param name = "clientId">
            Только для рекламных агентств.
            id клиента, в рекламном кабинете которого будет удаляться пиксель. целое число
            </param>
            <returns>
            В случае успеха метод возвратит 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.deleteTargetPixel
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.GetAccountsAsync">
            <summary>
            Возвращает список рекламных кабинетов.
            </summary>
            <returns>
            Возвращает массив объектов, описывающих рекламные кабинеты. Каждый объект содержит следующие поля:
            account_id
            integerидентификатор рекламного кабинета. account_type
            stringтип рекламного кабинета. Возможные значения:
            general — обычный;
            agency — агентский. account_status
            integer, [0,1]статус рекламного кабинета. Возможные значения:
            1 — активен;
            0 — неактивен. access_role
            stringправа пользователя в рекламном кабинете. Возможные значения:
            admin — главный администратор;
            manager — администратор;
            reports — наблюдатель.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getAccounts
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.GetAdsAsync(VkNet.Model.RequestParams.Ads.GetAdsParams)">
            <summary>
            Возвращает список рекламных объявлений.
            </summary>
            <param name = "getAdsParams">
            Входные параметры запроса.
            </param>
            <returns>
            Возвращает массив объектов, описывающих объявления. Каждый объект содержит следующие поля:
            id
            integerидентификатор объявления. campaign_id
            integerидентификатор кампании. ad_format
            integerформат объявления. Возможные значения:
            1 — изображение и текст;
            2 — большое изображение;
            3 — эксклюзивный формат;
            4 — продвижение сообществ или приложений, квадратное изображение;
            5 — приложение в новостной ленте (устаревший);
            6 — мобильное приложение;
            9 — запись в сообществе. cost_type
            integer, [0,1]тип оплаты. Возможные значения:
            0 — оплата за переходы;
            1 — оплата за показы. cpc
            integer(если cost_type = 0) цена за переход в копейках. cpm
            integer(если cost_type = 1) цена за 1000 показов в копейках. impressions_limit
            integer(если задано) ограничение количества показов данного объявления на одного пользователя. Может присутствовать для некоторых форматов объявлений, для которых разрешена установка точного значения. impressions_limited
            integer, [1](если задано) признак того, что количество показов объявления на одного пользователя ограничено. Может присутствовать для некоторых объявлений, для которых разрешена установка ограничения, но не разрешена установка точного значения. 1 — не более 100 показов на одного пользователя. ad_platform(если значение применимо к данному формату объявления) рекламные площадки, на которых будет показываться объявление. Возможные значения:
            (если ad_format равен 1)
            0 — ВКонтакте и сайты-партнёры;
            1 — только ВКонтакте.
            (если ad_format равен 9)
            all — все площадки;
            desktop — полная версия сайта;
            mobile — мобильный сайт и приложения. ad_platform_no_wall
            integer, [1]1 — для объявления задано ограничение «Не показывать на стенах сообществ». all_limit
            integerобщий лимит объявления в рублях. 0 — лимит не задан. category1_id
            integerID тематики или подраздела тематики объявления. См. ads.getCategories. category2_id
            integerID тематики или подраздела тематики объявления. Дополнительная тематика. status
            integerстатус объявления. Возможные значения:
            0 — объявление остановлено;
            1 — объявление запущено;
            2 — объявление удалено. name
            stringназвание объявления. approved
            integerстатус модерации объявления. Возможные значения:
            0 — объявление не проходило модерацию;
            1 — объявление ожидает модерации;
            2 — объявление одобрено;
            3 — объявление отклонено. video
            integer, [1]1 — объявление является видеорекламой. disclaimer_medical
            integer, [1]1 — включено отображение предупреждения:
            «Есть противопоказания. Требуется консультация специалиста.» disclaimer_specialist
            integer, [1]1 — включено отображение предупреждения:
            «Необходима консультация специалистов.» disclaimer_supplements
            integer, [1]1 — включено отображение предупреждения:
            «БАД. Не является лекарственным препаратом.» events_retargeting_groups
            arrayТолько для ad_format = 9. Описание событий, собираемых в группы ретаргетинга. Массив объектов, где ключом является id группы ретаргетинга, а значением - массив событий. Допустимые значений для событий:
            1 — просмотр промопоста;
            2 — переход по ссылке или переход в сообщество;
            3 — переход в сообщество;
            4 — подписка на сообщество;
            5 — отписка от новостей сообщества;
            6 — скрытие или жалоба;
            10 — запуск видео;
            11 — досмотр видео до 3с;
            12 — досмотр видео до 25%;
            13 — досмотр видео до 50%;
            14 — досмотр видео до 75%;
            15 — досмотр видео до 100%;
            20 — лайк продвигаемой записи;
            21 — репост продвигаемой записи.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getAds
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.GetAdsLayoutAsync(VkNet.Model.RequestParams.Ads.GetAdsLayoutParams)">
            <summary>
            Возвращает описания внешнего вида рекламных объявлений.
            </summary>
            <param name = "getAdsLayoutParams">
            Входные параметры запроса.
            </param>
            <returns>
            Возвращает массив объектов, описывающих объявления. Каждый объект содержит следующие поля:
            id
            integer&gt;идентификатор объявления. campaign_id
            integer&gt;нтификатор кампании. ad_format
            integerформат объявления. Возможные значения:
            1 — изображение и текст;
            2 — большое изображение;
            3 — эксклюзивный формат;
            4 — продвижение сообществ или приложений, квадратное изображение;
            5 — приложение в новостной ленте (устаревший);
            6 — мобильное приложение;
            7 — специальный формат приложений;
            8 — специальный формат сообществ;
            9 — запись в сообществе;
            10 — витрина приложений. cost_type
            integer, [0,1]тип оплаты. Возможные значения:
            0 — оплата за переходы;
            1 — оплата за показы. video
            integer, [1]1 — объявление является видеорекламой. title
            stringзаголовок объявления. description
            stringописание объявления. link_url
            stringссылка на рекламируемый объект. link_domain
            stringдомен рекламируемого сайта. preview_link
            stringссылка, перейдя по которой можно просмотреть рекламное объявление так, как оно выглядит на сайте. Ссылка доступна в течение 30 минут после выполнения метода ads.getAdsLayout. image_src
            stringurl изображения объявления. image_src_2x
            stringurl изображения двойного разрешения.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getAdsLayout
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.GetAdsTargetingAsync(VkNet.Model.RequestParams.Ads.GetAdsTargetingParams)">
            <summary>
            Возвращает параметры таргетинга рекламных объявлений
            </summary>
            <param name = "getAdsTargetingParams">
            Входные параметры запроса.
            </param>
            <returns>
            Возвращает массив объектов - описаний таргетинга объявлений.
            Отрицательные id в поле cities означают id регионов, взятых с обратным знаком.
            Поле count содержит размер целевой аудитории на момент сохранения объявления.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getAdsTargeting
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.GetBudgetAsync(System.Int64)">
            <summary>
            Возвращает текущий бюджет рекламного кабинета.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <returns>
            Возвращает единственное число — оставшийся бюджет в указанном рекламном кабинете.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getBudget
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.GetCampaignsAsync(System.Int64,System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <summary>
            Возвращает список кампаний рекламного кабинета.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "campaignIds">
            Фильтр выводимых рекламных кампаний.
            Сериализованный JSON-массив, содержащий id кампаний. Выводиться будут только кампании, присутствующие в campaign_ids и являющиеся кампаниями указанного рекламного кабинета. Если параметр равен строке null, то выводиться будут все кампании. строка
            </param>
            <param name = "clientId">
            Обязателен для рекламных агентств, в остальных случаях не используется. Идентификатор клиента, у которого запрашиваются рекламные кампании. целое число
            </param>
            <param name = "includeDeleted">
            Флаг, задающий необходимость вывода архивных объявлений.
            0 — выводить только активные кампании;
            1 — выводить все кампании.
            флаг, может принимать значения 1 или 0
            </param>
            <returns>
            Возвращает массив объектов campaign, каждый из которых содержит следующие поля:
            id — идентификатор кампании
            type — тип кампании
            normal — обычная кампания, в которой можно создавать любые объявления, кроме мобильной рекламы и записей в сообществе
            vk_apps_managed — кампания, в которой можно рекламировать только администрируемые Вами приложения и у которой есть отдельный бюджет
            mobile_apps — кампания, в которой можно рекламировать только мобильные приложения
            promoted_posts — кампания, в которой можно рекламировать только записи в сообществе
            name — название кампании
            status — статус кампании
            0 — кампания остановлена
            1 — кампания запущена
            2 — кампания удалена
            day_limit — дневной лимит кампании в рублях
            0 — лимит не задан
            all_limit — общий лимит кампании в рублях
            0 — лимит не задан
            start_time — время запуска кампании в формате unixtime
            0 — время не задано
            stop_time — время остановки кампании в формате unixtime
            0 — время не задано
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getCampaigns
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.GetCategoriesAsync(System.String)">
            <summary>
            Позволяет получить возможные тематики рекламных объявлений.
            </summary>
            <param name = "lang">
            Язык, на котором нужно вернуть результаты. Список поддерживаемых языков Вы можете найти на странице Запросы к API. строка
            </param>
            <returns>
            После успешного выполнения возвращает два массива объектов — v1 и v2, каждый из которых содержит объекты, описывающие тематики в следующем формате:
            id — идентификатор тематики;
            name — название тематики;
            subcategories[subcategory] (если есть хотя бы один подраздел) — список подразделов. Массив объектов, каждый из которых содержит следующие поля:
            id — идентификатор подраздела;
            name — название подраздела.
            Массив v1 включает устаревшие тематики. Актуальный список содержится в массиве v2.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getCategories
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.GetClientsAsync(System.Int64)">
            <summary>
            Возвращает список клиентов рекламного агентства.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <returns>
            Возвращает массив объектов client — клиентов агентства с номером account_id, каждый из которых содержит следующие поля:
            id — идентификатор клиента;
            name — название клиента;
            day_limit — дневной лимит клиента в рублях;
            all_limit — общий лимит клиента в рублях.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getClients
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.GetDemographicsAsync(VkNet.Model.RequestParams.Ads.GetDemographicsParams)">
            <summary>
            Возвращает демографическую статистику по рекламным объявлениям или кампаниям.
            </summary>
            <param name = "getDemographicsParams">
            Входные параметры запроса.
            </param>
            <returns>
            Каждый запрашиваемый объект имеет следующие поля:
            id — id объекта из параметра ids
            type — тип объекта из параметра ids_type
            stats — список структур описывающих статистику объекта за один временной период (конкретный временной период присутствует в списке, если по нему есть какая-то статистика)
            Структура в списке stats имеет следующие поля:
            day (если period равен day) — день в формате YYYY-MM-DD
            month (если period равен month) — месяц в формате YYYY-MM
            overall (если period равен overall) — 1
            sex — список структур, описывающих статистику по полу
            age — список структур, описывающих статистику по возрасту
            sex_age — список структур, описывающих статистику по полу и возрасту
            cities — список структур, описывающих статистику по городам
            Структура в списках sex, age, sex_age, cities имеет следующие поля:
            impressions_rate — часть аудитории, просмотревшая объявление, от 0 до 1
            clicks_rate — часть аудитории, кликнувшая по объявлению, от 0 до 1
            value — значение демографического показателя, имеет разные возможные значения для разных показателей
            sex (f — женщины, m — мужчины)
            age — один из следующих промежутков: 12-18, 18-21, 21-24, 24-27, 27-30, 30-35, 35-45, 45-100
            sex_age — комбинация значений sex и age, разделённых точкой с запятой, пример: m;21-24
            cities — id города или other для остальных городов
            name — наглядное название значения указанного в value (только для городов)
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getDemographics
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.GetFloodStatsAsync(System.Int64)">
            <summary>
            Возвращает информацию о текущем состоянии счетчика — количество оставшихся запусков методов и время до следующего обнуления счетчика в секундах.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <returns>
            Возвращает объект, содержащий следующие поля:
            left — количество оставшихся методов;
            refresh — время до следующего обновления в секундах.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getFloodStats
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.GetLookalikeRequestsAsync(VkNet.Model.RequestParams.Ads.GetLookalikeRequestsParams)">
             <summary>
             Возвращает список запросов на поиск похожей аудитории.
             </summary>
             <param name = "getLookalikeRequestsParams">
             Входные параметры запроса.
             </param>
             <returns>
             Если limit не равен 0, то возвращается объект с двумя полями:
            
             count — количество запросов на поиск похожей аудитории в данном кабинете.
             items — список объектов-запросов на поиск похожей аудитории запрошенного размера с запрошенным сдвигом.
             При limit равном 0, возвращается только поле count.
             Описание запроса на поиск похожей аудитории – объект со следующими полями:
             id — идентификатор запроса на поиск похожей аудитории. Является уникальным только в рамках конкретного кабинета (клиента в случае агентства).
             create_time — timestamp даты создания запроса.
             update_time — timestamp даты последнего обновления статуса запроса.
             status — текущий статус запроса, может принимать следующие значения: search_in_progress, search_done, search_failed, save_in_progress, save_done, save_failed.
             scheduled_delete_time —  timestamp даты запланированного удаления запроса.
             source_type — тип источника исходной аудитории для поиска похожей аудитории. Может принимать только значение retargeting_group.
             source_retargeting_group_id — при source_type равном retargeting_group в данном поле указан идентификатор аудитории ретаргетинга с исходной аудиторией.
             source_name — имя источника исходной аудитории. При source_type равном retargeting_group в данном поле указано название аудитории ретаргетинга на момент создания запроса.
             audience_count — размер исходной аудитории.
             save_audience_levels — Список доступных размеров аудитории для сохранения. Присутствует только после успешного поиска похожей аудитории. Поля:
             level — используется в качестве параметра level в ads.saveLookalikeRequestResult
             audience_count — размер похожей аудитории в данной опции.
             </returns>
             <remarks>
             Страница документации ВКонтакте http://vk.com/dev/ads.getLookalikeRequests
             </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.GetOfficeUsersAsync(System.Int64)">
            <summary>
            Возвращает список администраторов и наблюдателей рекламного кабинета.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <returns>
            Возвращает массив объектов - описаний пользователей рекламного кабинета. Каждый объект содержит массив описаний прав доступа к конкретным клиентам. Описание содержит два поля: client_id — id клиента и role — строка admin, manager или reports. Для admin client_id не указывается.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getOfficeUsers
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.GetPostsReachAsync(System.Int64,System.String,System.String)">
            <summary>
            Возвращает подробную статистику по охвату рекламных записей из объявлений и кампаний для продвижения записей сообщества.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "idsType">
            Тип запрашиваемых объектов, которые перечислены в параметре ids:
            ad — объявления;
            campaign — кампании.
            обязательный параметр, строка
            </param>
            <param name = "ids">
            Перечисленные через запятую id запрашиваемых объявлений или кампаний, в зависимости от того, что указано в параметре ids_type. Максимум 100 объектов. обязательный параметр, строка
            </param>
            <returns>
            Возвращает массив объектов, описывающих охват. Каждый объект содержит следующие поля:
            id
            integerID объекта из параметра ids. reach_subscribers
            integerохват подписчиков. reach_total
            integerсуммарный охват. links
            integerпереходы по ссылке. to_group
            integerпереходы в сообщество. join_group
            integerвступления в сообщество. report
            integerколичество жалоб на запись. hide
            integerколичество скрытий записи. unsubscribe
            integerколичество отписавшихся участников. video_views_start*
            integerколичество стартов просмотра видео. video_views_3s*
            integerколичество досмотров видео до 3 секунд. video_views_25p*
            integerколичество досмотров видео до 25 процентов. video_views_50p*
            integerколичество досмотров видео до 50 процентов. video_views_75p*
            integerколичество досмотров видео до 75 процентов. video_views_100p*
            integerколичество досмотров видео до 100 процентов.
            * — поля с данными по статистике видео возвращаются только для объявлений или кампаний с видео, созданных после 26 января 2017 года.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getPostsReach
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.GetRejectionReasonAsync(System.Int64,System.Int64)">
            <summary>
            Возвращает причину, по которой указанному объявлению было отказано в прохождении премодерации.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "adId">
            Идентификатор рекламного объявления. обязательный параметр, целое число
            </param>
            <returns>
            Возвращает объект, который может содержать поле comment, содержащее текстовый комментарий модератора, и/или массив rules, содержащий описание нарушенных объявлением правил. Ответ обязательно содержит хотя бы одно из полей comment или rules. Каждый элемент массива rules состоит из поля title (текстового пояснения) и массива paragraphs, каждый элемент которого содержит отдельный пункт правил. Элементы массива paragraphs могут содержать простую html-разметку.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getRejectionReason
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.GetStatisticsAsync(VkNet.Model.RequestParams.Ads.GetStatisticsParams)">
            <summary>
            Возвращает статистику показателей эффективности по рекламным объявлениям, кампаниям, клиентам или всему кабинету.
            </summary>
            <param name = "getStatisticsParams">
            Входные параметры запроса.
            </param>
            <returns>
            Каждый запрашиваемый объект имеет следующие поля:
            id — id объекта из параметра ids
            type — тип объекта из параметра ids_type
            stats — список структур описывающих статистику объекта за один временной период (конкретный временной период присутствует в списке, если по нему есть какая-то статистика)
            Структура в списке stats имеет следующие поля:
            day (если period равен day) — день в формате YYYY-MM-DD
            month (если period равен month) — день в формате YYYY-MM
            overall (если period равен overall) — 1
            spent — потраченные средства
            impressions — просмотры
            clicks — клики
            reach (если ids_type равен ad или campaign и period равен day или month) — охват
            video_views (если ids_type равен ad) — просмотры видеоролика (для видеорекламы)
            video_views_half (если ids_type равен ad) — просмотры половины видеоролика (для видеорекламы)
            video_views_full (если ids_type равен ad) — просмотры целого видеоролика (для видеорекламы)
            video_clicks_site (если ids_type равен ad) — переходы на сайт рекламодателя из видеорекламы (для видеорекламы)
            join_rate (если ids_type равен ad или campaign) — вступления в группу, событие, подписки на публичную страницу или установки приложения (только если в объявлении указана прямая ссылка на соответствующую страницу ВКонтакте)
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getStatistics
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.GetSuggestionsAsync(VkNet.Model.RequestParams.Ads.GetSuggestionsParams)">
            <summary>
            Возвращает набор подсказок для различных параметров таргетинга.
            </summary>
            <param name = "getSuggestionsParams">
            Входные параметры запроса.
            </param>
            <returns>
            Возвращает список объектов (подсказок), удовлетворяющих запросу.
            Для разделов countries, positions, interest_categories, religions, user_devices, user_os, user_browsers ответ возвращается в виде массива объектов со следующими полями:
            id — идентификатор объекта
            name — название объекта
            Для раздела regions ответ возвращается в виде массива объектов со следующими полями:
            id — идентификатор региона
            name — название региона
            type (необязательное) — название типа региона (область, автономный округ, край)
            Для разделов cities, districts, streets ответ возвращается в виде массива объектов со следующими полями:
            id — идентификатор объекта
            name — название объекта
            parent — название города или страны, в котором находится объект
            Для раздела schools ответ возвращается в виде массива объектов со следующими полями:
            id — идентификатор учебного заведения
            name — название учебного заведения
            desc — полное название учебного заведения
            type — тип учебного заведения
            school — школа
            university — университет
            faculty — факультет
            chair — кафедра
            parent — название города, в котором находится учебное заведение
            Для раздела interests ответ возвращается в виде массива строк.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getSuggestions
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.GetTargetGroupsAsync(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <summary>
            Возвращает список аудиторий ретаргетинга.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "clientId">
            Только для рекламных агентств.
            id клиента, в рекламном кабинете которого находятся аудитории. целое число
            </param>
            <param name = "extended">
            Если 1, в результатах будет указан код для размещения на сайте.
            Устаревший параметр. Используется только для старых групп ретаргетинга, которые пополнялись без помощи пикселя. Для новых аудиторий его следует опускать. флаг, может принимать значения 1 или 0
            </param>
            <returns>
            Возвращает массив объектов, описывающих группы ретаргетинга. Каждый объект содержит следующие поля:
            id (integer) — идентификатор аудитории;
            name (string) — название аудитории ретаргетинга;
            last_updated (integer) — дата и время последнего пополнения аудитории в формате Unixtime;
            is_audience (integer, 1) — 1, если группа является аудиторией (т.е.может быть пополнена при помощи пикселя);
            is_shared (integer, 1) — 1, если группа является копией (см. метод ads.shareTargetGroup);
            audience_count (integer) — приблизительное количество пользователей, входящих в аудиторию;
            lifetime (integer) — количество дней, через которое пользователи, добавляемые в аудиторию ретаргетинга, будут автоматически исключены из неё;
            file_source (integer, 1) — признак пополнения аудитории через файл;
            api_source (integer, 1) — признак пополнения аудитории через метод ads.importTargetContacts;
            lookalike_source (integer, 1) — признак аудитории, полученной при помощи Look-a-Like.
            pixel (string) — код для размещения на сайте рекламодателя. Возвращается, если параметр extended = 1 (только для старых групп).
            domain (string) — домен сайта, где размещен код учета пользователей (только для старых групп).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getTargetGroups
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.GetTargetPixelsAsync(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Возвращает список пикселей ретаргетинга.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "clientId">
            Только для рекламных агентств.
            id клиента, в рекламном кабинете которого находятся пиксели. целое число
            </param>
            <returns>
            Возвращает массив объектов, каждый из которых содержит следующие поля:
            target_pixel_id (integer) — идентификатор пикселя;
            name (string) — название пикселя;
            last_updated (integer) — дата и время последнего использования пикселя в формате Unixtime;
            domain (string) — домен сайта, где размещен пиксель;
            category_id (integer) — идентификатор категории сайта, где размещён пиксель (см. раздел interest_categories метода ads.getSuggestions);
            pixel (string) — код для размещения на сайте рекламодателя.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getTargetPixels
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.GetTargetingStatsAsync(VkNet.Model.RequestParams.Ads.GetTargetingStatsParams)">
            <summary>
            Возвращает размер целевой аудитории таргетинга, а также рекомендованные значения CPC и CPM.
            </summary>
            <param name = "getTargetingStatsParams">
            Входные параметры запроса.
            </param>
            <returns>
            Возвращает объект, описывающий целевую аудиторию и содержащий следующие поля:
            audience_count (integer) — размер целевой аудитории
            recommended_cpc (number) — рекомендованная цена для объявлений за клики, указана в рублях с копейками в дробной части.
            recommended_cpm (number)— рекомендованная цена для объявлений за показы, указана в рублях с копейками в дробной части.
            Обратите внимание, минимальный размер целевой аудитории — 100 человек. Если заданным критериям соответствует меньшее количество пользователей, размер аудитории будет считаться равным нулю.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getTargetingStats
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.GetUploadUrlAsync(System.Int64)">
            <summary>
            Возвращает URL-адрес для загрузки фотографии рекламного объявления.
            </summary>
            <param name = "adFormat">
            Формат объявления:
            1 — изображение и текст;
            2 — большое изображение;
            3 — эксклюзивный формат;
            4 — продвижение сообществ или приложений, квадратное изображение;
            5 — приложение в новостной ленте (устаревший);
            6 — мобильное приложение;
            9 — запись в сообществе.
            обязательный параметр, целое число
            </param>
            <returns>
            Возвращает url-адрес для загрузки изображения.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getUploadURl
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.GetVideoUploadUrlAsync">
            <summary>
            Возвращает URL-адрес для загрузки видеозаписи рекламного объявления.
            </summary>
            <returns>
            Возвращает url-адрес для загрузки видеоролика.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getVideoUploadURl
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.ImportTargetContactsAsync(System.Int64,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Импортирует список контактов рекламодателя для учета зарегистрированных во ВКонтакте пользователей в аудитории ретаргетинга.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "targetGroupId">
            Идентификатор аудитории таргетинга. обязательный параметр, целое число
            </param>
            <param name = "contacts">
            Список телефонов, email адресов или идентификаторов пользователей, указанных через запятую. Также принимаются их MD5-хеши. обязательный параметр, строка
            </param>
            <param name = "clientId">
            Только для рекламных агентств.
            id клиента, в рекламном кабинете которого находится аудитория. целое число
            </param>
            <returns>
            Возвращает количество обработанных контактов.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.importTargetContacts
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.RemoveOfficeUsersAsync(System.Int64,System.String)">
            <summary>
            Удаляет администраторов и/или наблюдателей из рекламного кабинета.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "ids">
            Сериализованный JSON-массив, содержащий id удаляемых администраторов. обязательный параметр, строка
            </param>
            <returns>
            Возвращает массив значений - ответов на каждый запрос в массиве data. Соответствующее значение в выходном массиве равно true, если администратор успешно удален, и false в другом случае.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.removeOfficeUsers
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.RemoveTargetContactsAsync(System.Int64,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Принимает запрос на исключение контактов рекламодателя из аудитории ретаргетинга.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "targetGroupId">
            Идентификатор аудитории таргетинга. обязательный параметр, целое число
            </param>
            <param name = "contacts">
            Список телефонов, email адресов или идентификаторов пользователей, указанных через запятую. Также принимаются их MD5-хеши. обязательный параметр, строка
            </param>
            <param name = "clientId">
            Только для рекламных агентств.
            id клиента, в рекламном кабинете которого находится аудитория. целое число
            </param>
            <returns>
            Возвращает 1 в случае успешного принятия заявки на исключение аудитории.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.removeTargetContacts
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.SaveLookalikeRequestResultAsync(System.Int64,System.Int64,System.Int64,System.Nullable{System.Int64})">
             <summary>
             Сохраняет результат поиска похожей аудитории.
             </summary>
             <param name = "accountId">
             Идентификатор рекламного кабинета. обязательный параметр, целое число
             </param>
             <param name = "requestId">
             Идентификатор запроса на поиск похожей аудитории. Получить список всех запросов на поиск похожей аудитории для данного кабинета можно с помощью ads.getLookalikeRequests обязательный параметр, целое число
             </param>
             <param name = "level">
             Уровень конкретного размера похожей аудитории для сохранения. Получить список всех доступных размеров аудиторий можно с помощью ads.getLookalikeRequests. обязательный параметр, целое число
             </param>
             <param name = "clientId">
             Только для рекламных агентств.
             идентификатор клиента, для которого будут сохраняться аудитория. целое число
             </param>
             <returns>
             Возвращает объект с полями:
            
             retargeting_group_id – идентификатор группы ретаргетинга, в которую будет сохранена запрошенная похожая аудитория.
             audience_count – размер запрошенной похожей аудитории.
             </returns>
             <remarks>
             Страница документации ВКонтакте http://vk.com/dev/ads.saveLookalikeRequestResult
             </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.ShareTargetGroupAsync(System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Предоставляет доступ к аудитории ретаргетинга другому рекламному кабинету. В результате выполнения метода возвращается идентификатор аудитории для указанного кабинета.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "targetGroupId">
            Идентификатор исходной аудитории. обязательный параметр, целое число
            </param>
            <param name = "clientId">
            Только для рекламных агентств.
            id клиента, в рекламном кабинете которого находится исходная аудитория. целое число
            </param>
            <param name = "shareWithClientId">
            Id клиента, рекламному кабинету которого необходимо предоставить доступ к аудитории. целое число
            </param>
            <returns>
            Возвращает объект со следующими полями:
            id — идентификатор аудитории.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.shareTargetGroup
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.UpdateAdsAsync(System.Int64,System.String)">
            <summary>
            Редактирует рекламные объявления.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "data">
            Сериализованный JSON-массив объектов, описывающих изменения в объявлениях. Описание объектов ad_edit_specification см. ниже обязательный параметр, строка
            </param>
            <returns>
            Возвращает массив ответов на каждый запрос в массиве data. Соответствующий объект в выходном массиве содержит идентификатор изменяемого объявления и, в случае возникновения ошибки, поля error_code и error_desc.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.updateAds
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.UpdateCampaignsAsync(System.Int64,System.String)">
            <summary>
            Редактирует рекламные кампании.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "data">
            Сериализованный JSON-массив объектов, описывающих изменения в кампаниях. Описание объектов campaign_mod_specification см. ниже. обязательный параметр, строка
            </param>
            <returns>
            Возвращает массив ответов на каждый запрос в массиве data. Соответствующий объект в выходном массиве содержит идентификатор изменяемого клиента и, в случае возникновения ошибки, поля error_code и error_desc.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.updateCampaigns
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.UpdateClientsAsync(System.Int64,System.String)">
            <summary>
            Редактирует клиентов рекламного агентства.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "data">
            Сериализованный JSON-массив объектов, описывающих изменения в клиентах. Описание объектов client_mod_specification см. ниже. обязательный параметр, строка
            </param>
            <returns>
            Возвращает массив ответов на каждый запрос в массиве data. Соответствующий объект в выходном массиве содержит id изменяемого клиента и, в случае возникновения ошибки, поля error_code и error_desc.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.updateClients
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.UpdateTargetGroupAsync(VkNet.Model.RequestParams.Ads.UpdateTargetGroupParams)">
            <summary>
            Редактирует аудиторию ретаргетинга.
            </summary>
            <param name = "updateTargetGroupParams">
            Входные параметры запроса.
            </param>
            <returns>
            В случае успеха метод возвратит 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.updateTargetGroup
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategoryAsync.UpdateTargetPixelAsync(VkNet.Model.RequestParams.Ads.UpdateTargetPixelParams)">
            <summary>
            Редактирует пиксель ретаргетинга.
            </summary>
            <param name = "updateTargetPixelParams">
            Входные параметры запроса.
            </param>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.updateTargetPixel
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IAppsCategoryAsync">
            <summary>
            Методы для асинхронной работы с методами приложений.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IAppsCategoryAsync.GetCatalogAsync(VkNet.Model.RequestParams.AppGetCatalogParams,System.Boolean)">
            <summary>
            Возвращает список приложений, доступных для пользователей сайта через каталог
            приложений.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            После успешного выполнения возвращает общее число найденных приложений и массив
            объектов приложений.
            </returns>
            <remarks>
            К методу можно делать не более 60 запросов в минуту с одного IP или id.
            Страница документации ВКонтакте http://vk.com/dev/apps.getCatalog
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAppsCategoryAsync.GetAsync(VkNet.Model.RequestParams.AppGetParams,System.Boolean)">
            <summary>
            Возвращает данные о запрошенном приложении на платформе ВКонтакте
            </summary>
            <param name="params"> Параметры запроса. </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            После успешного выполнения возвращает объект приложения.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/apps.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAppsCategoryAsync.SendRequestAsync(VkNet.Model.RequestParams.AppSendRequestParams)">
            <summary>
            Позволяет отправить запрос другому пользователю в приложении, использующем
            авторизацию ВКонтакте.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            В случае удачного выполнения метод возвращает идентификатор созданного запроса,
            например:
            10013.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/apps.sendRequest
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAppsCategoryAsync.DeleteAppRequestsAsync">
            <summary>
            Удаляет все уведомления о запросах, отправленных из текущего приложения.
            </summary>
            <returns>
            В случае успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/apps.deleteAppRequests
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAppsCategoryAsync.GetFriendsListAsync(VkNet.Enums.SafetyEnums.AppRequestType,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Int64},VkNet.Enums.Filters.UsersFields)">
            <summary>
            Создает список друзей, который будет использоваться при отправке пользователем
            приглашений в приложение.
            </summary>
            <param name="type"> Tип создаваемого списка друзей. </param>
            <param name="extended">
            Параметр, определяющий необходимость возвращать расширенную информацию о
            пользователях.
            0 — возвращаются только идентификаторы;
            1 — будут дополнительно возвращены имя и фамилия. флаг, может принимать
            значения 1 или 0, по умолчанию 0
            Async(Флаг, может принимать значения 1 или 0, по умолчанию 0).
            </param>
            <param name="count"> Количество пользователей в создаваемом списке. </param>
            <param name="offset">
            Смещение относительно первого пользователя для выборки определенного
            подмножества.
            </param>
            <param name="fields">
            Список дополнительных полей профилей, которые необходимо вернуть. См. подробное
            описание.
            </param>
            <returns>
            После успешного выполнения возвращает список пользователей.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/apps.getFriendsList
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAppsCategoryAsync.GetLeaderboardAsync(VkNet.Enums.SafetyEnums.AppRatingType,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Возвращает рейтинг пользователей в игре.
            </summary>
            <param name="type">
            Level — рейтинг по уровням,
            points — рейтинг по очкам, начисленным за выполнение миссий.
            score — рейтинг по очкам, начисленным напрямую Async(apps.getScore). строка,
            обязательный параметр Async(Строка,
            обязательный параметр).
            </param>
            <param name="global">
            1 — глобальный рейтинг по всем игрокам,
            0 — рейтинг по друзьям пользователя флаг, может принимать значения 1 или 0, по
            умолчанию 1 Async(Флаг, может
            принимать значения 1 или 0, по умолчанию 1).
            </param>
            <param name="extended">
            1 — дополнительно возвращает информацию о пользователе. флаг, может принимать
            значения 1 или 0,
            по умолчанию 0 Async(Флаг, может принимать значения 1 или 0, по умолчанию 0).
            </param>
            <returns>
            После успешного выполнения возвращает список друзей с текущим уровнем и
            количеством очков в игре, отсортированный
            по убыванию текущего уровня или количества очков.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/apps.getLeaderboard
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAppsCategoryAsync.GetScoreAsync(System.Int64)">
            <summary>
            Метод возвращает количество очков пользователя в этой игре.
            </summary>
            <param name="userId">
            Идентификатор пользователя. положительное число, по умолчанию идентификатор
            текущего пользователя,
            обязательный параметр Async(Положительное число, по умолчанию идентификатор
            текущего пользователя, обязательный
            параметр).
            </param>
            <returns>
            После успешного выполнения возвращает число очков для пользователя.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/apps.getScore
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.Category.IAppWidgetsCategoryAsync">
            <summary>
            Список методов секции appWidgets
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.Category.IAppWidgetsCategoryAsync.GetAppImageUploadServerAsync(VkNet.Enums.SafetyEnums.AppWidgetImageType)">
            <summary>
            Позволяет получить адрес для загрузки фотографии в коллекцию приложения для виджетов приложений сообществ.
            </summary>
            <param name = "imageType">
            Тип изображения. Возможные значения:
            24x24;
            50x50;
            160x160;
            160x240;
            510x128.
            обязательный параметр
            </param>
            <returns>
            Возвращает объект с единственным полем upload_url, содержащим URL для загрузки изображения.
            Для загрузки изображения сгенерируйте POST-запрос с файлом в поле image на полученный адрес, а затем вызовите метод appWidgets.saveAppImage.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/appWidgets.getAppImageUploadServer
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.IAppWidgetsCategoryAsync.GetAppImagesAsync(System.Int32,System.Int32,VkNet.Enums.SafetyEnums.AppWidgetImageType)">
            <summary>
            Позволяет получить коллекцию изображений, загруженных для приложения, в виджетах приложений сообществ.
            </summary>
            <param name="offset">Смещение для получения определённого подмножества результатов.</param>
            <param name="count">Максимальное число результатов для получения.</param>
            <param name="imageType">Тип изображения.</param>
            <returns>
            Возвращает общее число результатов в поле count (integer) и массив объектов, описывающих изображения, в поле items (array).
            Каждый объект массива  items содержит следующие поля:
            id (string) — идентификатор изображения. Обратите внимание, идентификаторы изображений для виджетов отличаются от обычных фотографий, и НЕ представляют собой сочетание owner_id+"_"+photo_id. Полученный идентификатор нужно использовать в коде виджета «как есть».
            type (string) — тип изображения. Возможные значения:
            160x160,
            160x240,
            24x24,
            510x128,
            50x50.
            images  (array) — массив копий изображения. Каждый объект в массиве содержит следующие поля:
            url (string) — URL копии;
            width (integer) — ширина в px;
            height (integer) — высота в px.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/appWidgets.getAppImages
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.IAppWidgetsCategoryAsync.GetGroupImageUploadServerAsync(VkNet.Enums.SafetyEnums.AppWidgetImageType)">
            <summary>
            Позволяет получить адрес для загрузки фотографии в коллекцию сообщества для виджетов приложений сообществ.
            </summary>
            <param name="imageType">Тип изображения.</param>
            <returns>
            Возвращает объект с единственным полем upload_url, содержащим URL для загрузки изображения.
            Для загрузки изображения сгенерируйте POST-запрос с файлом в поле image на полученный адрес, а затем вызовите метод appWidgets.saveGroupImage.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/appWidgets.getGroupImageUploadServer
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.IAppWidgetsCategoryAsync.GetGroupImagesAsync(System.Int32,System.Int32,VkNet.Enums.SafetyEnums.AppWidgetImageType)">
            <summary>
            Позволяет получить коллекцию изображений, загруженных для приложения, в виджетах приложений сообществ.
            </summary>
            <param name="offset">Смещение для получения определённого подмножества результатов.</param>
            <param name="count">Максимальное число результатов для получения.</param>
            <param name="imageType">Тип изображения.</param>
            <returns>
            Возвращает общее число результатов в поле count (integer) и массив объектов, описывающих изображения, в поле items (array).
            Каждый объект массива  items содержит следующие поля:
            id (string) — идентификатор изображения. Обратите внимание, идентификаторы изображений для виджетов отличаются от обычных фотографий, и НЕ представляют собой сочетание owner_id+"_"+photo_id. Полученный идентификатор нужно использовать в коде виджета «как есть».
            type (string) — тип изображения. Возможные значения:
            160x160,
            160x240,
            24x24,
            510x128,
            50x50.
            images  (array) — массив копий изображения. Каждый объект в массиве содержит следующие поля:
            url (string) — URL копии;
            width (integer) — ширина в px;
            height (integer) — высота в px.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/appWidgets.getGroupImages
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.IAppWidgetsCategoryAsync.GetImagesByIdAsync(System.String)">
            <summary>
            Позволяет получить изображение для виджетов приложений сообществ по его идентификатору.
            </summary>
            <param name="images">список идентификаторов изображений для получения.</param>
            <returns>
            Возвращает объект, который содержит следующие поля:
            id (string) — идентификатор изображения. Обратите внимание, идентификаторы изображений для виджетов отличаются от обычных фотографий, и НЕ представляют собой сочетание owner_id+"_"+photo_id. Полученный идентификатор нужно использовать в коде виджета «как есть».
            type (string) — тип изображения. Возможные значения:
            160x160,
            160x240,
            24x24,
            510x128,
            50x50.
            images  (array) — массив копий изображения. Каждый объект в массиве содержит следующие поля:
            url (string) — URL копии;
            width (integer) — ширина в px;
            height (integer) — высота в px.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/appWidgets.getImagesById
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.IAppWidgetsCategoryAsync.SaveAppImageAsync(System.String,System.String)">
            <summary>
            Позволяет сохранить изображение в коллекцию приложения для виджетов приложений сообществ после загрузки на сервер.
            </summary>
            <param name = "hash">
            Параметр hash, полученный после загрузки на сервер. строка, обязательный параметр
            </param>
            <param name = "image">
            Параметр image, полученный после загрузки на сервер. строка, обязательный параметр
            </param>
            <returns>
            Возвращает объект, который содержит следующие поля:
            id (string) — идентификатор изображения.
            type (string) — тип изображения. Возможные значения:
            160x160,
            160x240,
            24x24,
            510x128,
            50x50.
            images  (array) — массив копий изображения. Каждый объект в массиве содержит следующие поля:
            url (string) — URL копии;
            width (integer) — ширина в px;
            height (integer) — высота в px.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/appWidgets.saveAppImage
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.IAppWidgetsCategoryAsync.SaveGroupImageAsync">
            <summary>
            Позволяет сохранить изображение в коллекцию сообщества для виджетов приложений сообществ. после загрузки на сервер.
            </summary>
            <returns>
            Возвращает объект, который содержит следующие поля:
            id (string) — идентификатор изображения.
            type (string) — тип изображения. Возможные значения:
            160x160,
            160x240,
            24x24,
            510x128,
            50x50.
            images  (array) — массив копий изображения. Каждый объект в массиве содержит следующие поля:
            url (string) — URL копии;
            width (integer) — ширина в px;
            height (integer) — высота в px.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/appWidgets.saveGroupImage
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.IAppWidgetsCategoryAsync.UpdateAsync">
            <summary>
            Позволяет обновить виджет приложения сообщества.
            </summary>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/appWidgets.update
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.Category.Async.ILeadFormsCategoryAsync">
            <summary>
            Формы сбора заявок  Подойдут для записи клиентов, предварительной регистрации, подписки на рассылки, запросов информации, подключения услуг, оформления заказов и многого другого.
            Вы создаете формы с заявками, а пользователи оставляют свою контактную информацию. Вам остается завершить оформление заявки, связавшись с ними удобным способом.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.Category.Async.ILeadFormsCategoryAsync.CreateAsync(VkNet.Model.LeadForms.LeadFormsCreateParams)">
            <summary>
            Создаёт форму сбора заявок.
            </summary>
            <param name = "createParams">
            Входные параметры запроса.
            </param>
            <returns>
            Возвращается структура с информацией о созданной форме:
            form_id — идентификатор формы;
            url — ссылка на форму.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/leadForms.create
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.Async.ILeadFormsCategoryAsync.DeleteAsync(System.Int64,System.Int64)">
            <summary>
            Удаляет форму сбора заявок.
            </summary>
            <param name = "groupId">
            Идентификатор группы, из которой надо удалить форму. обязательный параметр, целое число
            </param>
            <param name = "formId">
            Идентификатор удаляемой формы. обязательный параметр, целое число
            </param>
            <returns>
            Возвращает идентификатор удалённой формы
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/leadForms.delete
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.Async.ILeadFormsCategoryAsync.GetAsync(System.Int64,System.Int64)">
            <summary>
            Возвращает информацию о форме сбора заявок.
            </summary>
            <param name = "groupId">
            Идентификатор группы, в которой находится форма. обязательный параметр, целое число
            </param>
            <param name = "formId">
            Идентификатор формы. обязательный параметр, целое число
            </param>
            <returns>
            Возвращает структуру с информацией о форме. Значения полей см. в методе leadForms.create.
            Дополнительно возвращает следующие поля:
            form_id — идентификатор формы;
            leads_count — количество заявок;
            url — ссылка на форму.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/leadForms.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.Async.ILeadFormsCategoryAsync.GetLeadsAsync(System.Int64,System.Int64,System.String,System.Nullable{System.UInt64})">
            <summary>
            Возвращает заявки формы.
            </summary>
            <param name = "groupId">
            Идентификатор сообщества, в котором находится форма. обязательный параметр, целое число
            </param>
            <param name = "formId">
            Идентификатор формы. обязательный параметр, целое число
            </param>
            <param name = "nextPageToken">
            Строка, полученная из предыдущего запроса для получения следующей порции результатов. строка
            </param>
            <param name = "limit">
            Количество возвращаемых заявок за один запрос. положительное число, по умолчанию 10, максимальное значение 1000, минимальное значение 1
            </param>
            <returns>
            Возвращает массив структур со следующими полями:
            lead_id — идентификатор заявки;
            user_id — идентификатор пользователя, оставившего заявку;
            date — дата и время оставления заявки в формате unix timestamp;
            answers — информация об ответах на вопросы — массив структур со следующими полями:
            key — ключ вопроса. Совпадает с типом стандартного вопроса (его полем type), или с ключом нестандартного вопроса (поле key). Для нестандартных вопросов, для которых не был задан ключ, будет использовано значение вида custom_0, где «0» — порядковый номер нестандартного вопроса, считая с 0.
            answer — ответ на вопрос. Структура (для всех вопросов, кроме типа checkbox) или массив структур (для типа checkbox) со следующими полями:
            key — ключ ответа (в случае, если был задан при создании формы);
            value — текст ответа;
            ad_id — идентификатор рекламного объявления, с которого пришла заявка (поле отсутствует в случае, если заявка пришла не из рекламного объявления).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/leadForms.getLeads
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.Async.ILeadFormsCategoryAsync.GetUploadURLAsync">
            <summary>
            Возвращает URL для загрузки обложки для формы.
            </summary>
            <returns>
            Возвращает URL для загрузки обложки для формы.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/leadForms.getUploadURl
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.Async.ILeadFormsCategoryAsync.ListAsync(System.Int64)">
            <summary>
            Возвращает список форм сообщества.
            </summary>
            <param name = "groupId">
            Идентификатор сообщества. обязательный параметр, целое число
            </param>
            <returns>
            Возвращает массив структур с описанием форм. Подробнее о структуре описания формы см. метод leadForms.get.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/leadForms.list
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.Async.ILeadFormsCategoryAsync.UpdateAsync(VkNet.Model.LeadForms.LeadFormsUpdateParams)">
            <summary>
            Обновляет форму сбора заявок.
            </summary>
            <param name = "updateParams">
            Входные параметры запроса.
            </param>
            <returns>
            Возвращается структура с информацией об обновлённой форме:
            form_id — идентификатор формы;
            url — ссылка на форму.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/leadForms.update
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.Category.IOrdersCategoryAsync">
            <summary>
            Orders Методы этой секции предоставляют дополнительную возможность управления состоянием заказов, которые были сделаны пользователями в приложениях.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.Category.IOrdersCategoryAsync.CancelSubscriptionAsync(System.UInt64,System.UInt64,System.Nullable{System.Boolean})">
            <summary>
            Отменяет подписку.
            </summary>
            <param name = "userId">
            Идентификатор пользователя. положительное число, обязательный параметр
            </param>
            <param name = "subscriptionId">
            Идентификатор подписки. положительное число, обязательный параметр
            </param>
            <param name = "pendingCancel">
            1 — отключить подписку по истечении текущего оплаченного периода;
            0 — отключить подписку сразу. флаг, может принимать значения 1 или 0, по умолчанию 0
            </param>
            <returns>
            После успешного выполнения возвращает 1. При отмене подписки на адрес обратного вызова будет отправлено платёжное уведомление с типом subscription_status_change.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/orders.cancelSubscription
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.IOrdersCategoryAsync.ChangeStateAsync(System.UInt64,VkNet.Enums.SafetyEnums.OrderStateAction,System.Nullable{System.UInt64},System.Nullable{System.Boolean})">
            <summary>
            Изменяет состояние заказа.
            </summary>
            <param name = "orderId">
            Идентификатор заказа. положительное число, обязательный параметр
            </param>
            <param name = "action">
            Действие, которое нужно произвести с заказом.
            Возможные действия:
            cancel — отменить неподтверждённый заказ.
            charge — подтвердить неподтверждённый заказ. Применяется только если не удалось обработать уведомление order_change_state.
            refund — отменить подтверждённый заказ.
            строка, обязательный параметр
            </param>
            <param name = "appOrderId">
            Внутренний идентификатор заказа в приложении. положительное число
            </param>
            <param name = "testMode">
            Если этот параметр равен 1, изменяется состояние заказа тестового режима. По умолчанию 0. флаг, может принимать значения 1 или 0
            </param>
            <returns>
            После успешного выполнения возвращает новый статус заказа.
            Статусы заказа
            chargeable — неподтверждённый заказ. В это состояние заказы попадают в случае, если магазин не обрабатывает уведомления.
            declined — отменённый заказ на этапе получения информации о товаре, например, была получена ошибка 20, "Товара не существует". В это состояние заказ может попасть из состояния chargeable.
            cancelled — отменённый заказ. В это состояние заказ может попасть из состояния chargeable.
            charged — оплаченный заказ. В это состояние заказ может попасть из состояния chargeable, либо сразу после оплаты, если приложение обрабатывает уведомления.
            refunded — отменённый после оплаты заказ, голоса возвращены пользователю.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/orders.changeState
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.IOrdersCategoryAsync.GetAsync(System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.Boolean})">
            <summary>
            Возвращает список заказов.
            </summary>
            <param name = "offset">
            Смещение относительно самого нового найденного заказа для выборки определенного подмножества. По умолчанию 0. положительное число, по умолчанию 0
            </param>
            <param name = "count">
            Количество возвращаемых заказов. положительное число, максимальное значение 1000, по умолчанию 100
            </param>
            <param name = "testMode">
            Если этот параметр равен 1, возвращается список заказов тестового режима. По умолчанию 0. флаг, может принимать значения 1 или 0
            </param>
            <returns>
            После успешного выполнения возвращает массив найденных заказов, отсортированный по дате в обратном порядке (самый новый в начале).
            Статусы заказа
            chargeable — неподтверждённый заказ. В это состояние заказы попадают в случае, если магазин не обрабатывает уведомления.
            declined — отменённый заказ на этапе получения информации о товаре, например, была получена ошибка 20, "Товара не существует". В это состояние заказ может попасть из состояния chargeable.
            cancelled — отменённый заказ. В это состояние заказ может попасть из состояния chargeable.
            charged — оплаченный заказ. В это состояние заказ может попасть из состояния chargeable, либо сразу после оплаты, если приложение обрабатывает уведомления.
            refunded — отменённый после оплаты заказ, голоса возвращены пользователю.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/orders.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.IOrdersCategoryAsync.GetAmountAsync(System.UInt64,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Возвращает стоимость голосов в валюте пользователя.
            </summary>
            <param name = "userId">
            Идентификатор пользователя положительное число, обязательный параметр
            </param>
            <param name = "votes">
            Список голосов. Например: 1,7,77 список слов, разделенных через запятую, обязательный параметр, количество элементов должно составлять не более 100
            </param>
            <returns>
            Возвращает валюту пользователя и массив результатов для каждого значения из votes.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/orders.getAmount
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.IOrdersCategoryAsync.GetByIdAsync(System.Collections.Generic.IEnumerable{System.UInt64},System.Nullable{System.Boolean})">
            <summary>
            Возвращает информацию об отдельном заказе.
            </summary>
            <param name = "orderIds">
            Идентификаторы заказов (при запросе информации о нескольких заказах). список положительных чисел, разделенных запятыми
            </param>
            <param name = "testMode">
            Если этот параметр равен 1, возвращаются заказы тестового режима. По умолчанию 0. флаг, может принимать значения 1 или 0
            </param>
            <returns>
            Возвращается массив найденных заказов, отсортированный по дате в обратном порядке (самый новый в начале).
            Статусы заказа
            chargeable — неподтверждённый заказ. В это состояние заказы попадают в случае, если магазин не обрабатывает уведомления.
            declined — отменённый заказ на этапе получения информации о товаре, например, была получена ошибка 20, "Товара не существует". В это состояние заказ может попасть из состояния chargeable.
            cancelled — отменённый заказ. В это состояние заказ может попасть из состояния chargeable.
            charged — оплаченный заказ. В это состояние заказ может попасть из состояния chargeable, либо сразу после оплаты, если приложение обрабатывает уведомления.
            refunded — отменённый после оплаты заказ, голоса возвращены пользователю.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/orders.getById
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.IOrdersCategoryAsync.GetUserSubscriptionByIdAsync(System.UInt64,System.UInt64)">
            <summary>
            Получает информацию о подписке по её идентификатору.
            </summary>
            <param name = "userId">
            Идентификатор пользователя. положительное число, обязательный параметр
            </param>
            <param name = "subscriptionId">
            Идентификатор подписки. положительное число, обязательный параметр
            </param>
            <returns>
            Возвращает объект, описывающий подписку. Содержит следующие поля:
            id (integer) — идентификатор подписки.
            item_id (string) — идентификатор товара в приложении.
            status (string) — статус подписки. Возможные значения:
            chargeable — неподтвержденная подписка;
            active — подписка активна;
            cancelled — подписка отменена.
            price (integer) — стоимость подписки.
            period (integer) — период подписки.
            create_time (integer) — дата создания в Unixtime.
            update_time (integer) — дата обновления в Unixtime.
            period_start_time (integer) — дата начала периода в Unixtime.
            next_bill_time (integer) — дата следующего платежа в Unixtime (если status = active).
            trial_expire_time (integer) — дата истечения триал-периода (если есть).
            pending_cancel (boolean, [true]) — true, если подписка ожидает отмены.
            cancel_reason (string) — причина отмены (если есть). Возможные значения:
            user_decision — по инициативе пользователя;
            app_decision — по инициативе приложения;
            payment_fail — из-за проблемы с платежом;
            unknown — причина неизвестна.
            test_mode (boolean, [true]) — true, если используется тестовый режим.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/orders.getUserSubscriptionById
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.IOrdersCategoryAsync.GetUserSubscriptionsAsync(System.UInt64)">
            <summary>
            Получает список активных подписок пользователя.
            </summary>
            <param name = "userId">
            Идентификатор пользователя, подписки которого необходимо получить. положительное число, обязательный параметр
            </param>
            <returns>
            После успешного выполнения возвращает объект, содержащий число результатов в поле count и массив объектов, описывающих подписку, в поле items. Каждый объект массива items содержит следующие поля:
            id (integer) — идентификатор подписки.
            item_id (string) — идентификатор товара в приложении.
            status (string) — статус подписки. Возможные значения:
            active — подписка активна.
            price (integer) — стоимость подписки.
            period (integer) — период подписки.
            create_time (integer) — дата создания в Unixtime.
            update_time (integer) — дата обновления в Unixtime.
            period_start_time (integer) — дата начала периода в Unixtime.
            next_bill_time (integer) — дата следующего платежа в Unixtime (если status = active).
            trial_expire_time (integer) — дата истечения триал-периода (если есть).
            pending_cancel (boolean, [true]) — true, если подписка ожидает отмены.
            cancel_reason (string) — причина отмены (если есть). Возможные значения:
            user_decision — по инициативе пользователя;
            app_decision — по инициативе приложения;
            payment_fail — из-за проблемы с платежом;
            unknown — причина неизвестна.
            test_mode (boolean, [true]) — true, если используется тестовый режим.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/orders.getUserSubscriptions
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.IOrdersCategoryAsync.UpdateSubscriptionAsync(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Обновляет цену подписки для пользователя.
            </summary>
            <param name = "userId">
            Идентификатор пользователя. положительное число, обязательный параметр
            </param>
            <param name = "subscriptionId">
            Идентификатор подписки. Подписка должна быть активна. положительное число, обязательный параметр
            </param>
            <param name = "price">
            Новая стоимость подписки (должна быть ниже, чем текущая). положительное число, обязательный параметр
            </param>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/orders.updateSubscription
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.Category.ISecureCategoryAsync">
            <summary>
            Secure В этой секции представлены административные методы,
            предназначенные для вызова от имени приложения с использованием стороннего
            сервера.
            Для использования этих методов необходимо применять специальную схему
            авторизации.
            Помимо стандартных параметров, указанных в описании методов,
            к запросу необходимо добавлять параметр client_secret, содержащий значение из
            поля «Защищенный ключ» в настройках приложения.
            Обратите внимание, тестовый режим при работе с secure-методами не
            поддерживается!
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.Category.ISecureCategoryAsync.AddAppEventAsync(System.UInt64,System.UInt64,System.Nullable{System.UInt64})">
            <summary>
            Добавляет информацию о достижениях пользователя в приложении.
            </summary>
            <param name="userId">
            Идентификатор пользователя, для которого нужно записать данные.
            положительное число, по умолчанию идентификатор текущего пользователя,
            обязательный параметр
            </param>
            <param name="activityId">
            Идентификатор достижения. Доступные значения:
            1 — достигнут новый уровень, работает аналогично secure.setUserLevel;
            2 — заработано новое число очков;
            положительное число, отличное от 1 и 2 — выполнена миссия с идентификатором
            activity_id.
            положительное число, обязательный параметр
            </param>
            <param name="value">
            Номер уровня или заработанное количество очков (соответственно, для
            activity_id=1 и activity_id=2).
            Параметр игнорируется при значении activity_id, отличном от 1 и 2.
            положительное число, максимальное значение 10000
            </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/secure.addAppEvent
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.ISecureCategoryAsync.CheckTokenAsync(System.String,System.String)">
            <summary>
            Позволяет проверять валидность пользователя в IFrame, Flash  и
            Standalone-приложениях с помощью передаваемого в приложения параметра
            access_token.
            </summary>
            <param name="token">
            Клиентский access_token строка
            </param>
            <param name="ip">
            Ip адрес пользователя. Обратите внимание, что пользователь может обращаться
            через ipv6, в этом случае обязательно передавать ipv6 адрес пользователя.
            Если параметр не передан – ip адрес проверен не будет. строка
            </param>
            <returns>
            В случае успеха будет возвращен объект, содержащий следующие поля:
            success = 1
            user_id = идентификатор пользователя
            date = unixtime дата, когда access_token был сгенерирован
            expire = unixtime дата, когда access_token станет не валиден
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/secure.checkToken
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.ISecureCategoryAsync.GetAppBalanceAsync">
            <summary>
            Возвращает платежный баланс (счет) приложения в сотых долях голоса.
            </summary>
            <returns>
            Возвращает количество голосов (в сотых долях), которые есть на счете
            приложения.
            Например, если метод возвращает 5000, это означает, что на балансе приложения
            50 голосов.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/secure.getAppBalance
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.ISecureCategoryAsync.GetSmsHistoryAsync(System.Nullable{System.UInt64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.UInt64})">
            <summary>
            Выводит список SMS-уведомлений, отосланных приложением с помощью метода
            secure.sendSMSNotification.
            </summary>
            <param name="userId">
            Фильтр по id пользователя, которому высылалось уведомление. положительное число
            </param>
            <param name="dateFrom">
            Фильтр по дате начала. Задается в виде UNIX-time. положительное число
            </param>
            <param name="dateTo">
            Фильтр по дате окончания. Задается в виде UNIX-time. положительное число
            </param>
            <param name="limit">
            Количество возвращаемых записей. По умолчанию 1000. положительное число, по
            умолчанию 1000, максимальное значение 1000
            </param>
            <returns>
            Возвращает список SMS-уведомлений, отосланных приложением, отсортированных по
            убыванию даты и отфильтрованных с помощью параметров uid, date_from, date_to,
            limit.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/secure.getSMSHistory
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.ISecureCategoryAsync.GetTransactionsHistoryAsync">
            <summary>
            Выводит историю транзакций по переводу голосов между пользователями и
            приложением.
            </summary>
            <returns>
            Возвращает список транзакций, отсортированных по убыванию даты, и
            отфильтрованных с помощью параметров type, uid_from, uid_to, date_from,
            date_to, limit.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/secure.getTransactionsHistory
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.ISecureCategoryAsync.GetUserLevelAsync(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Возвращает ранее выставленный игровой уровень одного или нескольких
            пользователей в приложении.
            </summary>
            <param name="userIds">
            Идентификаторы пользователей, информацию об уровнях которых требуется получить.
            список целых чисел, разделенных запятыми, обязательный параметр
            </param>
            <returns>
            Возвращает значения игровых уровней пользователей в приложении.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/secure.getUserLevel
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VkNet.Abstractions.Category.ISecureCategoryAsync.GiveEventStickerAsync(System.Collections.Generic.IEnumerable{System.UInt64},System.UInt64)" -->
        <member name="M:VkNet.Abstractions.Category.ISecureCategoryAsync.SendNotificationAsync(System.String,System.Collections.Generic.IEnumerable{System.UInt64})">
            <summary>
            Отправляет уведомление пользователю.
            </summary>
            <param name="message">
            Текст уведомления, который следует передавать в кодировке UTF-8 (максимум 254
            символа). строка, обязательный параметр
            </param>
            <param name="userIds">
            Перечисленные через запятую идентификаторы пользователей, которым отправляется
            уведомление (максимум 100 штук). список положительных чисел, разделенных
            запятыми
            </param>
            <returns>
            Возвращает перечисленные через запятую ID пользователей, которым было успешно
            отправлено уведомление.
            Обратите внимание, нельзя отправлять пользователю более 1 уведомления в час (3
            в сутки). Кроме того, нельзя отправить одному пользователю два уведомления с
            одинаковым текстом подряд.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/secure.sendNotification
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.ISecureCategoryAsync.SendSmsNotificationAsync(System.UInt64,System.String)">
            <summary>
            Отправляет SMS-уведомление на мобильный телефон пользователя.
            </summary>
            <param name="userId">
            Id пользователя, которому отправляется SMS-уведомление. Пользователь должен
            разрешить приложению отсылать ему уведомления (getUserSettings, +1).
            положительное число, обязательный параметр
            </param>
            <param name="message">
            Текст SMS, который следует передавать в кодировке UTF-8. Допускаются только
            латинские буквы и цифры. Максимальный размер - 160 символов. строка,
            обязательный параметр
            </param>
            <returns>
            Возвращает 1 в случае успешной отсылки SMS.
            Если номер пользователя еще не известен системе, то метод вернет ошибку 146
            (The mobile number of the user is unknown). Для решения этой проблемы метод
            users.get возвращает поле has_mobile, которое позволяет определить, известен ли
            номер пользователя.
            Если номер пользователя неизвестен, но Вы хотели бы иметь возможность высылать
            ему SMS-уведомления, необходимо предложить ему ввести номер мобильного
            телефона, не отвлекая от приложения.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/secure.sendSMSNotification
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.ISecureCategoryAsync.SetCounterAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.UInt64},System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <summary>
            Устанавливает счетчик, который выводится пользователю жирным шрифтом в левом
            меню.
            </summary>
            <param name="counters">
            Позволяет устанавливать счетчики нескольким пользователям за один запрос.
            Значение следует указывать в следующем формате:
            user_id1:counter1[:increment],user_id2:counter2[:increment], пример:
            66748:6:1,6492:2. В случае, если указан этот параметр, параметры counter,
            user_id и increment не учитываются. Можно передать не более 200 значений за
            один запрос. список слов, разделенных через запятую
            </param>
            <param name="userId">
            Идентификатор пользователя. положительное число
            </param>
            <param name="counter">
            Значение счетчика. целое число
            </param>
            <param name="increment">
            Определяет, нужно ли заменить значение счетчика или прибавить новое значение к
            уже имеющемуся. 1 — прибавить counter к старому значению, 0 — заменить счетчик
            (по умолчанию). флаг, может принимать значения 1 или 0
            </param>
            <returns>
            Возвращает 1 в случае успешной установки счетчика.
            Если пользователь не установил приложение в левое меню, метод вернет ошибку 148
            (Access to the menu of the user denied). Избежать этой ошибки можно с помощью
            метода account.getAppPermissions.
            Вы также можете обращаться к этому методу при стандартном взаимодействии с
            клиентской стороны, указывая setCounter вместо secure.setCounter в названии
            метода. В этом случае параметр uid передавать не нужно, счетчик установится для
            текущего пользователя.
            Метод setCounter при стандартном, а не защищенном взаимодействии можно
            использовать для того, чтобы, например, сбрасывать счетчик при заходе
            пользователя в приложение.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/secure.setCounter
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.Category.IStoriesCategoryAsync">
            <summary>
            Stories
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.Category.IStoriesCategoryAsync.BanOwnerAsync(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Позволяет скрыть из ленты новостей истории от выбранных источников.
            </summary>
            <param name = "ownersIds">
            Список идентификаторов источников. список целых чисел, разделенных запятыми, обязательный параметр
            </param>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/stories.banOwner
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.IStoriesCategoryAsync.DeleteAsync(System.Int64,System.UInt64)">
            <summary>
            Удаляет историю.
            </summary>
            <param name = "ownerId">
            Идентификатор владельца истории. целое число, по умолчанию идентификатор текущего пользователя, обязательный параметр
            </param>
            <param name = "storyId">
            Идентификатор истории. положительное число, обязательный параметр
            </param>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/stories.delete
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.IStoriesCategoryAsync.GetAsync(System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <summary>
            Возвращает истории, доступные для текущего пользователя.
            </summary>
            <param name = "ownerId">
            Идентификатор пользователя, истории которого необходимо получить. целое число
            </param>
            <param name = "extended">
            1 — возвращать в ответе дополнительную информацию о профилях пользователей. флаг, может принимать значения 1 или 0, по умолчанию 0
            </param>
            <returns>
            После успешного выполнения возвращает объект, содержащий число подборок в поле count и массив подборок историй  в поле items. Каждая подборка — массив историй от одного владельца.
            Если был задан параметр extended=1, дополнительно возвращает массив объектов пользователей в поле profiles (array) и сообществ в поле groups (array).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/stories.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.IStoriesCategoryAsync.GetBannedAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <summary>
            Возвращает список источников историй, скрытых из ленты текущего пользователя.
            </summary>
            <param name = "fields">
            Дополнительные поля пользователей и сообществ, которые необходимо вернуть. список слов, разделенных через запятую
            </param>
            <param name = "extended">
            1 — возвращать расширенную информацию о пользователях и сообществах. флаг, может принимать значения 1 или 0
            </param>
            <returns>
            После успешного выполнения возвращает общее количество скрытых источников в поле count (integer) и их идентификаторы в массиве items. Если extended = 1, items содержит два поля:
            profiles (array) — массив объектов, описывающих пользователей;
            groups (array) — массив объектов, описывающих сообщества.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/stories.getBanned
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.IStoriesCategoryAsync.GetByIdAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Возвращает информацию об истории по её идентификатору.
            </summary>
            <param name = "stories">
            Перечисленные через запятую идентификаторы, которые представляют собой идущие через знак подчеркивания идентификаторы владельцев историй и идентификаторы самих историй.
            Пример значения stories:
            93388_21539,93388_20904 список слов, разделенных через запятую, обязательный параметр
            </param>
            <param name = "fields">
            Дополнительные поля профилей и сообществ, которые необходимо вернуть в ответе. список слов, разделенных через запятую
            </param>
            <param name = "extended">
            1 — возвращать в ответе дополнительную информацию о пользователях. флаг, может принимать значения 1 или 0, по умолчанию 0
            </param>
            <returns>
            После успешного выполнения возвращает объект, содержащий число историй в поле count и массив объектов историй  в поле items.
            Если был задан параметр extended = 1, дополнительно возвращает массив объектов  пользователей в поле profiles и объектов сообществ в поле groups.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/stories.getById
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.IStoriesCategoryAsync.GetPhotoUploadServerAsync(VkNet.Model.RequestParams.Stories.GetPhotoUploadServerParams)">
            <summary>
            Позволяет получить адрес для загрузки истории с фотографией.
            </summary>
            <param name = "params">
            Входные параметры запроса.
            </param>
            <returns>
            После успешного выполнения возвращает объект, содержащий следующие поля:
            upload_url (string) — адрес сервера для загрузки файла;
            user_ids (array) — идентификаторы пользователей, которые могут видеть историю.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/stories.getPhotoUploadServer
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.IStoriesCategoryAsync.GetRepliesAsync(System.Int64,System.UInt64,System.String,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Позволяет получить ответы на историю.
            </summary>
            <param name = "ownerId">
            Идентификатор владельца истории. целое число, обязательный параметр
            </param>
            <param name = "storyId">
            Идентификатор истории. положительное число, обязательный параметр
            </param>
            <param name = "accessKey">
            Ключ доступа для приватного объекта. строка
            </param>
            <param name = "fields">
            Дополнительные поля профилей и сообществ, которые необходимо вернуть в ответе. список слов, разделенных через запятую
            </param>
            <param name = "extended">
            1 — возвращать дополнительную информацию о профилях и сообществах. флаг, может принимать значения 1 или 0, по умолчанию
            </param>
            <returns>
            После успешного выполнения возвращает объект, содержащий число подборок в поле count и массив подборок историй  в поле items. Каждая подборка — массив историй от одного владельца.
            Если был задан параметр extended=1, дополнительно возвращает массив объектов пользователей в поле profiles (array) и сообществ в поле groups (array).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/stories.getReplies
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.IStoriesCategoryAsync.GetStatsAsync(System.Int64,System.UInt64)">
            <summary>
            Возвращает статистику истории.
            </summary>
            <param name = "ownerId">
            Идентификатор владельца истории. целое число, обязательный параметр
            </param>
            <param name = "storyId">
            Идентификатор истории. положительное число, обязательный параметр
            </param>
            <returns>
            Возвращает объект, который содержит следующие поля:
            views (object) — просмотры. Содержит поля:
            state (string) — доступность значения (on — доступно, off — недоступно);
            count (integer) — значение счётчика;
            replies  (object) — ответы на историю. Содержит поля:
            state (string) — доступность значения (on — доступно, off — недоступно);
            count (integer) — значение счётчика;
            answer (object) — число
            state (string) — доступность значения (on — доступно, off — недоступно);
            count (integer) — значение счётчика;
            shares  (object) — расшаривания истории. Содержит поля:
            state (string) — доступность значения (on — доступно, off — недоступно);
            count (integer) — значение счётчика;
            subscribers (object) — новые подписчики. Содержит поля:
            state (string) — доступность значения (on — доступно, off — недоступно);
            count (integer) — значение счётчика;
            bans  (object) — скрытия истории. Содержит поля:
            state (string) — доступность значения (on — доступно, off — недоступно);
            count (integer) — значение счётчика;
            open_link (object) — переходы по ссылке. Содержит поля:
            state (string) — доступность значения (on — доступно, hidden — недоступно);
            count (integer) — значение счётчика.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/stories.getStats
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.IStoriesCategoryAsync.GetVideoUploadServerAsync(VkNet.Model.RequestParams.Stories.GetVideoUploadServerParams)">
            <summary>
            Позволяет получить адрес для загрузки видеозаписи в историю.
            </summary>
            <param name = "params">
            Входные параметры запроса.
            </param>
            <returns>
            После успешного выполнения возвращает объект, содержащий следующие поля:
            upload_url (string) — адрес сервера для загрузки файла;
            user_ids (array) — идентификаторы пользователей, которые могут видеть историю.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/stories.getVideoUploadServer
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.IStoriesCategoryAsync.GetViewersAsync(System.Int64,System.UInt64,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.Boolean})">
            <summary>
            Возвращает список пользователей, просмотревших историю.
            </summary>
            <param name = "ownerId">
            Идентификатор владельца истории. целое число, по умолчанию идентификатор текущего пользователя, обязательный параметр
            </param>
            <param name = "storyId">
            Идентификатор истории. положительное число, обязательный параметр
            </param>
            <param name = "count">
            Максимальное число результатов в ответе. положительное число, по умолчанию 100
            </param>
            <param name = "offset">
            Сдвиг для получения определённого подмножества результатов. положительное число, по умолчанию 0
            </param>
            <param name = "extended">
            1 — возвращать в ответе расширенную информацию о пользователях. флаг, может принимать значения 1 или 0, по умолчанию 0
            </param>
            <returns>
            После успешного выполнения возвращает объект, содержащий число результатов в поле count и идентификаторы пользователей в поле items (array). Если extended = 1, поле items (array) содержит массив объектов пользователей.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/stories.getViewers
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.IStoriesCategoryAsync.HideAllRepliesAsync(System.Int64)">
            <summary>
            Скрывает все ответы автора за последние сутки на истории текущего пользователя.
            </summary>
            <param name = "ownerId">
            Идентификатор пользователя, ответы от которого нужно скрыть. целое число, обязательный параметр
            </param>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/stories.hideAllReplies
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.IStoriesCategoryAsync.HideReplyAsync(System.Int64,System.UInt64,System.String)">
            <summary>
            Скрывает ответ на историю.
            </summary>
            <param name = "ownerId">
            Идентификатор владельца истории (ответной). целое число, обязательный параметр
            </param>
            <param name = "storyId">
            Идентификатор истории (ответной). положительное число, обязательный параметр
            </param>
            <param name = "accessKey">
            Ключ доступа к приватному объекту. строка
            </param>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/stories.hideReply
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.IStoriesCategoryAsync.UnbanOwnerAsync(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Позволяет вернуть пользователя или сообщество в список отображаемых историй в ленте.
            </summary>
            <param name = "ownersIds">
            Список идентификаторов владельцев историй, разделённых запятой. список целых чисел, разделенных запятыми, обязательный параметр
            </param>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/stories.unbanOwner
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.Category.ILeadFormsCategory">
            <summary>
            Формы сбора заявок  Подойдут для записи клиентов, предварительной регистрации, подписки на рассылки, запросов информации, подключения услуг, оформления заказов и многого другого.
            Вы создаете формы с заявками, а пользователи оставляют свою контактную информацию. Вам остается завершить оформление заявки, связавшись с ними удобным способом.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.Category.ILeadFormsCategory.Create(VkNet.Model.LeadForms.LeadFormsCreateParams)">
            <summary>
            Создаёт форму сбора заявок.
            </summary>
            <param name = "createParams">
            Входные параметры запроса.
            </param>
            <returns>
            Возвращается структура с информацией о созданной форме:
            form_id — идентификатор формы;
            url — ссылка на форму.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/leadForms.create
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.ILeadFormsCategory.Delete(System.Int64,System.Int64)">
            <summary>
            Удаляет форму сбора заявок.
            </summary>
            <param name = "groupId">
            Идентификатор группы, из которой надо удалить форму. обязательный параметр, целое число
            </param>
            <param name = "formId">
            Идентификатор удаляемой формы. обязательный параметр, целое число
            </param>
            <returns>
            Возвращает идентификатор удалённой формы
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/leadForms.delete
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.ILeadFormsCategory.Get(System.Int64,System.Int64)">
            <summary>
            Возвращает информацию о форме сбора заявок.
            </summary>
            <param name = "groupId">
            Идентификатор группы, в которой находится форма. обязательный параметр, целое число
            </param>
            <param name = "formId">
            Идентификатор формы. обязательный параметр, целое число
            </param>
            <returns>
            Возвращает структуру с информацией о форме. Значения полей см. в методе leadForms.create.
            Дополнительно возвращает следующие поля:
            form_id — идентификатор формы;
            leads_count — количество заявок;
            url — ссылка на форму.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/leadForms.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.ILeadFormsCategory.GetLeads(System.Int64,System.Int64,System.String,System.Nullable{System.UInt64})">
            <summary>
            Возвращает заявки формы.
            </summary>
            <param name = "groupId">
            Идентификатор сообщества, в котором находится форма. обязательный параметр, целое число
            </param>
            <param name = "formId">
            Идентификатор формы. обязательный параметр, целое число
            </param>
            <param name = "nextPageToken">
            Строка, полученная из предыдущего запроса для получения следующей порции результатов. строка
            </param>
            <param name = "limit">
            Количество возвращаемых заявок за один запрос. положительное число, по умолчанию 10, максимальное значение 1000, минимальное значение 1
            </param>
            <returns>
            Возвращает массив структур со следующими полями:
            lead_id — идентификатор заявки;
            user_id — идентификатор пользователя, оставившего заявку;
            date — дата и время оставления заявки в формате unix timestamp;
            answers — информация об ответах на вопросы — массив структур со следующими полями:
            key — ключ вопроса. Совпадает с типом стандартного вопроса (его полем type), или с ключом нестандартного вопроса (поле key). Для нестандартных вопросов, для которых не был задан ключ, будет использовано значение вида custom_0, где «0» — порядковый номер нестандартного вопроса, считая с 0.
            answer — ответ на вопрос. Структура (для всех вопросов, кроме типа checkbox) или массив структур (для типа checkbox) со следующими полями:
            key — ключ ответа (в случае, если был задан при создании формы);
            value — текст ответа;
            ad_id — идентификатор рекламного объявления, с которого пришла заявка (поле отсутствует в случае, если заявка пришла не из рекламного объявления).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/leadForms.getLeads
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.ILeadFormsCategory.GetUploadURL">
            <summary>
            Возвращает URL для загрузки обложки для формы.
            </summary>
            <returns>
            Возвращает URL для загрузки обложки для формы.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/leadForms.getUploadURl
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.ILeadFormsCategory.List(System.Int64)">
            <summary>
            Возвращает список форм сообщества.
            </summary>
            <param name = "groupId">
            Идентификатор сообщества. обязательный параметр, целое число
            </param>
            <returns>
            Возвращает массив структур с описанием форм. Подробнее о структуре описания формы см. метод leadForms.get.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/leadForms.list
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Category.ILeadFormsCategory.Update(VkNet.Model.LeadForms.LeadFormsUpdateParams)">
            <summary>
            Обновляет форму сбора заявок.
            </summary>
            <param name = "updateParams">
            Входные параметры запроса.
            </param>
            <returns>
            Возвращается структура с информацией об обновлённой форме:
            form_id — идентификатор формы;
            url — ссылка на форму.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/leadForms.update
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IAudioCategoryAsync">
            <inheritdoc cref="T:VkNet.Abstractions.IAudioCategory"/>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategoryAsync.AddAsync(System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Копирует аудиозапись на страницу пользователя или группы.
            </summary>
            <param name="audioId">
            Идентификатор аудиозаписи.
            </param>
            <param name="ownerId">
            Идентификатор владельца аудиозаписи.
            </param>
            <param name="groupId">
            Идентификатор сообщества (если аудиозапись необходимо скопировать в список
            сообщества).
            </param>
            <param name="albumId">
            Идентификатор альбома, в который нужно переместить аудиозапись.
            </param>
            <returns>
            После успешного выполнения возвращает идентификатор созданной аудиозаписи.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/audio.add
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategoryAsync.CreatePlaylistAsync(System.Int64,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Создает пустой плейлист.
            </summary>
            <param name="ownerId">
            Идентификатор владельца (пользователь или сообщество).
            </param>
            <param name="title">
            Название плейлиста.
            </param>
            <param name="description">
            Описание плейлиста.
            </param>
            <param name="audioIds">
            Идентификаторы аудиозаписей, которые необходимо добавить в альбом, в виде
            {owner_id}_{audio_id}.
            </param>
            <returns>
            После успешного выполнения возвращает <see cref="T:VkNet.Model.Attachments.AudioPlaylist"/>.
            </returns>
            <remarks>
            Страница документации ВКонтакте -неизвестно-.
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategoryAsync.DeleteAsync(System.Int64,System.Int64)">
            <summary>
            Удаляет аудиозапись со страницы пользователя или сообщества.
            </summary>
            <param name="audioId">
            Идентификатор аудиозаписи.
            </param>
            <param name="ownerId">
            Идентификатор владельца аудиозаписи (пользователь или сообщество).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/audio.delete
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategoryAsync.DeletePlaylistAsync(System.Int64,System.Int64)">
            <summary>
            Удаляет альбом аудиозаписей.
            </summary>
            <param name="ownerId">
            Идентификатор владельца (пользователь или сообщество).
            </param>
            <param name="playlistId">
            Идентификатор плейлиста.
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте -неизвестно-.
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategoryAsync.EditAsync(VkNet.Model.RequestParams.AudioEditParams)">
            <summary>
            Редактирует данные аудиозаписи на странице пользователя или сообщества.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает id текста, введенного пользователем
            (lyrics_id), если текст не был введен, вернет 0.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/audio.edit
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategoryAsync.EditPlaylistAsync(System.Int64,System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Редактирует плейлист.
            </summary>
            <param name="ownerId">
            Идентификатор владельца (пользователь или сообщество).
            </param>
            <param name="playlistId">
            Идентификатор плейлиста.
            </param>
            <param name="title">
            Новое название для плейлиста.
            </param>
            <param name="description">
            Новое описание для плейлиста.
            </param>
            <param name="audioIds">
            Идентификаторы аудиозаписей, в виде {owner_id}_{audio_id}.
            Чтобы добавить аудиозаписи необходимо перечислить
            идентификаторы всех имеющихся аудиозаписей в плейлисте + новые.
            Не указывайте идентификаторы аудиозаписей, которые необходимо удалить.
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте -неизвестно-.
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategoryAsync.GetAsync(VkNet.Model.RequestParams.AudioGetParams)">
            <summary>
            Возвращает список аудиозаписей пользователя или сообщества.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает список объектов <see cref="T:VkNet.Model.Attachments.Audio"/>.
            Обратите внимание, что ссылки на mp3 привязаны к ip-адресу.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/audio.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategoryAsync.GetPlaylistsAsync(System.Int64,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>
            Возвращает список плейлистов пользователя или группы.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества.
            </param>
            <param name="offset">
            Смещение, необходимое для выборки определенного подмножества плейлистов.
            </param>
            <param name="count">
            Количество плейлистов, которое необходимо вернуть. По умолчанию -неизвестно-, максимальное значение -неизвестно-.
            </param>
            <returns>
            После успешного выполнения возвращает общее количество альбомов с аудиозаписями
            и массив объектов <see cref="T:VkNet.Model.Attachments.AudioPlaylist"/>.
            </returns>
            <remarks>
            Страница документации ВКонтакте -неизвестно-.
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategoryAsync.GetPlaylistByIdAsync(System.Int64,System.Int64)">
            <summary>
            Возвращает <see cref="T:VkNet.Model.Attachments.AudioPlaylist"/> пользователя или группы.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества.
            </param>
            <param name="playlistId">
            Идентификатор плейлиста.
            </param>
            <returns>
            После успешного выполнения возвращает <see cref="T:VkNet.Model.Attachments.AudioPlaylist"/>.
            </returns>
            <remarks>
            Страница документации ВКонтакте -неизвестно-.
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategoryAsync.GetBroadcastListAsync(VkNet.Enums.Filters.AudioBroadcastFilter,System.Nullable{System.Boolean})">
            <summary>
            Возвращает список друзей и сообществ пользователя, которые транслируют музыку в
            статус.
            </summary>
            <param name="filter">
            Определяет, какие типы объектов необходимо получить.
            </param>
            <param name="active">
            true — будут возвращены только друзья и сообщества, которые транслируют музыку в
            данный момент.
            </param>
            <returns>
            После успешного выполнения возвращает список объектов <see cref="T:VkNet.Model.User"/> и <see cref="T:VkNet.Model.Group"/> с
            дополнительным полем status_audio — объект аудиозаписи, установленной в статус
            (если аудиозапись транслируется в текущей момент).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/audio.getBroadcastList
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategoryAsync.GetByIdAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Возвращает информацию об аудиозаписях.
            </summary>
            <param name="audios">
            Идентификаторы аудиозаписей, информацию о которых необходимо вернуть, в виде
            {owner_id}_{audio_id}.
            </param>
            <returns>
            После успешного выполнения возвращает массив объектов <see cref="T:VkNet.Model.Attachments.Audio"/>. Обратите внимание,
            что ссылки на аудиозаписи привязаны
            к ip адресу.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/audio.getById
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategoryAsync.GetCountAsync(System.Int64)">
            <summary>
            Возвращает количество аудиозаписей пользователя или сообщества.
            </summary>
            <param name="ownerId">
            Идентификатор владельца аудиозаписей (пользователь или сообщество). Обратите
            внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1).
            </param>
            <returns>
            После успешного выполнения возвращает число, равное количеству аудиозаписей на
            странице пользователя или сообщества.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/audio.getCount
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategoryAsync.GetLyricsAsync(System.Int64)">
            <summary>
            Возвращает текст аудиозаписи.
            </summary>
            <param name="lyricsId">
            Идентификатор текста аудиозаписи, информацию о котором необходимо вернуть.
            </param>
            <returns>
            После успешного выполнения возвращает объект <see cref="T:VkNet.Model.Lyrics"/>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/audio.getLyrics
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategoryAsync.GetPopularAsync(System.Boolean,System.Nullable{VkNet.Enums.AudioGenre},System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>
            Возвращает список аудиозаписей из раздела "Популярное".
            </summary>
            <param name="onlyEng">
            true – возвращать только зарубежные аудиозаписи. false – возвращать все аудиозаписи.
            </param>
            <param name="genre">
            Идентификатор жанра из списка жанров.
            </param>
            <param name="offset">
            Смещение, необходимое для выборки определенного подмножества аудиозаписей.
            </param>
            <param name="count">
            Количество возвращаемых аудиозаписей. Максимальное
            значение 1000, по умолчанию 100.
            </param>
            <returns>
            После успешного выполнения возвращает список объектов <see cref="T:VkNet.Model.Attachments.Audio"/>. Обратите внимание,
            что ссылки на аудиозаписи привязаны
            к ip адресу.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/audio.getPopular
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategoryAsync.GetRecommendationsAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Nullable{System.Boolean})">
            <summary>
            Возвращает список рекомендуемых аудиозаписей на основе списка воспроизведения
            заданного пользователя или на основе
            одной выбранной аудиозаписи.
            </summary>
            <param name="targetAudio">
            Идентификатор аудиозаписи, на основе которой будет строиться список
            рекомендаций.
            Используется вместо параметра uid. Идентификатор представляет из себя
            разделённые знаком подчеркивания id
            пользователя, которому принадлежит аудиозапись, и id самой аудиозаписи. Если
            аудиозапись принадлежит сообществу, то
            в качестве первого параметра используется -id сообщества.
            </param>
            <param name="userId">
            Идентификатор пользователя для получения списка рекомендаций на основе его
            набора аудиозаписей (по
            умолчанию — идентификатор текущего пользователя).
            </param>
            <param name="offset">
            Смещение относительно первой найденной аудиозаписи для выборки определенного
            подмножества.
            </param>
            <param name="count">
            Количество возвращаемых аудиозаписей. Максимальное значение 1000, по умолчанию 100.
            </param>
            <param name="shuffle">
            true — включен случайный порядок.
            </param>
            <returns>
            После успешного выполнения возвращает список объектов <see cref="T:VkNet.Model.Attachments.Audio"/>. Обратите внимание,
            что ссылки на аудиозаписи привязаны к ip адресу.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/audio.getRecommendations
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategoryAsync.GetUploadServerAsync">
            <summary>
            Возвращает адрес сервера для загрузки аудиозаписей.
            </summary>
            <returns>
            После успешного выполнения возвращает объект с единственным полем upload_url.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/audio.getUploadServer
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategoryAsync.AddToPlaylistAsync(System.Int64,System.Int64,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Перемещает аудиозаписи в плейлист.
            </summary>
            <param name="ownerId">
            Идентификатор владельца (пользователь или сообщество).
            </param>
            <param name="playlistId">
            Идентификатор плейлиста.
            </param>
            <param name="audioIds">
            Идентификаторы аудиозаписей, которые требуется переместить, в виде {owner_id}_{audio_id}.
            </param>
            <returns>
            После успешного выполнения список идентификаторов аудиозаписей.
            Обратите внимание, в одном альбоме не может быть более 1000 аудиозаписей.
            </returns>
            <remarks>
            Страница документации ВКонтакте -неизвестно-
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategoryAsync.ReorderAsync(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Изменяет порядок аудиозаписи, перенося ее между аудиозаписями, идентификаторы
            которых переданы параметрами after и before.
            </summary>
            <param name="audioId">
            Идентификатор аудиозаписи, которую нужно переместить.
            </param>
            <param name="ownerId">
            Идентификатор владельца аудиозаписи (пользователь или сообщество). По умолчанию
            — идентификатор текущего пользователя.
            </param>
            <param name="before">
            Идентификатор аудиозаписи, перед которой нужно поместить композицию.
            </param>
            <param name="after">
            Идентификатор аудиозаписи, после  которой нужно поместить композицию.
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/audio.reorder
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategoryAsync.RestoreAsync(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Восстанавливает аудиозапись после удаления.
            </summary>
            <param name="audioId">
            Идентификатор аудиозаписи.
            </param>
            <param name="ownerId">
            Идентификатор владельца аудиозаписи (пользователь или сообщество). По умолчанию
            — идентификатор текущего пользователя.
            </param>
            <returns>
            В случае успешного восстановления аудиозаписи возвращает объект <see cref="T:VkNet.Model.Attachments.Audio"/>.
            Если время хранения удаленной аудиозаписи истекло (обычно это 20 минут), сервер
            вернет ошибку 202 (Cache expired).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/audio.restore
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategoryAsync.SaveAsync(System.String,System.String,System.String)">
            <summary>
            Сохраняет аудиозаписи после успешной загрузки.
            </summary>
            <param name="response">
            Параметр, возвращаемый в результате загрузки аудиофайла
            на сервер.
            </param>
            <param name="artist"> Автор композиции. По умолчанию берется из ID3 тегов. </param>
            <param name="title"> Название композиции. По умолчанию берется из ID3 тегов. </param>
            <returns> Возвращает обьект загруженной аудиозаписи. </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/audio.save
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategoryAsync.SearchAsync(VkNet.Model.RequestParams.AudioSearchParams)">
            <summary>
            Возвращает список аудиозаписей в соответствии с заданным критерием поиска.
            </summary>
            <param name="params"> Критерии поиска </param>
            <returns>
            Список объектов <see cref="T:VkNet.Model.Attachments.Audio"/>.
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской,
            содержащей Settings.Audio
            Страница документации ВКонтакте http://vk.com/dev/audio.search
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategoryAsync.SetBroadcastAsync(System.String,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Транслирует аудиозапись в статус пользователю или сообществу.
            </summary>
            <param name="audio">
            Идентификатор аудиозаписи, которая будет отображаться в статусе, в формате
            {owner_id}_{audio_id}.
            Например, 1_190442705. Если параметр не указан, аудиостатус указанных сообществ
            и пользователя будет удален.
            </param>
            <param name="targetIds">
            Перечисленные через запятую идентификаторы сообществ и пользователя, которым
            будет транслироваться аудиозапись. Идентификаторы сообществ должны быть заданы в
            формате "-gid", где gid - идентификатор
            сообщества. Например, 1,-34384434. По умолчанию аудиозапись транслируется
            текущему пользователю. (Количество элементов должно составлять не более 20).
            </param>
            <returns>
            Возвращает идентификаторы пользователя и сообществ для которых был установлен статус.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/audio.setBroadcast
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IAuthCategoryAsync">
            <summary>
            Асинхронные методы для работы с авторизацией.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IAuthCategoryAsync.CheckPhoneAsync(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <summary>
            Проверяет правильность введённого номера.
            </summary>
            <param name="phone">
            Номер телефона регистрируемого пользователя. строка, обязательный параметр
            (Строка, обязательный
            параметр).
            </param>
            <param name="clientId">
            Идентификатор Вашего приложения. целое число (Целое
            число).
            </param>
            <param name="clientSecret">
            Секретный ключ приложения, доступный в разделе редактирования приложения.
            строка,
            обязательный параметр (Строка, обязательный параметр).
            </param>
            <param name="authByPhone">
            Флаг, может принимать значения 1 или 0 (Флаг, может
            принимать значения 1 или 0).
            </param>
            <returns>
            В случае, если номер пользователя является правильным, будет возвращён
            <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/auth.checkPhone
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAuthCategoryAsync.SignupAsync(VkNet.Model.RequestParams.AuthSignupParams)">
            <summary>
            Регистрирует нового пользователя по номеру телефона.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            Возвращает результат выполнения метода.
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/auth.signup
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAuthCategoryAsync.ConfirmAsync(VkNet.Model.RequestParams.AuthConfirmParams)">
            <summary>
            Завершает регистрацию нового пользователя, начатую методом auth.signup, по
            коду, полученному через SMS.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            Возвращает результат выполнения метода.
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/auth.confirm
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAuthCategoryAsync.RestoreAsync(System.String,System.String)">
            <summary>
            Позволяет восстановить доступ к аккаунту, используя код, полученный через SMS.
            </summary>
            <param name="phone"> Номер телефона пользователя. </param>
            <param name="lastName"> Фамилия пользователя. </param>
            <returns>
            Возвращает результат выполнения метода.
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/auth.restore
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IBoardCategoryAsync">
            <summary>
            Асинхронные методы для работы со темами группы.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IBoardCategoryAsync.GetTopicsAsync(VkNet.Model.RequestParams.BoardGetTopicsParams,System.Boolean)">
            <summary>
            Возвращает список тем в обсуждениях указанной группы.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <param name="skipAuthorization"> Если <c> true </c> то пропустить авторизацию. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте
            <see href="https://new.vk.com/dev/board.getTopics" />.
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IBoardCategoryAsync.GetCommentsAsync(VkNet.Model.RequestParams.BoardGetCommentsParams,System.Boolean)">
            <summary>
            Возвращает список сообщений в указанной теме.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <param name="skipAuthorization"> Если <c> true </c> то пропустить авторизацию. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте
            <see href="https://new.vk.com/dev/board.getComments" />.
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IBoardCategoryAsync.AddTopicAsync(VkNet.Model.RequestParams.BoardAddTopicParams)">
            <summary>
            Создает новую тему в списке обсуждений группы.
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/board.addTopic
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IBoardCategoryAsync.DeleteTopicAsync(VkNet.Model.RequestParams.BoardTopicParams)">
            <summary>
            Удаляет тему в обсуждениях группы.
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/board.deleteTopic
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IBoardCategoryAsync.CloseTopicAsync(VkNet.Model.RequestParams.BoardTopicParams)">
            <summary>
            Закрывает тему в списке обсуждений группы (в такой теме невозможно оставлять
            новые сообщения).
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/board.closeTopic
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IBoardCategoryAsync.OpenTopicAsync(VkNet.Model.RequestParams.BoardTopicParams)">
            <summary>
            Открывает ранее закрытую тему (в ней станет возможно оставлять новые
            сообщения).
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/board.openTopic
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IBoardCategoryAsync.FixTopicAsync(VkNet.Model.RequestParams.BoardTopicParams)">
            <summary>
            Закрепляет тему в списке обсуждений группы (такая тема при любой сортировке
            выводится выше остальных).
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/board.fixTopic
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IBoardCategoryAsync.UnFixTopicAsync(VkNet.Model.RequestParams.BoardTopicParams)">
            <summary>
            Отменяет прикрепление темы в списке обсуждений группы (тема будет выводиться
            согласно выбранной сортировке).
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/board.unfixTopic
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IBoardCategoryAsync.EditTopicAsync(VkNet.Model.RequestParams.BoardEditTopicParams)">
            <summary>
            Изменяет заголовок темы в списке обсуждений группы.
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/board.editTopic
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IBoardCategoryAsync.CreateCommentAsync(VkNet.Model.RequestParams.BoardCreateCommentParams)">
            <summary>
            Добавляет новый комментарий в обсуждении.
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте
            <see href="https://new.vk.com/dev/board.createComment" />.
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IBoardCategoryAsync.DeleteCommentAsync(VkNet.Model.RequestParams.BoardCommentParams)">
            <summary>
            Удаляет сообщение в обсуждениях сообщества.
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте
            <see href="https://new.vk.com/dev/board.deleteComment" />.
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IBoardCategoryAsync.EditCommentAsync(VkNet.Model.RequestParams.BoardEditCommentParams)">
            <summary>
            Редактирует одно из сообщений в обсуждении сообщества..
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/board.editComment
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IBoardCategoryAsync.RestoreCommentAsync(VkNet.Model.RequestParams.BoardCommentParams)">
            <summary>
            Восстанавливает удаленное сообщение темы в обсуждениях группы.
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/board.restoreComment
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IDatabaseCategoryAsync">
            <summary>
            Асинхронные методы для получения справочной информации (страны, города, школы,
            учебные заведения и т.п.).
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IDatabaseCategoryAsync.GetCountriesAsync(System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{VkNet.Enums.Iso3166},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает список стран.
            </summary>
            <param name="needAll"> Флаг - вернуть список всех стран. </param>
            <param name="codes">
            Перечисленные через запятую двухбуквенные коды стран в стандарте ISO 3166-1
            alpha-2
            http://vk.com/dev/country_codes
            </param>
            <param name="offset">
            Отступ, необходимый для выбора определенного подмножества
            стран.
            </param>
            <param name="count">
            Количество стран, которое необходимо вернуть (по умолчанию 100, максимальное
            значение 1000).
            </param>
            <remarks>
            Если не заданы параметры needAll и code, то возвращается краткий список стран,
            расположенных наиболее близко к
            стране
            текущего пользователя. Если задан параметр needAll, то будет возвращен список
            всех стран. Если задан параметр code,
            то будут возвращены только страны с перечисленными ISO 3166-1 alpha-2 кодами.
            Страница документации ВКонтакте http://vk.com/dev/database.getCountries
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IDatabaseCategoryAsync.GetRegionsAsync(System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает список регионов.
            </summary>
            <param name="countryId"> Идентификатор страны. </param>
            <param name="query"> Строка поискового запроса. </param>
            <param name="count"> Количество регионов, которое необходимо вернуть. </param>
            <param name="offset">
            Отступ, необходимый для выбора определенного подмножества
            регионов.
            </param>
            <returns> Список регионов. </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/database.getRegions
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IDatabaseCategoryAsync.GetStreetsByIdAsync(System.Int32[])">
            <summary>
            Возвращает информацию об улицах по их идентификаторам.
            </summary>
            <param name="streetIds"> Идентификаторы улиц. </param>
            <returns> Информация об улицах. </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/database.getStreetsById
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IDatabaseCategoryAsync.GetCountriesByIdAsync(System.Int32[])">
            <summary>
            Возвращает информацию о странах по их идентификаторам.
            </summary>
            <param name="countryIds"> Идентификаторы стран. </param>
            <returns> Информация о странах. </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/database.getCountriesById
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IDatabaseCategoryAsync.GetCitiesAsync(VkNet.Model.RequestParams.Database.GetCitiesParams)">
            <summary>
            Возвращает список городов.
            </summary>
            <param name="getCitiesParams"> Параметры запроса database.getCities </param>
            <returns> Cписок городов </returns>
            <remarks>
            Возвращает коллекцию городов, каждый из которых содержит поля City.Id
            При наличии информации о регионе и/или области, в которых находится данный
            город, в объекте могут дополнительно
            включаться поля City.Area
            Если не задан параметр <paramref name="getCitiesParams.query.query" />, то будет
            возвращен список самых крупных городов в
            заданной стране.
            Если задан параметр <paramref name="getCitiesParams.query.query" />, то будет
            возвращен список городов, которые
            релевантны поисковому запросу.
            Страница документации ВКонтакте http://vk.com/dev/database.getCities
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IDatabaseCategoryAsync.GetCitiesByIdAsync(System.Int32[])">
            <summary>
            Возвращает информацию о городах по их идентификаторам.
            </summary>
            <param name="cityIds"> Идентификаторы городов. </param>
            <returns> Информация о городах. </returns>
            <remarks>
            Идентификаторы городов могут быть получены с помощью методов UsersCategory.Get,
            places.getById, places.search, places.getCheckins.
            Страница документации ВКонтакте http://vk.com/dev/database.getCitiesById
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IDatabaseCategoryAsync.GetUniversitiesAsync(System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает список высших учебных заведений.
            </summary>
            <param name="countryId">
            Идентификатор страны, учебные заведения которой
            необходимо вернуть.
            </param>
            <param name="cityId">
            Идентификатор города, учебные заведения которого
            необходимо вернуть.
            </param>
            <param name="query"> Строка поискового запроса. Например, СПБ. </param>
            <param name="offset">
            Отступ, необходимый для получения определенного
            подмножества учебных заведений.
            </param>
            <param name="count"> Количество учебных заведений, которое необходимо вернуть. </param>
            <returns> Список высших учебных заведений, удовлетворяющих заданным условиям. </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/database.getUniversities
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IDatabaseCategoryAsync.GetSchoolsAsync(System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает список школ.
            </summary>
            <param name="cityId"> Идентификатор города, школы которого необходимо вернуть. </param>
            <param name="query"> Строка поискового запроса. Например, гимназия. </param>
            <param name="offset">
            Отступ, необходимый для получения определенного
            подмножества школ.
            </param>
            <param name="count"> Количество школ, которое необходимо вернуть. </param>
            <returns> Cписок школ. </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/database.getSchools
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IDatabaseCategoryAsync.GetFacultiesAsync(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает список факультетов.
            </summary>
            <param name="universityId">
            Идентификатор университета, факультеты которого
            необходимо получить.
            </param>
            <param name="count">
            Отступ, необходимый для получения определенного
            подмножества факультетов.
            </param>
            <param name="offset"> Количество факультетов которое необходимо получить. </param>
            <returns> Cписок факультетов. </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/database.getFaculties
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IDatabaseCategoryAsync.GetSchoolClassesAsync(System.Int64)">
            <summary>
            Возвращает список классов, характерных для школ определенной страны.
            </summary>
            <param name="countryId">
            Идентификатор страны, доступные классы в которой
            необходимо вернуть.
            </param>
            <returns>
            Возвращает массив, каждый элемент которого представляет собой пару:
            идентификатор и строковое обозначение
            класса.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/database.getSchoolClasses
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IDatabaseCategoryAsync.GetChairsAsync(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает список кафедр университета по указанному факультету.
            </summary>
            <param name="facultyId">
            Идентификатор факультета, кафедры которого необходимо
            получить.
            </param>
            <param name="count"> Количество кафедр которое необходимо получить. </param>
            <param name="offset">
            Отступ, необходимый для получения определенного
            подмножества кафедр.
            </param>
            <returns>
            Возвращает массив, каждый элемент которого представляет собой пару:
            идентификатор и строковое обозначение класса.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/database.getChairs
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IDatabaseCategoryAsync.GetMetroStationsByIdAsync(System.Collections.Generic.IEnumerable{System.UInt64})">
            <summary>
            Возвращает информацию об одной или нескольких станциях метро по их идентификаторам.
            </summary>
            <param name = "stationIds">
            Список идентификаторов станций метро список положительных чисел, разделенных запятыми
            </param>
            <returns>
            После успешного выполнения возвращает массив объектов, описывающих станции метро.
            Каждый объект содержит следующие поля:
            id (integer) — идентификатор;
            name (string) — название;
            color (string) — цвет линии.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/database.getMetroStationsById
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IDatabaseCategoryAsync.GetMetroStationsAsync(System.UInt64,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Возвращает список станций метро
            </summary>
            <param name = "cityId">
            Идентификатор города, полученный методом database.getCities. положительное число, обязательный параметр
            </param>
            <param name = "offset">
            Отступ, необходимый для выбора определенного подмножества станций. положительное число
            </param>
            <param name = "count">
            Количество станций, которое необходимо вернуть. положительное число, по умолчанию 100, максимальное значение 500
            </param>
            <param name = "extended">
            Флаг, может принимать значения 1 или 0, по умолчанию
            </param>
            <returns>
            После успешного выполнения возвращает объект, содержащий число результатов в поле count и массив объектов, описывающих станции метро, в поле items.
            Каждый объект содержит следующие поля:
            id (integer) — идентификатор;
            name (string) — название;
            color (string) — цвет линии.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/database.getMetroStations
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IDocsCategoryAsync">
            <summary>
            Асинхронные методы для работы с документами (получение списка, загрузка,
            удаление и т.д.)
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IDocsCategoryAsync.GetAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{VkNet.Enums.DocFilter})">
            <summary>
            Возвращает расширенную информацию о документах пользователя или сообщества.
            </summary>
            <param name="count">
            Количество документов, информацию о которых нужно вернуть. По умолчанию — все
            документы.
            </param>
            <param name="offset">
            Смещение, необходимое для выборки определенного подмножества документов.
            Положительное число.
            </param>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежат документы.
            Целое число, по
            умолчанию идентификатор текущего пользователя.
            </param>
            <param name="type"> Фильтр по типу документа. </param>
            <returns>
            После успешного выполнения возвращает список объектов документов.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/docs.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IDocsCategoryAsync.GetByIdAsync(System.Collections.Generic.IEnumerable{VkNet.Model.Attachments.Document})">
            <summary>
            Возвращает информацию о документах по их идентификаторам.
            </summary>
            <param name="docs">
            Идентификаторы документов, информацию о которых нужно
            вернуть.
            </param>
            <returns> После успешного выполнения возвращает список объектов документов. </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/docs.getById
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IDocsCategoryAsync.GetUploadServerAsync(System.Nullable{System.Int64})">
            <summary>
            Возвращает адрес сервера для загрузки документов.
            </summary>
            <param name="groupId">
            Идентификатор сообщества (если необходимо загрузить документ в список
            документов сообщества).
            Если документ нужно загрузить в список пользователя, метод вызывается без
            дополнительных параметров. Положительное
            число
            </param>
            <returns> После успешного выполнения возвращает объект UploadServerInfo </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/docs.getUploadServer
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IDocsCategoryAsync.GetWallUploadServerAsync(System.Nullable{System.Int64})">
            <summary>
            Возвращает адрес сервера для загрузки документов в папку Отправленные, для
            последующей отправки документа на стену
            или личным сообщением.
            </summary>
            <param name="groupId">
            Идентификатор сообщества, в которое нужно загрузить документ. Положительное
            число.
            </param>
            <returns> После успешного выполнения возвращает объект UploadServerInfo </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/docs.getWallUploadServer
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IDocsCategoryAsync.SaveAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.String)">
            <summary>
            Сохраняет документ после его успешной загрузки на сервер.
            </summary>
            <param name="file">
            JSON-объект с полем file, возвращаемый после успешной загрузки документа
            сервер. Обязательный
            параметр.
            </param>
            <param name="title"> Название документа. </param>
            <param name="tags"> Метки для поиска. </param>
            <param name="captchaSid">
            Id капчи (только если для вызова метода необходимо
            ввести капчу)
            </param>
            <param name="captchaKey">
            Текст капчи (только если для вызова метода необходимо
            ввести капчу)
            </param>
            <returns> Возвращает массив с загруженными объектами. </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/docs.save
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IDocsCategoryAsync.DeleteAsync(System.Int64,System.Int64)">
            <summary>
            Удаляет документ пользователя или группы.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит документ. Целое
            число,
            обязательный параметр
            </param>
            <param name="docId">
            Идентификатор документа. Положительное число, обязательный
            параметр
            </param>
            <returns> После успешного выполнения возвращает 1. </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/docs.delete
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IDocsCategoryAsync.AddAsync(System.Int64,System.Int64,System.String,System.Nullable{System.Int64},System.String)">
            <summary>
            Копирует документ в документы текущего пользователя.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит документ. Целое
            число,
            обязательный параметр
            </param>
            <param name="docId">
            Идентификатор документа. Положительное число, обязательный
            параметр
            </param>
            <param name="accessKey">
            Ключ доступа документа. Этот параметр следует передать, если вместе с
            остальными данными о
            документе было возвращено поле access_key.
            </param>
            <param name="captchaSid"> Идентификатор капчи </param>
            <param name="captchaKey"> Текст капчи, который ввел пользователь </param>
            <returns>
            После успешного выполнения возвращает идентификатор созданного
            документа (did).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/docs.add
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IDocsCategoryAsync.GetTypesAsync(System.Int64)">
            <summary>
            Возвращает доступные типы документы для пользователя.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежат документы.
            целое число, по
            умолчанию идентификатор текущего пользователя, обязательный параметр (Целое
            число, по умолчанию идентификатор
            текущего пользователя, обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает список объектов type.
            Объект type — тип документов.
            id идентификатор типа.
            положительное число name название типа.
            строка count число документов;
            int (числовое значение).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/docs.getTypes
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IDocsCategoryAsync.SearchAsync(System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Возвращает результаты поиска по документам.
            </summary>
            <param name="query">
            Строка поискового запроса. Например, зеленые тапочки. строка, обязательный
            параметр, максимальная
            длина 512 (Строка, обязательный параметр, максимальная длина 512).
            </param>
            <param name="searchOwn"> 1 — искать среди собственных документов пользователя. </param>
            <param name="count">
            Количество документов, информацию о которых нужно вернуть. положительное число
            (Положительное
            число).
            </param>
            <param name="offset">
            Смещение, необходимое для выборки определенного подмножества документов.
            положительное число
            (Положительное число).
            </param>
            <returns>
            После успешного выполнения возвращает список объектов документов.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/docs.search
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IDocsCategoryAsync.EditAsync(System.Int64,System.Int64,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Редактирует документ пользователя или группы.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит документ.
            Обратите внимание, идентификатор сообщества в параметре owner_id необходимо
            указывать со знаком "-" — например,
            owner_id=-1 соответствует идентификатору сообщества ВКонтакте API (club1)
            целое число, по умолчанию идентификатор
            текущего пользователя, обязательный параметр (Целое число, по умолчанию
            идентификатор текущего пользователя,
            обязательный параметр).
            </param>
            <param name="docId">
            Идентификатор документа. положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <param name="title">
            Название документа. строка, максимальная длина 128 (Строка, максимальная длина
            128).
            </param>
            <param name="tags">
            Метки для поиска. список слов, разделенных через запятую (Список слов,
            разделенных через запятую).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/docs.edit
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IDocsCategoryAsync.GetMessagesUploadServerAsync(System.Nullable{System.Int64},VkNet.Enums.SafetyEnums.DocMessageType)">
            <summary>
            Получает адрес сервера для загрузки документа в личное сообщение.
            </summary>
            <param name="peerId"> идентификатор назначения </param>
            <param name="type">
            тип документа. Возможные значения:
            doc — обычный документ;
            audio_message — голосовое сообщение.
            </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Abstractions.IExecuteCategoryAsync">
            <summary>
            Методы этого класса позволяют производить асинхронные действия с универсальным
            методом.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IExecuteCategoryAsync.ExecuteAsync(System.String)">
            <summary>
            Универсальный метод, который позволяет запускать последовательность других
            методов, сохраняя и фильтруя
            промежуточные результаты.
            </summary>
            <param name="code">
            Код алгоритма в VKScript - формате, похожем на JavaSсript или ActionScript
            (предполагается совместимость с
            ECMAScript).
            Алгоритм должен завершаться командой return %выражение%. Операторы должны быть
            разделены точкой с запятой.
            </param>
            <returns>
            Возвращает данные, запрошенные алгоритмом.
            При работе с методом execute структура ответа в XML ближе к JSON и может
            незначительно отличаться от стандартного
            представления других методов.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/execute
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IExecuteCategoryAsync.ExecuteAsync``1(System.String)">
            <summary>
            Универсальный метод, который позволяет запускать последовательность других
            методов, сохраняя и фильтруя
            промежуточные результаты.
            </summary>
            <param name="code">
            Код алгоритма в VKScript - формате, похожем на JavaSсript или ActionScript
            (предполагается совместимость с
            ECMAScript).
            Алгоритм должен завершаться командой return %выражение%. Операторы должны быть
            разделены точкой с запятой.
            </param>
            <returns>
            Возвращает данные, запрошенные алгоритмом.
            При работе с методом execute структура ответа в XML ближе к JSON и может
            незначительно отличаться от стандартного
            представления других методов.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/execute
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IExecuteCategoryAsync.StoredProcedureAsync``1(System.String,VkNet.Utils.VkParameters)">
            <summary>
            Универсальный метод, который позволяет запускать хранимые процедуры.
            </summary>
            <param name="procedureName"> Имя хранимой процедуры </param>
            <param name="vkParameters"> Параметры хранимой процедуры </param>
            <returns>
            Возвращает данные, запрошенные алгоритмом.
            При работе с методом execute структура ответа в XML ближе к JSON и может
            незначительно отличаться от стандартного
            представления других методов.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/execute
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IFaveCategoryAsync">
            <summary>
            Методы для работы с закладками.
            </summary>
            <summary>
            Устаревшие асинхронные методы работы с закладками.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategoryAsync.AddArticleAsync(System.Uri,System.String,System.String,System.String)">
            <summary>
            Добавляет статью в закладки.
            </summary>
            <param name = "url">
            Ссылка на добавляемую статью.
            Обязательный параметр.
            </param>
            <param name = "ref"/>
            <param name = "trackCode"/>
            <param name = "source"/>
            <returns>
            В случае успешного выполнения возвращает <c>true</c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.addArticle
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategoryAsync.AddLinkAsync(System.Uri)">
            <summary>
            Добавляет ссылку в закладки.
            </summary>
            <param name = "link">
            Адрес добавляемой ссылки.
            Поддерживаются только внутренние ссылки на vk.com.
            </param>
            <returns>
            В случае успешного выполнения возвращает <c>true</c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.addLink
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategoryAsync.AddPageAsync(System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <summary>
            Добавляет сообщество или пользователя в закладки.
            </summary>
            <param name = "userId">
            Идентификатор пользователя, которого нужно добавить в закладки.
            </param>
            <param name = "groupId">
            Идентификатор сообщества, которое нужно добавить в закладки.
            </param>
            <returns>
            В случае успешного выполнения возвращает <c>true</c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.addPage
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategoryAsync.AddPostAsync(VkNet.Model.RequestParams.Fave.FaveAddPostParams)">
            <summary>
            Добавляет запись со стены пользователя или сообщества в закладки.
            </summary>
            <param name = "params">
            Входные параметры запроса.
            </param>
            <returns>
            В случае успешного выполнения возвращает <c>true</c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.addPost
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategoryAsync.AddProductAsync(System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            Добавляет товар в закладки.
            </summary>
            <param name = "ownerId">
            Идентификатор пользователя или сообщества, чей товар требуется добавить в закладки.
            Обратите внимание, идентификатор сообщества в параметре owner_id необходимо указывать со знаком "-" — например,
            owner_id=-1 соответствует идентификатору сообщества ВКонтакте API (club1).
            </param>
            <param name = "id">
            Идентификатор товара. целое число, обязательный параметр
            </param>
            <param name = "accessKey">
            Специальный код доступа для приватных товаров.
            </param>
            <param name="ref"/>
            <param name = "source"/>
            <returns>
            В случае успешного выполнения возвращает <c>true</c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.addProduct
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategoryAsync.AddTagAsync(System.String,System.String)">
            <summary>
            Создает метку закладок.
            </summary>
            <param name = "name">
            Название метки.
            Максимальная длина 50.
            </param>
            <param name = "position">
            Строка, по умолчанию back
            </param>
            <returns>
            В случае успешного выполнения возвращает объект метки с полями name - названием метки и id - идентификатором созданной метки.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.addTag
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategoryAsync.AddVideoAsync(System.Int64,System.Int64,System.String,System.String)">
            <summary>
            Добавляет видеозапись в закладки.
            </summary>
            <param name = "ownerId">
            Идентификатор пользователя или сообщества, владельца видеозаписи, которую требуется добавить в закладки.
            Обратите внимание, идентификатор сообщества в параметре owner_id необходимо указывать со знаком "-" — например,
            owner_id=-1 соответствует идентификатору сообщества ВКонтакте API (club1).
            </param>
            <param name = "id">
            Идентификатор видеозаписи.
            </param>
            <param name = "accessKey">
            Специальный код доступа для приватных видеозаписей.
            </param>
            <param name = "ref"/>
            <returns>
            В случае успешного выполнения возвращает <c>true</c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.addVideo
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategoryAsync.EditTagAsync(System.Int64,System.String)">
            <summary>
            Редактирует метку.
            </summary>
            <param name = "id">
            Идентификатор метки.
            </param>
            <param name = "name">
            Новое название метки.
            Обязательный параметр, максимальная длина 50.
            </param>
            <returns>
            В случае успешного выполнения возвращает <c>true</c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.editTag
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategoryAsync.GetAsync(VkNet.Model.RequestParams.Fave.FaveGetParams)">
            <summary>
            Возвращает объекты, добавленные в закладки пользователя.
            </summary>
            <param name = "params">
            Входные параметры запроса.
            </param>
            <returns>
            После успешного выполнения возвращает объект, содержащий число результатов в поле count и массив объектов, добавленных в закладки, в поле items.
            Каждый из объектов содержит следующие поля:
            type
            stringтип объекта, добавленного в закладки. Возможные значения:
            post — запись на стене;
            video — видеозапись;
            product — товар;
            article — статья;
            link — ссылки. seen
            booleanявляется ли закладка просмотренной. added_date
            integerдата добавления объекта в закладки в формате Unixtime. tags
            arrayмассив меток объекта в списке закладок. {object_type}
            objectобъект, добавленный в закладки.
            Если был задан параметр extended=1, возвращает число результатов в поле count, отдельно массив объектов пользователей в поле profiles и сообществ в поле groups.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategoryAsync.GetPagesAsync(VkNet.Enums.SafetyEnums.FavePageType,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.Int64})">
            <summary>
            Возвращает страницы пользователей и сообществ, добавленных в закладки.
            </summary>
            <param name = "type">
            Типы объектов, которые необходимо вернуть. Возможные значения:
            users — вернуть только пользователей;
            groups — вернуть только сообщества;
            hints — топ сообществ и пользователей.
            Если параметр не указан — вернутся объекты пользователей и сообществ, добавленных в закладки, в порядке добавления.
            </param>
            <param name = "fields">
            Список дополнительных полей для объектов user и group, которые необходимо вернуть.
            </param>
            <param name = "offset">
            Смещение относительно первого объекта в закладках пользователя для выборки определенного подмножества. Максимальное значение 10000.
            </param>
            <param name = "count">
            Количество возвращаемых закладок. По умолчанию 50, минимальное значение 1, максимальное значение 500.
            </param>
            <param name = "tagId">
            Идентификатор метки, закладки отмеченные которой требуется вернуть.
            </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.getPages
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategoryAsync.GetTagsAsync">
            <summary>
            Возвращает список меток в закладках.
            </summary>
            <returns>
            После успешного выполнения возвращает объект, содержащий число результатов в поле count и массив объектов меток в поле items.
            Поля, описывающие объект метки: id - идентификатор метки и name - название.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.getTags
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategoryAsync.MarkSeenAsync">
            <summary>
            Отмечает закладки как просмотренные.
            </summary>
            <returns>
            После успешного выполнения возвращает <c>true</c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.markSeen
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategoryAsync.RemoveArticleAsync(System.Int64,System.UInt64,System.String)">
            <summary>
            Удаляет статью из закладок.
            </summary>
            <param name = "ownerId">
            Идентификатор владельца статьи.
            </param>
            <param name = "articleId">
            Идентификатор статьи.
            </param>
            <param name = "ref"/>
            <returns>
            После успешного выполнения возвращает <c>true</c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.removeArticle
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategoryAsync.RemoveLinkAsync(System.String)">
            <summary>
            Удаляет ссылку из списка закладок пользователя.
            </summary>
            <param name = "linkId">
            Идентификатор ссылки.
            </param>
            <returns>
            После успешного выполнения возвращает <c>true</c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.removeLink
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategoryAsync.RemovePageAsync(System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Удаляет из закладок сообщество или страницу пользователя.
            </summary>
            <param name = "userId">
            Идентификатор пользователя, которого следует удалить из закладок.
            </param>
            <param name = "groupId">
            Идентификатор сообщества, которое следует удалить из закладок.
            </param>
            <returns>
            После успешного выполнения возвращает <c>true</c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.removePage
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategoryAsync.RemovePostAsync(System.Int64,System.Int64)">
            <summary>
            Удаляет из закладок запись на стене пользователя или сообщества.
            </summary>
            <param name = "ownerId">
            Идентификатор владельца записи.
            Обратите внимание, идентификатор сообщества в параметре owner_id необходимо указывать со знаком "-" — например,
            owner_id=-1 соответствует идентификатору сообщества ВКонтакте API (club1).
            </param>
            <param name = "id">
            Идентификатор записи на стене.
            </param>
            <returns>
            В случае успешного выполнения возвращает <c>true</c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.removePost
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategoryAsync.RemoveProductAsync(System.Int64,System.Int64)">
            <summary>
            Удаляет товар из закладок.
            </summary>
            <param name = "ownerId">
            Идентификатор пользователя или сообщества, чей товар требуется удалить из закладок.
            Обратите внимание, идентификатор сообщества в параметре owner_id необходимо указывать со знаком "-" — например,
            owner_id=-1 соответствует идентификатору сообщества ВКонтакте API (club1).
            </param>
            <param name = "id">
            Идентификатор товара.
            </param>
            <returns>
            В случае успешного выполнения возвращает <c>true</c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.removeProduct
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategoryAsync.RemoveTagAsync(System.Int64)">
            <summary>
            Удаляет метку закладок.
            </summary>
            <param name = "id">
            Идентификатор метки.
            </param>
            <returns>
            В случае успешного выполнения возвращает <c>true</c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.removeTag
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategoryAsync.RemoveVideoAsync(System.Int64,System.Int64)">
            <summary>
            Удаляет видеозапись из списка закладок.
            </summary>
            <param name = "ownerId">
            Идентификатор пользователя или сообщества, владельца видеозаписи, которую требуется удалить из закладок.
            Обратите внимание, идентификатор сообщества в параметре owner_id необходимо указывать со знаком "-" — например,
            owner_id=-1 соответствует идентификатору сообщества ВКонтакте API (club1).
            </param>
            <param name = "id">
            Идентификатор видеозаписи.
            </param>
            <returns>
            В случае успешного выполнения возвращает <c>true</c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.removeVideo
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategoryAsync.ReorderTagsAsync(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Меняет порядок меток закладок в списке.
            </summary>
            <param name = "ids">
            Перечисленные через запятую все идентификаторы меток пользователя в том порядке, в котором их требуется отображать.
            </param>
            <returns>
            В случае успешного выполнения возвращает <c>true</c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.reorderTags
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategoryAsync.SetPageTagsAsync(System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Устанавливает метку странице пользователя или сообщества.
            </summary>
            <param name = "userId">
            Идентификатор пользователя, которому требуется проставить метку в закладках.
            Обязательный параметр, если не задан параметр group_id.
            </param>
            <param name = "groupId">
            Идентификатор сообщества, которому требуется проставить метку в закладках.
            Обязательный параметр, если не задан параметр user_id.
            </param>
            <param name = "tagIds">
            Перечисленные через запятую идентификаторы тегов, которые требуется присвоить странице.
            </param>
            <returns>
            В случае успешного выполнения возвращает <c>true</c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.setPageTags
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategoryAsync.SetTagsAsync(VkNet.Model.RequestParams.Fave.FaveSetTagsParams)">
            <summary>
            Устанавливает метку выбранному объекту в списке закладок.
            </summary>
            <param name = "params">
            Входные параметры запроса.
            </param>
            <returns>
            В случае успешного выполнения возвращает <c>true</c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.setTags
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategoryAsync.TrackPageInteractionAsync(System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <summary>
            Устанавливает страницу пользователя или сообщества в топ закладок.
            </summary>
            <param name = "userId">
            Идентификатор пользователя, которому требуется проставить метку в закладках.
            Обязательный параметр, если не задан параметр group_id.
            </param>
            <param name = "groupId">
            Идентификатор сообщества, которому требуется проставить метку в закладках.
            Обязательный параметр, если не задан параметр user_id.
            </param>
            <returns>
            В случае успешного выполнения возвращает <c>true</c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.trackPageInteraction
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategoryAsync.AddLinkAsync(System.Uri,System.String)">
            <summary>
            Добавляет ссылку в закладки.
            </summary>
            <param name="link">
            Адрес добавляемой ссылки. Поддерживаются только внутренние ссылки на
            http://vk.com/. строка,
            обязательный параметр (Строка, обязательный параметр).
            </param>
            <param name="text"> Текст ссылки. строка (Строка). </param>
            <returns>
            В случае успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.addLink
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategoryAsync.GetUsersAsync(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает список пользователей, добавленных текущим пользователем в закладки.
            </summary>
            <param name="offset">
            Смещение, необходимое для выборки определенного подмножества пользователей. По
            умолчанию — 0.
            положительное число (Положительное число).
            </param>
            <param name="count">
            Количество пользователей, информацию о которых необходимо вернуть.
            положительное число, по
            умолчанию 50 (Положительное число, по умолчанию 50).
            </param>
            <returns>
            После успешного выполнения возвращает список объектов пользователей.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.getUsers
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategoryAsync.GetPhotosAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Возвращает фотографии, на которых текущий пользователь поставил отметку "Мне
            нравится".
            </summary>
            <param name="offset">
            Смещение, необходимое для выборки определенного подмножества фотографий.
            По умолчанию 0. положительное число (Положительное число).
            </param>
            <param name="count">
            Число фотографий, информацию о которых необходимо вернуть. положительное число,
            по умолчанию 50
            (Положительное число, по умолчанию 50).
            </param>
            <param name="photoSizes">
            Параметр, указывающий нужно ли возвращать ли доступные размеры фотографии в
            специальном
            формате. флаг, может принимать значения 1 или 0 (Флаг, может принимать значения
            1 или 0).
            </param>
            <returns>
            После успешного выполнения возвращает список объектов фотографий.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.getPhotos
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategoryAsync.GetPostsAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Возвращает записи, на которых текущий пользователь поставил отметку "Мне
            нравится".
            </summary>
            <param name="offset">
            Смещение, необходимо для выборки определенного подмножества записей.
            По умолчанию — 0.
            (Положительное число).
            </param>
            <param name="count">
            Количество записей, информацию о которых нужно вернуть (но не более 100).
            (Положительное число, по умолчанию 50).
            </param>
            <param name="extended">
            1 — в ответе будут возвращены дополнительные поля profiles и groups, содержащие
            информацию о пользователях и
            сообществах.
            По умолчанию: 0.
            </param>
            <returns>
            После успешного выполнения возвращает список объектов записей на стене.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.getPosts
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategoryAsync.GetVideosAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Возвращает список видеозаписей, на которых текущий пользователь поставил
            отметку "Мне нравится".
            </summary>
            <param name="offset">
            Смещение, необходимое для выборки определенного подмножества видеозаписей.
            (Положительное число).
            </param>
            <param name="count">
            Количество видеозаписей, информацию о которых необходимо вернуть.
            (Положительное число, по умолчанию 50).
            </param>
            <param name="extended">
            1 — в ответе будут возвращены дополнительные поля profiles и groups, содержащие
            информацию о пользователях и
            сообществах.
            По умолчанию: 0.
            </param>
            <returns>
            После успешного выполнения возвращает список объектов видеозаписей.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.getVideos
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategoryAsync.GetLinksAsync(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает ссылки, добавленные в закладки текущим пользователем.
            </summary>
            <param name="offset">
            Смещение, необходимое для выборки определенного подмножества ссылок.
            положительное число
            (Положительное число).
            </param>
            <param name="count">
            Количество ссылок, информацию о которых необходимо вернуть. положительное
            число, по умолчанию 50
            (Положительное число, по умолчанию 50).
            </param>
            <returns>
            После успешного выполнения возвращает общее количество ссылок и массив объектов
            link, каждый из которых содержит
            поля id, URL, title, description, photo_50 и photo_100.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.getLinks
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategoryAsync.AddUserAsync(System.Int64)">
            <summary>
            Добавляет пользователя в закладки.
            </summary>
            <param name="userId">
            Идентификатор пользователя, которого нужно добавить в закладки. положительное
            число, обязательный
            параметр (Положительное число, обязательный параметр).
            </param>
            <returns>
            В случае успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.addUser
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategoryAsync.RemoveUserAsync(System.Int64)">
            <summary>
            Удаляет пользователя из закладок.
            </summary>
            <param name="userId">
            Идентификатор пользователя, которого нужно удалить из закладок. положительное
            число, обязательный
            параметр (Положительное число, обязательный параметр).
            </param>
            <returns>
            В случае успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.removeUser
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategoryAsync.AddGroupAsync(System.Int64)">
            <summary>
            Добавляет сообщество в закладки.
            </summary>
            <param name="groupId">
            Идентификатор сообщества, которое нужно добавить в закладки. положительное
            число, обязательный
            параметр (Положительное число, обязательный параметр).
            </param>
            <returns>
            В случае успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.addGroup
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategoryAsync.RemoveGroupAsync(System.Int64)">
            <summary>
            Удаляет сообщество из закладок.
            </summary>
            <param name="groupId">
            Идентификатор сообщества, которое нужно удалить из закладок. положительное
            число, обязательный
            параметр (Положительное число, обязательный параметр).
            </param>
            <returns>
            В случае успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.removeGroup
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategoryAsync.GetMarketItemsAsync(System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.Boolean})">
            <summary>
            Возвращает товары, добавленные в закладки текущим пользователем.
            </summary>
            <param name="count">
            Число товаров, информацию о которых необходимо вернуть. положительное число, по
            умолчанию 50
            (Положительное число, по умолчанию 50).
            </param>
            <param name="offset">
            Смещение, необходимое для выборки определенного подмножества товаров.
            положительное число, по
            умолчанию 0 (Положительное число, по умолчанию 0).
            </param>
            <param name="extended">
            1 — будут возвращены дополнительные поля likes, can_comment, can_repost,
            photos. По умолчанию
            данные поля не возвращается. флаг, может принимать значения 1 или 0 (Флаг,
            может принимать значения 1 или 0).
            </param>
            <returns>
            После успешного выполнения возвращает список объектов товаров.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.getMarketItems
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IFriendsCategoryAsync">
            <summary>
            Асинхронные методы для работы с друзьями.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IFriendsCategoryAsync.GetAsync(VkNet.Model.RequestParams.FriendsGetParams,System.Boolean)">
            <summary>
            Возвращает список идентификаторов друзей пользователя или расширенную
            информацию о друзьях пользователя (при
            использовании параметра fields).
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            После успешного выполнения возвращает список идентификаторов (id) друзей
            пользователя, если параметр fields не
            использовался.
            При использовании параметра fields  возвращает список объектов пользователей,
            но не более 5000.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/friends.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFriendsCategoryAsync.GetAppUsersAsync">
            <summary>
            Возвращает список идентификаторов друзей текущего пользователя, которые
            установили данное приложение.
            </summary>
            <returns>
            После успешного выполнения возвращает список идентификаторов (id) друзей
            текущего пользователя, установивших
            приложение.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/friends.getAppUsers
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFriendsCategoryAsync.GetOnlineAsync(VkNet.Model.RequestParams.FriendsGetOnlineParams)">
            <summary>
            Возвращает список идентификаторов друзей пользователя, находящихся на сайте.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <returns>
            После успешного выполнения возвращает список идентификаторов (id) друзей,
            находящихся сейчас на сайте, у
            пользователя с идентификатором uid и входящих в список с идентификатором lid.
            При использовании параметра online_mobile=1 также возвращается поле
            online_mobile, содержащее список идентификатор
            друзей, находящихся на сайте с мобильного устройства.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/friends.getOnline
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFriendsCategoryAsync.GetMutualAsync(VkNet.Model.RequestParams.FriendsGetMutualParams)">
            <summary>
            Возвращает список идентификаторов общих друзей между парой пользователей.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <returns>
            После успешного выполнения возвращает список идентификаторов (id) общих друзей
            между пользователями с
            идентификаторами source_uid и target_uid.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/friends.getMutual
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFriendsCategoryAsync.AreFriendsAsync(System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Boolean})">
            <summary>
            Возвращает информацию о том, добавлен ли текущий пользователь в друзья у
            указанных пользователей.
            </summary>
            <param name="userIds">
            Идентификаторы пользователей, статус дружбы с которыми нужно проверить. список
            целых чисел,
            разделенных запятыми, обязательный параметр (Список целых чисел, разделенных
            запятыми, обязательный параметр).
            </param>
            <param name="needSign">
            1 – необходимо вернуть поле sign которое равно:
            md5Async("{id}_{user_id}_{friends_status}_{application_secret}"), где id - это
            идентификатор пользователя, для
            которого выполняется запрос.
            и позволяет на сервере убедиться что данные не были подделаны на клиенте.
            0 – поле sign возвращать не нужно. флаг, может принимать значения 1 или 0
            (Флаг, может принимать значения 1 или 0).
            </param>
            <returns>
            После успешного выполнения возвращает массив объектов status, каждый из которых
            содержит следующие поля:
            user_id — идентификатор пользователя (из числа переданных в параметре
            user_ids);
            friend_status — статус дружбы с пользователем:
            0 – пользователь не является другом,
            1 – отправлена заявка/подписка пользователю,
            2 – имеется входящая заявка/подписка от пользователя,
            3 – пользователь является другом;
            request_message — текст сообщения, прикрепленного к заявке в друзья (если
            есть).
            read_state — статус заявки (0 — не просмотрена, 1 — просмотрена), возвращается
            только если friend_status = 2;.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/friends.areFriends
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFriendsCategoryAsync.AddListAsync(System.String,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Создает новый список друзей у текущего пользователя.
            </summary>
            <param name="name">
            Название создаваемого списка друзей. строка, обязательный параметр (Строка,
            обязательный параметр).
            </param>
            <param name="userIds">
            Идентификаторы пользователей, которых необходимо поместить в созданный список.
            список
            положительных чисел, разделенных запятыми (Список положительных чисел,
            разделенных запятыми).
            </param>
            <returns>
            После успешного выполнения возвращает идентификатор (list_id) созданного списка
            друзей.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/friends.addList
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFriendsCategoryAsync.DeleteListAsync(System.Int64)">
            <summary>
            Удаляет существующий список друзей текущего пользователя.
            </summary>
            <param name="listId">
            Идентификатор списка друзей, который необходимо удалить. положительное число,
            обязательный
            параметр (Положительное число, обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/friends.deleteList
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFriendsCategoryAsync.GetListsAsync(System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <summary>
            Возвращает список меток друзей текущего пользователя.
            </summary>
            <param name="userId">
            Идентификатор пользователя. положительное число, по умолчанию идентификатор
            текущего пользователя
            (Положительное число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="returnSystem">
            Возвращать ли системный список публичных меток друзей пользователя. флаг, может
            принимать
            значения 1 или 0 (Флаг, может принимать значения 1 или 0).
            </param>
            <returns>
            После успешного выполнения возвращает список объектов, каждый из которых
            содержит следующие поля:
            name — название списка друзей;
            id — идентификатор списка друзей.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/friends.getLists
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFriendsCategoryAsync.EditListAsync(System.Int64,System.String,System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Редактирует существующий список друзей текущего пользователя.
            </summary>
            <param name="name"> Название списка друзей. строка (Строка). </param>
            <param name="listId">
            Идентификатор списка друзей. положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <param name="userIds">
            Идентификаторы пользователей, включенных в список. список положительных чисел,
            разделенных
            запятыми (Список положительных чисел, разделенных запятыми).
            </param>
            <param name="addUserIds">
            Идентификаторы пользователей, которых необходимо добавить в список. (в случае
            если не передан
            user_ids) список положительных чисел, разделенных запятыми (Список
            положительных чисел, разделенных запятыми).
            </param>
            <param name="deleteUserIds">
            Идентификаторы пользователей, которых необходимо изъять из списка. (в случае
            если не
            передан user_ids) список положительных чисел, разделенных запятыми (Список
            положительных чисел, разделенных
            запятыми).
            </param>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/friends.editList
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFriendsCategoryAsync.DeleteAllRequestsAsync">
            <summary>
            Отмечает все входящие заявки на добавление в друзья как просмотренные.
            </summary>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/friends.deleteAllRequests
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFriendsCategoryAsync.AddAsync(System.Int64,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.String)">
            <summary>
            Одобряет или создает заявку на добавление в друзья.
            </summary>
            <param name="userId">
            Идентификатор пользователя, которому необходимо отправить заявку, либо заявку
            от которого
            необходимо одобрить. положительное число, обязательный параметр (Положительное
            число, обязательный параметр).
            </param>
            <param name="text">
            Текст сопроводительного сообщения для заявки на добавление в друзья.
            Максимальная длина сообщения —
            500 символов. строка (Строка).
            </param>
            <param name="follow">
            Флаг, может принимать значения 1 или 0 (Флаг, может
            принимать значения 1 или 0).
            </param>
            <param name="captchaSid">
            Id капчи (только если для вызова метода необходимо
            ввести капчу)
            </param>
            <param name="captchaKey">
            Текст капчи (только если для вызова метода необходимо
            ввести капчу)
            </param>
            <returns>
            После успешного выполнения возвращает одно из следующих значений:
            1 — заявка на добавление данного пользователя в друзья отправлена;
            2 — заявка на добавление в друзья от данного пользователя одобрена;
            4 — повторная отправка заявки.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/friends.add
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFriendsCategoryAsync.DeleteAsync(System.Int64)">
            <summary>
            Удаляет пользователя из списка друзей или отклоняет заявку в друзья.
            </summary>
            <param name="userId">
            Идентификатор пользователя, которого необходимо удалить из списка друзей, либо
            заявку от которого
            необходимо отклонить. положительное число, обязательный параметр (Положительное
            число, обязательный параметр).
            </param>
            <returns>
            После успешного выполнения начиная с версии 5.28 возвращается объект с полями:
            success — удалось успешно удалить друга
            friend_deleted — был удален друг
            out_request_deleted  — отменена исходящая заявка
            in_request_deleted  — отклонена входящая заявка
            suggestion_deleted  — отклонена рекомендация друга
            Для версии 5.27 и более старых возвращает одно из следующих значений:
            1 — пользователь удален из списка друзей;
            2 — заявка на добавление в друзья данного пользователя отклонена (входящая или
            исходящая);
            3 — рекомендация добавить в друзья данного пользователя удалена.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/friends.delete
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFriendsCategoryAsync.EditAsync(System.Int64,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Редактирует списки друзей для выбранного друга.
            </summary>
            <param name="userId">
            Идентификатор пользователя (из числа друзей), для которого необходимо
            отредактировать списки
            друзей. положительное число, обязательный параметр (Положительное число,
            обязательный параметр).
            </param>
            <param name="listIds">
            Идентификаторы списков друзей, в которые нужно добавить пользователя. список
            положительных чисел,
            разделенных запятыми (Список положительных чисел, разделенных запятыми).
            </param>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/friends.edit
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFriendsCategoryAsync.GetRecentAsync(System.Nullable{System.Int64})">
            <summary>
            Возвращает список идентификаторов недавно добавленных друзей текущего
            пользователя.
            </summary>
            <param name="count">
            Максимальное количество недавно добавленных друзей, которое необходимо
            получить. положительное
            число, по умолчанию 100, максимальное значение 1000 (Положительное число, по
            умолчанию 100, максимальное значение
            1000).
            </param>
            <returns>
            После успешного выполнения возвращает отсортированный в антихронологическом
            порядке список идентификаторов (id)
            недавно добавленных друзей текущего пользователя.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/friends.getRecent
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFriendsCategoryAsync.GetRequestsAsync(VkNet.Model.RequestParams.FriendsGetRequestsParams)">
            <summary>
            Возвращает информацию о полученных или отправленных заявках на добавление в
            друзья для текущего пользователя.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <returns>
            Если не установлен параметр need_mutual, то в случае успеха возвращает
            отсортированный в антихронологическом
            порядке по времени подачи заявки список идентификаторов (id) пользователей
            (кому или от кого пришла заявка).
            Если установлен параметр need_mutual, то в случае успеха возвращает
            отсортированный в антихронологическом порядке
            по времени подачи заявки массив объектов, содержащих информацию о заявках на
            добавление в друзья.
            Каждый из объектов содержит поле uid, являющийся идентификатором пользователя.
            При наличии общих друзей, в объекте будет содержаться поле mutual, в котором
            будет находиться список
            идентификаторов общих друзей.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/friends.getRequests
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFriendsCategoryAsync.GetRequestsExtendedAsync(VkNet.Model.RequestParams.FriendsGetRequestsParams)">
            <summary>
            Возвращает информацию о полученных или отправленных заявках на добавление в
            друзья для текущего пользователя.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <returns>
            Если не установлен параметр need_mutual, то в случае успеха возвращает
            отсортированный в антихронологическом
            порядке по времени подачи заявки список идентификаторов (id) пользователей
            (кому или от кого пришла заявка).
            Если установлен параметр need_mutual, то в случае успеха возвращает
            отсортированный в антихронологическом порядке
            по времени подачи заявки массив объектов, содержащих информацию о заявках на
            добавление в друзья.
            Каждый из объектов содержит поле uid, являющийся идентификатором пользователя.
            При наличии общих друзей, в объекте будет содержаться поле mutual, в котором
            будет находиться список
            идентификаторов общих друзей.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/friends.getRequests
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFriendsCategoryAsync.GetSuggestionsAsync(VkNet.Enums.SafetyEnums.FriendsFilter,System.Nullable{System.Int64},System.Nullable{System.Int64},VkNet.Enums.Filters.UsersFields,VkNet.Enums.SafetyEnums.NameCase)">
            <summary>
            Возвращает список профилей пользователей, которые могут быть друзьями текущего
            пользователя.
            </summary>
            <param name="filter">
            Типы предлагаемых друзей, которые нужно вернуть,
            перечисленные через запятую.
            </param>
            <param name="count">
            Количество рекомендаций, которое необходимо вернуть. положительное число,
            максимальное значение
            500, по умолчанию 500 (положительное число, максимальное значение 500, по
            умолчанию 500).
            </param>
            <param name="offset">
            Смещение, необходимое для выбора определённого подмножества списка.
            положительное число
            (положительное число).
            </param>
            <param name="fields">
            Список дополнительных полей, которые необходимо вернуть. Доступные значения:
            nickname,
            screen_name, sex, bdate, city, country, timezone, photo_50, photo_100,
            photo_200_orig, has_mobile, contacts,
            education, online, counters, relation, last_seen, status,
            can_write_private_message, can_see_all_posts, can_post,
            universities список строк, разделенных через запятую(список строк, разделенных
            через запятую).
            </param>
            <param name="nameCase">
            Падеж для склонения имени и фамилии пользователя. Возможные значения:
            именительный – nom,
            родительный – gen, дательный – dat, винительный – acc, творительный – ins,
            предложный – abl. По умолчанию nom.
            строка (строка).
            </param>
            <returns>
            После успешного выполнения возвращает список объектов пользователей с
            дополнительным полем found_with для
            пользователей, найденных через импорт контактов. Для некоторых пользователей,
            которые были найдены давно поле
            found_with может отсутствовать.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/friends.getSuggestions
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFriendsCategoryAsync.GetByPhonesAsync(System.Collections.Generic.IEnumerable{System.String},VkNet.Enums.Filters.ProfileFields)">
            <summary>
            Возвращает список друзей пользователя, у которых завалидированные или указанные
            в профиле телефонные номера входят
            в заданный список.
            </summary>
            <param name="phones">
            Список телефонных номеров в формате MSISDN, разделеннных запятыми. Например
            +79219876543,+79111234567
            Максимальное количество номеров в списке — 1000. список строк, разделенных
            через запятую (Список строк, разделенных
            через запятую).
            </param>
            <param name="fields">
            Список дополнительных полей, которые необходимо вернуть.
            Доступные значения: nickname, screen_name, sex, bdate, city, country, timezone,
            photo_50, photo_100,
            photo_200_orig, has_mobile, contacts, education, online, counters, relation,
            last_seen, status,
            can_write_private_message, can_see_all_posts, can_post, universities список
            строк, разделенных через запятую
            (Список строк, разделенных через запятую).
            </param>
            <returns>
            После успешного выполнения возвращает список объектов пользователей с
            дополнительным полем phone, в котором
            содержится номер из списка заданных для поиска номеров.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/friends.getByPhones
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFriendsCategoryAsync.SearchAsync(VkNet.Model.RequestParams.FriendsSearchParams)">
            <summary>
            Позволяет искать по списку друзей пользователей.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <returns>
            После успешного выполнения метод  возвращает список объектов пользователей.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/friends.search
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IGiftsCategoryAsync">
            <summary>
            Асинхронные методы для работы с подарками.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IGiftsCategoryAsync.GetAsync(System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает список полученных подарков пользователя.
            </summary>
            <param name="userId">
            Идентификатор пользователя, для которого необходимо
            получить список подарков. По умолчанию идентификатор текущего пользователя.
            </param>
            <param name="count"> Количество подарков, которое нужно вернуть. </param>
            <param name="offset">
            Смещение, необходимое для выборки определенного
            подмножества подарков.
            </param>
            <returns>
            В случае успешного вступления в группу метод вернёт <c> true </c>, иначе
            <c> false </c>.
            Возвращает список объектов gift_item, каждый из которых содержит следующие
            поля:
            id — идентификатор полученного подарка;
            from_id — идентификатор пользователя, который отправил подарок, или 0, если
            отправитель скрыт;
            message — текст сообщения, приложенного к подарку;
            date — время отправки подарка в формате unixtime;
            gift — объект подарка в следующем формате:
            id — номер подарка;
            thumb_256 — url изображения подарка размером 256x256px;
            thumb_96 — url изображения подарка размером 96x96px;
            thumb_48 — url изображения подарка размером 48x48px;
            privacy — значение приватности подарка(только для текущего пользователя;
            возможные значения: 0 — имя отправителя и
            сообщение видно всем; 1 — имя отправителя видно всем, сообщение видно только
            получателю; 2 — имя отправителя
            скрыто, сообщение видно только получателю).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/gifts.get
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IGroupsCategoryAsync">
            <summary>
            Асинхронные методы для работы с сообществами (группами).
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.JoinAsync(System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <summary>
            Данный метод позволяет вступить в группу, публичную страницу, а также
            подтвердить участие во встрече.
            </summary>
            <param name="groupId">
            Идентификатор сообщества. положительное число
            (Положительное число).
            </param>
            <param name="notSure">
            Опциональный параметр, учитываемый, если group_id принадлежит встрече. 1 —
            Возможно пойду. 0 —
            Точно пойду. По умолчанию 0. строка (Строка).
            </param>
            <returns>
            В случае успешного вступления метод вернёт 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.join
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.LeaveAsync(System.Int64)">
            <summary>
            Позволяет покинуть сообщество.
            </summary>
            <param name="groupId">
            Идентификатор сообщества. положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.leave
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.GetAsync(VkNet.Model.RequestParams.GroupsGetParams,System.Boolean)">
            <summary>
            Возвращает список сообществ указанного пользователя.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            После успешного выполнения возвращает список идентификаторов сообществ id, в
            которых состоит пользователь user_id.
            Если был задан параметр extended=1,  возвращает список объектов group.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.GetByIdAsync(System.Collections.Generic.IEnumerable{System.String},System.String,VkNet.Enums.Filters.GroupsFields,System.Boolean)">
            <summary>
            Возвращает информацию о заданном сообществе или о нескольких сообществах.
            </summary>
            <param name="groupIds">
            Идентификаторы или короткие имена сообществ. Максимальное число идентификаторов
            — 500. список
            строк, разделенных через запятую (Список строк, разделенных через запятую).
            </param>
            <param name="groupId">
            Идентификатор или короткое имя сообщества. строка
            (Строка).
            </param>
            <param name="fields">
            Список дополнительных полей, которые необходимо вернуть. Возможные значения:
            city, country, place, description,
            wiki_page, members_count, counters, start_date, finish_date, can_post,
            can_see_all_posts, activity, status,
            contacts, links, fixed_post, verified, site,ban_info.
            Обратите внимание, для получения некоторых полей требуется право доступа
            groups. Подробнее см. описание полей
            объекта group список строк, разделенных через запятую (Список строк,
            разделенных через запятую).
            </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            После успешного выполнения возвращает массив объектов group.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.getById
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.GetMembersAsync(VkNet.Model.RequestParams.GroupsGetMembersParams,System.Boolean)">
            <summary>
            Возвращает список участников сообщества.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            Возвращает общее количество участников сообщества count и список
            идентификаторов пользователей items.
            Если был передан параметр filter=managers, возвращается дополнительное поле
            role, которое содержит уровень
            полномочий руководителя:
            moderator — модератор;
            editor — редактор;
            administrator — администратор;
            creator — создатель сообщества.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.getMembers
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.IsMemberAsync(System.String,System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Возвращает информацию о том, является ли пользователь участником сообщества.
            </summary>
            <param name="groupId">
            Идентификатор или короткое имя сообщества. строка, обязательный параметр
            (Строка, обязательный
            параметр).
            </param>
            <param name="userId">
            Идентификатор пользователя. положительное число
            (Положительное число).
            </param>
            <param name="userIds">
            Идентификаторы пользователей, не более 500. список положительных чисел,
            разделенных запятыми
            (Список положительных чисел, разделенных запятыми).
            </param>
            <param name="extended">
            1  — вернуть ответ в расширенной форме. По умолчанию — 0. флаг, может принимать
            значения 1 или 0
            (Флаг, может принимать значения 1 или 0).
            </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            возвращает <c> true </c> в случае, если пользователь с идентификатором user_id
            является участником сообщества с
            идентификатором group_id, иначе 0.
            При использовании параметра extended Возвращает объект, который содержит поля:
            member — является ли пользователь участником сообщества;
            и может содержать поля:
            request — есть ли непринятая заявка от пользователя на вступление в группу
            (такую заявку можно отозвать методом
            groups.leave);
            invitation — приглашён ли пользователь в группу или встречу.
            При передаче нескольких идентификаторов Возвращает результат в виде массива
            объектов, в которых есть поля user_id и
            member.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.isMember
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.SearchAsync(VkNet.Model.RequestParams.GroupsSearchParams,System.Boolean)">
            <summary>
            Осуществляет поиск сообществ по заданной подстроке.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            После успешного выполнения возвращает список объектов group.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.search
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.GetInvitesAsync(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <summary>
            Данный метод возвращает список приглашений в сообщества и встречи текущего
            пользователя.
            </summary>
            <param name="offset">
            Смещение, необходимое для выборки определённого подмножества приглашений.
            положительное число
            (Положительное число).
            </param>
            <param name="count">
            Количество приглашений, которое необходимо вернуть. положительное число, по
            умолчанию 20
            (Положительное число, по умолчанию 20).
            </param>
            <param name="extended">
            1 — вернуть дополнительную информацию о пользователях, отправлявших
            приглашения. По умолчанию —
            0. флаг, может принимать значения 1 или 0 (Флаг, может принимать значения 1 или
            0).
            </param>
            <returns>
            После успешного выполнения возвращает список объектов сообществ с
            дополнительным полем invited_by, содержащим
            идентификатор пользователя, который отправил приглашение.
            Если был передан параметр extended=1, дополнительно будет возвращен список
            profiles пользователей, отправивших
            приглашения. Каждый объект в списке содержит поля id, first_name, last_name.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.getInvites
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.BanUserAsync(VkNet.Model.RequestParams.GroupsBanUserParams)">
            <summary>
            Добавляет пользователя в черный список сообщества.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.banUser
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.GetBannedAsync(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},VkNet.Enums.Filters.GroupsFields,System.Nullable{System.Int64})">
            <summary>
            Возвращает список забаненных пользователей в сообществе.
            </summary>
            <param name="groupId">
            Идентификатор сообщества. положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <param name="offset">
            Смещение, необходимое для выборки определенного подмножества черного списка.
            положительное число
            (Положительное число).
            </param>
            <param name="count">
            Количество пользователей, которое необходимо вернуть. положительное число, по
            умолчанию 20,
            максимальное значение 200 (Положительное число, по умолчанию 20, максимальное
            значение 200).
            </param>
            <param name="fields">
            Список дополнительных полей, которые необходимо вернуть.
            Доступные значения: sex, bdate, city, country, photo_50, photo_100,
            photo_200_orig, photo_200, photo_400_orig,
            photo_max, photo_max_orig, online, online_mobile, lists, domain, has_mobile,
            contacts, connections, site,
            education, universities, schools, can_post, can_see_all_posts, can_see_audio,
            can_write_private_message, status,
            last_seen, common_count, relation, relatives, counters список строк,
            разделенных через запятую (Список строк,
            разделенных через запятую).
            </param>
            <param name="ownerId"> целое число </param>
            <returns>
            После успешного выполнения возвращает список объектов user с дополнительным
            полем ban_info.
            Объект ban_info — информация о внесении в черный список сообщества.
            admin_id идентификатор администратора, который добавил пользователя в черный
            список.
            положительное число date дата добавления пользователя в черный список в формате
            Unixtime.
            положительное число reason причина добавления пользователя в черный список.
            Возможные значения:
            0 — другое (по умолчанию);
            1 — спам;
            2 — оскорбление участников;
            3 — нецензурные выражения;
            4 — сообщения не по теме.
            int (числовое значение) comment текст комментария.
            строка end_date дата окончания блокировки (0 — блокировка вечная).
            int (числовое значение).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.getBanned
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.UnbanUserAsync(System.Int64,System.Int64)">
            <summary>
            Убирает пользователя из черного списка сообщества.
            </summary>
            <param name="groupId"> Идентификатор сообщества </param>
            <param name="userId">
            Идентификатор пользователя, которого нужно убрать из
            черного списка
            </param>
            <returns> После успешного выполнения возвращает <c> true </c>. </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.unbanUser
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.EditManagerAsync(VkNet.Model.RequestParams.GroupsEditManagerParams)">
            <summary>
            Позволяет назначить/разжаловать руководителя в сообществе или изменить уровень
            его полномочий.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <returns>
            В случае успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.editManager
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.GetSettingsAsync(System.UInt64)">
            <summary>
            Позволяет получать данные, необходимые для отображения страницы редактирования
            данных сообщества.
            </summary>
            <param name="groupId">
            Идентификатор сообщества, данные которого необходимо получить. положительное
            число, обязательный
            параметр (Положительное число, обязательный параметр).
            </param>
            <returns>
            В случае успешного выполнения метод вернет объект, содержащий данные
            сообщества, которые позволят отобразить форму
            редактирования для метода groups.edit.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.getSettings
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.EditAsync(VkNet.Model.RequestParams.GroupsEditParams)">
            <summary>
            Редактирует сообщество.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            В случае успеха возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.edit
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.EditPlaceAsync(System.Int64,VkNet.Model.Place)">
            <summary>
            Позволяет редактировать информацию о месте группы.
            Для удаления информации о местоположении нужно передать только group_id.
            Для обновления данных о местоположении необходимо указать как минимум id
            страны, широту и долготу.
            </summary>
            <param name="groupId">
            Идентификатор группы, информацию о месте которой нужно
            отредактировать.
            </param>
            <param name="place"> Местоположение. </param>
            <remarks>
            Для того, чтобы воспользоваться этим методом Вы должны быть администратором
            группы.
            Страница документации ВКонтакте https://vk.com/dev/groups.editPlace
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.GetInvitedUsersAsync(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},VkNet.Enums.Filters.UsersFields,VkNet.Enums.SafetyEnums.NameCase)">
            <summary>
            Возвращает список пользователей, которые были приглашены в группу.
            </summary>
            <param name="groupId">
            Идентификатор группы, список приглашенных в которую пользователей нужно
            вернуть. положительное
            число, обязательный параметр (Положительное число, обязательный параметр).
            </param>
            <param name="offset">
            Смещение, необходимое для выборки определённого подмножества пользователей.
            положительное число
            (Положительное число).
            </param>
            <param name="count">
            Количество пользователей, информацию о которых нужно вернуть. положительное
            число, по умолчанию 20
            (Положительное число, по умолчанию 20).
            </param>
            <param name="fields">
            Список дополнительных полей, которые необходимо вернуть.
            Доступные значения: nickname, domain, sex, bdate, city, country, timezone,
            photo_50, photo_100, photo_200_orig,
            has_mobile, contacts, education, online, relation, last_seen, status,
            can_write_private_message, can_see_all_posts,
            can_post, universities список строк, разделенных через запятую (Список строк,
            разделенных через запятую).
            </param>
            <param name="nameCase">
            Падеж для склонения имени и фамилии пользователя. Возможные значения:
            именительный – nom,
            родительный – gen, дательный – dat, винительный – acc, творительный – ins,
            предложный – abl. По умолчанию nom.
            строка (Строка).
            </param>
            <returns> </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.getInvitedUsers
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.InviteAsync(System.Int64,System.Int64,System.Nullable{System.Int64},System.String)">
            <summary>
            Позволяет приглашать друзей в группу.
            </summary>
            <param name="groupId">
            Идентификатор группы, в которую необходимо выслать приглашение положительное
            число, обязательный
            параметр (Положительное число, обязательный параметр).
            </param>
            <param name="userId">
            Идентификатор пользователя, которому необходимо выслать приглашение
            положительное число,
            обязательный параметр (Положительное число, обязательный параметр).
            </param>
            <param name="captchaSid"> Идентификатор капчи </param>
            <param name="captchaKey"> Код введенный пользователем </param>
            <returns>
            В случае успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.invite
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.AddLinkAsync(System.Int64,System.Uri,System.String)">
            <summary>
            Позволяет добавлять ссылки в сообщество.
            </summary>
            <param name="groupId">
            Идентификатор сообщества, в которое добавляется ссылка положительное число,
            обязательный параметр
            (Положительное число, обязательный параметр).
            </param>
            <param name="link">
            Адрес ссылки строка, обязательный параметр (Строка,
            обязательный параметр).
            </param>
            <param name="text"> Текст ссылки строка (Строка). </param>
            <returns>
            В случае успешного выполнения возвращает объект со следующими полями:
            id — идентификатор ссылки;
            url — URL ссылки;
            name — название ссылки в блоке сообщества;
            edit_title — возвращается 1, если можно редактировать название ссылки (для
            внешних ссылок);
            desc — описание ссылки;
            image_processing — возвращается 1, если превью находится в процессе обработки.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.addLink
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.DeleteLinkAsync(System.Int64,System.UInt64)">
            <summary>
            Позволяет удалить ссылки из сообщества.
            </summary>
            <param name="groupId">
            Идентификатор сообщества, ссылки которого нужно удалить положительное число,
            обязательный
            параметр (Положительное число, обязательный параметр).
            </param>
            <param name="linkId">
            Идентификатор ссылки, которую необходимо удалить положительное число,
            обязательный параметр
            (Положительное число, обязательный параметр).
            </param>
            <returns>
            В случае успешного выполнения метод возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.deleteLink
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.EditLinkAsync(System.Int64,System.UInt64,System.String)">
            <summary>
            Позволяет редактировать ссылки в сообществе.
            </summary>
            <param name="groupId">
            Идентификатор сообщества, в которое добавляется ссылка положительное число,
            обязательный параметр
            (Положительное число, обязательный параметр).
            </param>
            <param name="linkId">
            Идентификатор редактируемой ссылки положительное число, обязательный параметр
            (Положительное
            число, обязательный параметр).
            </param>
            <param name="text"> Новое описание ссылки строка (Строка). </param>
            <returns>
            В случае успешного редактирования ссылки метод возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.editLink
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.ReorderLinkAsync(System.Int64,System.Int64,System.Nullable{System.Int64})">
            <summary>
            Позволяет менять местоположение ссылки в списке.
            </summary>
            <param name="groupId">
            Идентификатор группы, внутри которой перемещается ссылка положительное число,
            обязательный
            параметр (Положительное число, обязательный параметр).
            </param>
            <param name="linkId">
            Идентификатор ссылки, которую необходимо переместить положительное число,
            обязательный параметр
            (Положительное число, обязательный параметр).
            </param>
            <param name="after">
            Идентификатор ссылки после которой необходимо разместить перемещаемую ссылку. 0
            – если ссылку нужно
            разместить в начале списка. положительное число (Положительное число).
            </param>
            <returns>
            В случае успешного выполнение метод возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.reorderLink
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.RemoveUserAsync(System.Int64,System.Int64)">
            <summary>
            Позволяет исключить пользователя из группы или отклонить заявку на вступление.
            </summary>
            <param name="groupId">
            Идентификатор группы, из которой необходимо исключить
            пользователя.
            </param>
            <param name="userId"> Идентификатор пользователя, которого нужно исключить. </param>
            <returns>
            В случае успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/groups.removeUser
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.ApproveRequestAsync(System.Int64,System.Int64)">
            <summary>
            Позволяет одобрить заявку в группу от пользователя.
            </summary>
            <param name="groupId">
            Идентификатор группы, заявку в которую необходимо
            одобрить.
            </param>
            <param name="userId">
            Идентификатор пользователя, заявку которого необходимо
            одобрить.
            </param>
            <returns>
            В случае успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/groups.approveRequest
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.CreateAsync(System.String,System.String,VkNet.Enums.SafetyEnums.GroupType,System.Nullable{VkNet.Enums.Filters.GroupSubType},System.Nullable{System.UInt32})">
            <summary>
            Создает новое сообщество.
            </summary>
            <param name="title">
            Название сообщества. строка, обязательный параметр (Строка, обязательный
            параметр).
            </param>
            <param name="description">
            Описание сообщества, (не учитывается при
            type=public). строка (Строка).
            </param>
            <param name="type">
            Тип создаваемого сообщества:
            group — группа;
            event — мероприятие;
            public — публичная страница.
            строка, по умолчанию group (Строка, по умолчанию group).
            </param>
            <param name="subtype">
            Вид публичной страницы (только при type=public):
            1 — место или небольшая компания;
            2 — компания, организация или веб-сайт;
            3 — известная личность или коллектив;
            4 — произведение или продукция.
            положительное число (Положительное число).
            </param>
            <param name="publicCategory">
            Категория публичной страницы (только для type =
            public).
            </param>
            <returns>
            Возвращает идентификатор созданного сообщества.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.create
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.GetRequestsAsync(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},VkNet.Enums.Filters.UsersFields)">
            <summary>
            Возвращает список заявок на вступление в сообщество.
            </summary>
            <param name="groupId">
            Идентификатор сообщества (указывается без знака «минус»). положительное число,
            обязательный
            параметр (Положительное число, обязательный параметр).
            </param>
            <param name="offset">
            Смещение, необходимое для выборки определенного подмножества результатов. По
            умолчанию — 0.
            положительное число (Положительное число).
            </param>
            <param name="count">
            Число результатов, которые необходимо вернуть. положительное число, по
            умолчанию 20, максимальное
            значение 200 (Положительное число, по умолчанию 20, максимальное значение 200).
            </param>
            <param name="fields">
            Список дополнительных полей профилей, которые необходимо вернуть. См. подробное
            описание.
            Доступные значения: sex, bdate, city, country, photo_50, photo_100,
            photo_200_orig, photo_200, photo_400_orig,
            photo_max, photo_max_orig, online, online_mobile, domain, has_mobile, contacts,
            connections, site, education,
            universities, schools, can_post, can_see_all_posts, can_see_audio,
            can_write_private_message, status, last_seen,
            common_count, relation, relatives, counters, screen_name, maiden_name,
            timezone, occupation,activities, interests,
            music, movies, tv, books, games, about, quotes список строк, разделенных через
            запятую (Список строк, разделенных
            через запятую).
            </param>
            <returns>
            Возвращает список идентификаторов пользователей, отправивших заявки на
            вступление в сообщество.
            Если было передано значение в параметре fields, возвращается список объектов
            пользователей.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.getRequests
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.GetCatalogAsync(System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <summary>
            Возвращает список сообществ выбранной категории каталога.
            </summary>
            <param name="categoryId">
            Идентификатор категории, полученный в методе groups.getCatalogInfo.
            положительное число
            (Положительное число).
            </param>
            <param name="subcategoryId">
            Идентификатор подкатегории, полученный в методе groups.getCatalogInfo.
            положительное число,
            максимальное значение 99 (Положительное число, максимальное значение 99).
            </param>
            <returns>
            Возвращает список объектов сообществ в соответствии с выбранной категорией
            каталога.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.getCatalog
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.GetCatalogInfoAsync(System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Возвращает список категорий для каталога сообществ.
            </summary>
            <param name="extended">
            1 — вернуть информацию о количестве сообществ в категории и три сообщества для
            предпросмотра.
            По умолчанию 0. флаг, может принимать значения 1 или 0, по умолчанию 0,
            доступен начиная с версии 5.37 (Флаг, может
            принимать значения 1 или 0, по умолчанию 0, доступен начиная с версии 5.37).
            </param>
            <param name="subcategories">
            1 — вернуть информацию об подкатегориях.
            По умолчанию 0. флаг, может принимать значения 1 или 0, по умолчанию 0,
            доступен начиная с версии 5.37 (Флаг, может
            принимать значения 1 или 0, по умолчанию 0, доступен начиная с версии 5.37).
            </param>
            <returns>
            После успешного выполнения возвращает поле enabled (0 — каталог недоступен для
            пользователя, 1 — каталог доступен),
            и, если enabled=1, массив categories объектов — категорий товаров.
            Объект массива categories — категория каталога товаров.
            id идентификатор категории.
            положительное число name название категории.
            строка subcategories поле возвращается при использовании subcategories=1.
            Массив объектов-подкатегорий. Каждый из
            объектов содержит поля id и name, содержащие идентификатор и название
            подкатегории.
            Дополнительные поля (extended=1)
            page_count количество сообществ в категории.
            положительное число page_previews массив объектов сообществ для предпросмотра.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.getCatalogInfo
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.AddCallbackServerAsync(System.UInt64,System.String,System.String,System.String)">
            <summary>
            Добавляет сервер для Callback API в сообщество.
            </summary>
            <param name="groupId"> Идентификатор сообщества. </param>
            <param name="url"> URL сервера. </param>
            <param name="title"> Название сервера. </param>
            <param name="secretKey"> Секретный ключ. </param>
            <returns>
            После успешного выполнения возвращает идентификатор добавленного сервера в поле
            server_id (integer).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.addCallbackServer
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.DeleteCallbackServerAsync(System.UInt64,System.UInt64)">
            <summary>
            Удаляет сервер для Callback API из сообщества.
            </summary>
            <param name="groupId"> Идентификатор сообщества. </param>
            <param name="serverId"> идентификатор сервера, который нужно удалить. </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.deleteCallbackServer
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.EditCallbackServerAsync(System.UInt64,System.UInt64,System.String,System.String,System.String)">
            <summary>
            Редактирует данные сервера для Callback API в сообществе.
            </summary>
            <param name="groupId"> Идентификатор сообщества. </param>
            <param name="serverId">
            идентификатор сервера, данные которого нужно
            отредактировать
            </param>
            <param name="url"> URL сервера. </param>
            <param name="title"> Название сервера. </param>
            <param name="secretKey"> Секретный ключ. </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.editCallbackServer
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.GetCallbackConfirmationCodeAsync(System.UInt64)">
            <summary>
            Позволяет получить строку, необходимую для подтверждения адреса сервера в
            Callback API.
            </summary>
            <param name="groupId"> Идентификатор сообщества. </param>
            <returns>
            Возвращает строку, которую необходимо использовать в качестве ответа на
            уведомление с типом "confirmation"
            для подтверждения адреса сервера в Callback API.
            Обратите внимание, что код, возвращаемый методом, можно использовать только для
            настройки сервера средствами API.
            В настройках Вашего сообщества на сайте ВКонтакте код будет отличаться.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.editCallbackServer
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.GetCallbackServersAsync(System.UInt64,System.Collections.Generic.IEnumerable{System.UInt64})">
            <summary>
            Получает информацию о серверах для Callback API в сообществе.
            </summary>
            <param name="groupId"> Идентификатор сообщества. </param>
            <param name="serverIds">
            Идентификаторы серверов, данные о которых нужно получить.
            По умолчанию возвращаются все серверы.
            </param>
            <returns>
            Возвращает число серверов в поле count (integer) и массив объектов items с
            данными о серверах.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.getCallbackServers
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.GetCallbackSettingsAsync(System.UInt64,System.UInt64)">
            <summary>
            Позволяет получить настройки уведомлений Callback API для сообщества.
            </summary>
            <param name="groupId"> Идентификатор сообщества. </param>
            <param name="serverId"> Идентификатор сервера. </param>
            <returns> </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.getCallbackSettings
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.SetCallbackSettingsAsync(VkNet.Model.RequestParams.CallbackServerParams)">
            <summary>
            Позволяет задать настройки уведомлений о событиях в Callback API.
            </summary>
            <param name="params">
            Параметры настройки уведомлений о событиях в Callback
            API.
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.setCallbackSettings
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.GetLongPollServerAsync(System.UInt64)">
            <summary>
            Возвращает данные для подключения к Bots Longpoll API.
            </summary>
            <param name="groupId">
            Идентификатор сообщества. положительное число, обязательный параметр
            </param>
            <returns>
            Возвращает объект, который содержит следующие поля:
            key (string) — ключ;
            server (string) — url сервера;
            ts (integer) — timestamp.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.getLongPollServer
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.DisableOnlineAsync(System.UInt64)">
            <summary>
            Выключает статус «онлайн» в сообществе.
            </summary>
            <param name = "groupId">
            Идентификатор сообщества. положительное число, обязательный параметр
            </param>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.disableOnline
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.EnableOnlineAsync(System.UInt64)">
            <summary>
            Включает статус «онлайн» в сообществе.
            </summary>
            <param name = "groupId">
            Идентификатор сообщества. положительное число, обязательный параметр
            </param>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.enableOnline
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.GetBotsLongPollHistoryAsync(VkNet.Model.RequestParams.BotsLongPollHistoryParams)">
            <summary>
            Возвращаем обновления событий группы
            </summary>
            <param name="params">Параметры запроса к BotsLongPoll API</param>
            <returns>
            Новые события в группе
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/bots_longpoll
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.AddAddressAsync(VkNet.Model.RequestParams.Groups.AddAddressParams)">
            <summary>
            Позволяет добавить адрес в сообщество.
            Список адресов может быть получен методом groups.getAddresses.
            Для того, чтобы воспользоваться этим методом, Вы должны быть администратором сообщества
            </summary>
            <param name = "params">
            Входные параметры запроса.
            </param>
            <returns>
            Данные о добавленном адресе сообщества
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.addAddress
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.EditAddressAsync(VkNet.Model.RequestParams.Groups.EditAddressParams)">
            <summary>
            Позволяет отредактировать адрес в сообществе.
            Список адресов может быть получен методом groups.getAddresses.
            Для того, чтобы воспользоваться этим методом, Вы должны быть администратором сообщества
            </summary>
            <param name = "params">
            Входные параметры запроса.
            </param>
            <returns>
            Данные об адресе отредактированного сообщества
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.editAddress
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.DeleteAddressAsync(System.UInt64,System.UInt64)">
            <summary>
            Позволяет удалить адрес в сообществе.
            </summary>
            <param name = "groupId">
            Id группы положительное число, обязательный параметр
            </param>
            <param name = "addressId">
            Id адреса положительное число, обязательный параметр
            </param>
            <returns>
            После успешного выполнения возвращает <c>true</c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.deleteAddress
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.GetAddressesAsync(VkNet.Model.RequestParams.Groups.GetAddressesParams)">
            <summary>
            Получить данные об адресах.
            </summary>
            <param name = "params">
            Входные параметры запроса.
            </param>
            <returns>
            Коллекция адресов сообщества
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.getAddresses
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.GetOnlineStatusAsync(System.UInt64)">
            <summary>
            Получает информацию о статусе «онлайн» в сообществе.
            </summary>
            <param name = "groupId">
            Идентификатор сообщества. положительное число, обязательный параметр
            </param>
            <returns>
            Возвращает объект, который содержит поля:
            status — статус сообщества. Возможные значения:
            none — сообщество не онлайн;
            online — сообщество онлайн (отвечает мгновенно);
            answer_mark — сообщество отвечает быстро.
            minutes — оценка времени ответа в минутах (для status = answer_mark).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.getOnlineStatus
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.GetTokenPermissionsAsync">
            <summary>
            Возвращает настройки прав для ключа доступа сообщества.
            </summary>
            <returns>
            Возвращает объект, который содержит поля:
            mask (integer) — битовая маска ключа доступа;
            settings (array) — массив объектов, описывающих права доступа. Каждый объект в массиве содержит поля:
            setting (integer) — битовая маска права доступа;
            name (string) — название права доступа.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.getTokenPermissions
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.SetLongPollSettingsAsync(VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams)">
            <summary>
            Задаёт настройки для Bots Long Poll API в сообществе.
            </summary>
            <param name = "params">
            Входные параметры запроса.
            </param>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.setLongPollSettings
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategoryAsync.GetLongPollSettingsAsync(System.UInt64)">
            <summary>
            Получает настройки Bots Longpoll API для сообщества.
            </summary>
            <param name = "groupId">
            Идентификатор сообщества. положительное число, обязательный параметр
            </param>
            <returns>
            Возвращает объект, который содержит следующие поля:
            is_enabled (boolean) — true, если Bots Longpoll включен в сообществе.
            events (object) — настройки Bots Longpoll. объект, содержащий настройки уведомлений в формате «название события»
            : «статус» (0 — уведомления о событии выключены, 1 — уведомления о событии включены).
            Объект содержит следующие поля:
            message_new новое сообщение
            integer, [0,1] message_reply новое исходящее сообщение
            integer, [0,1] message_allow новая подписка на сообщения
            integer, [0,1] message_deny новый запрет сообщений
            integer, [0,1] photo_new добавление новой фотографии
            integer, [0,1] audio_new добавление новой аудиозаписи
            integer, [0,1] video_new добавление новой видеозаписи
            integer, [0,1] wall_reply_new добавление нового комментария на стене
            integer, [0,1] wall_reply_edit редактирование комментария на стене
            integer, [0,1] wall_reply_delete удаление комментария на стене
            integer, [0,1] wall_post_new добавление новой записи на стене
            integer, [0,1] wall_repost новый репост записи на стене
            integer, [0,1] board_post_new добавление нового комментария в обсуждении
            integer, [0,1] board_post_edit редактирование комментария в обсуждении
            integer, [0,1] board_post_delete удаление комментария в обсуждении
            integer, [0,1] board_post_restore восстановление комментария в обсуждении
            integer, [0,1] photo_comment_new добавление нового комментария к фото
            integer, [0,1] photo_comment_edit редактирование комментария к фото
            integer, [0,1] photo_comment_delete удаление комментария к фото
            integer, [0,1] photo_comment_restore восстановление комментария к фото
            integer, [0,1] video_comment_new добавление нового комментария к видео
            integer, [0,1] video_comment_edit редактирование комментария к видео
            integer, [0,1] video_comment_delete удаление комментария к видео
            integer, [0,1] video_comment_restore восстановление комментария к видео
            integer, [0,1] market_comment_new добавление нового комментария к товару
            integer, [0,1] market_comment_edit редактирование комментария к товару
            integer, [0,1] market_comment_delete удаление комментария к товару
            integer, [0,1] market_comment_restore восстановление удалённого комментария к товару
            integer, [0,1] poll_vote_new новый голос в публичном опросе
            integer, [0,1] group_join вступление в сообщество
            integer, [0,1] group_leave выход участника из сообщества
            integer, [0,1] user_block занесение пользователя в черный список
            integer, [0,1] user_unblock удаление пользователя из черного списка
            integer, [0,1] group_change_settings изменение настроек сообщества
            integer, [0,1] group_change_photo изменение главной фотографии
            integer, [0,1] group_officers_edit изменение руководства сообщества
            integer, [0,1]
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.getLongPollSettings
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.ILeadsCategoryAsync">
            <summary>
            Leads При подключении к сервису рекламных акций партнёр получает доступ в
            специальный раздел для создания и
            управления рекламными акциями (офферами).
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.ILeadsCategoryAsync.CheckUserAsync(VkNet.Model.RequestParams.Leads.CheckUserParams)">
            <summary>
            Проверяет, доступна ли рекламная акция пользователю.
            </summary>
            <param name="checkUserParams">
            Входные параметры запроса.
            </param>
            <returns>
            Возвращает объект, содержащий поля:
            result — признак того, может ли пользователь начать акцию (true/false), а
            также, в случае auto_start=1, признак
            успешного старта акции,
            reason — в случае result=false, описание причины, по которой пользователь не
            может начать акцию,
            start_link — в случае result=true и auto_start=0, ссылка, по которой должен
            перейти пользователь для начала акции.
            sid — в случае result=true и auto_start=1, идентификатор сессии начатой акции.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/leads.checkUser
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.ILeadsCategoryAsync.CompleteAsync(System.String,System.String,System.String)">
            <summary>
            Завершает начатую пользователем рекламную акцию, используя сессию и секретный
            ключ.
            </summary>
            <param name="vkSid">
            Cессия, полученная GET параметром при старте акции. строка, обязательный
            параметр
            </param>
            <param name="secret">
            Секретный ключ, доступный в интерфейсе тестирования рекламной акции. строка,
            обязательный параметр
            </param>
            <param name="comment">
            Комментарий строка
            </param>
            <returns>
            При успешном завершении оффера будет возвращен объект, содержащий следующие
            поля:
            limit — ограничение, установленное у текущего оффера;
            spent — количество потраченных на акцию голосов;
            cost — стоимость одной выполненной акции;
            test_mode — режим транзакции (1 — тестовый, 0 — реальный);
            success — результат выполнения транзакции (всегда равно 1).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/leads.complete
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.ILeadsCategoryAsync.GetStatsAsync(System.UInt64,System.String,System.String,System.String)">
            <summary>
            Возвращает статистику по рекламной акции.
            </summary>
            <param name="leadId">
            Идентификатор рекламной акции, доступный в интерфейсе тестирования рекламных
            акций. положительное число,
            обязательный параметр
            </param>
            <param name="secret">
            Секретный ключ, доступный в интерфейсе тестирования рекламной акции. строка
            </param>
            <param name="dateStart">
            Идентификатор дня, начиная с которого необходимо вернуть статистику в формате
            Y-m-d (8-и значное число). Например,
            2011-09-17. строка
            </param>
            <param name="dateEnd">
            Идентификатор дня, до которого необходимо вернуть статистику в формате Y-m-d
            (8-и значное число). Например,
            2011-09-19. строка
            </param>
            <returns>
            При успешном завершении оффера будет возвращен объект, содержащий следующие
            поля:
            limit — ограничения в голосах на текущую рекламную акцию;
            spent — количество голосов, уже потраченных на рекламную акцию;
            cost — стоимость (в голосах) одного прохождения;
            impressions — количество показов акций;
            started — количество начатых акций;
            completed — количество пройденных акций;
            days — данное поле возвращается, только если переданы входные параметры
            date_start и date_end.
            Параметр days Объект days содержит следующие поля:
            impressions — показы;
            started — начатые акции;
            completed — законченные акции;
            spent — потрачено голосов.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/leads.getStats
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.ILeadsCategoryAsync.GetUsersAsync(VkNet.Model.RequestParams.Leads.GetUsersParams)">
            <summary>
            Возвращает список последних действий пользователей по рекламной акции.
            </summary>
            <param name="getUsersParams">
            Входные параметры запроса.
            </param>
            <returns>
            После успешного выполнения возвращает массив объектов entry, каждый из которых
            содержит поля:
            uid — идентификатор пользователя;
            aid — идентификатор приложения, из которого было выполнено действие;
            sid — идентификатор сессии;
            date — время действия в формате unixtime;
            start_date — время начала действия в формате unixtime для status = 1;
            status — 0 - начало действия, 1 - завершение действия, 2 - блокирование
            пользователя;
            test_mode — 0 - рабочий режим, 1 - тестовый режим;
            comment — текст комментария.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/leads.getUsers
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.ILeadsCategoryAsync.MetricHitAsync(System.String)">
            <summary>
            Засчитывает событие метрики.
            </summary>
            <param name="data">
            Данные метрики, полученные в личном кабинете рекламной акции. обязательный
            параметр
            </param>
            <returns>
            Возвращает объект, содержащий поля:
            result - равен true в случае успеха, и false в обратном случае,
            redirect_link - возвращается в случае, когда пользователя нужно перенаправить
            по указанной ссылке.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/leads.metricHit
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.ILeadsCategoryAsync.StartAsync(VkNet.Model.RequestParams.Leads.StartParams)">
            <summary>
            Создаёт новую сессию для прохождения рекламной акции для пользователя.
            </summary>
            <param name="startParams">
            Входные параметры запроса.
            </param>
            <returns>
            При успешном старте рекламной акции будет возвращен объект содержащий следующие
            поля:
            test_mode — режим транзакции (1 — тестовый, 0 — реальный);
            vk_sid — сессия рекламной акции.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/leads.start
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.ILikesCategoryAsync">
            <summary>
            Асинхронное API для работы с лайками.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.ILikesCategoryAsync.GetListAsync(VkNet.Model.RequestParams.LikesGetListParams,System.Boolean)">
            <summary>
            Получает список идентификаторов пользователей или сообществ, которые добавили
            заданный объект в свой список Мне
            нравится.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            Возвращает список идентификаторов пользователей или сообществ, которые добавили
            заданный объект в свой список Мне
            нравится.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/likes.getList
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.ILikesCategoryAsync.GetListExAsync(VkNet.Model.RequestParams.LikesGetListParams)">
            <summary>
            Получает список идентификаторов пользователей или сообществ, которые добавили
            заданный объект в свой список Мне
            нравится.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            Возвращает список пользователей и сообществ, которые добавили заданный объект в
            свой список Мне нравится.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/likes.getList
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.ILikesCategoryAsync.AddAsync(VkNet.Model.RequestParams.LikesAddParams)">
            <summary>
            Добавляет указанный объект в список Мне нравится текущего пользователя.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            В случае успеха возвращает объект с полем likes, в котором находится текущее
            количество пользователей, которые
            добавили данный объект в свой список Мне нравится.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/likes.add
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.ILikesCategoryAsync.DeleteAsync(VkNet.Enums.SafetyEnums.LikeObjectType,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)">
            <summary>
            Удаляет указанный объект из списка Мне нравится текущего пользователя
            </summary>
            <param name="type"> Тип объекта LikeObjectType </param>
            <param name="itemId">
            Идентификатор объекта. положительное число, обязательный
            параметр
            </param>
            <param name="ownerId">
            Идентификатор владельца объекта. целое число, по умолчанию идентификатор
            текущего пользователя
            </param>
            <param name="captchaSid"> Идентификатор капчи </param>
            <param name="captchaKey"> Текст, который ввел пользователь </param>
            <returns>
            В случае успеха возвращает объект с полем likes, в котором находится текущее
            количество пользователей, которые
            добавили данный объект в свой список Мне нравится.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/likes.delete
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.ILikesCategoryAsync.IsLikedAsync(VkNet.Enums.SafetyEnums.LikeObjectType,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Проверяет, находится ли объект в списке Мне нравится заданного пользователя.
            </summary>
            <param name="type"> Тип объекта LikeObjectType </param>
            <param name="itemId">
            Идентификатор объекта. положительное число, обязательный
            параметр
            </param>
            <param name="userId">
            Идентификатор пользователя, у которого необходимо проверить наличие объекта в
            списке «Мне
            нравится». Если параметр не задан, то считается, что он равен идентификатору
            текущего пользователя. положительное
            число, по умолчанию идентификатор текущего пользователя
            </param>
            <param name="ownerId">
            Идентификатор владельца Like-объекта. Если параметр не задан, то считается, что
            он равен
            идентификатору текущего пользователя. целое число, по умолчанию идентификатор
            текущего пользователя
            </param>
            <returns>
            В случае успеха возвращает одно из следующих числовых значений:
            false — указанный Like-объект не входит в список Мне нравится пользователя с
            идентификатором user_id.
            true — указанный Like-объект находится в списке Мне нравится пользователя с
            идентификатором user_id.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/likes.isLiked
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IMarketsCategoryAsync">
            <summary>
            Методы для работы с товарами.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategoryAsync.GetAsync(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Метод возвращает список товаров в сообществе.
            </summary>
            <param name="ownerId">
            Идентификатор владельца товаров. Обратите внимание, идентификатор сообщества в
            параметре owner_id
            необходимо указывать со знаком "-" — например, owner_id=-1 соответствует
            идентификатору сообщества ВКонтакте API
            (club1)  целое число, обязательный параметр (целое число, обязательный
            параметр).
            </param>
            <param name="albumId">
            Идентификатор подборки, товары из которой нужно вернуть. положительное число
            (положительное
            число).
            </param>
            <param name="count">
            Количество возвращаемых товаров. положительное число, максимальное значение
            200, по умолчанию 100
            (положительное число, максимальное значение 200, по умолчанию 100).
            </param>
            <param name="offset">
            Смещение относительно первого найденного товара для выборки определенного
            подмножества.
            положительное число (положительное число).
            </param>
            <param name="extended">
            1 — будут возвращены дополнительные поля likes, can_comment, can_repost,
            ''photos'''. По
            умолчанию эти поля не возвращается. флаг, может принимать значения 1 или 0
            (флаг, может принимать значения 1 или
            0).
            </param>
            <returns>
            После успешного выполнения возвращает список объектов item с дополнительным
            полем comments, содержащим число
            комментариев у товара.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/market.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategoryAsync.GetByIdAsync(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Возвращает информацию о товарах по идентификаторам.
            </summary>
            <param name="itemIds">
            Перечисленные через запятую идентификаторы — идущие через знак подчеркивания id
            владельцев
            товаров и id самих товаров. Если товар принадлежит сообществу, то в качестве
            первого параметра используется -id
            сообщества. Пример значения item_ids: -4363_136089719,13245770_137352259 список
            строк, разделенных через запятую,
            обязательный параметр, количество элементов должно составлять не более 100
            (список строк, разделенных через
            запятую, обязательный параметр, количество элементов должно составлять не более
            100).
            </param>
            <param name="extended">
            1 — будут возвращены дополнительные поля likes, can_comment, can_repost,
            photos. По умолчанию
            эти поля не возвращается. флаг, может принимать значения 1 или 0 (флаг, может
            принимать значения 1 или 0).
            </param>
            <returns>
            После успешного выполнения возвращает список объектов item с дополнительным
            полем comments, содержащим число
            комментариев у товара.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/market.getById
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategoryAsync.SearchAsync(VkNet.Model.RequestParams.Market.MarketSearchParams)">
            <summary>
            Поиск товаров в каталоге сообщества.
            </summary>
            <param name="params"> Входные параметры запроса. </param>
            <returns>
            Возвращает список объектов item.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/market.search
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategoryAsync.GetAlbumsAsync(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает список подборок с товарами.
            </summary>
            <param name="ownerId">
            Идентификатор владельца товаров. Обратите внимание, идентификатор сообщества в
            параметре owner_id
            необходимо указывать со знаком "-" — например, owner_id=-1 соответствует
            идентификатору сообщества ВКонтакте API
            (club1)  целое число, обязательный параметр (целое число, обязательный
            параметр).
            </param>
            <param name="offset">
            Смещение относительно первой найденной подборки для выборки определенного
            подмножества.
            положительное число (положительное число).
            </param>
            <param name="count">
            Количество возвращаемых подборок. положительное число, по умолчанию 50,
            максимальное значение 100
            (положительное число, по умолчанию 50, максимальное значение 100).
            </param>
            <returns>
            После успешного выполнения возвращает список объектов album.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/market.getAlbums
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategoryAsync.GetAlbumByIdAsync(System.Int64,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Метод возвращает данные подборки с товарами.
            </summary>
            <param name="ownerId">
            Идентификатор владельца подборки. Обратите внимание, идентификатор сообщества в
            параметре
            owner_id необходимо указывать со знаком "-" — например, owner_id=-1
            соответствует идентификатору сообщества
            ВКонтакте API (club1)  целое число, обязательный параметр (целое число,
            обязательный параметр).
            </param>
            <param name="albumIds">
            Идентификаторы подборок, данные о которых нужно получить. список положительных
            чисел,
            разделенных запятыми, обязательный параметр (список положительных чисел,
            разделенных запятыми, обязательный
            параметр).
            </param>
            <returns>
            Возвращает список объектов album.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/market.getAlbumById
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategoryAsync.CreateCommentAsync(VkNet.Model.RequestParams.Market.MarketCreateCommentParams)">
            <summary>
            Создает новый комментарий к товару.
            </summary>
            <param name="params"> Входные параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает идентификатор созданного комментария.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/market.createComment
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategoryAsync.GetCommentsAsync(VkNet.Model.RequestParams.Market.MarketGetCommentsParams)">
            <summary>
            Возвращает список комментариев к товару.
            </summary>
            <param name="params"> Входные параметры запроса. </param>
            <returns>
            Возвращает список объектов комментариев.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/market.getComments
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategoryAsync.DeleteCommentAsync(System.Int64,System.Int64)">
            <summary>
            Удаляет комментарий к товару.
            </summary>
            <param name="ownerId">
            Идентификатор владельца товара. Обратите внимание, идентификатор сообщества в
            параметре owner_id
            необходимо указывать со знаком "-" — например, owner_id=-1 соответствует
            идентификатору сообщества ВКонтакте API
            (club1)  целое число, обязательный параметр (целое число, обязательный
            параметр).
            </param>
            <param name="commentId">
            Идентификатор комментария. положительное число, обязательный параметр
            (положительное число,
            обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает 1 (0, если комментарий не найден).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/market.deleteComment
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategoryAsync.RestoreCommentAsync(System.Int64,System.Int64)">
            <summary>
            Восстанавливает удаленный комментарий к товару.
            </summary>
            <param name="ownerId">
            Идентификатор владельца товара. Обратите внимание, идентификатор сообщества в
            параметре owner_id
            необходимо указывать со знаком "-" — например, owner_id=-1 соответствует
            идентификатору сообщества ВКонтакте API
            (club1)  целое число, обязательный параметр (целое число, обязательный
            параметр).
            </param>
            <param name="commentId">
            Идентификатор удаленного комментария. положительное число, обязательный
            параметр (положительное
            число, обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает 1 (0, если комментарий с таким
            идентификатором не является удаленным).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/market.restoreComment
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategoryAsync.EditCommentAsync(System.Int64,System.Int64,System.String,System.Collections.Generic.IEnumerable{VkNet.Model.Attachments.MediaAttachment})">
            <summary>
            Изменяет текст комментария к товару.
            </summary>
            <param name="ownerId">
            Идентификатор владельца товара. Обратите внимание, идентификатор сообщества в
            параметре owner_id
            необходимо указывать со знаком "-" — например, owner_id=-1 соответствует
            идентификатору сообщества ВКонтакте API
            (club1)  целое число, обязательный параметр (целое число, обязательный
            параметр).
            </param>
            <param name="commentId">
            Идентификатор комментария. положительное число, обязательный параметр
            (положительное число,
            обязательный параметр).
            </param>
            <param name="message">
            Новый текст комментария (является обязательным, если не задан параметр
            attachments). Максимальное
            количество символов: 2048. строка (строка).
            </param>
            <param name="attachments">
            Новый список объектов, приложенных к комментарию и разделённых символом ",".
            (список строк,
            разделенных через запятую).
            </param>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/market.editComment
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategoryAsync.ReportCommentAsync(System.Int64,System.Int64,VkNet.Enums.ReportReason)">
            <summary>
            Позволяет оставить жалобу на комментарий к товару.
            </summary>
            <param name="ownerId">
            Идентификатор владельца товара. Обратите внимание, идентификатор сообщества в
            параметре owner_id
            необходимо указывать со знаком "-" — например, owner_id=-1 соответствует
            идентификатору сообщества ВКонтакте API
            (club1)  целое число, обязательный параметр (целое число, обязательный
            параметр).
            </param>
            <param name="commentId">
            Идентификатор комментария. положительное число, обязательный параметр
            (положительное число,
            обязательный параметр).
            </param>
            <param name="reason">
            Причина жалобы (положительное число, обязательный
            параметр).
            </param>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/market.reportComment
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategoryAsync.ReportAsync(System.Int64,System.Int64,VkNet.Enums.ReportReason)">
            <summary>
            Позволяет отправить жалобу на товар.
            </summary>
            <param name="ownerId">
            Идентификатор владельца товаров. Обратите внимание, идентификатор сообщества в
            параметре owner_id
            необходимо указывать со знаком "-" — например, owner_id=-1 соответствует
            идентификатору сообщества ВКонтакте API
            (club1)  целое число, обязательный параметр (целое число, обязательный
            параметр).
            </param>
            <param name="itemId">
            Идентификатор товара положительное число, обязательный параметр (положительное
            число, обязательный
            параметр).
            </param>
            <param name="reason">
            Причина жалобы (положительное число, обязательный
            параметр).
            </param>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/market.report
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategoryAsync.AddAsync(VkNet.Model.RequestParams.Market.MarketProductParams)">
            <summary>
            Добавляет новый товар.
            </summary>
            <param name="params"> Входные параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает идентификатор добавленного товара.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/market.add
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategoryAsync.EditAsync(VkNet.Model.RequestParams.Market.MarketProductParams)">
            <summary>
            Редактирует товар.
            </summary>
            <param name="params"> Входные параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/market.edit
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategoryAsync.DeleteAsync(System.Int64,System.Int64)">
            <summary>
            Удаляет товар.
            </summary>
            <param name="ownerId">
            Идентификатор владельца товара. Обратите внимание, идентификатор сообщества в
            параметре owner_id
            необходимо указывать со знаком "-" — например, owner_id=-1 соответствует
            идентификатору сообщества ВКонтакте API
            (club1)  целое число, обязательный параметр (целое число, обязательный
            параметр).
            </param>
            <param name="itemId">
            Идентификатор товара. положительное число, обязательный параметр (положительное
            число,
            обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/market.delete
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategoryAsync.RestoreAsync(System.Int64,System.Int64)">
            <summary>
            Восстанавливает удаленный товар.
            </summary>
            <param name="ownerId">
            Идентификатор владельца товара. Обратите внимание, идентификатор сообщества в
            параметре owner_id
            необходимо указывать со знаком "-" — например, owner_id=-1 соответствует
            идентификатору сообщества ВКонтакте API
            (club1)  целое число, обязательный параметр (целое число, обязательный
            параметр).
            </param>
            <param name="itemId">
            Идентификатор товара. положительное число, обязательный параметр (положительное
            число,
            обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает 1 (0, если товар не найден среди
            удаленных).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/market.restore
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategoryAsync.ReorderItemsAsync(System.Int64,System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Изменяет положение товара в подборке.
            </summary>
            <param name="ownerId">
            Идентификатор владельца товара. Обратите внимание, идентификатор сообщества в
            параметре owner_id
            необходимо указывать со знаком "-" — например, owner_id=-1 соответствует
            идентификатору сообщества ВКонтакте API
            (club1)  целое число, обязательный параметр (целое число, обязательный
            параметр).
            </param>
            <param name="albumId">
            Идентификатор подборки, в которой находится товар. целое число, обязательный
            параметр (целое
            число, обязательный параметр).
            </param>
            <param name="itemId">
            Идентификатор товара. положительное число, обязательный параметр (положительное
            число,
            обязательный параметр).
            </param>
            <param name="before">
            Идентификатор товара, перед которым следует поместить текущий. положительное
            число (положительное
            число).
            </param>
            <param name="after">
            Идентификатор товара, после которого следует поместить текущий. положительное
            число (положительное
            число).
            </param>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/market.reorderItems
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategoryAsync.ReorderAlbumsAsync(System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Изменяет положение подборки с товарами в списке.
            </summary>
            <param name="ownerId">
            Идентификатор владельца альбома. Обратите внимание, идентификатор сообщества в
            параметре owner_id
            необходимо указывать со знаком "-" — например, owner_id=-1 соответствует
            идентификатору сообщества ВКонтакте API
            (club1)  целое число, обязательный параметр (целое число, обязательный
            параметр).
            </param>
            <param name="albumId">
            Идентификатор подборки. целое число, обязательный параметр (целое число,
            обязательный параметр).
            </param>
            <param name="before">
            Идентификатор подборки, перед которой следует поместить текущую. положительное
            число
            (положительное число).
            </param>
            <param name="after">
            Идентификатор подборки, после которой следует поместить текущую. положительное
            число (положительное
            число).
            </param>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/market.reorderAlbums
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategoryAsync.AddAlbumAsync(System.Int64,System.String,System.Nullable{System.Int64},System.Boolean)">
            <summary>
            Добавляет новую подборку с товарами.
            </summary>
            <param name="ownerId">
            Идентификатор владельца подборки. Обратите внимание, идентификатор сообщества в
            параметре
            owner_id необходимо указывать со знаком "-" — например, owner_id=-1
            соответствует идентификатору сообщества
            ВКонтакте API (club1)  целое число, обязательный параметр (целое число,
            обязательный параметр).
            </param>
            <param name="title">
            Название подборки. строка, обязательный параметр, максимальная длина 128
            (строка, обязательный
            параметр, максимальная длина 128).
            </param>
            <param name="photoId">
            Идентификатор фотографии-обложки подборки. положительное число (положительное
            число).
            </param>
            <param name="mainAlbum">
            Назначить подборку основной (1 — назначить, 0 — нет). флаг, может принимать
            значения 1 или 0
            (флаг, может принимать значения 1 или 0).
            </param>
            <returns>
            После успешного выполнения возвращает идентификатор созданной подборки.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/market.addAlbum
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategoryAsync.EditAlbumAsync(System.Int64,System.Int64,System.String,System.Nullable{System.Int64},System.Boolean)">
            <summary>
            Редактирует подборку с товарами.
            </summary>
            <param name="ownerId">
            Идентификатор владельца подборки. Обратите внимание, идентификатор сообщества в
            параметре
            owner_id необходимо указывать со знаком "-" — например, owner_id=-1
            соответствует идентификатору сообщества
            ВКонтакте API (club1)  целое число, обязательный параметр (целое число,
            обязательный параметр).
            </param>
            <param name="albumId">
            Идентификатор подборки. положительное число, обязательный параметр
            (положительное число,
            обязательный параметр).
            </param>
            <param name="title">
            Название подборки. строка, обязательный параметр, максимальная длина 128
            (строка, обязательный
            параметр, максимальная длина 128).
            </param>
            <param name="photoId">
            Идентификатор фотографии-обложки подборки. положительное число (положительное
            число).
            </param>
            <param name="mainAlbum"> Назначить подборку основной (1 — назначить, 0 — нет). </param>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/market.editAlbum
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategoryAsync.DeleteAlbumAsync(System.Int64,System.Int64)">
            <summary>
            Удаляет подборку с товарами.
            </summary>
            <param name="ownerId">
            Идентификатор владельца подборки. Обратите внимание, идентификатор сообщества в
            параметре
            owner_id необходимо указывать со знаком "-" — например, owner_id=-1
            соответствует идентификатору сообщества
            ВКонтакте API (club1)  целое число, обязательный параметр (целое число,
            обязательный параметр).
            </param>
            <param name="albumId">
            Идентификатор подборки. положительное число, обязательный параметр
            (положительное число,
            обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/market.deleteAlbum
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategoryAsync.RemoveFromAlbumAsync(System.Int64,System.Int64,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Удаляет товар из одной или нескольких выбранных подборок.
            </summary>
            <param name="ownerId">
            Идентификатор владельца товара. Обратите внимание, идентификатор сообщества в
            параметре owner_id
            необходимо указывать со знаком "-" — например, owner_id=-1 соответствует
            идентификатору сообщества ВКонтакте API
            (club1)  целое число, обязательный параметр (целое число, обязательный
            параметр).
            </param>
            <param name="itemId">
            Идентификатор товара. положительное число, обязательный параметр (положительное
            число,
            обязательный параметр).
            </param>
            <param name="albumIds">
            Идентификаторы подборок, из которых нужно удалить товар. список положительных
            чисел, разделенных
            запятыми, обязательный параметр (список положительных чисел, разделенных
            запятыми, обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/market.removeFromAlbum
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategoryAsync.AddToAlbumAsync(System.Int64,System.Int64,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Добавляет товар в одну или несколько выбранных подборок.
            </summary>
            <param name="ownerId">
            Идентификатор владельца товара. Обратите внимание, идентификатор сообщества в
            параметре owner_id
            необходимо указывать со знаком "-" — например, owner_id=-1 соответствует
            идентификатору сообщества ВКонтакте API
            (club1)  целое число, обязательный параметр (целое число, обязательный
            параметр).
            </param>
            <param name="itemId">
            Идентификатор товара. положительное число, обязательный параметр (положительное
            число,
            обязательный параметр).
            </param>
            <param name="albumIds">
            Идентификаторы подборок, в которые нужно добавить товар. список положительных
            чисел, разделенных
            запятыми, обязательный параметр (список положительных чисел, разделенных
            запятыми, обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/market.addToAlbum
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategoryAsync.GetCategoriesAsync(System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Возвращает список категорий для товаров..
            </summary>
            <param name="count">
            Количество категорий, информацию о которых необходимо вернуть. положительное
            число, максимальное
            значение 1000, по умолчанию 10 (Положительное число, максимальное значение
            1000, по умолчанию 10).
            </param>
            <param name="offset">
            Смещение, необходимое для выборки определенного подмножества категорий.
            положительное число
            (Положительное число).
            </param>
            <returns>
            После успешного выполнения возвращает список объектов category.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/market.getCategories
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IMessagesCategoryAsync">
            <summary>
            Асинхронные Методы для работы с личными сообщениями. Для моментального
            получения входящих сообщений используйте LongPoll сервер.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.AddChatUserAsync(System.Int64,System.Int64)">
            <summary>
            Добавляет в мультидиалог нового пользователя.
            </summary>
            <param name="chatId">
            Идентификатор беседы. положительное число, обязательный параметр (Положительное
            число,
            обязательный параметр).
            </param>
            <param name="userId">
            Идентификатор пользователя, которого необходимо включить в беседу.
            положительное число,
            обязательный параметр (Положительное число, обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.addChatUser
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.AllowMessagesFromGroupAsync(System.Int64,System.String)">
            <summary>
            Позволяет разрешить отправку сообщений от сообщества текущему пользователю.
            </summary>
            <param name="groupId"> Идентификатор сообщества. </param>
            <param name="key">
            Произвольная строка.
            Этот параметр можно использовать для идентификации пользователя.
            Его значение будет возвращено в событии message_allow Callback API.
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте
            http://vk.com/dev/messages.allowMessagesFromGroup
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.CreateChatAsync(System.Collections.Generic.IEnumerable{System.UInt64},System.String)">
            <summary>
            Создаёт беседу с несколькими участниками.
            </summary>
            <param name="userIds">
            Идентификаторы пользователей, которых нужно включить в мультидиалог. список
            положительных чисел,
            разделенных запятыми, обязательный параметр (Список положительных чисел,
            разделенных запятыми, обязательный
            параметр).
            </param>
            <param name="title"> Название беседы. строка (Строка). </param>
            <returns>
            После успешного выполнения возвращает  идентификатор созданного чата (chat_id).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.createChat
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.DeleteAsync(System.Collections.Generic.IEnumerable{System.UInt64},System.Nullable{System.Boolean},System.Nullable{System.UInt64},System.Nullable{System.Boolean})">
            <summary>
            Удаляет сообщение.
            </summary>
            <param name="messageIds">
            Список идентификаторов сообщений, разделённых через запятую. список
            положительных чисел, разделенных запятыми
            </param>
            <param name="spam">
            Пометить сообщения как спам. флаг, может принимать значения 1 или 0
            </param>
            <param name="groupId">
            Идентификатор сообщества (для сообщений сообщества с ключом доступа
            пользователя). положительное число
            </param>
            <param name="deleteForAll">
            1 — если сообщение нужно удалить для получателей (если с момента отправки
            сообщения прошло не более 24 часов ). флаг, может принимать значения 1 или 0,
            по умолчанию
            </param>
            <returns>
            После успешного выполнения возвращает 1 для каждого удаленного сообщения.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.delete
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.DeleteChatPhotoAsync(System.UInt64,System.Nullable{System.UInt64})">
            <summary>
            Позволяет удалить фотографию мультидиалога.
            </summary>
            <param name="chatId">
            Идентификатор беседы. положительное число, обязательный параметр, максимальное
            значение 100000000
            </param>
            <param name="groupId">
            Идентификатор сообщества (для сообщений сообщества с ключом доступа
            пользователя). положительное число
            </param>
            <returns>
            После успешного выполнения возвращает объект, содержащий следующие поля:
            message_id — идентификатор отправленного системного сообщения;
            chat — объект мультидиалога.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.deleteChatPhoto
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.DenyMessagesFromGroupAsync(System.Int64)">
            <summary>
            Позволяет запретить отправку сообщений от сообщества текущему пользователю.
            </summary>
            <param name="groupId"> Идентификатор сообщества. </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте
            https://vk.com/dev/messages.denyMessagesFromGroup
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.EditChatAsync(System.Int64,System.String)">
            <summary>
            Изменяет название беседы.
            </summary>
            <param name="chatId">
            Идентификатор беседы. целое число, обязательный параметр (Целое число,
            обязательный параметр).
            </param>
            <param name="title">
            Новое название для беседы. строка, обязательный параметр (Строка, обязательный
            параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.editChat
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.GetByIdAsync(System.Collections.Generic.IEnumerable{System.UInt64},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.UInt64},System.Nullable{System.Boolean},System.Nullable{System.UInt64})">
            <summary>
            Возвращает сообщения по их идентификаторам.
            </summary>
            <param name="messageIds">
            Идентификаторы сообщений. Максимум 100 идентификаторов. список положительных
            чисел, разделенных запятыми, обязательный параметр
            </param>
            <param name="fields">
            Список дополнительных полей для пользователей и сообществ. список слов,
            разделенных через запятую
            </param>
            <param name="previewLength">
            Количество символов, по которому нужно обрезать сообщение. Укажите 0, если Вы
            не хотите обрезать сообщение. (по умолчанию сообщения не обрезаются).
            положительное число, по умолчанию 0
            </param>
            <param name="extended">
            1 — возвращать дополнительные поля. флаг, может принимать значения 1 или 0
            </param>
            <param name="groupId">
            Идентификатор сообщества (для сообщений сообщества с ключом доступа
            пользователя). положительное число
            </param>
            <returns>
            После успешного выполнения возвращает объект, содержащий число результатов в
            поле count и массив объектов, описывающих  сообщения, в поле items.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.getById
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.SearchAsync(VkNet.Model.RequestParams.MessagesSearchParams)">
            <summary>
            Возвращает список найденных личных сообщений текущего пользователя по введенной
            строке поиска.
            </summary>
            <param name="params"> Параметры запроса messages.search </param>
            <returns>
            После успешного выполнения возвращает  объектов , найденных в соответствии с
            поисковым запросом '''q'''.
            </returns>
            <exception cref="T:System.ArgumentException">
            Query can not be null or
            empty.;query
            </exception>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.search
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.SendAsync(VkNet.Model.RequestParams.MessagesSendParams)">
            <summary>
            Посылает личное сообщение.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            Возвращается идентификатор отправленного сообщения.
            </returns>
            <exception cref="T:System.ArgumentException"> Message can not be <c> null </c>. </exception>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской,
            содержащей Settings.Messages
            Страница документации ВКонтакте http://vk.com/dev/messages.send
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.SendToUserIdsAsync(VkNet.Model.RequestParams.MessagesSendParams)">
            <summary>
            Посылает личное сообщение.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            Возвращается идентификатор отправленного сообщения.
            </returns>
            <exception cref="T:System.ArgumentException"> Message can not be <c> null </c>. </exception>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской,
            содержащей Settings.Messages
            Страница документации ВКонтакте http://vk.com/dev/messages.send
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.RestoreAsync(System.UInt64,System.Nullable{System.UInt64})">
            <summary>
            Восстанавливает удаленное сообщение.
            </summary>
            <param name="messageId">
            Идентификатор сообщения, которое нужно восстановить.
            </param>
            <param name="groupId">
            Идентификатор сообщества (для сообщений сообщества с ключом доступа
            пользователя). положительное число
            </param>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской,
            содержащей Settings.Messages
            Страница документации ВКонтакте http://vk.com/dev/messages.restore
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.MarkAsReadAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Помечает сообщения как прочитанные.
            </summary>
            <param name="peerId">
            Идентификатор чата или пользователя, если это диалог.
            строка (Строка).
            </param>
            <param name="startMessageId">
            При передаче этого параметра будут помечены как прочитанные все сообщения,
            начиная с
            данного. положительное число (Положительное число).
            </param>
            <param name="groupId">
            Идентификатор сообщества (для сообщений сообщества с ключом доступа
            пользователя).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.markAsRead
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.SetActivityAsync(System.String,VkNet.Enums.SafetyEnums.MessageActivityType,System.Nullable{System.Int64},System.Nullable{System.UInt64})">
            <summary>
            Изменяет статус набора текста пользователем в диалоге.
            </summary>
            <param name="userId"> Идентификатор пользователя </param>
            <param name="peerId">
            Идентификатор назначения. Для групповой беседы: 2000000000 + id беседы. Для
            сообщества: -id
            сообщества.
            </param>
            <param name="type"> typing — пользователь начал набирать текст. </param>
            <param name="groupId">
            Идентификатор сообщества (для сообщений сообщества с ключом доступа
            пользователя).
            </param>
            <returns>
            После успешного выполнения возвращает true, false в противном случае.
            Текст «N набирает сообщение...» отображается в течение 10 секунд после вызова
            метода, либо до момента отправки
            сообщения.
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской,
            содержащей Settings.Messages
            Страница документации ВКонтакте http://vk.com/dev/messages.setActivity
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.GetLastActivityAsync(System.Int64)">
            <summary>
            Возвращает текущий статус и дату последней активности указанного пользователя.
            </summary>
            <param name="userId">
            Идентификатор пользователя, информацию о последней активности которого
            требуется получить. целое
            число, обязательный параметр (Целое число, обязательный параметр).
            </param>
            <returns>
            Возвращает объект, содержащий следующие поля:
            online — текущий статус пользователя (1 — в сети, 0 — не в сети);
            time — дата последней активности пользователя в формате unixtime.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.getLastActivity
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.GetChatAsync(System.Int64,VkNet.Enums.Filters.ProfileFields,VkNet.Enums.SafetyEnums.NameCase)">
            <summary>
            Gets the chat.
            </summary>
            <param name="chatId"> The chat identifier. </param>
            <param name="fields"> The fields. </param>
            <param name="nameCase"> The name case. </param>
            <returns>
            После успешного выполнения возвращает объект (или список объектов)
            мультидиалога.
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/messages.getChat
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.GetChatAsync(System.Collections.Generic.IEnumerable{System.Int64},VkNet.Enums.Filters.ProfileFields,VkNet.Enums.SafetyEnums.NameCase)">
            <summary>
            Возвращает информацию о беседе.
            </summary>
            <param name="chatIds">
            Список идентификаторов бесед. список целых чисел, разделенных запятыми (Список
            целых чисел,
            разделенных запятыми).
            </param>
            <param name="fields">
            Список дополнительных полей профилей, которые необходимо вернуть.
            Доступные значения: nickname, screen_name, sex, bdate, city, country, timezone,
            photo_50, photo_100,
            photo_200_orig, has_mobile, contacts, education, online, counters, relation,
            last_seen, status,
            can_write_private_message, can_see_all_posts, can_post, universities список
            строк, разделенных через запятую
            (Список строк, разделенных через запятую).
            </param>
            <param name="nameCase">
            Падеж для склонения имени и фамилии пользователя. Возможные значения:
            именительный – nom,
            родительный – gen, дательный – dat, винительный – acc, творительный – ins,
            предложный – abl. По умолчанию nom.
            строка (Строка).
            </param>
            <returns>
            После успешного выполнения возвращает объект (или список объектов)
            мультидиалога.
            Если был задан параметр fields, поле users содержит список объектов
            пользователей с дополнительным полем
            invited_by, содержащим идентификатор пользователя, пригласившего в беседу.
            </returns>
            <exception cref="T:System.ArgumentException">
            At least one chat ID must be
            defined;chatIds
            </exception>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.getChat
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.GetChatPreviewAsync(System.String,VkNet.Enums.Filters.ProfileFields)">
            <summary>
            Получает данные для превью чата с приглашением по ссылке.
            </summary>
            <param name="link"> Ссылка-приглашение. </param>
            <param name="fields"> Список полей профилей, данные о которых нужно получить. </param>
            <returns> Возвращает объект представляющий описание чата </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/messages.getChatPreview
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.GetHistoryAsync(VkNet.Model.RequestParams.MessagesGetHistoryParams)">
            <summary>
            Возвращает историю сообщений текущего пользователя с указанным пользователя или
            групповой беседы.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <returns>
            Возвращает историю сообщений с указанным пользователем или из
            указанной беседы
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской,
            содержащей Settings.Messages
            Страница документации ВКонтакте http://vk.com/dev/messages.getHistory
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.RemoveChatUserAsync(System.UInt64,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Исключает из мультидиалога пользователя, если текущий пользователь был
            создателем беседы либо пригласил исключаемого пользователя.
            </summary>
            <param name="chatId">
            Идентификатор беседы. положительное число, обязательный параметр, максимальное
            значение 100000000
            </param>
            <param name="userId">
            Идентификатор пользователя, которого необходимо исключить из беседы. Может быть
            меньше нуля в случае, если пользователь приглашён по email. целое число
            </param>
            <param name="memberId">
            Идентификатор участника, которого необходимо исключить из беседы. Для сообществ
            — идентификатор сообщества со знаком «минус». целое число, доступен начиная с
            версии 5.81
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.removeChatUser
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.GetLongPollServerAsync(System.Boolean,System.UInt32,System.Nullable{System.UInt64})">
            <summary>
            Возвращает данные, необходимые для подключения к Long Poll серверу.
            Long Poll подключение позволит Вам моментально узнавать о приходе новых
            сообщений и других событий.
            </summary>
            <param name="lpVersion">
            версия для подключения к Long Poll. Актуальная версия:
            2.
            </param>
            <param name="needPts">
            <c> true </c> — возвращать поле pts, необходимое для работы метода
            messages.getLongPollHistory
            </param>
            <param name="groupId">
            Айди группы, от которой получать данные
            </param>
            <returns>
            Возвращает объект, с помощью которого можно подключиться к серверу быстрых
            сообщений для мгновенного
            получения приходящих сообщений и других событий.
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской,
            содержащей Settings.Messages
            Страница документации ВКонтакте http://vk.com/dev/messages.getLongPollServer
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.GetLongPollHistoryAsync(VkNet.Model.RequestParams.MessagesGetLongPollHistoryParams)">
            <summary>
            Возвращает обновления в личных сообщениях пользователя.
            Для ускорения работы с личными сообщениями может быть полезно кешировать уже
            загруженные ранее сообщения на
            мобильном устройстве / ПК пользователя, чтобы не получать их повторно при
            каждом обращении.
            Этот метод помогает осуществить синхронизацию локальной копии списка сообщений
            с актуальной версией.
            </summary>
            <param name="params">
            Параметры запроса к LongPool серверу
            MessagesGetLongPollHistoryParams
            </param>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской,
            содержащей Settings.Messages
            Страница документации ВКонтакте http://vk.com/dev/messages.getLongPollHistory
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.SetChatPhotoAsync(System.String)">
            <summary>
            Позволяет установить фотографию мультидиалога, загруженную с помощью метода
            photos.getChatUploadServer.
            </summary>
            <param name="file">
            Содержимое поля response из ответа специального upload сервера, полученного в
            результате загрузки
            изображения на адрес, полученный методом photos.getChatUploadServer. строка,
            обязательный параметр (Строка,
            обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает объект, содержащий следующие поля:
            message_id — идентификатор отправленного системного сообщения;
            chat — объект мультидиалога.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.setChatPhoto
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.MarkAsImportantAsync(System.Collections.Generic.IEnumerable{System.Int64},System.Boolean)">
            <summary>
            Помечает сообщения как важные либо снимает отметку.
            </summary>
            <param name="messageIds">
            Список идентификаторов сообщений, которые необходимо пометить.список
            положительных чисел,
            разделенных запятыми (Список положительных чисел, разделенных запятыми).
            </param>
            <param name="important">
            &#39;&#39;1&#39;&#39;, если сообщения необходимо пометить, как важные;&#39;
            &#39;0&#39;&#39;,
            если необходимо снять пометку.положительное число (Положительное число).
            </param>
            <returns>
            Возвращает список идентификаторов успешно помеченных сообщений.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.markAsImportant
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.SendStickerAsync(VkNet.Model.RequestParams.MessagesSendStickerParams)">
            <summary>
            Отправляет стикер.
            </summary>
            <param name="parameters"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает идентификатор отправленного сообщения
            (mid).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.sendSticker
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.GetHistoryAttachmentsAsync(VkNet.Model.RequestParams.MessagesGetHistoryAttachmentsParams)">
            <summary>
            Возвращает материалы диалога или беседы..
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает массив объектов photo, video, audio или
            doc, в зависимости от значения
            media_type, а также дополнительное поле next_from, содержащее новое значение
            start_from.
            Если в media_type передано значение link, возвращает список объектов-ссылок:
            url URL ссылки.
            строка title заголовок сниппета.
            строка description описание сниппета.
            строка image_src URL изображения сниппета.
            строка.
            </returns>
            <remarks>
            Страница документации ВКонтакте
            http://vk.com/dev/messages.getHistoryAttachments
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.GetInviteLinkAsync(System.UInt64,System.Boolean)">
            <summary>
            Получает ссылку для приглашения пользователя в беседу.
            </summary>
            <param name="peerId"> Идентификатор назначения. </param>
            <param name="reset">
            1 — сгенерировать новую ссылку, сбросив предыдущую.
            0 — получить предыдущую ссылку.
            </param>
            <returns>
            Возвращает объект с единственным полем link (string), которое содержит ссылку
            для приглашения в беседу.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.getInviteLink
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.IsMessagesFromGroupAllowedAsync(System.UInt64,System.UInt64)">
            <summary>
            Возвращает информацию о том, разрешена ли отправка сообщений от сообщества
            пользователю.
            </summary>
            <param name="groupId"> Идентификатор сообщества. </param>
            <param name="userId"> Идентификатор пользователя. </param>
            <returns>
            Возвращает объект с единственным полем is_allowed (integer, [0,1]). Если
            отправка сообщений разрешена, поле
            содержит 1, иначе — 0.
            </returns>
            <remarks>
            Страница документации ВКонтакте
            http://vk.com/dev/messages.isMessagesFromGroupAllowed
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.JoinChatByInviteLinkAsync(System.String)">
            <summary>
            Позволяет присоединиться к чату по ссылке-приглашению.
            </summary>
            <param name="link"> Ссылка-приглашение. </param>
            <returns>
            Возвращает идентификатор чата в поле chat_id.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.joinChatByInviteLink
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.MarkAsAnsweredConversationAsync(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.UInt64})">
            <summary>
            Помечает беседу как отвеченную либо снимает отметку.
            </summary>
            <param name="peerId">
            Идентификатор беседы целое число, обязательный параметр
            </param>
            <param name="answered">
            <c> true </c> - беседа отмечена отвеченной, <c> false </c> - неотвеченной флаг,
            может принимать значения <c> true </c> или <c> false </c>, по умолчанию
            <c> true </c>
            </param>
            <param name="groupId">
            Идентификатор сообщества (для сообщений сообщества с ключом доступа
            пользователя). положительное число
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте
            http://vk.com/dev/messages.markAsAnsweredConversation
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.MarkAsImportantConversationAsync(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.UInt64})">
            <summary>
            Помечает беседу как важную либо снимает отметку.
            </summary>
            <param name="peerId"> Идентификатор беседы </param>
            <param name="important">
            <c> true </c>, если сообщения необходимо пометить, как важные;
            <c> false </c>, если необходимо снять пометку. положительное число
            (Положительное число).
            </param>
            <param name="groupId">
            Идентификатор сообщества (для сообщений сообщества с ключом доступа
            пользователя). положительное число
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте
            http://vk.com/dev/messages.markAsImportantConversation
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.EditAsync(VkNet.Model.RequestParams.MessageEditParams)">
            <summary>
            Редактирует сообщение.
            </summary>
            <param name="params">
            Входные параметры запроса.
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.edit
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.DeleteConversationAsync(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.UInt64})">
            <summary>
            Удаляет беседу.
            </summary>
            <param name = "userId">
            Идентификатор пользователя. Если требуется очистить историю беседы, используйте peer_id. строка
            </param>
            <param name = "peerId">
            Идентификатор назначения.
            Для групповой беседы:
            2000000000 + id беседы.
            Для сообщества:
            -id сообщества.
            целое число, доступен начиная с версии 5.38
            </param>
            <param name = "groupId">
            Идентификатор сообщества (для сообщений сообщества с ключом доступа пользователя). положительное число
            </param>
            <returns>
            После успешного выполнения возвращает поле last_deleted_id, содержащее идентификатор последнего удалённого сообщения в переписке.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.deleteConversation
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.GetConversationsByIdAsync(System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Nullable{System.UInt64})">
            <summary>
            Позволяет получить беседу по её идентификатору.
            </summary>
            <param name="peerIds">
            Идентификаторы назначений, разделённые запятой.
            Для пользователя:
            id  пользователя.
            Для групповой беседы:
            2000000000 + id беседы.
            Для сообщества:
            -id сообщества.
            список целых чисел, разделенных запятыми, обязательный параметр
            </param>
            <param name="fields">
            Дополнительные поля пользователей и сообществ, которые необходимо вернуть в
            ответе. список слов, разделенных через запятую
            </param>
            <param name="extended">
            1 — возвращать дополнительные поля. флаг, может принимать значения 1 или 0
            </param>
            <param name="groupId">
            Идентификатор сообщества (для сообщений сообщества с ключом доступа
            пользователя). положительное число
            </param>
            <returns>
            Возвращает общее число результатов в поле count (integer) и массив объектов
            бесед в поле items.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.getConversationsById
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.GetConversationsAsync(VkNet.Model.RequestParams.GetConversationsParams)">
            <summary>
            Возвращает список бесед пользователя.
            </summary>
            <param name="getConversationsParams">
            Входные параметры запроса.
            </param>
            <returns>
            Возвращает объект, который содержит следующие поля:
            count
            integerчисло результатов. items
            arrayбеседы. Массив объектов, каждый из которых содержит поля:
            conversation (object) — объект беседы.
            last_message (object) — объект, описывающий последнее сообщение в беседе.
            unread_count
            integerчисло непрочитанных бесед. profiles
            arrayмассив объектов пользователей. groups
            arrayмассив объектов сообществ.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.getConversations
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.GetConversationMembersAsync(System.Int64,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.UInt64})">
            <summary>
            Позволяет получить список участников беседы.
            </summary>
            <param name="peerId">
            Идентификатор назначения.
            Для пользователя:
            id  пользователя.
            Для групповой беседы:
            2000000000 + id беседы.
            Для сообщества:
            -id сообщества.
            целое число, обязательный параметр
            </param>
            <param name="fields">
            Дополнительные поля пользователей и сообществ, которые необходимо вернуть в
            ответе. список слов, разделенных через запятую
            </param>
            <param name="groupId">
            Идентификатор сообщества (для сообщений сообщества с ключом доступа
            пользователя). положительное число
            </param>
            <returns>
            Возвращает объет, который содержит следующие поля:
            count
            integerчисло участников беседы. items
            arrayучастники беседы. Массив объектов, каждый из которых содержит поля:
            member_id (integer) — идентификатор участника беседы;
            invited_by (integer) — идентификатор пользователя, который пригласил участника;
            join_date (integer) — дата добавления в беседу;
            is_admin (boolean) — является ли пользователь администратором. profiles
            arrayмассив объектов пользователей. groups
            arrayмассив объектов сообществ.
            </returns>
            <remarks>
            Страница документации ВКонтакте
            http://vk.com/dev/messages.getConversationMembers
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.GetByConversationMessageIdAsync(System.Int64,System.Collections.Generic.IEnumerable{System.UInt64},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Nullable{System.UInt64})">
            <summary>
            Возвращает сообщения по их идентификаторам в рамках беседы.
            </summary>
            <param name="peerId">
            Идентификаторы назначений, разделённые запятой.
            Для пользователя:
            id  пользователя.
            Для групповой беседы:
            2000000000 + id беседы.
            Для сообщества:
            -id сообщества.
            целое число, обязательный параметр
            </param>
            <param name="conversationMessageIds">
            Идентификаторы сообщений. Максимум 100 идентификаторов. список положительных
            чисел, разделенных запятыми, обязательный параметр
            </param>
            <param name="fields">
            Дополнительные поля пользователей и сообществ, которые необходимо вернуть в
            ответе. список слов, разделенных через запятую
            </param>
            <param name="extended">
            1 — возвращать дополнительные поля. флаг, может принимать значения 1 или 0
            </param>
            <param name="groupId">
            Идентификатор сообщества (для сообщений сообщества с ключом доступа
            пользователя). положительное число
            </param>
            <returns>
            После успешного выполнения возвращает объект, содержащий число результатов в
            поле count и массив объектов, описывающих  сообщения, в поле items.
            </returns>
            <remarks>
            Страница документации ВКонтакте
            http://vk.com/dev/messages.getByConversationMessageId
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.SearchConversationsAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.UInt64},System.Nullable{System.Boolean},System.Nullable{System.UInt64})">
            <summary>
            Позволяет искать диалоги.
            </summary>
            <param name="q">
            Поисковой запрос. строка
            </param>
            <param name="fields">
            Дополнительные поля пользователей и сообществ, которые необходимо вернуть в
            ответе. список слов, разделенных через запятую
            </param>
            <param name="count">
            Максимальное число результатов для получения. положительное число, по умолчанию
            20
            </param>
            <param name="extended">
            1 — возвращать дополнительные поля. флаг, может принимать значения 1 или 0
            </param>
            <param name="groupId">
            Идентификатор сообщества (для сообщений сообщества с ключом доступа
            пользователя). положительное число
            </param>
            <returns>
            Возвращает общее число результатов в поле count (integer) и массив объектов
            диалогов в поле items.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.searchConversations
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.PinAsync(System.Int64,System.Nullable{System.UInt64})">
            <summary>
            Закрепляет сообщение.
            </summary>
            <param name="peerId">
            Идентификатор назначения.
            Для пользователя:
            id  пользователя.
            Для групповой беседы:
            2000000000 + id беседы.
            Для сообщества:
            -id сообщества.
            целое число, обязательный параметр
            </param>
            <param name="messageId">
            Идентификатор сообщения, которое нужно закрепить. положительное число
            </param>
            <returns>
            Возвращает объект закрепленного сообщения.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.pin
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.UnpinAsync(System.Int64,System.Nullable{System.UInt64})">
            <summary>
            Открепляет сообщение.
            </summary>
            <param name="peerId">
            Идентификатор назначения.
            Для пользователя:
            id  пользователя.
            Для групповой беседы:
            2000000000 + id беседы.
            Для сообщества:
            -id сообщества.
            целое число, обязательный параметр
            </param>
            <param name="groupId">
            Идентификатор сообщества (для сообщений сообщества с ключом доступа
            пользователя). положительное число
            </param>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.unpin
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.GetImportantMessagesAsync(VkNet.Model.RequestParams.GetImportantMessagesParams)">
            <summary>
            Возвращает список важных сообщений пользователя.
            </summary>
            <param name="getImportantMessagesParams">
            Входные параметры запроса.
            </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.getImportantMessages
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.GetRecentCallsAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.Boolean})">
            <summary>
            Возвращает информацию о недавних звонках.
            </summary>
            <param name="fields">
            Список дополнительных полей для пользователей и сообществ. список слов,
            разделенных через запятую
            </param>
            <param name="count">
            Максимальное число результатов, которые нужно получить. положительное число, по
            умолчанию 40, максимальное значение 500
            </param>
            <param name="startMessageId">
            Идентификатор сообщения, начиная с которого нужно возвращать звонки.
            положительное число
            </param>
            <param name="extended">
            1 — возвращать дополнительные поля для пользователей и сообществ. флаг, может
            принимать значения 1 или 0
            </param>
            <returns>
            Возвращает объект, который содержит следующие поля:
            count
            integerчисло результатов. items
            arrayбеседы. Массив объектов, каждый из которых содержит поля:
            call (object) — объект со следующими полями
            initiator_id (integer) — инициатор звонка.
            receiver_id (integer) — получатель звонка.
            state (string) — состояние.
            canceled_by_initiator — сброшен инициатором
            canceled_by_receiver — сброшен получателем
            reached — состоялся
            duration (integer) — длительность звонка в секундах.
            message_id  (integer) — индетификатор сообщения profiles
            arrayмассив объектов пользователей. groups
            arrayмассив объектов сообществ.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.getRecentCalls
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.SearchDialogsAsync(System.String,VkNet.Enums.Filters.ProfileFields,System.Nullable{System.UInt32})">
            <summary>
            Возвращает список найденных диалогов текущего пользователя по введенной строке
            поиска.
            </summary>
            <param name="query"> Подстрока, по которой будет производиться поиск. </param>
            <param name="limit"> Количество пользователей которое нужно вернуть. </param>
            <param name="fields"> Поля профилей собеседников, которые необходимо вернуть. </param>
            <returns>
            В результате выполнения данного метода будет возвращён массив объектов
            профилей, бесед и email.
            </returns>
            <exception cref="T:System.ArgumentException">
            Query can not be null or
            empty.;query
            </exception>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской,
            содержащей Settings.Messages
            Страница документации ВКонтакте http://vk.com/dev/messages.searchDialogs
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.DeleteDialogAsync(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>
            Удаляет все личные сообщения в диалоге.
            </summary>
            <param name="userId">
            Идентификатор пользователя.
            Если требуется очистить историю беседы, используйте peer_id.
            </param>
            <param name="peerId">
            Идентификатор назначения.
            Для групповой беседы: 2000000000 + id беседы.
            Для сообщества: -id сообщества.
            </param>
            <param name="offset">
            Смещение, начиная с которого нужно удалить переписку (по умолчанию удаляются
            все сообщения,
            начиная с первого).
            </param>
            <param name="count">
            Как много сообщений нужно удалить. Обратите внимание что на метод наложено
            ограничение, за один вызов
            нельзя удалить больше 10000 сообщений, поэтому если сообщений в переписке
            больше - метод нужно вызывать несколько
            раз.
            </param>
            <returns> Признак удалось ли удалить сообщения. </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской,
            содержащей Settings.Messages
            Страница документации ВКонтакте http://vk.com/dev/messages.deleteDialog
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.MarkAsAnsweredDialogAsync(System.Int64,System.Boolean)">
            <summary>
            Помечает диалог как отвеченный либо снимает отметку.
            </summary>
            <param name="peerId"> Идентификатор диалога </param>
            <param name="answered"> флаг, может принимать значения 1 или 0, по умолчанию 1 </param>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.markAsAnsweredDialog
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.MarkAsImportantDialogAsync(System.Int64,System.Boolean)">
            <summary>
            Помечает диалог как важный либо снимает отметку.
            </summary>
            <param name="peerId"> Идентификатор диалога </param>
            <param name="important">
            <c> true </c>, если сообщения необходимо пометить, как важные;
            <c> false </c>, если необходимо снять пометку.положительное число
            (Положительное
            число).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте
            http://vk.com/dev/messages.markAsImportantDialog
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.GetAsync(VkNet.Model.RequestParams.MessagesGetParams)">
            <summary>
            Возвращает список входящих либо исходящих личных сообщений текущего
            пользователя.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <returns> Список сообщений, удовлетворяющий условиям фильтрации. </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской,
            содержащей Settings.Messages
            Страница документации ВКонтакте http://vk.com/dev/messages.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.GetChatUsersAsync(System.Collections.Generic.IEnumerable{System.Int64},VkNet.Enums.Filters.UsersFields,VkNet.Enums.SafetyEnums.NameCase)">
            <summary>
            Позволяет получить список пользователей мультидиалога по его id.
            </summary>
            <param name="chatIds">
            Идентификаторы бесед. список целых чисел, разделенных запятыми (Список целых
            чисел, разделенных
            запятыми).
            </param>
            <param name="fields">
            Список дополнительных полей профилей, которые необходимо вернуть.
            Доступные значения: nickname, screen_name, sex, bdate, city, country, timezone,
            photo_50, photo_100,
            photo_200_orig, has_mobile, contacts, education, online, counters, relation,
            last_seen, status,
            can_write_private_message, can_see_all_posts, can_post, universities список
            строк, разделенных через запятую
            (Список строк, разделенных через запятую).
            </param>
            <param name="nameCase">
            Падеж для склонения имени и фамилии пользователя. Возможные значения:
            именительный – nom,
            родительный – gen, дательный – dat, винительный – acc, творительный – ins,
            предложный – abl. По умолчанию nom.
            строка (Строка).
            </param>
            <returns>
            После успешного выполнения возвращает список идентификаторов участников беседы.
            Если был задан параметр fields, возвращает список объектов пользователей с
            дополнительным полем invited_by,
            содержащим идентификатор пользователя, пригласившего в беседу.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.getChatUsers
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategoryAsync.GetDialogsAsync(VkNet.Model.RequestParams.MessagesDialogsGetParams)">
            <summary>
            Возвращает список диалогов аккаунта
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <returns> В случае успеха возвращает список диалогов пользователя </returns>
        </member>
        <member name="T:VkNet.Abstractions.INewsFeedCategoryAsync">
            <summary>
            Асинхронные методы для работы с новостной лентой пользователя.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.INewsFeedCategoryAsync.GetAsync(VkNet.Model.RequestParams.NewsFeedGetParams)">
            <summary>
            Возвращает данные, необходимые для показа списка новостей для текущего
            пользователя.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            Возвращает результат выполнения метода.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/newsfeed.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INewsFeedCategoryAsync.GetRecommendedAsync(VkNet.Model.RequestParams.NewsFeedGetRecommendedParams)">
            <summary>
            Получает список новостей, рекомендованных пользователю.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            Возвращает результат выполнения метода.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/newsfeed.getRecommended
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INewsFeedCategoryAsync.GetCommentsAsync(VkNet.Model.RequestParams.NewsFeedGetCommentsParams)">
            <summary>
            Возвращает данные, необходимые для показа раздела комментариев в новостях
            пользователя.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            Возвращает результат выполнения метода.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/newsfeed.getComments
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INewsFeedCategoryAsync.GetMentionsAsync(System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Возвращает список записей пользователей на своих стенах, в которых упоминается
            указанный пользователь.
            </summary>
            <param name="ownerId">
            Идентификатор группы или сообщества. по умолчанию идентификатор текущего
            пользователя
            </param>
            <param name="startTime">
            Время в формате unixtime начиная с которого следует получать упоминания о
            пользователе.
            </param>
            <param name="endTime">
            Время, в формате unixtime, до которого следует получать упоминания о
            пользователе.
            </param>
            <param name="offset">
            Смещение, необходимое для выборки определенного подмножества новостей. По
            умолчанию 0.
            </param>
            <param name="count">
            Количество возвращаемых записей. Если параметр не задан, то считается, что он
            равен 20.
            Максимальное значение параметра 50.
            </param>
            <returns>
            Возвращает результат выполнения метода.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/newsfeed.getMentions
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INewsFeedCategoryAsync.GetBannedAsync">
            <summary>
            Возвращает список пользователей и групп, которые текущий пользователь скрыл из
            ленты новостей.
            </summary>
            <returns> Возвращает результат выполнения метода. </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/newsfeed.getBanned
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INewsFeedCategoryAsync.GetBannedExAsync(VkNet.Enums.Filters.UsersFields,VkNet.Enums.SafetyEnums.NameCase)">
            <summary>
            Возвращает список пользователей и групп, которые текущий пользователь скрыл из
            ленты новостей.
            </summary>
            <param name="fields">
            Список дополнительных полей профилей, которые необходимо
            вернуть.
            </param>
            <param name="nameCase"> Падеж для склонения имени и фамилии пользователя. </param>
            <returns>
            Возвращает результат выполнения метода.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/newsfeed.getBanned
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INewsFeedCategoryAsync.AddBanAsync(System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Запрещает показывать новости от заданных пользователей и групп в ленте новостей
            текущего пользователя.
            </summary>
            <param name="userIds">
            Перечисленные через запятую идентификаторы друзей пользователя, новости от
            которых необходимо
            скрыть из ленты новостей текущего пользователя.
            </param>
            <param name="groupIds">
            Перечисленные через запятую идентификаторы групп пользователя, новости от
            которых необходимо
            скрыть из ленты новостей текущего пользователя.
            </param>
            <returns>
            Возвращает результат выполнения метода.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/newsfeed.addBan
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INewsFeedCategoryAsync.DeleteBanAsync(System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Разрешает показывать новости от заданных пользователей и групп в ленте новостей
            текущего пользователя.
            </summary>
            <param name="userIds">
            Идентификаторы пользователей, новости от которых
            необходимо вернуть в ленту.
            </param>
            <param name="groupIds">
            Идентификаторы сообществ, новости от которых необходимо
            вернуть в ленту.
            </param>
            <returns>
            Возвращает результат выполнения метода.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/newsfeed.deleteBan
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INewsFeedCategoryAsync.IgnoreItemAsync(VkNet.Enums.SafetyEnums.NewsObjectTypes,System.Int64,System.Int64)">
            <summary>
            Позволяет скрыть объект из ленты новостей.
            </summary>
            <param name="type"> Тип объекта. </param>
            <param name="ownerId">
            Идентификатор владельца объекта (пользователь или
            сообщество).
            </param>
            <param name="itemId"> Идентификатор объекта. </param>
            <returns>
            Возвращает результат выполнения метода.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/newsfeed.ignoreItem
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INewsFeedCategoryAsync.UnignoreItemAsync(VkNet.Enums.SafetyEnums.NewsObjectTypes,System.Int64,System.Int64)">
            <summary>
            Позволяет вернуть ранее скрытый объект в ленту новостей.
            </summary>
            <returns> Возвращает результат выполнения метода. </returns>
            <param name="type"> Тип объекта. </param>
            <param name="ownerId">
            Идентификатор владельца объекта (пользователь или
            сообщество).
            </param>
            <param name="itemId"> Идентификатор объекта. </param>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/newsfeed.unignoreItem
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INewsFeedCategoryAsync.SearchAsync(VkNet.Model.RequestParams.NewsFeedSearchParams)">
            <summary>
            Возвращает результаты поиска по статусам. Новости возвращаются в порядке от
            более новых к более старым.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            Возвращает результат выполнения метода.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/newsfeed.search
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INewsFeedCategoryAsync.GetListsAsync(System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Boolean})">
            <summary>
            Возвращает пользовательские списки новостей.
            </summary>
            <param name="listIds"> Идентификаторы списков. </param>
            <param name="extended">
            <c> true </c> — вернуть дополнительную информацию о списке (значения source_ids
            и no_reposts).
            </param>
            <returns>
            Метод возвращает список объектов пользовательских списков.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/newsfeed.getLists
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INewsFeedCategoryAsync.SaveListAsync(System.String,System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <summary>
            Метод позволяет создавать или редактировать пользовательские списки для
            просмотра новостей.
            </summary>
            <param name="title"> Название списка. </param>
            <param name="sourceIds">
            Идентификаторы пользователей и сообществ, которые должны быть включены в
            список. Идентификаторы
            сообществ нужно указывать со знаком «минус».
            </param>
            <param name="listId">
            Числовой идентификатор списка (если не передан, будет
            назначен автоматически).
            </param>
            <param name="noReposts">
            Нужно ли отображать копии постов в списке (
            <c> true </c> — не нужно).
            </param>
            <returns>
            После успешного выполнения возвращает Идентификатор списка.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/newsfeed.saveList
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INewsFeedCategoryAsync.DeleteListAsync(System.Int64)">
            <summary>
            Метод позволяет удалить пользовательский список новостей
            </summary>
            <param name="listId"> Числовой идентификатор списка . </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/newsfeed.deleteList
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INewsFeedCategoryAsync.UnsubscribeAsync(VkNet.Enums.SafetyEnums.CommentObjectType,System.Int64,System.Nullable{System.Int64})">
            <summary>
            Отписывает текущего пользователя от комментариев к заданному объекту.
            </summary>
            <param name="type">
            Тип объекта, от комментариев к которому необходимо
            отписаться.
            </param>
            <param name="ownerId"> Идентификатор владельца объекта. </param>
            <param name="itemId"> Идентификатор объекта. </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/newsfeed.unsubscribe
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INewsFeedCategoryAsync.GetSuggestedSourcesAsync(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean},VkNet.Enums.Filters.UsersFields)">
            <summary>
            Возвращает сообщества и пользователей, на которые текущему пользователю
            рекомендуется подписаться.
            </summary>
            <param name="offset">
            Отступ, необходимый для выборки определенного подмножества сообществ или
            пользователей.
            положительное число (Положительное число).
            </param>
            <param name="count">
            Количество сообществ или пользователей, которое необходимо вернуть.
            положительное число,
            максимальное значение 1000, по умолчанию 20 (Положительное число, максимальное
            значение 1000, по умолчанию 20).
            </param>
            <param name="shuffle">
            Перемешивать ли возвращаемый список. флаг, может принимать значения 1 или 0
            (Флаг, может
            принимать значения 1 или 0).
            </param>
            <param name="fields">
            Список дополнительных полей, которые необходимо вернуть. См. возможные поля для
            пользователей и
            сообществ. список слов, разделенных через запятую (Список слов, разделенных
            через запятую).
            </param>
            <returns>
            Список объектов пользователей и групп.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/newsfeed.getSuggestedSources
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.Async.INotesCategoryAsync">
            <summary>
            Notes Методы для работы с заметками.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.Async.INotesCategoryAsync.AddAsync(VkNet.Model.RequestParams.Notes.NotesAddParams)">
            <summary>
            Создает новую заметку у текущего пользователя
            </summary>
            <param name="notesAddParams">
            Входные параметры запроса
            </param>
            <returns>После успешного выполнения возвращает идентификатор созданной заметки (nid).</returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/notifications.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Async.INotesCategoryAsync.CreateCommentAsync(VkNet.Model.RequestParams.Notes.NotesCreateCommentParams)">
             <summary>
             Добавляет новый комментарий к заметке.
             </summary>
             <param name="createCommentParams">Входные параметры запроса</param>
             <returns>
             После успешного выполнения возвращает идентификатор созданного комментария (cid).
            </returns>
             <remarks>
             Страница документации ВКонтакте http://vk.com/dev/notifications.createComment
             </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Async.INotesCategoryAsync.DeleteAsync(System.Int64)">
            <summary>
            Удаляет заметку текущего пользователя.
            </summary>
            <param name="noteId">идентификатор заметки.</param>
            <returns>После успешного выполнения возвращает true.</returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/notifications.delete
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Async.INotesCategoryAsync.DeleteCommentAsync(VkNet.Model.RequestParams.Notes.NotesDeleteCommentParams)">
            <summary>
            Удаляет комментарий к заметке.
            </summary>
            <param name="deleteCommentParams">Входные параметры запроса</param>
            <returns>После успешного выполнения возвращает true. </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/notifications.deleteComment
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Async.INotesCategoryAsync.EditAsync(VkNet.Model.RequestParams.Notes.NotesEditParams)">
            <summary>
            Редактирует заметку текущего пользователя.
            </summary>
            <param name="editParams">Входные параметры запроса</param>
            <returns>После успешного выполнения возвращает true.</returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/notifications.edit
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Async.INotesCategoryAsync.EditCommentAsync(VkNet.Model.RequestParams.Notes.NotesEditCommentParams)">
            <summary>
            Редактирует указанный комментарий у заметки.
            </summary>
            <param name="editCommentParams">Входные параметры запроса</param>
            <returns>После успешного выполнения возвращает true.</returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/notifications.editComment
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Async.INotesCategoryAsync.GetAsync(VkNet.Model.RequestParams.Notes.NotesGetParams)">
            <summary>
            Возвращает список заметок, созданных пользователем.
            </summary>
            <param name="notesGetParams">Входные параметры запроса</param>
            <returns>возвращает список объектов заметок</returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/notifications.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Async.INotesCategoryAsync.GetByIdAsync(VkNet.Model.RequestParams.Notes.NotesGetByIdParams)">
            <summary>
            Возвращает заметку по её id.
            </summary>
            <param name="getByIdParams">Входные параметры запроса</param>
            <returns>Возвращает заметку</returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/notifications.getById
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Async.INotesCategoryAsync.GetCommentsAsync(VkNet.Model.RequestParams.Notes.NotesGetCommentParams)">
            <summary>
            Возвращает список комментариев к заметке.
            </summary>
            <param name="getCommentParams">Входные параметры запроса</param>
            <returns>Возвращает массив объектов comment</returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/notifications.getComments
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.Async.INotesCategoryAsync.RestoreCommentAsync(VkNet.Model.RequestParams.Notes.NotesRestoreCommentParams)">
            <summary>
            Восстанавливает удалённый комментарий.
            </summary>
            <param name="restoreCommentParams">Входные параметры запроса</param>
            <returns>После успешного выполнения возвращает true</returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/notifications.restoreComment
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.INotificationsCategoryAsync">
            <summary>
            Асинхронные методы для работы с Уведомлениями
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.INotificationsCategoryAsync.GetAsync(System.Nullable{System.UInt64},System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Возвращает список оповещений об ответах других пользователей на записи текущего
            пользователя.
            </summary>
            <param name="count">
            Указывает, какое максимальное число оповещений следует возвращать.
            положительное число, по умолчанию 30,
            максимальное значение 100
            </param>
            <param name="startFrom">
            Строковый идентификатор оповещения, полученного последним в предыдущем вызове
            (см. описание поля next_from в
            результате). строка, доступен начиная с версии 5.27
            </param>
            <param name="filters">
            Перечисленные через запятую типы оповещений, которые необходимо получить.
            Возможные значения:
            wall — записи на стене пользователя;
            mentions — упоминания в записях на стене, в комментариях или в обсуждениях;
            comments — комментарии к записям на стене, фотографиям и видеозаписям;
            likes — отметки «Мне нравится»;
            reposts — скопированные у текущего пользователя записи на стене, фотографии и
            видеозаписи;
            followers — новые подписчики;
            friends — принятые заявки в друзья.
            Если параметр не задан, то будут получены все возможные типы оповещений. список
            слов, разделенных через запятую
            </param>
            <param name="startTime">
            Время в формате Unixtime, начиная с которого следует получить оповещения для
            текущего пользователя. Если параметр
            не задан, то он считается равным значению времени, которое было сутки назад.
            целое число
            </param>
            <param name="endTime">
            Время в формате Unixtime, до которого следует получить оповещения для текущего
            пользователя. Если параметр не
            задан, то он считается равным текущему времени. целое число
            </param>
            <returns>
            После успешного выполнения возвращает объект, содержащий поля:
            items
            arrayмассив оповещений для текущего пользователя. profiles
            arrayинформация о пользователях, которые находятся в списке оповещений. groups
            arrayинформация о сообществах, которые находятся в списке оповещений.
            last_viewed
            integerвремя последнего просмотра пользователем раздела оповещений в формате
            Unixtime.
            Описание поля items Поле items содержит массив объектов, каждый из которых
            соответствует одному оповещению. Каждый
            из объектов содержит поля: type
            stringтип оповещения. Подробнее см. ниже. date
            integerвремя появления ответа в формате Unixtime. parent
            object (отсутствует, если type= follow, mention или wall)информация о
            материале, к которому появился ответ (запись
            на стене, комментарий, фотографию, видеозапись или обсуждение). Подробнее см. в
            описании поля type ниже. feedback
            [object,array]объект (или массив объектов, если type равно follow, like_* или
            copy_*), описывающий поступивший
            ответ. Оповещения о новых подписчиках, пометках «Мне нравится» и скопированных
            записях могут быть сгруппированы в
            виде массива. reply
            objectобъект, описывающий комментарий текущего пользователя, отправленный в
            ответ на данное оповещение.
            Отсутствует, если пользователь ещё не давал ответа.
            Описание поля type Поле type описывает тип оповещения. От данного типа зависит
            наличие и содержание полей parent и
            feedback. В данный момент поддерживаются следующие типы оповещений:
            Значение type Тип поля parentТип поля feedbackОписание follow-user[]У
            пользователя появился один или несколько
            новых подписчиков. friend_accepted-user[]Заявка в друзья, отправленная
            пользователем, была принята.
            mention-postБыла создана запись на чужой стене, содержащая упоминание
            пользователя. mention_commentspostcommentБыл
            оставлен комментарий, содержащий упоминание пользователя. wall-postБыла
            добавлена запись на стене пользователя.
            wall_publish-postБыла опубликована новость, предложенная пользователем в
            публичной странице.
            comment_postpostcommentБыл добавлен новый комментарий к записи, созданной
            пользователем.
            comment_photophotocommentБыл добавлен новый комментарий к фотографии
            пользователя. comment_videovideocommentБыл
            добавлен новый комментарий к видеозаписи пользователя.
            reply_commentcommentcommentБыл добавлен новый ответ на
            комментарий пользователя. reply_comment_photocommentcommentБыл добавлен новый
            ответ на комментарий пользователя к
            фотографии. reply_comment_videocommentcommentБыл добавлен новый ответ на
            комментарий пользователя к видеозаписи.
            reply_comment_marketcommentcommentБыл добавлен новый ответ на комментарий
            пользователя к товару.
            reply_topictopiccommentБыл добавлен новый ответ пользователю в обсуждении.
            like_postpostuser[]У записи пользователя
            появилась одна или несколько новых отметок «Мне нравится».
            like_commentcommentuser[]У комментария пользователя
            появилась одна или несколько новых отметок «Мне нравится».
            like_photophotouser[]У фотографии пользователя появилась
            одна или несколько новых отметок «Мне нравится». like_videovideouser[]У
            видеозаписи пользователя появилась одна или
            несколько новых отметок «Мне нравится». like_comment_photocommentuser[]У
            комментария пользователя к фотографии
            появилась одна или несколько новых отметок «Мне нравится».
            like_comment_videocommentuser[]У комментария
            пользователя к видеозаписи появилась одна или несколько новых отметок «Мне
            нравится».
            like_comment_topiccommentuser[]У комментария пользователя в обсуждении
            появилась одна или несколько новых отметок
            «Мне нравится». copy_postpostcopy[]Один или несколько пользователей скопировали
            запись пользователя
            copy_photophotocopy[]Один или несколько пользователей скопировали фотографию
            пользователя.
            copy_videovideocopy[]Один или несколько пользователей скопировали видеозапись
            пользователя.
            mention_comment_photophotocommentПод фотографией был оставлен комментарий,
            содержащий упоминание пользователя.
            mention_comment_videovideocommentПод видео был оставлен комментарий, содержащий
            упоминание пользователя.
            Описание поля parent (post) Содержит информацию о записи на стене:
            id — идентификатор записи;
            to_id — идентификатор владельца записи;
            from_id — идентификатор пользователя, создавшего запись;
            date — время публикации записи в формате unixtime;
            text — текст записи;
            attachments — содержит массив объектов, которые присоединены к текущей записи
            (фотографии, ссылки и т.п.). Более
            подробная информация представлена на странице Описание поля attachments.
            geo — находится в записях со стен, в которых имеется информация о
            местоположении, содержит поля:
            place_id — идентификатор места;
            title — название места;
            type — тип места;
            country_id — идентификатор страны;
            city_id — идентификатор города;
            address — строка с указанием адреса места в городе;
            showmap — данный параметр указывается, если местоположение является
            прикреплённой картой.
            copy_owner_id — если запись является копией записи с чужой стены, то в поле
            содержится идентификатор владельца
            стены у которого была скопирована запись;
            copy_post_id — если запись является копией записи с чужой стены, то в поле
            содержится идентификатор скопированной
            записи на стене ее владельца
            Описание поля parent (comment) Содержит информацию о комментарии:
            id — идентификатор комментария;
            owner_id — идентификатор автора комментария;
            date — время публикации комментария в формате unixtime;
            text — текст комментария;
            post — запись, к которой оставлен комментарий (для типов reply_comment и
            like_comment);
            photo — фотография, к которой оставлен комментарий (для типов
            reply_comment_photo и like_comment_photo);
            video — видеозапись, к которой оставлен комментарий (для типов
            reply_comment_video и like_comment_video);
            topic — обсуждение, в котором оставлен комментарий (для типа
            like_comment_topic).
            Описание поля parent (photo) Содержит информацию о фотографии:
            id — идентификатор фотографии;
            owner_id — идентификатор владельца фотографии;
            aid — идентификатор альбома фотографии;
            src — ссылка на изображение в разрешении 130 пикселей по большей стороне;
            src_big — ccылка на изображение в разрешении 604 пикселя по большей стороне;
            src_small — ссылка на изображение в разрешении 75 пикселей по большей стороне;
            text — текст описания фотографии;
            created — дата загрузки фотографии в формате unixtime.
            Описание поля parent (video) Содержит информацию о видеозаписи:
            id — идентификатор видеозаписи;
            owner_id — идентификатор владельца видеозаписи;
            title — название видеозаписи;
            description — описание видеозаписи;
            duration — продолжительность видеозаписи в секундах;
            link — ссылка на видео;
            image — ссылка на изображение в разрешении 320 пикселей в ширину;
            image_medium — ссылка на изображение в разрешении 160 пикселей в ширину;
            date — дата добавления видеозаписи в формате unixtime;
            views — количество просмотров;
            player — ссылка на встраиваемый i_frame-видеоплеер.
            Описание поля parent (topic) Содержит информацию о теме в обсуждениях
            сообщества:
            id — идентификатор темы;
            owner_id — идентификатор сообщества, содержащего тему в обсуждениях (со знаком
            "минус");
            title — заголовок темы;
            created — дата создания темы в формате unixtime;
            created_by — идентификатор пользователя, создавшего тему;
            updated — дата последнего сообщения в формате unixtime;
            updated_by — идентификатор пользователя, оставившего последнее сообщение;
            is_closed — 1, если тема является закрытой (в ней нельзя оставлять сообщения);
            is_fixed — 1, если тема является прилепленной (находится в начале списка тем);
            comments — число сообщений в теме.
            Описание поля feedback Cодержит информацию об оповещении:
            id (отсутствует, если type равно follow или like_*) — идентификатор
            записи-ответа;
            to_id — идентификатор владельца стены, на которой размещена запись;
            from_id — идентификатор автора ответа;
            text (отсутствует, если type равно follow, like_* или copy_*) — текст ответа;
            likes — находится в записях со стен и содержит информацию о числе людей,
            которым понравилась данная запись,
            содержит поля:
            count — число пользователей, которым понравилась запись,
            user_likes — наличие отметки «Мне нравится» от текущего пользователя
            (1 — есть, 0 — нет),
            can_like — информация о том, может ли текущий пользователь поставить отметку
            «Мне нравится»
            (1 — может, 0 — не может),
            can_publish — информация о том, может ли текущий пользователь сделать репост
            записи
            (1 — может, 0 — не может);
            В случае, если ответ является записью на стене (тип post в таблице выше), в
            объекте feedback также содержатся
            следующие поля:
            attachments — содержит массив объектов, которые присоединены к текущей записи
            (фотографии, ссылки и т.п.). Более
            подробная информация представлена на странице Описание поля attachments.
            geo — находится в записях со стен, в которых имеется информация о
            местоположении, содержит поля:
            place_id — идентификатор места;
            title — название места;
            type — тип места;
            country_id — идентификатор страны;
            city_id — идентификатор города;
            address — строка с указанием адреса места в городе;
            showmap — данный параметр указывается, если местоположение является
            прикреплённой картой.
            Описание поля reply Cодержит информацию об ответе пользователя на оповещение:
            id — идентификатор комментария;
            date — время публикации комментария в формате unixtime;
            text — текст комментария.
            Описание поля profiles Поле profiles содержит массив объектов user с
            информацией о данных пользователей, которые
            присутствуют в новостях. Каждый из объектов содержит следующие поля:
            uid — идентификатор пользователя;
            first_name — имя пользователя;
            last_name — фамилия пользователя;
            photo — адрес фотографии пользователя размером 50x50px;
            photo_medium_rec — адрес фотографии пользователя размером 100x100px;
            screen_name — короткий адрес страницы пользователя (например, andrew или
            id6492).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/notifications.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INotificationsCategoryAsync.MarkAsViewedAsync">
            <summary>
            Сбрасывает счетчик непросмотренных оповещений об ответах других пользователей
            на записи текущего пользователя.
            </summary>
            <returns>
            Если у пользователя присутствовали непросмотренные ответы, возвращает 1 в
            случае успешного завершения. В противном
            случае возвращает 0.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/notifications.markAsViewed
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IPagesCategoryAsync">
            <summary>
            Асинхронные методы для работы с wiki.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IPagesCategoryAsync.GetAsync(VkNet.Model.RequestParams.PagesGetParams)">
            <summary>
            Возвращает информацию о вики-странице..
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            Возвращает информацию о вики-странице в виде объекта page.
            Если был задан параметр need_source равный 1, дополнительно будет возвращено
            поле source.
            Если был задан параметр need_html равный 1, дополнительно будет возвращено поле
            html..
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/pages.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPagesCategoryAsync.SaveAsync(System.String,System.Int64,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Сохраняет текст вики-страницы.
            </summary>
            <param name="text"> Новый текст страницы в вики-формате. </param>
            <param name="pageId"> Идентификатор вики-страницы. </param>
            <param name="groupId">
            Идентификатор сообщества, которому принадлежит
            вики-страница.
            </param>
            <param name="userId"> Идентификатор пользователя, создавшего вики-страницу. </param>
            <param name="title"> Название вики-страницы. </param>
            <returns>
            В случае успеха возвращает id созданной страницы.
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/pages.save
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPagesCategoryAsync.SaveAccessAsync(System.Int64,System.Int64,System.Nullable{System.Int64},VkNet.Enums.AccessPages,VkNet.Enums.AccessPages)">
            <summary>
            Сохраняет новые настройки доступа на чтение и редактирование вики-страницы.
            </summary>
            <param name="pageId"> Идентификатор вики-страницы. </param>
            <param name="groupId">
            Идентификатор сообщества, которому принадлежит
            вики-страница.
            </param>
            <param name="userId"> Идентификатор пользователя, создавшего вики-страницу. </param>
            <param name="view"> Значение настройки доступа на чтение. </param>
            <param name="edit"> Значение настройки доступа на редактирование. </param>
            <returns>
            В случае успеха возвращает id страницы, доступ к которой был отредактирован.
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/pages.saveAccess
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPagesCategoryAsync.GetHistoryAsync(System.Int64,System.Int64,System.Nullable{System.Int64})">
            <summary>
            Возвращает список всех старых версий вики-страницы.
            </summary>
            <param name="pageId"> Идентификатор вики-страницы. </param>
            <param name="groupId">
            Идентификатор сообщества, которому принадлежит
            вики-страница.
            </param>
            <param name="userId"> Идентификатор пользователя, создавшего вики-страницу. </param>
            <returns>
            Возвращает массив объектов page_version, имеющих следующую структуру.
            id — идентификатор версии страницы;
            length длина версии страницы в байтах;
            edited — дата редактирования страницы;
            editor_id — идентификатор редактора;
            editor_name — имя редактора.
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/pages.getHistory
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPagesCategoryAsync.GetTitlesAsync(System.Int64)">
            <summary>
            Возвращает список вики-страниц в группе.
            </summary>
            <param name="groupId">
            Идентификатор сообщества, которому принадлежит
            вики-страница.
            </param>
            <returns>
            Возвращает массив объектов вики-страниц.
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/pages.getTitles
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPagesCategoryAsync.GetVersionAsync(System.Int64,System.Int64,System.Boolean,System.Nullable{System.Int64})">
            <summary>
            Возвращает текст одной из старых версий страницы.
            </summary>
            <param name="versionId"> Идентификатор версии. </param>
            <param name="groupId">
            Идентификатор сообщества, которому принадлежит
            вики-страница.
            </param>
            <param name="needHtml">
            Определяет, требуется ли в ответе html-представление
            вики-страницы.
            </param>
            <param name="userId"> Идентификатор пользователя, который создал страницу. </param>
            <returns>
            Возвращает объект вики-страницы.
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/pages.getVersion
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPagesCategoryAsync.ParseWikiAsync(System.String,System.UInt64)">
            <summary>
            Возвращает html-представление вики-разметки.
            </summary>
            <param name="text"> Текст в вики-формате. </param>
            <param name="groupId">
            Идентификатор группы, в контексте которой
            интерпретируется данная страница.
            </param>
            <returns>
            В случае успеха возвращает экранированный html, соответствующий вики-разметке.
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/pages.parseWiki
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPagesCategoryAsync.ClearCacheAsync(System.Uri)">
            <summary>
            Позволяет очистить кеш отдельных внешних страниц, которые могут быть
            прикреплены к записям ВКонтакте.
            После очистки кеша при последующем прикреплении ссылки к записи, данные о
            странице будут обновлены.
            Внешние страницы – страницы которые прикрепляются к записям вместе с ссылкой и
            доступные по кнопке "Предпросмотр".
            </summary>
            <param name="url"> URL. </param>
            <returns>
            При удачной очистке кеша – метод возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/pages.clearCache
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IPhotoCategoryAsync">
            <summary>
            Асинхронные методы для работы с фотографиями.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.CreateAlbumAsync(VkNet.Model.RequestParams.PhotoCreateAlbumParams)">
            <summary>
            Создает пустой альбом для фотографий.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает объект PhotoAlbum
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.createAlbum
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.EditAlbumAsync(VkNet.Model.RequestParams.PhotoEditAlbumParams)">
            <summary>
            Редактирует данные альбома для фотографий пользователя.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.editAlbum
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.GetAlbumsAsync(VkNet.Model.RequestParams.PhotoGetAlbumsParams,System.Boolean)">
            <summary>
            Возвращает список альбомов пользователя или сообщества.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            Возвращает список объектов PhotoAlbum
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.getAlbums
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.GetAsync(VkNet.Model.RequestParams.PhotoGetParams,System.Boolean)">
            <summary>
            Возвращает список фотографий в альбоме.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            После успешного выполнения возвращает список объектов Photo
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.GetAlbumsCountAsync(System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Возвращает количество доступных альбомов пользователя или сообщества.
            </summary>
            <param name="userId">
            Идентификатор пользователя, количество альбомов которого необходимо получить.
            целое число, по
            умолчанию идентификатор текущего пользователя (Целое число, по умолчанию
            идентификатор текущего пользователя).
            </param>
            <param name="groupId">
            Идентификатор сообщества, количество альбомов которого необходимо получить.
            целое число (Целое
            число).
            </param>
            <returns>
            После успешного выполнения возвращает количество альбомов с учетом настроек
            приватности.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.getAlbumsCount
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.GetByIdAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Возвращает информацию о фотографиях по их идентификаторам.
            </summary>
            <param name="photos">
            Перечисленные через запятую идентификаторы, которые представляют собой идущие
            через знак подчеркивания id
            пользователей, разместивших фотографии, и id самих фотографий. Чтобы получить
            информацию о фотографии в альбоме
            группы, вместо id пользователя следует указать -id группы.
            Пример значения photos: 1_129207899,6492_135055734,
            -20629724_271945303
            Некоторые фотографии, идентификаторы которых могут быть получены через API,
            закрыты приватностью, и не будут
            получены. В этом случае следует использовать ключ доступа фотографии
            (access_key) в её идентификаторе. Пример
            значения photos: 1_129207899_220df2876123d3542f,
            6492_135055734_e0a9bcc31144f67fbd
            Поле access_key будет возвращено вместе с остальными данными фотографии в
            методах, которые возвращают фотографии,
            закрытые приватностью но доступные в данном контексте. Например данное поле
            имеют фотографии, возвращаемые методом
            newsfeed.get. список строк, разделенных через запятую, обязательный параметр
            (Список строк, разделенных через
            запятую, обязательный параметр).
            </param>
            <param name="extended">
            1 — будут возвращены дополнительные поля likes, comments, tags, can_comment,
            can_repost. Поля
            comments и tags содержат только количество объектов. По умолчанию данные поля
            не возвращается. флаг, может
            принимать значения 1 или 0 (Флаг, может принимать значения 1 или 0).
            </param>
            <param name="photoSizes">
            Возвращать ли доступные размеры фотографии в специальном формате. флаг, может
            принимать
            значения 1 или 0 (Флаг, может принимать значения 1 или 0).
            </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            После успешного выполнения возвращает массив объектов photo.
            Если к фотографии прикреплено местоположение, также возвращаются поля lat и
            long, содержащие географические
            координаты отметки.
            Если был задан параметр extended=1, возвращаются дополнительные поля:
            likes — количество отметок Мне нравится и информация о том, поставил ли лайк
            текущий пользователь;
            comments — количество комментариев к фотографии;
            tags — количество отметок на фотографии;
            can_comment — может ли текущий пользователь комментировать фото (1 — может, 0 —
            не может);
            can_repost — может ли текущий пользователь сделать репост фотографии (1 —
            может, 0 — не может).
            Если был задан параметр photo_sizes, вместо полей width и height возвращаются
            размеры копий фотографии в
            специальном формате.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.getById
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.GetUploadServerAsync(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Возвращает адрес сервера для загрузки фотографий.
            </summary>
            <param name="albumId"> Идентификатор альбома. целое число (Целое число). </param>
            <param name="groupId">
            Идентификатор сообщества, которому принадлежит альбом (если необходимо
            загрузить фотографию в
            альбом сообщества). целое число (Целое число).
            </param>
            <returns> После успешного выполнения возвращает объект UploadServerInfo </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.getUploadServer
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.GetOwnerPhotoUploadServerAsync(System.Nullable{System.Int64})">
            <summary>
            Возвращает адрес сервера для загрузки главной фотографии на страницу
            пользователя или сообщества.
            </summary>
            <param name="ownerId">
            Идентификатор сообщества или текущего пользователя. Обратите внимание,
            идентификатор сообщества в
            параметре owner_id необходимо указывать со знаком "-" — например, owner_id=-1
            соответствует идентификатору
            сообщества ВКонтакте API (club1)  целое число, по умолчанию идентификатор
            текущего пользователя (Целое число, по
            умолчанию идентификатор текущего пользователя).
            </param>
            <returns>
            После успешного выполнения возвращает объект с единственным полем upload_url.
            </returns>
            <remarks>
            Страница документации ВКонтакте
            http://vk.com/dev/photos.getOwnerPhotoUploadServer
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.GetChatUploadServerAsync(System.UInt64,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <summary>
            Позволяет получить адрес для загрузки фотографий мультидиалогов.
            </summary>
            <param name="chatId">
            Идентификатор беседы, для которой нужно загрузить фотографию. положительное
            число, обязательный
            параметр (Положительное число, обязательный параметр).
            </param>
            <param name="cropX">
            Координата x для обрезки фотографии. положительное число
            (Положительное число).
            </param>
            <param name="cropY">
            Координата y для обрезки фотографии. положительное число
            (Положительное число).
            </param>
            <param name="cropWidth">
            Ширина фотографии после обрезки в px. положительное число, минимальное значение
            200
            (Положительное число, минимальное значение 200).
            </param>
            <returns>
            После успешного выполнения возвращает объект с единственным полем upload_url.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.getChatUploadServer
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.SaveOwnerPhotoAsync(System.String,System.Nullable{System.Int64},System.String)">
            <summary>
            Позволяет сохранить главную фотографию пользователя или сообщества.
            </summary>
            <param name="response">
            Параметр, возвращаемый в результате загрузки фотографии
            на сервер.
            </param>
            <param name="captchaSid"> Идентификатор капчи </param>
            <param name="captchaKey"> текст, который ввел пользователь </param>
            <returns>
            После успешного выполнения возвращает объект, содержащий поля photo_hash и
            photo_src (при работе через VK.api метод
            вернёт поля photo_src, photo_src_big, photo_src_small). Параметр photo_hash
            необходим для подтверждения
            пользователем изменения его фотографии через вызов метода saveProfilePhoto
            Javascript API. Поле photo_src содержит
            путь к загруженной фотографии.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.saveOwnerPhoto
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.SaveWallPhotoAsync(System.String,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.String)">
            <summary>
            Сохраняет фотографии после успешной загрузки на URI, полученный методом
            photos.getWallUploadServer.
            </summary>
            <param name="userId">
            Идентификатор пользователя, на стену которого нужно
            сохранить фотографию
            </param>
            <param name="groupId">
            Идентификатор сообщества, на стену которого нужно
            сохранить фотографию
            </param>
            <param name="response">
            Параметр, возвращаемый в результате загрузки фотографии
            на сервер
            </param>
            <param name="caption"> Описание загружаемой фотографии </param>
            <returns>
            После успешного выполнения возвращает массив, содержащий объект с загруженной
            фотографией.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.saveWallPhoto
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.GetWallUploadServerAsync(System.Nullable{System.Int64})">
            <summary>
            Возвращает адрес сервера для загрузки фотографии на стену пользователя или
            сообщества.
            </summary>
            <param name="groupId">
            Идентификатор сообщества, на стену которого нужно загрузить фото (без знака
            «минус»). целое число
            (Целое число).
            </param>
            <returns>
            После успешного выполнения возвращает объект с полями upload_url, album_id,
            user_id.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.getWallUploadServer
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.GetMessagesUploadServerAsync(System.Int64)">
            <summary>
            Возвращает адрес сервера для загрузки фотографии в личное сообщение
            пользователю.
            </summary>
            <param name="peerId">
            Идентификатор назначения (для загрузки фотографии в
            сообщениях сообществ).
            </param>
            <returns> После успешного выполнения возвращает объект UploadServerInfo </returns>
            <remarks>
            Страница документации ВКонтакте
            http://vk.com/dev/photos.getMessagesUploadServer
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.SaveMessagesPhotoAsync(System.String)">
            <summary>
            Сохраняет фотографию после успешной загрузки на URI, полученный методом
            GetMessagesUploadServer
            </summary>
            <param name="response">
            Параметр, возвращаемый в результате загрузки фотографии
            на сервер
            </param>
            <returns>
            После успешного выполнения возвращает массив с загруженной фотографией,
            возвращённый объект имеет поля id,
            pid, aid, owner_id, src, src_big, src_small, created. В случае наличия
            фотографий в высоком разрешении также будут
            возвращены адреса с названиями src_xbig и src_xxbig.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.saveMessagesPhoto
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.GetOwnerCoverPhotoUploadServerAsync(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Возвращает адрес сервера для загрузки обложки сообщества.
            </summary>
            <param name="groupId">
            Идентификатор сообщества, для которого необходимо загрузить обложку.
            положительное число,
            обязательный параметр (Положительное число, обязательный параметр).
            </param>
            <param name="cropX">
            Координата X верхнего левого угла для обрезки изображения. Положительное число
            (Положительное
            число).
            </param>
            <param name="cropY">
            Координата Y верхнего левого угла для обрезки изображения. Положительное число
            (Положительное
            число).
            </param>
            <param name="cropX2">
            Координата X нижнего правого угла для обрезки изображения. Положительное число
            (Положительное
            число).
            </param>
            <param name="cropY2">
            Координата Y нижнего правого угла для обрезки изображения. Положительное число
            (Положительное
            число).
            </param>
            <returns> После успешного выполнения возвращает объект UploadServerInfo </returns>
            <remarks>
            Страница документации ВКонтакте
            http://vk.com/dev/photos.getOwnerCoverPhotoUploadServer
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.SaveOwnerCoverPhotoAsync(System.String)">
            <summary>
            Сохраняет фотографию после успешной загрузки на URI, полученный методом
            GetOwnerCoverPhotoUploadServer
            </summary>
            <param name="response">
            Параметр, возвращаемый в результате загрузки фотографии
            на сервер
            </param>
            <returns>
            После успешного выполнения возвращает массив, содержащий объект с загруженной
            фотографией.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.saveOwnerCoverPhoto
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.ReportAsync(System.Int64,System.UInt64,VkNet.Enums.ReportReason)">
            <summary>
            Позволяет пожаловаться на фотографию.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит фотография.
            целое число,
            обязательный параметр (Целое число, обязательный параметр).
            </param>
            <param name="photoId">
            Идентификатор фотографии. положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <param name="reason">
            Причина жалобы:
            0 — спам;
            1 — детская порнография;
            2 — экстремизм;
            3 — насилие;
            4 — пропаганда наркотиков;
            5 — материал для взрослых;
            6 — оскорбление.
            положительное число (Положительное число).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.report
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.ReportCommentAsync(System.Int64,System.UInt64,VkNet.Enums.ReportReason)">
            <summary>
            Позволяет пожаловаться на комментарий к фотографии.
            </summary>
            <param name="ownerId">
            Идентификатор владельца фотографии к которой оставлен комментарий. целое число,
            обязательный
            параметр (Целое число, обязательный параметр).
            </param>
            <param name="commentId">
            Идентификатор комментария. положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <param name="reason">
            Причина жалобы:
            0 — спам;
            1 — детская порнография;
            2 — экстремизм;
            3 — насилие;
            4 — пропаганда наркотиков;
            5 — материал для взрослых;
            6 — оскорбление.
            положительное число (Положительное число).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.reportComment
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.SearchAsync(VkNet.Model.RequestParams.PhotoSearchParams,System.Boolean)">
            <summary>
            Осуществляет поиск изображений по местоположению или описанию.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            После успешного выполнения возвращает список объектов фотографий.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.search
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.SaveAsync(VkNet.Model.RequestParams.PhotoSaveParams)">
            <summary>
            Сохраняет фотографии после успешной загрузки.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает список объектов Photo
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.save
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.CopyAsync(System.Int64,System.UInt64,System.String)">
            <summary>
            Позволяет скопировать фотографию в альбом "Сохраненные фотографии".
            </summary>
            <param name="ownerId">
            Идентификатор владельца фотографии целое число, обязательный параметр (Целое
            число, обязательный
            параметр).
            </param>
            <param name="photoId">
            Индентификатор фотографии положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <param name="accessKey">
            Специальный код доступа для приватных фотографий
            строка (Строка).
            </param>
            <returns>
            Возвращает идентификатор созданной фотографии.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.copy
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.EditAsync(VkNet.Model.RequestParams.PhotoEditParams)">
            <summary>
            Изменяет описание у выбранной фотографии.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.edit
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.MoveAsync(System.Int64,System.UInt64,System.Nullable{System.Int64})">
            <summary>
            Переносит фотографию из одного альбома в другой.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит фотография.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="targetAlbumId">
            Идентификатор альбома, в который нужно переместить фотографию. целое число,
            обязательный
            параметр (Целое число, обязательный параметр).
            </param>
            <param name="photoId">
            Идентификатор фотографии, которую нужно перенести. целое число, обязательный
            параметр (Целое
            число, обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.move
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.MakeCoverAsync(System.UInt64,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Делает фотографию обложкой альбома.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит фотография.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="photoId">
            Идентификатор фотографии. Фотография должна находиться в альбоме album_id.
            целое число,
            обязательный параметр (Целое число, обязательный параметр).
            </param>
            <param name="albumId"> Идентификатор альбома. целое число (Целое число). </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.makeCover
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.ReorderAlbumsAsync(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Меняет порядок альбома в списке альбомов пользователя.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит альбом.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="albumId">
            Идентификатор альбома. целое число, обязательный параметр (Целое число,
            обязательный параметр).
            </param>
            <param name="before">
            Идентификатор альбома, перед которым следует поместить альбом. целое число
            (Целое число).
            </param>
            <param name="after">
            Идентификатор альбома, после которого следует поместить альбом. целое число
            (Целое число).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.reorderAlbums
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.ReorderPhotosAsync(System.UInt64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Меняет порядок фотографии в списке фотографий альбома пользователя.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит фотография.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="photoId">
            Идентификатор фотографии. целое число, обязательный параметр (Целое число,
            обязательный
            параметр).
            </param>
            <param name="before">
            Идентификатор фотографии, перед которой следует поместить фотографию. Если
            параметр не указан,
            фотография будет помещена последней. целое число (Целое число).
            </param>
            <param name="after">
            Идентификатор фотографии, после которой следует поместить фотографию. Если
            параметр не указан,
            фотография будет помещена первой. целое число (Целое число).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.reorderPhotos
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.GetAllAsync(VkNet.Model.RequestParams.PhotoGetAllParams)">
            <summary>
            Возвращает все фотографии пользователя или сообщества в антихронологическом
            порядке.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает список объектов Photo
            <remarks>
            Если был задан параметр extended — будет возвращено поле likes:
            user_likes: 1 — текущему пользователю нравится данная фотография, 0 - не
            указано.
            count — количество пользователей, которым нравится текущая фотография.
            Если был задан параметр photo_sizes=1, вместо полей width и height возвращаются
            размеры копий фотографии в
            специальном формате.
            </remarks>
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.getAll
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.GetUserPhotosAsync(VkNet.Model.RequestParams.PhotoGetUserPhotosParams)">
            <summary>
            Возвращает список фотографий, на которых отмечен пользователь.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает список объектов photo.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.getUserPhotos
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.DeleteAlbumAsync(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Удаляет указанный альбом для фотографий у текущего пользователя.
            </summary>
            <param name="albumId">
            Идентификатор альбома. целое число, положительное число, обязательный параметр
            (Целое число,
            положительное число, обязательный параметр).
            </param>
            <param name="groupId">
            Идентификатор сообщества, в котором размещен альбом. целое число, положительное
            число (Целое
            число, положительное число).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.deleteAlbum
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.DeleteAsync(System.UInt64,System.Nullable{System.Int64})">
            <summary>
            Удаление фотографии на сайте.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит фотография.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="photoId">
            Идентификатор фотографии. положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.delete
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.RestoreAsync(System.UInt64,System.Nullable{System.Int64})">
            <summary>
            Восстанавливает удаленную фотографию.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит фотография.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="photoId">
            Идентификатор фотографии. положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.restore
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.ConfirmTagAsync(System.UInt64,System.UInt64,System.Nullable{System.Int64})">
            <summary>
            Подтверждает отметку на фотографии.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит фотография.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="photoId">
            Идентификатор фотографии. обязательный параметр
            (Обязательный параметр).
            </param>
            <param name="tagId">
            Идентификатор отметки на фотографии. целое число, обязательный параметр (Целое
            число, обязательный
            параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.confirmTag
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.GetCommentsAsync(VkNet.Model.RequestParams.PhotoGetCommentsParams)">
            <summary>
            Возвращает список комментариев к фотографии.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает список объектов Comment
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.getComments
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.GetAllCommentsAsync(VkNet.Model.RequestParams.PhotoGetAllCommentsParams)">
            <summary>
            Возвращает отсортированный в антихронологическом порядке список всех
            комментариев к конкретному альбому или ко всем
            альбомам пользователя.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает список объектов Comment
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.getAllComments
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.CreateCommentAsync(VkNet.Model.RequestParams.PhotoCreateCommentParams)">
            <summary>
            Создает новый комментарий к фотографии.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <returns>
            После успешного выполнения возвращает идентификатор созданного комментария.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.createComment
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.DeleteCommentAsync(System.UInt64,System.Nullable{System.Int64})">
            <summary>
            Удаляет комментарий к фотографии.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит фотография.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="commentId">
            Идентификатор комментария. целое число, обязательный параметр (Целое число,
            обязательный
            параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c> (0, если комментарий не
            найден).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.deleteComment
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.RestoreCommentAsync(System.UInt64,System.Nullable{System.Int64})">
            <summary>
            Восстанавливает удаленный комментарий к фотографии.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит фотография.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="commentId">
            Идентификатор удаленного комментария. целое число, обязательный параметр (Целое
            число,
            обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c> (0, если комментарий с
            таким идентификатором не является
            удаленным).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.restoreComment
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.EditCommentAsync(System.UInt64,System.String,System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{VkNet.Model.Attachments.MediaAttachment})">
            <summary>
            Изменяет текст комментария к фотографии.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит фотография.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)
            </param>
            <param name="commentId"> Идентификатор комментария </param>
            <param name="message">
            Новый текст комментария (является обязательным, если не задан параметр
            attachments)
            </param>
            <param name="attachments">
            Новый список объектов, приложенных к комментарию и разделённых символом ",".
            Поле attachments представляется в
            формате: &lt;type&gt;&lt;owner_id&gt;_&lt;media_id&gt;,&lt;type&gt;&lt;owner_id
            &gt;_&lt;media_id&gt; &lt;type&gt; —
            тип медиа-вложения:
            photo — фотография
            video — видеозапись
            audio — аудиозапись
            doc — документ
            &lt;owner_id&gt; — идентификатор владельца медиа-вложения
            &lt;media_id&gt; — идентификатор медиа-вложения.
            <example>
            Например:
            photo100172_166443618,photo66748_265827614
            </example>
            Параметр является обязательным, если не задан параметр message. список строк,
            разделенных через запятую
            </param>
            <returns> После успешного выполнения возвращает true. </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.editComment
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.GetTagsAsync(System.UInt64,System.Nullable{System.Int64},System.String)">
            <summary>
            Возвращает список отметок на фотографии.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит фотография.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="photoId">
            Идентификатор фотографии. целое число, обязательный параметр (Целое число,
            обязательный
            параметр).
            </param>
            <param name="accessKey">
            Строковой ключ доступа, который може быть получен при получении объекта
            фотографии. строка
            (Строка).
            </param>
            <returns>
            После успешного выполнения возвращает массив объектов tag, каждый из которых
            содержит следующие поля:
            user_id — идентификатор пользователя, которому соответствует отметка;
            id — идентификатор отметки;
            placer_id — идентификатор пользователя, сделавшего отметку;
            tagged_name — название отметки;
            date — дата добавления отметки в формате unixtime;
            x, y, x2, y2 — координаты прямоугольной области, на которой сделана отметка
            (верхний левый угол и нижний правый
            угол) в процентах;
            viewed — статус отметки (1 — подтвержденная, 0 — неподтвержденная).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.getTags
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.PutTagAsync(VkNet.Model.RequestParams.PhotoPutTagParams)">
            <summary>
            Добавляет отметку на фотографию.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает идентификатор созданной отметки (tag id).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.putTag
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.RemoveTagAsync(System.UInt64,System.UInt64,System.Nullable{System.Int64})">
            <summary>
            Удаляет отметку с фотографии.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит фотография.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="photoId">
            Идентификатор фотографии. целое число, обязательный параметр (Целое число,
            обязательный
            параметр).
            </param>
            <param name="tagId">
            Идентификатор отметки. целое число, обязательный параметр (Целое число,
            обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.removeTag
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.GetNewTagsAsync(System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>
            Возвращает список фотографий, на которых есть непросмотренные отметки.
            </summary>
            <param name="offset">
            Смещение, необходимое для получения определённого подмножества фотографий.
            целое число (Целое
            число).
            </param>
            <param name="count">
            Количество фотографий, которые необходимо вернуть. положительное число,
            максимальное значение 100,
            по умолчанию 20 (Положительное число, максимальное значение 100, по умолчанию
            20).
            </param>
            <returns>
            После успешного выполнения возвращает список объектов Photo
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.getNewTags
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.GetMarketUploadServerAsync(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Возвращает адрес сервера для загрузки фотографии товаров сообщества.
            </summary>
            <param name="groupId">
            Идентификатор сообщества, для которого необходимо загрузить фотографию товара.
            положительное
            число, обязательный параметр (Положительное число, обязательный параметр).
            </param>
            <param name="mainPhoto">
            Является ли фотография обложкой товара  (1 — фотография для обложки, 0 —
            дополнительная
            фотография) флаг, может принимать значения 1 или 0 (Флаг, может принимать
            значения 1 или 0).
            </param>
            <param name="cropX">
            Координата x для обрезки фотографии. положительное число
            (Положительное число).
            </param>
            <param name="cropY">
            Координата y для обрезки фотографии. положительное число
            (Положительное число).
            </param>
            <param name="cropWidth">
            Ширина фотографии после обрезки в px. положительное число, минимальное значение
            200
            (Положительное число, минимальное значение 200).
            </param>
            <returns>
            После успешного выполнения возвращает объект с единственным полем upload_url.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.getMarketUploadServer
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.GetMarketAlbumUploadServerAsync(System.Int64)">
            <summary>
            Возвращает адрес сервера для загрузки фотографии подборки товаров в сообществе.
            </summary>
            <param name="groupId">
            Идентификатор сообщества, для которого необходимо загрузить фотографию подборки
            товаров. целое
            число (Целое число).
            </param>
            <returns>
            .
            </returns>
            <remarks>
            Страница документации ВКонтакте
            http://vk.com/dev/photos.getMarketAlbumUploadServer
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.SaveMarketPhotoAsync(System.Int64,System.String)">
            <summary>
            Сохраняет фотографии после успешной загрузки на URI, полученный методом
            photos.getMarketUploadServer.
            </summary>
            <param name="groupId">
            Идентификатор группы, для которой нужно загрузить фотографию. положительное
            число (положительное
            число).
            </param>
            <param name="response">
            Параметр, возвращаемый в результате загрузки фотографии на сервер. строка,
            обязательный параметр
            (строка, обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает массив, содержащий объект с загруженной
            фотографией.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.saveMarketPhoto
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategoryAsync.SaveMarketAlbumPhotoAsync(System.Int64,System.String)">
            <summary>
            Сохраняет фотографии после успешной загрузки на URI, полученный методом
            photos.getMarketAlbumUploadServer.
            </summary>
            <param name="groupId">
            Идентификатор группы, для которой нужно загрузить фотографию. положительное
            число, обязательный
            параметр (положительное число, обязательный параметр).
            </param>
            <param name="response">
            Параметр, возвращаемый в результате загрузки фотографии на сервер. строка,
            обязательный параметр
            (строка, обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает массив, содержащий объект с загруженной
            фотографией.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.saveMarketAlbumPhoto
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IPlacesCategoryAsync">
            <summary>
            Places Методы для работы с местами.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IPlacesCategoryAsync.AddAsync(VkNet.Model.RequestParams.PlacesAddParams)">
            <summary>
            Добавляет новое место в базу географических мест.
            </summary>
            <param name="placesAddParams">
            Входные параметры запроса.
            </param>
            <returns>
            После успешного выполнения возвращает идентификатор созданного места (pid).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/places.add
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPlacesCategoryAsync.CheckinAsync(VkNet.Model.RequestParams.PlacesCheckinParams)">
            <summary>
            Отмечает пользователя в указанном месте.
            </summary>
            <param name="placesCheckinParams">
            Входные параметры запроса.
            </param>
            <returns>
            После успешного выполнения возвращает идентификатор созданной отметки.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/places.checkin
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPlacesCategoryAsync.GetByIdAsync(System.Collections.Generic.IEnumerable{System.UInt64})">
            <summary>
            Возвращает информацию о местах по их идентификаторам.
            </summary>
            <param name="places">
            Перечисленные через запятую идентификаторы мест список положительных чисел,
            разделенных запятыми, обязательный
            параметр
            </param>
            <returns>
            После успешного выполнения возвращает массив объектов place, каждый из которых
            имеет следующие поля:
            id — идентификатор места;
            title — название места;
            latitude — географическая широта, заданная в градусах (от -90 до 90);
            longitude — географическая долгота, заданная в градусах (от -180 до 180);
            created — дата добавления места в формате unixtime.
            Также, при наличии соответствующей информации, в объект могут включаться поля
            checkins, updated, type, country,
            city, address.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/places.getById
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPlacesCategoryAsync.GetCheckinsAsync(VkNet.Model.RequestParams.PlacesGetCheckinsParams)">
            <summary>
            Возвращает список отметок пользователей в местах согласно заданным параметрам.
            </summary>
            <param name="placesGetCheckinsParams">
            Входные параметры запроса.
            </param>
            <returns>
            После успешного выполнения возвращает количество отметок и массив объектов
            chekin, каждый из которых имеет
            следующие поля:
            id — идентификатор отметки;
            user_id — идентификатор отметившегося пользователя;
            date — дата добавления отметки в формате unixtime;
            latitude — географическая широта, заданная в градусах (от -90 до 90);
            longitude — географическая долгота, заданная в градусах (от -180 до 180);
            place_id — идентификатор места;
            text — текст сопроводительного сообщения;
            distance — расстояние от места до заданной точки.
            Если в запросе был задан параметр need_places, то в объекте могут дополнительно
            содержаться следующие поля:
            place_title — наименование места;
            place_country — идентификатор страны;
            place_city — идентификатор города;
            place_address — адрес;
            place_type — тип места;
            place_icon.
            Если не заданы параметры latitude и longitude или параметр place, то будет
            возвращена лента обновлений отметок
            друзей. При указании параметра timestamp будут возвращены только те отметки из
            ленты обновлений, которые были
            созданы после указанного значения timestamp. Если timestamp не указан, то
            отметки из ленты будут возвращены с
            учетом параметров offset и count (если они заданы).
            Если заданы параметры latitude и longitude, то будут возвращены все отметки,
            сделанные за последние 24 часа,
            координаты которых находятся недалеко от Вас. Если задан параметр friends_only,
            то будут возвращены только
            последние ближайшие отметки Ваших друзей.
            Если задан параметр place, то будут возвращены последние 20 отметок, сделанные
            в месте с идентификатором, указанном
            в параметре place.
            Если задан параметр uid, то будут возвращены последние 20 отметок, сделанные
            пользователем с идентификатором,
            указанном в параметре uid.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/places.getCheckins
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPlacesCategoryAsync.GetTypesAsync">
            <summary>
            Возвращает список всех возможных типов мест.
            </summary>
            <returns>
            Возвращает массив всех возможных типов мест, каждый из объектов которого
            содержит поля tid, title и icon.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/places.getTypes
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPlacesCategoryAsync.SearchAsync(VkNet.Model.RequestParams.PlacesSearchParams)">
            <summary>
            Возвращает список мест, найденных по заданным условиям поиска.
            </summary>
            <param name="placesSearchParams">
            Входные параметры запроса.
            </param>
            <returns>
            После успешного выполнения возвращает общее количество найденных мест и массив
            объектов place, каждый из которых
            имеет следующие поля:
            id — идентификатор места;
            title — название места;
            latitude — географическая широта, заданная в градусах (от -90 до 90);
            longitude — географическая долгота, заданная в градусах (от -180 до 180);
            created — дата добавления места;
            type — тип места;
            icon — иконка (url изображения);
            checkins — количество чекинов;
            updated — дата последнего чекина;
            type — идентификатор типа места;
            country — идентификатор страны;
            city — идентификатор города;
            address — адрес;
            distance — расстояние от исходной точки.
            Если место прикреплено к сообществу, дополнительно возвращаются поля group_id и
            group_photo.
            Если не задан параметр radius, то по умолчанию он будет иметь значение 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/places.search
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IPollsCategoryAsync">
            <summary>
            Асинхронные методы этого класса позволяют производить действия с опросами.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IPollsCategoryAsync.GetByIdAsync(VkNet.Model.RequestParams.PollsGetByIdParams)">
            <summary>
            Возвращает детальную информацию об опросе по его идентификатору.
            </summary>
            <param name="params"> Параметры </param>
            <returns> </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/polls.GetById
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPollsCategoryAsync.EditAsync(VkNet.Model.RequestParams.PollsEditParams)">
            <summary>
            Позволяет редактировать созданные опросы.
            </summary>
            <param name="params"> Параметры </param>
            <returns> </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/polls.Edit
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPollsCategoryAsync.AddVoteAsync(VkNet.Model.RequestParams.PollsAddVoteParams)">
            <summary>
            Отдает голос текущего пользователя за выбранный вариант ответа в указанном
            опросе.
            </summary>
            <param name="params"> Параметры </param>
            <returns>
            1 — если голос текущего пользователя был отдан за выбранный вариант ответа;
            0 — если текущий пользователь уже голосовал в указанном опросе
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/polls.addVote
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPollsCategoryAsync.DeleteVoteAsync(VkNet.Model.RequestParams.PollsDeleteVoteParams)">
            <summary>
            Снимает голос текущего пользователя с выбранного варианта ответа в указанном
            опросе.
            </summary>
            <param name="params"> Параметры </param>
            <returns>
            1 — если голос текущего пользователя был снят с выбранного варианта ответа
            0 — если текущий пользователь еще не голосовал в указанном опросе или указан не
            выбранный им вариант ответа
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/polls.DeleteVote
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPollsCategoryAsync.GetVotersAsync(VkNet.Model.RequestParams.PollsGetVotersParams)">
            <summary>
            Получает список идентификаторов пользователей, которые выбрали определенные
            варианты ответа в опросе.
            </summary>
            <param name="params"> Параметры </param>
            <returns> </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/polls.GetVoters
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPollsCategoryAsync.CreateAsync(VkNet.Model.RequestParams.Polls.PollsCreateParams)">
            <summary>
            Позволяет создавать опросы, которые впоследствии можно прикреплять к записям на
            странице пользователя или
            сообщества.
            </summary>
            <param name="params"> Параметры </param>
            <returns>
            В случае успешного создания опроса в качестве результата возвращается объект
            опроса.
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/polls.create
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.ISearchCategoryAsync">
            <summary>
            Асинхронные методы для работы с поиском.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.ISearchCategoryAsync.GetHintsAsync(VkNet.Model.RequestParams.SearchGetHintsParams)">
            <summary>
            Метод позволяет получить результаты быстрого поиска по произвольной подстроке
            </summary>
            <param name="params"> Параметры запроса </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/search.getHints
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IStatsCategoryAsync">
            <summary>
            Асинхронные методы для работы со статистикой.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IStatsCategoryAsync.GetAsync(VkNet.Model.StatsGetParams)">
            <summary>
            Возвращает статистику сообщества или приложения.
            </summary>
            <param name = "getParams">
            Входные параметры запроса.
            </param>
            <returns>
            После успешного выполнения возвращает объект с данными статистики.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/stats.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IStatsCategoryAsync.TrackVisitorAsync">
            <summary>
            Добавляет данные о текущем сеансе в статистику посещаемости приложения..
            </summary>
            <returns>
            В случае успешной обработки данных метод вернет <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/stats.trackVisitor
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IStatsCategoryAsync.GetPostReachAsync(System.Int64,System.Int64)">
            <summary>
            Возвращает статистику для записи на стене.
            </summary>
            <param name="ownerId">
            Идентификатор сообщества — владельца записи. Указывается
            со знаком «минус».
            </param>
            <param name="postId">
            Идентификатор записи. Обратите внимание — данные по статистике доступны только
            для 300
            последних(самых свежих) записей на стене сообщества.
            </param>
            <returns>
            Возвращает результат выполнения метода.
            </returns>
            <remarks>
            Необходимо входить в число руководителей этого сообщества.
            Страница документации ВКонтакте https://vk.com/dev/stats.getPostReach
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IStatusCategoryAsync">
            <summary>
            Асинхронные методы для работы со статусом пользователя или сообщества.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IStatusCategoryAsync.GetAsync(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Получает статус пользователя или сообщества.
            </summary>
            <param name="userId">
            Идентификатор пользователя или сообщества, информацию о статусе которого нужно
            получить.
            </param>
            <param name="groupId">
            Идентификатор сообщества, статус которого необходимо получить. положительное
            число (Положительное
            число).
            </param>
            <returns>
            В случае успеха возвращается статус пользователдя или сообщества.
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской,
            содержащей Settings.Status
            Страница документации ВКонтакте http://vk.com/dev/status.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IStatusCategoryAsync.SetAsync(System.String,System.Nullable{System.Int64})">
            <summary>
            Устанавливает новый статус текущему пользователю.
            </summary>
            <param name="text">
            Текст статуса, который необходимо установить текущему пользователю. Если
            параметр
            равен пустой строке, то статус текущего пользователя будет очищен.
            </param>
            <param name="groupId">
            Идентификатор сообщества, в котором будет установлен статус. По умолчанию
            статус устанавливается
            текущему пользователю.
            </param>
            <returns>
            Возвращает true, если статус был успешно установлен, false в
            противном случае.
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской,
            содержащей Settings.Status
            Страница документации ВКонтакте http://vk.com/dev/status.set
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IStorageCategoryAsync">
            <summary>
            Storage Методы для работы с переменными в приложении.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IStorageCategoryAsync.GetAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.UInt64},System.Nullable{System.Boolean})">
            <summary>
            Возвращает значение переменной, название которой передано в параметре key.
            </summary>
            <param name="keys">
            Список названий переменных, разделённых запятыми. Если указан этот параметр, то
            параметр key не учитывается. список
            слов, разделенных через запятую, количество элементов должно составлять не
            более 1000
            </param>
            <param name="userId">
            Id пользователя, переменная которого устанавливается, в случае если данные
            запрашиваются серверным методом.
            положительное число
            </param>
            <param name="global">
            Указывается 1, если необходимо работать с глобальными переменными, а не с
            переменными пользователя. флаг, может
            принимать значения 1 или 0, по умолчанию 0
            </param>
            <returns>
            Возвращает значение одной или нескольких переменных. Если переменная на сервере
            отсутствует, то будет возвращена
            пустая строка.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/storage.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IStorageCategoryAsync.GetKeysAsync(System.Nullable{System.UInt64},System.Nullable{System.Boolean},System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <summary>
            Возвращает названия всех переменных.
            </summary>
            <param name="userId">
            Id пользователя, названия переменных которого получаются, в случае если данные
            запрашиваются серверным методом.
            положительное число
            </param>
            <param name="global">
            Указывается 1, если необходимо работать с глобальными переменными, а не с
            переменными пользователя. флаг, может
            принимать значения 1 или 0, по умолчанию 0
            </param>
            <param name="offset">
            Смещение, необходимое для выборки определенного подмножества названий
            переменных. По умолчанию 0. положительное
            число, по умолчанию 0
            </param>
            <param name="count">
            Количество названий переменных, информацию о которых необходимо получить.
            положительное число, максимальное
            значение 1000, по умолчанию 100
            </param>
            <returns>
            Возвращает массив названий переменных.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/storage.getKeys
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IStorageCategoryAsync.SetAsync(System.String,System.String,System.Nullable{System.UInt64},System.Nullable{System.Boolean})">
            <summary>
            Сохраняет значение переменной, название которой передано в параметре key.
            </summary>
            <param name="key">
            Название переменной. Может содержать символы латинского алфавита, цифры, знак
            тире, нижнее подчёркивание [a-zA-Z_
            &#092;-0-9]. строка, максимальная длина 100, обязательный параметр
            </param>
            <param name="value">
            Значение переменной, сохраняются только первые 4096 байта. строка
            </param>
            <param name="userId">
            Id пользователя, переменная которого устанавливается, в случае если данные
            запрашиваются серверным методом.
            положительное число
            </param>
            <param name="global">
            Указывается 1, если необходимо работать с глобальными переменными, а не с
            переменными пользователя. флаг, может
            принимать значения 1 или 0, по умолчанию 0
            </param>
            <returns>
            Возвращает 1 в случае удачного сохранения переменной.
            Для удаления переменной необходимо передать пустое значение в параметре value.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/storage.set
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IStreamingCategoryAsync">
            <summary>
            Список методов секции Streaming
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IStreamingCategoryAsync.GetServerUrlAsync">
            <summary>
            Позволяет получить данные для подключения к Streaming API.
            </summary>
            <returns>
            Возвращает объект, который содержит следующие поля:
            endpoint (string) — хост для подключения к серверу;
            key (string) — ключ доступа. Ключ бессрочный и прекращает действовать только
            после получения нового ключа.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/streaming.getServerUrl
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IStreamingCategoryAsync.GetSettingsAsync">
            <summary>
            Позволяет получить значение порога для Streaming API.
            </summary>
            <returns>
            Возвращает объект с единственным полем monthly_limit (string), которое содержит
            значение tier_1-tier_6 или
            unlimited и соответствует установленному порогу для приложения.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/streaming.getSettings
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IStreamingCategoryAsync.GetStatsAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Позволяет получить статистику для подготовленных и доставленных событий
            Streaming API.
            </summary>
            <param name="type">
            Тип статистики. Возможные значения:
            received — события, полученные приложением;
            prepared — события, сгенерированные со стороны ВКонтакте.
            строка
            </param>
            <param name="interval">
            Интервалы статистики. Возможные значения:
            5m — пять минут. Максимальный период — 3 дня между start_time и end_time;
            1h — один час. Максимальный период — 7 дней между start_time и end_time;
            24h — сутки. Максимальный период — 31 день между start_time и end_time.
            строка, по умолчанию 5m
            </param>
            <param name="startTime">
            Время начала отсчёта в Unixtime. По умолчанию: end_time минус сутки.
            положительное число
            </param>
            <param name="endTime">
            Время окончания отсчёта в Unixtime. По умолчанию: текущее время. положительное
            число
            </param>
            <returns>
            Возвращает массив объектов, каждый из которых содержит поля:
            event_type (string) — тип событий. Возможные значения:
            post — записи на стене;
            comment — комментарии;
            share — репосты.
            stats (array) — значения статистики. Массив объектов, каждый из которых
            содержит оля:
            timestamp (integer) — время, соответствующее значению;
            value (integer) — значение.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/streaming.getStats
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IStreamingCategoryAsync.SetSettingsAsync(VkNet.Enums.SafetyEnums.MonthlyLimit)">
            <summary>
            Позволяет задать значение порога для Streaming API.
            </summary>
            <param name="monthlyTier">
            Значение порога в месяц. Возможные значения:
            </param>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/streaming.setSettings
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IUsersCategoryAsync">
            <summary>
            Асинхронные методы для работы с информацией о пользователях.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IUsersCategoryAsync.SearchAsync(VkNet.Model.RequestParams.UserSearchParams)">
            <summary>
            Возвращает список пользователей в соответствии с заданным критерием поиска.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает список объектов пользователей, найденных
            в соответствии с заданными
            критериями.
            </returns>
            <exception cref="T:System.ArgumentException"> Query can not be <c> null </c> or empty. </exception>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/users.search
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IUsersCategoryAsync.IsAppUserAsync(System.Nullable{System.Int64})">
            <summary>
            Возвращает информацию о том, установил ли пользователь приложение.
            </summary>
            <param name="userId">
            Идентификатор пользователя. целое число, по умолчанию идентификатор текущего
            пользователя (Целое
            число, по умолчанию идентификатор текущего пользователя).
            </param>
            <returns>
            После успешного выполнения возвращает 1 в случае, если пользователь установил у
            себя данное приложение, иначе 0.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/users.isAppUser
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IUsersCategoryAsync.GetAsync(System.Collections.Generic.IEnumerable{System.Int64},VkNet.Enums.Filters.ProfileFields,VkNet.Enums.SafetyEnums.NameCase,System.Boolean)">
            <summary>
            Возвращает расширенную информацию о пользователях. Метод не требует авторизацию
            </summary>
            <param name="userIds">
            Идентификаторы пользователей, о которых необходимо
            получить информацию.
            </param>
            <param name="fields"> Поля профилей, которые необходимо возвратить. </param>
            <param name="nameCase"> Падеж для склонения имени и фамилии пользователя </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns> Список объектов с запрошенной информацией о пользователях. </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/users.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IUsersCategoryAsync.GetAsync(System.Collections.Generic.IEnumerable{System.String},VkNet.Enums.Filters.ProfileFields,VkNet.Enums.SafetyEnums.NameCase,System.Boolean)">
            <summary>
            Возвращает расширенную информацию о пользователях.
            </summary>
            <param name="screenNames">
            Короткие имена пользователей, о которых необходимо
            получить информацию.
            </param>
            <param name="fields"> Поля профилей, которые необходимо возвратить. </param>
            <param name="nameCase"> Падеж для склонения имени и фамилии пользователя </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns> Список объектов с запрошенной информацией о пользователях. </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/users.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IUsersCategoryAsync.GetSubscriptionsAsync(System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},VkNet.Enums.Filters.GroupsFields,System.Boolean)">
            <summary>
            Возвращает список идентификаторов пользователей и групп, которые входят в
            список подписок пользователя.
            </summary>
            <param name="userId">
            Идентификатор пользователя, подписки которого необходимо
            получить
            </param>
            <param name="count"> Количество подписок, которые необходимо вернуть </param>
            <param name="offset">
            Смещение необходимое для выборки определенного
            подмножества подписок
            </param>
            <param name="fields">
            Список дополнительных полей для объектов user и group, которые необходимо
            вернуть.
            </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            Пока возвращается только список групп.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/users.getSubscriptions
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IUsersCategoryAsync.GetFollowersAsync(System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},VkNet.Enums.Filters.ProfileFields,VkNet.Enums.SafetyEnums.NameCase,System.Boolean)">
            <summary>
            Возвращает список идентификаторов пользователей, которые являются подписчиками
            пользователя.
            </summary>
            <param name="userId"> Идентификатор пользователя </param>
            <param name="count">
            Количество подписчиков, информацию о которых нужно
            получить
            </param>
            <param name="offset">
            Смещение, необходимое для выборки определенного
            подмножества подписчиков
            </param>
            <param name="fields"> Список дополнительных полей, которые необходимо вернуть </param>
            <param name="nameCase"> Падеж для склонения имени и фамилии пользователя </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns> Список подписчиков </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/users.getFollowers
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IUsersCategoryAsync.ReportAsync(System.Int64,VkNet.Enums.SafetyEnums.ReportType,System.String)">
            <summary>
            Позволяет пожаловаться на пользователя.
            </summary>
            <param name="userId">
            Идентификатор пользователя, на которого осуществляется
            жалоба
            </param>
            <param name="type"> Тип жалобы </param>
            <param name="comment"> Комментарий к жалобе на пользователя </param>
            <returns> В случае успешной жалобы метод вернет true. </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/users.report
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IUsersCategoryAsync.GetNearbyAsync(VkNet.Model.RequestParams.UsersGetNearbyParams)">
            <summary>
            Индексирует текущее местоположение пользователя и возвращает список
            пользователей, которые находятся вблизи.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <returns>
            После успешного выполнения возвращает список объектов user.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/users.getNearby
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IUtilsCategoryAsync">
            <summary>
            Асинхронные служебные методы.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IUtilsCategoryAsync.CheckLinkAsync(System.String,System.Boolean)">
            <summary>
            Возвращает информацию о том, является ли внешняя ссылка заблокированной на
            сайте ВКонтакте.
            </summary>
            <param name="url"> Внешняя ссылка, которую необходимо проверить. </param>
            <param name="skipAuthorization"> Без авторизации </param>
            <returns> Статус ссылки </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/utils.checkLink
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IUtilsCategoryAsync.CheckLinkAsync(System.Uri,System.Boolean)">
            <summary>
            Возвращает информацию о том, является ли внешняя ссылка заблокированной на
            сайте ВКонтакте.
            </summary>
            <param name="url"> Внешняя ссылка, которую необходимо проверить. </param>
            <param name="skipAuthorization"> Без авторизации </param>
            <returns> Статус ссылки </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/utils.checkLink
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IUtilsCategoryAsync.ResolveScreenNameAsync(System.String)">
            <summary>
            Определяет тип объекта (пользователь, сообщество, приложение) и его
            идентификатор по короткому имени ScreenName.
            </summary>
            <param name="screenName"> Короткое имя </param>
            <returns> Тип объекта </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/utils.resolveScreenName
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IUtilsCategoryAsync.GetServerTimeAsync">
            <summary>
            Возвращает текущее время на сервере ВКонтакте в unixtime.
            </summary>
            <returns> Время на сервере ВКонтакте в unixtime </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/utils.getServerTime
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IUtilsCategoryAsync.GetShortLinkAsync(System.Uri,System.Boolean)">
            <summary>
            Позволяет получить URL, сокращенный с помощью vk.cc.
            </summary>
            <returns> URL, сокращенный с помощью vk.cc </returns>
        </member>
        <member name="M:VkNet.Abstractions.IUtilsCategoryAsync.DeleteFromLastShortenedAsync(System.String)">
            <summary>
            Удаляет сокращенную ссылку из списка пользователя.
            </summary>
            <param name="key"> сокращенная ссылка (часть URL после "vk.cc/"). </param>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/utils.deleteFromLastShortened
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IUtilsCategoryAsync.GetLastShortenedLinksAsync(System.UInt64,System.UInt64)">
            <summary>
            Получает список сокращенных ссылок для текущего пользователя.
            </summary>
            <param name="count"> количество ссылок, которые необходимо получить. </param>
            <param name="offset"> сдвиг для получения определенного подмножества ссылок. </param>
            <returns>
            Возвращает количество ссылок в поле count (integer) и массив объектов items,
            описывающих ссылки.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/utils.getLastShortenedLinks
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IUtilsCategoryAsync.GetLinkStatsAsync(VkNet.Model.RequestParams.LinkStatsParams)">
            <summary>
            Возвращает статистику переходов по сокращенной ссылке.
            </summary>
            <param name="params"> Параметры запроса </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Abstractions.IVideoCategoryAsync">
            <summary>
            Асинхронные методы для работы с видеофайлами.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategoryAsync.GetAsync(VkNet.Model.RequestParams.VideoGetParams)">
            <summary>
            Возвращает информацию о видеозаписях.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает список объектов видеозаписей с
            дополнительным полем comments, содержащим
            число комментариев  у видеозаписи.
            Если был задан параметр extended=1, возвращаются дополнительные поля:
            privacy_view — настройки приватности в формате настроек приватности; (приходит
            только для текущего пользователя)
            privacy_comment — настройки приватности в формате настроек приватности;
            (приходит только для текущего пользователя)
            can_comment — может ли текущий пользователь оставлять комментарии к ролику (1 —
            может, 0 — не может);
            can_repost — может ли текущий пользователь скопировать ролик с помощью функции
            «Рассказать друзьям» (1 — может, 0 —
            не может);
            likes — информация об отметках «Мне нравится»:
            user_likes — есть ли отметка «Мне нравится» от текущего пользователя;
            count — число отметок «Мне нравится»;
            repeat — зацикливание воспроизведения видеозаписи (1 — зацикливается, 0 — не
            зацикливается).
            Если в Вашем приложении используется  прямая авторизация, возвращается
            дополнительное поле files, содержащее ссылку
            на файл с видео (если ролик размещен на сервере ВКонтакте) или ссылку на
            внешний ресурс (если ролик встроен с
            какого-либо видеохостинга).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/video.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategoryAsync.EditAsync(VkNet.Model.RequestParams.VideoEditParams)">
            <summary>
            Редактирует данные видеозаписи.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/video.edit
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategoryAsync.AddAsync(System.Int64,System.Int64,System.Nullable{System.Int64})">
            <summary>
            Добавляет видеозапись в список пользователя.
            </summary>
            <param name="targetId">
            Идентификатор пользователя или сообщества, в которое нужно добавить видео.
            Обратите внимание, идентификатор сообщества в параметре target_id необходимо
            указывать со знаком "-" — например,
            target_id=-1 соответствует идентификатору сообщества ВКонтакте API (club1)
            целое число (Целое число).
            </param>
            <param name="videoId">
            Идентификатор видеозаписи. положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит видеозапись.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число,
            обязательный параметр (Целое число,
            обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/video.add
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategoryAsync.SaveAsync(VkNet.Model.RequestParams.VideoSaveParams)">
            <summary>
            Возвращает адрес сервера (необходимый для загрузки) и данные видеозаписи.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            Возвращает объект, который имеет поля upload_url, video_id, title, description,
            owner_id.
            Метод может быть вызван не более 5000 раз в сутки для одного сервиса.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/video.save
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategoryAsync.DeleteAsync(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Удаляет видеозапись со страницы пользователя.
            </summary>
            <param name="videoId">
            Идентификатор видеозаписи. положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит видеозапись.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="targetId">
            Идентификатор пользователя или сообщества, для которого нужно удалить
            видеозапись.
            Обратите внимание, идентификатор сообщества в параметре target_id необходимо
            указывать со знаком "-" — например,
            target_id=-1 соответствует идентификатору сообщества ВКонтакте API (club1)
            целое число (Целое число).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/video.delete
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategoryAsync.RestoreAsync(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Восстанавливает удаленную видеозапись.
            </summary>
            <param name="videoId">
            Идентификатор видеозаписи. положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <param name="ownerId">
            Идентификатор владельца видеозаписи (пользователь или сообщество). Обратите
            внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/video.restore
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategoryAsync.SearchAsync(VkNet.Model.RequestParams.VideoSearchParams)">
            <summary>
            Возвращает список видеозаписей в соответствии с заданным критерием поиска.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает список объектов видеозаписей.
            Если в Вашем приложении используется  прямая авторизация, возвращается
            дополнительное поле files, содержащее ссылку
            на файл с видео (если ролик размещен на сервере ВКонтакте) или ссылку на
            внешний ресурс (если ролик встроен с
            какого-либо видеохостинга).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/video.search
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategoryAsync.GetAlbumsAsync(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Возвращает список альбомов видеозаписей пользователя или сообщества.
            </summary>
            <param name="ownerId">
            Идентификатор владельца альбомов (пользователь или сообщество). По умолчанию —
            идентификатор
            текущего пользователя. целое число, по умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию
            идентификатор текущего пользователя).
            </param>
            <param name="offset">
            Смещение, необходимое для выборки определенного подмножества альбомов. По
            умолчанию — 0.
            положительное число (Положительное число).
            </param>
            <param name="count">
            Количество альбомов, информацию о которых нужно вернуть. По умолчанию — не
            больше 50, максимум —
            100). положительное число, по умолчанию 50, максимальное значение 100
            (Положительное число, по умолчанию 50,
            максимальное значение 100).
            </param>
            <param name="extended">
            1 – позволяет получать поля count, photo_320, photo_160 и updated_time для
            каждого альбома. Если
            альбом пустой, то поля photo_320 и photo_160 возвращены не будут. По умолчанию
            – 0. флаг, может принимать значения
            1 или 0 (Флаг, может принимать значения 1 или 0).
            </param>
            <param name="needSystem">
            1 — возвращать системные альбомы. флаг, может принимать значения 1 или 0, по
            умолчанию 0
            (Флаг, может принимать значения 1 или 0, по умолчанию 0).
            </param>
            <returns>
            После успешного выполнения возвращает общее количество альбомов с
            видеозаписями, и массив объектов album, каждый из
            которых содержит следующие поля:
            id — идентификатор альбома;
            owner_id — идентификатор владельца альбома;
            title — название альбома.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/video.getAlbums
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategoryAsync.AddAlbumAsync(System.String,System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{VkNet.Enums.SafetyEnums.Privacy})">
            <summary>
            Создает пустой альбом видеозаписей.
            </summary>
            <param name="groupId">
            Идентификатор сообщества (если необходимо создать альбом в сообществе).
            положительное число
            (Положительное число).
            </param>
            <param name="title"> Название альбома. строка (Строка). </param>
            <param name="privacy">
            Уровень доступа к альбому в специальном формате.
            Приватность доступна для альбомов с видео в профиле пользователя. список строк,
            разделенных через запятую (Список
            строк, разделенных через запятую).
            </param>
            <returns>
            После успешного выполнения возвращает  идентификатор созданного альбома
            (album_id).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/video.addAlbum
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategoryAsync.EditAlbumAsync(System.Int64,System.String,System.Nullable{System.Int64},VkNet.Enums.SafetyEnums.Privacy)">
            <summary>
            Редактирует название альбома видеозаписей.
            </summary>
            <param name="groupId">
            Идентификатор сообщества (если нужно отредактировать альбом, принадлежащий
            сообществу).
            положительное число (Положительное число).
            </param>
            <param name="albumId">
            Идентификатор альбома. положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <param name="title">
            Новое название для альбома. строка, обязательный параметр (Строка, обязательный
            параметр).
            </param>
            <param name="privacy">
            Уровень доступа к альбому в специальном формате.
            Приватность доступна для альбомов с видео в профиле пользователя. целое число
            (Целое число).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/video.editAlbum
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategoryAsync.DeleteAlbumAsync(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Удаляет альбом видеозаписей.
            </summary>
            <param name="groupId">
            Идентификатор сообщества (если альбом, который необходимо удалить, принадлежит
            сообществу).
            положительное число (Положительное число).
            </param>
            <param name="albumId">
            Идентификатор альбома. положительное число
            (Положительное число).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/video.deleteAlbum
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategoryAsync.GetCommentsAsync(VkNet.Model.RequestParams.VideoGetCommentsParams)">
            <summary>
            Возвращает список комментариев к видеозаписи.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает общее количество комментариев и массив
            объектов comment, каждый из которых
            содержит следующие поля:
            id — идентификатор комментария;
            from_id — идентификатор автора комментария;
            date — дата добавления комментария в формате unixtime;
            text — текст комментария;
            likes — информация об отметках «Мне нравится» текущего комментария (если был
            задан параметр need_likes), объект с
            полями:
            count — число пользователей, которым понравился комментарий,
            user_likes — наличие отметки «Мне нравится» от текущего пользователя
            (1 — есть, 0 — нет),
            can_like — информация о том, может ли текущий пользователь поставить отметку
            «Мне нравится»
            (1 — может, 0 — не может).
            Если был передан параметр start_comment_id, будет также возвращено поле
            real_offset – итоговое смещение данного
            подмножества комментариев (оно может быть отрицательным, если был указан
            отрицательный offset).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/video.getComments
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategoryAsync.CreateCommentAsync(VkNet.Model.RequestParams.VideoCreateCommentParams)">
            <summary>
            Cоздает новый комментарий к видеозаписи.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает идентификатор созданного комментария.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/video.createComment
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategoryAsync.DeleteCommentAsync(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Удаляет комментарий к видеозаписи.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит видеозапись.
            целое число, по
            умолчанию идентификатор текущего пользователя (Целое число, по умолчанию
            идентификатор текущего пользователя).
            </param>
            <param name="commentId">
            Идентификатор комментария. целое число, обязательный параметр (Целое число,
            обязательный
            параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/video.deleteComment
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategoryAsync.RestoreCommentAsync(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Восстанавливает удаленный комментарий к видеозаписи.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит видеозапись.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="commentId">
            Идентификатор удаленного комментария. целое число, обязательный параметр (Целое
            число,
            обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c> (0, если комментарий с
            таким идентификатором не является
            удаленным).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/video.restoreComment
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategoryAsync.EditCommentAsync(System.Int64,System.String,System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{VkNet.Model.Attachments.MediaAttachment})">
            <summary>
            Изменяет текст комментария к видеозаписи.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит видеозапись.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="commentId">
            Идентификатор комментария. целое число, обязательный параметр (Целое число,
            обязательный
            параметр).
            </param>
            <param name="message">
            Новый текст комментария (является обязательным, если не задан параметр
            attachments). строка
            (Строка).
            </param>
            <param name="attachments">
            Новый список объектов, приложенных к комментарию и разделённых символом ",".
            Поле attachments представляется в
            формате:
            &lt;type&gt;&lt;owner_id&gt;_&lt;media_id&gt;,&lt;type&gt;&lt;owner_id&gt;_&lt;
            media_id&gt;
            &lt;type&gt; — тип медиа-вложения:
            photo — фотография
            video — видеозапись
            audio — аудиозапись
            doc — документ
            &lt;owner_id&gt; — идентификатор владельца медиа-вложения
            &lt;media_id&gt; — идентификатор медиа-вложения.
            Например:
            photo100172_166443618,photo66748_265827614
            Параметр является обязательным, если не задан параметр message. список строк,
            разделенных через запятую (Список
            строк, разделенных через запятую).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/video.editComment
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategoryAsync.ReportAsync(System.Int64,VkNet.Enums.ReportReason,System.Nullable{System.Int64},System.String,System.String)">
            <summary>
            Позволяет пожаловаться на видеозапись.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит видеозапись.
            целое число,
            обязательный параметр (Целое число, обязательный параметр).
            </param>
            <param name="videoId">
            Идентификатор видеозаписи. положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <param name="reason">
            Тип жалобы:
            0 – это спам
            1 – детская порнография
            2 – экстремизм
            3 – насилие
            4 – пропаганда наркотиков
            5 – материал для взрослых
            6 – оскорбление положительное число (Положительное число).
            </param>
            <param name="comment"> Комментарий для жалобы. строка (Строка). </param>
            <param name="searchQuery">
            Поисковой запрос, если видеозапись была найдена
            через поиск. строка (Строка).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/video.report
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategoryAsync.ReportCommentAsync(System.Int64,System.Int64,VkNet.Enums.ReportReason)">
            <summary>
            Позволяет пожаловаться на комментарий к видеозаписи.
            </summary>
            <param name="ownerId">
            Идентификатор владельца видеозаписи, к которой оставлен комментарий. целое
            число, обязательный
            параметр (Целое число, обязательный параметр).
            </param>
            <param name="commentId">
            Идентификатор комментария. положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <param name="reason">
            Тип жалобы:
            0 – это спам
            1 – детская порнография
            2 – экстремизм
            3 – насилие
            4 – пропаганда наркотиков
            5 – материал для взрослых
            6 – оскорбление положительное число (Положительное число).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/video.reportComment
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategoryAsync.GetAlbumByIdAsync(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Позволяет получить информацию об альбоме с видео.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит альбом. целое
            число, по умолчанию
            идентификатор текущего пользователя (Целое число, по умолчанию идентификатор
            текущего пользователя).
            </param>
            <param name="albumId">
            Идентификатор альбома. целое число, обязательный параметр (Целое число,
            обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает объект, который содержит следующие поля:
            id — идентификатор альбома;
            owner_id — идентификатор владельца альбома;
            title — название альбома;
            count — число видеозаписей в альбоме;
            photo_320 — url обложки альбома с шириной 320px;
            photo_160 — url обложки альбома с шириной 160px;
            updated_time — время последнего обновления в формате unixtime.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/video.getAlbumById
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategoryAsync.ReorderAlbumsAsync(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Позволяет изменить порядок альбомов с видео.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит альбом.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="albumId">
            Идентификатор альбома, который нужно переместить. положительное число,
            обязательный параметр
            (Положительное число, обязательный параметр).
            </param>
            <param name="before">
            Идентификатор альбома, перед которым нужно поместить текущий. положительное
            число (Положительное
            число).
            </param>
            <param name="after">
            Идентификатор альбома, после которого нужно поместить текущий. положительное
            число (Положительное
            число).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/video.reorderAlbums
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategoryAsync.ReorderVideosAsync(VkNet.Model.RequestParams.VideoReorderVideosParams)">
            <summary>
            Позволяет переместить видеозапись в альбоме.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/video.reorderVideos
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategoryAsync.AddToAlbumAsync(System.Int64,System.Int64,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Позволяет добавить видеозапись в альбом.
            </summary>
            <param name="targetId">
            Идентификатор владельца альбома, в который нужно добавить видео.
            Обратите внимание, идентификатор сообщества в параметре target_id необходимо
            указывать со знаком "-" — например,
            target_id=-1 соответствует идентификатору сообщества ВКонтакте API (club1)
            целое число, по умолчанию идентификатор
            текущего пользователя (Целое число, по умолчанию идентификатор текущего
            пользователя).
            </param>
            <param name="albumId">
            Идентификатор альбома, в который нужно добавить видео (0 соответствует  общему
            списку
            видеозаписей «без альбома»). целое число (Целое число).
            </param>
            <param name="albumIds">
            Идентификаторы альбомов, в которые нужно добавить видео. список целых чисел,
            разделенных
            запятыми (Список целых чисел, разделенных запятыми).
            </param>
            <param name="ownerId">
            Идентификатор владельца видеозаписи.
            Обратите внимание, идентификатор сообщества в параметре owner_id необходимо
            указывать со знаком "-" — например,
            owner_id=-1 соответствует идентификатору сообщества ВКонтакте API (club1)
            целое число, обязательный параметр
            (Целое число, обязательный параметр).
            </param>
            <param name="videoId">
            Идентификатор видеозаписи. положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/video.addToAlbum
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategoryAsync.RemoveFromAlbumAsync(System.Int64,System.Int64,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Позволяет убрать видеозапись из альбома.
            </summary>
            <param name="targetId">
            Идентификатор владельца альбома. Обратите внимание, идентификатор сообщества в
            параметре
            target_id необходимо указывать со знаком "-" — например, target_id=-1
            соответствует идентификатору сообщества
            ВКонтакте API (club1)  целое число, по умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию
            идентификатор текущего пользователя).
            </param>
            <param name="albumId">
            Идентификатор альбома, из которого нужно убрать видео. целое число (Целое
            число).
            </param>
            <param name="albumIds">
            Идентификаторы альбомов, из которых нужно убрать видео. список целых чисел,
            разделенных запятыми
            (Список целых чисел, разделенных запятыми).
            </param>
            <param name="ownerId">
            Идентификатор владельца видеозаписи. Обратите внимание, идентификатор
            сообщества в параметре
            owner_id необходимо указывать со знаком "-" — например, owner_id=-1
            соответствует идентификатору сообщества
            ВКонтакте API (club1)  целое число, обязательный параметр (Целое число,
            обязательный параметр).
            </param>
            <param name="videoId">
            Идентификатор видеозаписи. положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/video.removeFromAlbum
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategoryAsync.GetAlbumsByVideoAsync(System.Nullable{System.Int64},System.Int64,System.Int64,System.Nullable{System.Boolean})">
            <summary>
            Возвращает список альбомов, в которых находится видеозапись.
            </summary>
            <param name="targetId">
            Идентификатор пользователя или сообщества, для которого нужно получить список
            альбомов, содержащих видеозапись.
            Обратите внимание, идентификатор сообщества в параметре target_id необходимо
            указывать со знаком "-" — например,
            target_id=-1 соответствует идентификатору сообщества ВКонтакте API (club1)
            целое число, по умолчанию идентификатор
            текущего пользователя (Целое число, по умолчанию идентификатор текущего
            пользователя).
            </param>
            <param name="ownerId">
            Идентификатор владельца видеозаписи.
            Обратите внимание, идентификатор сообщества в параметре owner_id необходимо
            указывать со знаком "-" — например,
            owner_id=-1 соответствует идентификатору сообщества ВКонтакте API (club1)
            целое число, обязательный параметр
            (Целое число, обязательный параметр).
            </param>
            <param name="videoId">
            Идентификатор видеозаписи. положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <param name="extended">
            1 — возвращать расширенную информацию об альбомах. флаг, может принимать
            значения 1 или 0, по
            умолчанию 0 (Флаг, может принимать значения 1 или 0, по умолчанию 0).
            </param>
            <returns>
            Возвращает список идентификаторов альбомов, в которых видеозапись находится у
            пользователя или сообщества с
            идентификатором target_id. Если был передан параметр extended=1, возвращается
            список объектов альбомов с
            дополнительной информацией о каждом из них.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/video.getAlbumsByVideo
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategoryAsync.GetCatalogAsync(VkNet.Model.RequestParams.VideoGetCatalogParams)">
            <summary>
            Позволяет получить представление каталога видео.
            </summary>
            <returns>
            После успешного выполнения возвращает массив объектов — блоков видеокаталога.
            Каждый из объектов содержит массив
            объектов — элементов блока и дополнительную информацию для отображения блока.
            Данные для отображения блока видеокаталога
            name заголовок блока.
            строка id идентификатор блока. Возвращается строка для предопределенных блоков.
            Для других возвращается число.
            Предопределенные блоки:
            my — видеозаписи пользователя;
            feed — записи сообществ и друзей, содержащие видеозаписи, а также новые
            видеозаписи, добавленные ими;
            ugc — популярные видеозаписи;
            series — сериалы и телешоу.
            строка или число can_hide наличие возможности скрыть блок.
            флаг, может принимать значения 1 или 0 type тип блока. Может принимать
            значения:
            channel — видеозаписи сообщества;
            category — подборки видеозаписей.
            строка next параметр для получения следующей страницы результатов. Необходимо
            передать его значение в from в
            следующем вызове, чтобы получить содержимое каталога, следующее за полученным в
            текущем вызове.
            строка
            Элемент блока видеокаталога
            id идентификатор элемента.
            положительное число owner_id идентификатор владельца элемента.
            int (числовое значение) title заголовок.
            строка type тип элемента. Может принимать значения:
            video — видеоролик;
            album — альбом.
            строка
            type=video. Дополнительные поля для элемента-видеоролика
            duration длительность в секундах.
            положительное число description описание.
            строка date дата добавления.
            положительное число views число просмотров.
            положительное число comments число комментариев.
            положительное число photo_130 URL изображения-обложки видео с размером
            130x98px.
            строка photo_320 URL изображения-обложки видео с размером 320x240px.
            строка photo_640 URL изображения-обложки видео с размером 640x480px (если
            размер есть).
            строка can_add наличие возможности добавить видео в свой список.
            флаг, может принимать значения 1 или 0 can_edit наличие возможности
            редактировать видео.
            флаг, может принимать значения 1 или 0
            type=album. Дополнительные поля для элемента-альбома
            count число видеозаписей в альбоме.
            положительное число photo_320 URL изображения-обложки альбома с размером
            544x300px.
            строка photo_160 URL изображения-обложки альбома с размером 272x150px.
            строка updated_time время последнего обновления альбома.
            положительное число
            Если был передан параметр extended=1, возвращаются дополнительные объекты
            profiles и groups, содержащие информацию
            о пользователях и сообществах.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/video.getCatalog
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategoryAsync.GetCatalogSectionAsync(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <summary>
            Позволяет получить отдельный блок видеокаталога.
            </summary>
            <param name="sectionId">
            Значение id, полученное с блоком в методе video.getCatalog. строка,
            обязательный параметр
            (Строка, обязательный параметр).
            </param>
            <param name="from">
            Значение next, полученное с блоком в методе video.getCatalog строка,
            обязательный параметр (Строка,
            обязательный параметр).
            </param>
            <param name="count">
            Число элементов блока, которое нужно вернуть. положительное число, по умолчанию
            10, максимальное
            значение 16 (Положительное число, по умолчанию 10, максимальное значение 16).
            </param>
            <param name="extended">
            1 — возвращать дополнительную информацию о пользователях и сообществах в полях
            profiles и
            groups. флаг, может принимать значения 1 или 0, по умолчанию 0 (Флаг, может
            принимать значения 1 или 0, по
            умолчанию 0).
            </param>
            <returns>
            После успешного выполнения возвращает массив элементов блока видеокаталога и
            поле next для текущего блока.
            Элемент блока видеокаталога
            id идентификатор элемента.
            положительное число owner_id идентификатор владельца элемента.
            int (числовое значение) title заголовок.
            строка type тип элемента. Может принимать значения:
            video — видеоролик;
            album — альбом.
            строка
            type=video. Дополнительные поля для элемента-видеоролика
            duration длительность в секундах.
            положительное число description описание.
            строка date дата добавления.
            положительное число views число просмотров.
            положительное число comments число комментариев.
            положительное число photo_130 URL изображения-обложки видео с размером
            130x98px.
            строка photo_320 URL изображения-обложки видео с размером 320x240px.
            строка photo_640 URL изображения-обложки видео с размером 640x480px (если
            размер есть).
            строка can_add наличие возможности добавить видео в свой список.
            флаг, может принимать значения 1 или 0 can_edit наличие возможности
            редактировать видео.
            флаг, может принимать значения 1 или 0
            type=album. Дополнительные поля для элемента-альбома
            count число видеозаписей в альбоме.
            положительное число photo_320 URL изображения-обложки альбома с размером
            544x300px.
            строка photo_160 URL изображения-обложки альбома с размером 272x150px.
            строка updated_time время последнего обновления альбома.
            положительное число
            Если был передан параметр extended=1, возвращаются дополнительные объекты
            profiles и groups, содержащие информацию
            о пользователях и сообществах.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/video.getCatalogSection
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategoryAsync.HideCatalogSectionAsync(System.Int64)">
            <summary>
            Скрывает для пользователя раздел видеокаталога.
            </summary>
            <param name="sectionId">
            Значение id, полученное с блоком, который необходимо скрыть, в методе
            video.getCatalog
            обязательный параметр, целое число (Обязательный параметр, целое число).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/video.hideCatalogSection
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IWallCategoryAsync">
            <summary>
            Асинхронные методы для работы со стеной пользователя.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategoryAsync.GetAsync(VkNet.Model.RequestParams.WallGetParams,System.Boolean)">
            <summary>
            Возвращает список записей со стены пользователя или сообщества.
            </summary>
            <param name="params"> Входные параметры. </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            В случае успеха возвращается запрошенный список записей со стены.
            </returns>
            <exception cref="T:System.ArgumentException">
            OwnerID must be negative in case
            filter equal to Suggests;ownerId
            </exception>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategoryAsync.GetCommentsAsync(VkNet.Model.RequestParams.WallGetCommentsParams,System.Boolean)">
            <summary>
            Возвращает список комментариев к записи на стене.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            После успешного выполнения возвращает список объектов комментариев.
            Если был задан параметр need_likes=1, у объектов комментариев возвращается
            дополнительное поле likes:
            count — число пользователей, которым понравился комментарий;
            user_likes — наличие отметки «Мне нравится» от текущего пользователя
            (1 — есть, 0 — нет);
            can_like — информация о том, может ли текущий пользователь поставить отметку
            «Мне нравится»
            (1 — может, 0 — не может).
            Если был передан параметр start_comment_id, будет также возвращено поле
            real_offset – итоговое смещение данного
            подмножества комментариев (оно может быть отрицательным, если был указан
            отрицательный offset).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.getComments
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategoryAsync.GetByIdAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Nullable{System.Int64},VkNet.Enums.Filters.ProfileFields,System.Boolean)">
            <summary>
            Возвращает список записей со стен пользователей или сообществ по их
            идентификаторам.
            </summary>
            <param name="posts">
            Перечисленные через запятую идентификаторы, которые представляют собой идущие
            через знак подчеркивания id
            владельцев стен и id самих записей на стене.
            Пример значения posts:
            93388_21539,93388_20904,-1_340364 список строк, разделенных через запятую,
            обязательный параметр (Список строк,
            разделенных через запятую, обязательный параметр).
            </param>
            <param name="extended">
            1 - возвращает объекты пользователей и групп, необходимые для отображения
            записей. флаг, может
            принимать значения 1 или 0 (Флаг, может принимать значения 1 или 0).
            </param>
            <param name="copyHistoryDepth">
            Определяет размер массива copy_history, возвращаемого в ответе, если запись
            является репостом записи с другой
            стены.
            Например, copy_history_depth=1 — copy_history будет содержать один элемент с
            информацией о записи, прямым репостом
            которой является текущая.
            copy_history_depth=2 — copy_history будет содержать два элемента, добавляется
            информация о записи, репостом которой
            является первый элемент, и так далее (при условии, что иерархия репостов
            требуемой глубины для текущей записи
            существует). целое число, по умолчанию 2 (Целое число, по умолчанию 2).
            </param>
            <param name="fields">
            Список дополнительных полей для профилей и  групп, которые необходимо вернуть.
            См. описание полей объекта user и
            описание полей объекта group.
            Обратите внимание, этот параметр учитывается только при extended=1. список
            строк, разделенных через запятую (Список
            строк, разделенных через запятую).
            </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            После успешного выполнения возвращает список объектов записей со стены.
            Если был задан параметр extended=1, ответ содержит три отдельных списка:
            items — содержит объекты записей со стены;
            profiles — содержит объекты пользователей с дополнительными полями sex, photo,
            photo_medium_rec и online;
            groups — содержит объекты сообществ.
            Если запись является репостом записи с другой стены, в ответе дополнительно
            возвращается массив copy_history
            записей со стены, репостом которых является текущая.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.getById
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategoryAsync.PostAsync(VkNet.Model.RequestParams.WallPostParams)">
            <summary>
            Публикует новую запись на своей или чужой стене.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <returns>
            После успешного выполнения возвращает идентификатор созданной записи (post_id).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.post
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategoryAsync.RepostAsync(System.String,System.String,System.Nullable{System.Int64},System.Boolean)">
            <summary>
            Копирует объект на стену пользователя или сообщества.
            </summary>
            <param name="object">
            Строковый идентификатор объекта, который необходимо разместить на стене,
            например, wall66748_3675
            или wall-1_340364. строка, обязательный параметр (Строка, обязательный
            параметр).
            </param>
            <param name="message">
            Сопроводительный текст, который будет добавлен к записи с объектом. строка
            (Строка).
            </param>
            <param name="groupId">
            Идентификатор сообщества, на стене которого будет размещена запись с объектом.
            Если не указан,
            запись будет размещена на стене текущего пользователя. положительное число
            (Положительное число).
            </param>
            <param name="markAsAds"> Строка (Строка). </param>
            <returns>
            После успешного выполнения возвращает объект со следующими полями:
            success
            post_id — идентификатор созданной записи;
            reposts_count — количество репостов объекта с учетом осуществленного;
            likes_count — число отметок «Мне нравится» у объекта.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.repost
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategoryAsync.EditAsync(VkNet.Model.RequestParams.WallEditParams)">
            <summary>
            Редактирует запись на стене.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.edit
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategoryAsync.DeleteAsync(System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Удаляет запись со стены.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, на стене которого находится запись.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="postId">
            Идентификатор записи на стене. положительное число
            (Положительное число).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.delete
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategoryAsync.RestoreAsync(System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Восстанавливает удаленную запись на стене пользователя или сообщества.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, на стене которого находилась
            удаленная запись.
            Обратите внимание, идентификатор сообщества в параметре owner_id необходимо
            указывать со знаком "-" — например,
            owner_id=-1 соответствует идентификатору сообщества ВКонтакте API (club1)
            целое число, по умолчанию идентификатор
            текущего пользователя (Целое число, по умолчанию идентификатор текущего
            пользователя).
            </param>
            <param name="postId">
            Идентификатор записи на стене. положительное число
            (Положительное число).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.restore
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategoryAsync.CreateCommentAsync(VkNet.Model.RequestParams.WallCreateCommentParams)">
            <summary>
            Добавляет комментарий к записи на стене.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <returns>
            После успешного выполнения возвращает идентификатор добавленного комментария
            (comment_id).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.createComment
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategoryAsync.DeleteCommentAsync(System.Nullable{System.Int64},System.Int64)">
            <summary>
            Удаляет комментарий текущего пользователя к записи на своей или чужой стене.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя, на чьей стене находится комментарий к записи.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="commentId">
            Идентификатор комментария. положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.deleteComment
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategoryAsync.RestoreCommentAsync(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Восстанавливает комментарий текущего пользователя к записи на своей или чужой
            стене.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, на стене которого находится
            комментарий к записи.
            Обратите внимание, идентификатор сообщества в параметре owner_id необходимо
            указывать со знаком "-" — например,
            owner_id=-1 соответствует идентификатору сообщества ВКонтакте API (club1)
            целое число, по умолчанию идентификатор
            текущего пользователя (Целое число, по умолчанию идентификатор текущего
            пользователя).
            </param>
            <param name="commentId">
            Идентификатор комментария на стене. целое число, обязательный параметр (Целое
            число,
            обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.restoreComment
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategoryAsync.SearchAsync(VkNet.Model.RequestParams.WallSearchParams,System.Boolean)">
            <summary>
            Метод, позволяющий осуществлять поиск по стенам пользователей.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            После успешного выполнения возвращает список объектов записей на стене.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.search
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategoryAsync.GetRepostsAsync(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Boolean)">
            <summary>
            Позволяет получать список репостов заданной записи.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, на стене которого находится запись.
            Если параметр не
            задан, то он считается равным идентификатору текущего пользователя. Обратите
            внимание, идентификатор сообщества в
            параметре owner_id необходимо указывать со знаком "-" — например, owner_id=-1
            соответствует идентификатору
            сообщества ВКонтакте API (club1)  целое число, по умолчанию идентификатор
            текущего пользователя (Целое число, по
            умолчанию идентификатор текущего пользователя).
            </param>
            <param name="postId">
            Идентификатор записи на стене. положительное число
            (Положительное число).
            </param>
            <param name="offset">
            Смещение, необходимое для выборки определенного подмножества записей.
            положительное число
            (Положительное число).
            </param>
            <param name="count">
            Количество записей, которое необходимо получить. положительное число, по
            умолчанию 20, максимальное
            значение 1000 (Положительное число, по умолчанию 20, максимальное значение
            1000).
            </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            После успешного выполнения возвращает объект, содержащий поля:
            items — содержит массив записей-репостов;
            profiles — содержит объекты пользователей с дополнительными полями sex, online,
            photo, photo_medium_rec,
            screen_name;
            groups — содержит информацию о сообществах.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.getReposts
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategoryAsync.PinAsync(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Закрепляет запись на стене (запись будет отображаться выше остальных).
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, на стене которого находится запись.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="postId">
            Идентификатор записи на стене. положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.pin
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategoryAsync.UnpinAsync(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Отменяет закрепление записи на стене.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, на стене которого находится запись.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="postId">
            Идентификатор записи на стене. положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.unpin
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategoryAsync.EditCommentAsync(System.Int64,System.String,System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{VkNet.Model.Attachments.MediaAttachment})">
            <summary>
            Редактирует комментарий на стене пользователя или сообщества.
            </summary>
            <param name="ownerId">
            Идентификатор владельца стены. целое число, по умолчанию идентификатор текущего
            пользователя
            (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="commentId">
            Идентификатор комментария, который необходимо отредактировать. положительное
            число,
            обязательный параметр (Положительное число, обязательный параметр).
            </param>
            <param name="message"> Новый текст комментария. строка (Строка). </param>
            <param name="attachments">
            Новые вложения к комментарию. список строк, разделенных через запятую (Список
            строк,
            разделенных через запятую).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.editComment
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategoryAsync.ReportPostAsync(System.Int64,System.Int64,System.Nullable{VkNet.Enums.ReportReason})">
            <summary>
            Позволяет пожаловаться на запись.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит запись. целое
            число, обязательный
            параметр (Целое число, обязательный параметр).
            </param>
            <param name="postId">
            Идентификатор записи. положительное число, обязательный параметр (Положительное
            число,
            обязательный параметр).
            </param>
            <param name="reason">
            Причина жалобы:
            0 — спам;
            1 — детская порнография;
            2 — экстремизм;
            3 — насилие;
            4 — пропаганда наркотиков;
            5 — материал для взрослых;
            6 — оскорбление.
            положительное число (Положительное число).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.reportPost
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategoryAsync.ReportCommentAsync(System.Int64,System.Int64,System.Nullable{VkNet.Enums.ReportReason})">
            <summary>
            Позволяет пожаловаться на комментарий к записи.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит комментарий.
            целое число,
            обязательный параметр (Целое число, обязательный параметр).
            </param>
            <param name="commentId">
            Идентификатор комментария. положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <param name="reason">
            Причина жалобы:
            0 — спам;
            1 — детская порнография;
            2 — экстремизм;
            3 — насилие;
            4 — пропаганда наркотиков;
            5 — материал для взрослых;
            6 — оскорбление.
            положительное число (Положительное число).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.reportComment
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategoryAsync.EditAdsStealthAsync(VkNet.Model.RequestParams.EditAdsStealthParams)">
            <summary>
            Позволяет отредактировать скрытую запись.
            </summary>
            <param name="params"> Параметры запроса </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.editAdsStealth
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategoryAsync.PostAdsStealthAsync(VkNet.Model.RequestParams.PostAdsStealthParams)">
            <summary>
            Позволяет создать скрытую запись,
            которая не попадает на стену сообщества и в дальнейшем может быть использована
            для создания рекламного объявления типа "Запись в сообществе".
            </summary>
            <param name="params"> Параметры запроса </param>
            <returns>
            Идентификатор созданной записи
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.postAdsStealth
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategoryAsync.OpenCommentsAsync(System.Int64,System.Int64)">
            <summary>
            Включает комментирование записи
            Работает только с конкретными записями, комментирование которых было
            выключено с помощью wall.closeComments
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, на стене которого находится запись.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1).
            </param>
            <param name="postId">
            Идентификатор записи на стене. положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.openComments
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategoryAsync.CloseCommentsAsync(System.Int64,System.Int64)">
            <summary>
            Выключает комментирование записи
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, на стене которого находится запись.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1).
            </param>
            <param name="postId">
            Идентификатор записи на стене. положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.closeComments
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IWidgetsCategoryAsync">
            <summary>
            Widgets Методы для работы с виджетами на внешних сайтах.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IWidgetsCategoryAsync.GetCommentsAsync(VkNet.Model.RequestParams.GetCommentsParams)">
            <summary>
            Получает список комментариев к странице, оставленных через Виджет комментариев.
            </summary>
            <param name="getCommentsParams">
            Входные параметры запроса.
            </param>
            <returns>
            В случае успеха возвращает объект со следующими полями:
            count — общее количество комментариев первого уровня к странице (без учета
            ограничений из входного параметра
            count).
            posts — список комментариев первого уровня. Каждый элемент списка имеет
            структуру, схожую с объектами post из
            результатов метода wall.get. Помимо этого:
            В случае, если среди необходимых полей было указано replies, в поле
            comments.replies будет содержаться список
            комментариев второго уровня. Каждый элемент этого списка имеет структуру,
            схожую с объектами comment из результатов
            метода wall.getComments.
            В случае, если были указаны любые другие необходимые поля анкет, в каждом
            элементе post и comment будет поле user,
            содержащее соответствующую информацию об авторе комментария.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/widgets.getComments
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWidgetsCategoryAsync.GetPagesAsync(System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <summary>
            Получает список страниц приложения/сайта, на которых установлен Виджет
            комментариев или «Мне нравится».
            </summary>
            <param name="widgetApiId">
            Идентификатор приложения/сайта, с которым инициализируются виджеты. целое число
            </param>
            <param name="order">
            Тип сортировки страниц. Возможные значения: date, comments, likes,
            friend_likes. строка, по умолчанию friend_likes
            </param>
            <param name="period">
            Период выборки. Возможные значения: day, week, month, alltime. строка, по
            умолчанию week
            </param>
            <param name="offset">
            Смещение необходимое для выборки определенного подмножества комментариев. По
            умолчанию 0. положительное число, по
            умолчанию 0
            </param>
            <param name="count">
            Количество возвращаемых записей. положительное число, по умолчанию 10,
            минимальное значение 10, максимальное
            значение 200
            </param>
            <returns>
            В случае успеха возвращает объект со следующими полями:
            count — общее количество страниц (без учета ограничений входного параметра
            count)
            pages — список объектов-страниц
            Каждый объект, описывающий страницу, имеет следующие поля:
            id — идентификатор страницы в системе;
            title — заголовок страницы (берется из мета-тегов на странице или задается
            параметром pageTitle при инициализации)
            description — краткое описание страницы (берется из мета-тегов на странице или
            задается параметром pageDescription
            при инициализации);
            photo — объект, содержащий фотографию-миниатюру страницы (берется из мета-тегов
            на странице или задается параметром
            pageImage при инициализации)
            url — абсолютный адрес страницы;
            likes — объект, содержащий поле count — количество отметок «Мне нравится» к
            странице. Для получения списка
            пользователей, отметивших страницу можно использовать метод likes.getList с
            параметром type равным site_page;
            comments — объект, содержащий поле count — количество комментариев к странице
            внутри виджета. Для получения списка
            комментариев можно использовать метод widgets.getComments;
            date — дата первого обращения к виджетам на странице
            page_id — внутренний идентификатор страницы в приложении/на сайте (в случае,
            если при инициализации виджетов
            использовался параметр page_id);
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/widgets.getPages
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IAccountCategory">
            <summary>
            Методы этого класса позволяют производить действия с аккаунтом пользователя.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategory.GetCounters(VkNet.Enums.Filters.CountersFilter)">
            <summary>
            Возвращает ненулевые значения счетчиков пользователя.
            </summary>
            <param name="filter">
            Счетчики, информацию о которых нужно вернуть (friends, messages, photos,
            videos, notes, gifts, events, groups,
            notifications, sdk, app_requests).
            sdk - возвращает количество запросов в приложениях.
            app_requests - возвращает количество непрочитанных запросов в приложениях.
            список слов, разделенных через запятую
            (Список слов, разделенных через запятую).
            </param>
            <returns>
            Возвращает объект, который может содержать поля friends, messages, photos,
            videos, notes, gifts, events, groups,
            notifications, sdk, app_requests.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.getCounters
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategory.SetNameInMenu(System.String,System.Nullable{System.Int64})">
            <summary>
            Устанавливает короткое название приложения (до 17 символов), которое выводится
            пользователю в левом меню.
            </summary>
            <param name="userId">
            Идентификатор пользователя. положительное число, по умолчанию идентификатор
            текущего пользователя,
            обязательный параметр (Положительное число, по умолчанию идентификатор текущего
            пользователя, обязательный
            параметр).
            </param>
            <param name="name"> Короткое название приложения. строка (Строка). </param>
            <returns>
            Возвращает 1 в случае успешной установки короткого названия.
            Если пользователь не установил приложение в левое меню, метод вернет ошибку 148
            (Access to the menu of the user
            denied). Избежать этой ошибки можно с помощью метода account.getAppPermissions.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.setNameInMenu
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategory.SetOnline(System.Nullable{System.Boolean})">
            <summary>
            Помечает текущего пользователя как online на 15 минут.
            </summary>
            <param name="voip">
            Возможны ли видеозвонки для данного устройства флаг, может принимать значения 1
            или 0 (Флаг, может
            принимать значения 1 или 0).
            </param>
            <returns>
            В случае успешного выполнения метода будет возвращён код 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.setOnline
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategory.SetOffline">
            <summary>
            Помечает текущего пользователя как offline.
            </summary>
            <returns>
            В случае успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.setOffline
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategory.RegisterDevice(VkNet.Model.RequestParams.AccountRegisterDeviceParams)">
            <summary>
            Подписывает устройство на базе iOS, Android или Windows Phone на получение
            Push-уведомлений.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            Возвращает 1 в случае успешного выполнения метода.
            На iOS и Windows Phone push-уведомления будут отображены без какой либо
            обработки.
            На Android будут приходить события в следующем формате.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.registerDevice
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategory.UnregisterDevice(System.String,System.Nullable{System.Boolean})">
            <summary>
            Отписывает устройство от Push уведомлений.
            </summary>
            <param name="deviceId">
            Уникальный идентификатор устройства. строка, доступен начиная с версии 5.31
            (Строка, доступен
            начиная с версии 5.31).
            </param>
            <param name="sandbox">
            Флаг предназначен для iOS устройств. 1 — отписать устройство, использующего
            sandbox сервер для
            отправки push-уведомлений, 0 — отписать устройство, не использующее sandbox
            сервер флаг, может принимать значения 1
            или 0, по умолчанию 0 (Флаг, может принимать значения 1 или 0, по умолчанию 0).
            </param>
            <returns>
            Возвращает <c> true </c> в случае успешного выполнения метода.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.unregisterDevice
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategory.SetSilenceMode(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Отключает push-уведомления на заданный промежуток времени.
            </summary>
            <param name="deviceId"> Идентификатор устройства для сервиса push уведомлений. </param>
            <param name="time">
            Время в секундах на которое требуется отключить уведомления. (-1 - отключить
            навсегда)
            </param>
            <param name="peerId">
            Идентификатор чата, для которого следует отключить
            уведомления.
            </param>
            <param name="sound">
            1 - включить звук в данном диалоге, 0 - отключить звук (параметр работает
            только если указан в
            peer_id передан идентификатор групповой беседы или пользователя)
            </param>
            <returns>
            Возвращает результат выполнения метода.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.setSilenceMode
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategory.GetPushSettings(System.String)">
            <summary>
            Позволяет получать настройки Push уведомлений.
            </summary>
            <param name="deviceId">
            Уникальный идентификатор устройства. строка, доступен начиная с версии 5.31
            (Строка, доступен
            начиная с версии 5.31).
            </param>
            <returns>
            Возвращает объект, содержащий поля:
            disabled — отключены ли уведомления.
            disabled_until — unixtime-значение времени, до которого временно отключены
            уведомления.
            conversations — список, содержащий настройки конкретных диалогов, и их
            количество первым элементом.
            settings — объект с настройками Push-уведомлений в специальном формате.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.getPushSettings
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategory.SetPushSettings(System.String,VkNet.Model.PushSettings,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Изменяет настройку Push-уведомлений.
            </summary>
            <param name="deviceId">
            Уникальный идентификатор устройства. строка, обязательный параметр (Строка,
            обязательный
            параметр).
            </param>
            <param name="settings">
            Сериализованный JSON-объект, описывающий настройки уведомлений в специальном
            формате данные в
            формате JSON (Данные в формате JSON).
            </param>
            <param name="key"> Ключ уведомления. строка (Строка). </param>
            <param name="value">
            Новое значение уведомления в специальном формате. список слов, разделенных
            через запятую (Список
            слов, разделенных через запятую).
            </param>
            <returns>
            Возвращает 1 в случае успешного выполнения метода.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.setPushSettings
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategory.GetAppPermissions(System.Int64)">
            <summary>
            Получает настройки текущего пользователя в данном приложении.
            </summary>
            <param name="userId">
            Идентификатор пользователя, информацию о настройках которого необходимо
            получить. По умолчанию —
            текущий пользователь. положительное число, по умолчанию идентификатор текущего
            пользователя, обязательный параметр
            (Положительное число, по умолчанию идентификатор текущего пользователя,
            обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает битовую маску настроек текущего
            пользователя в данном приложении.
            Пример Если Вы хотите получить права на Доступ к друзьям и Доступ к статусам
            пользователя, то Ваша битовая маска
            будет равна: 2   1024 = 1026.
            Если, имея битовую маску 1026, Вы хотите проверить, имеет ли она доступ к
            друзьям — Вы можете сделать 1026 &amp; 2.
            Например alert(1026 &amp; 2);
            см. Список возможных настроек прав доступа.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.getAppPermissions
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategory.GetActiveOffers(System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <summary>
            Возвращает список активных рекламных предложений (офферов), выполнив которые
            пользователь сможет получить
            соответствующее количество голосов на свой счёт внутри приложения.
            </summary>
            <param name="offset">
            Смещение, необходимое для выборки определенного подмножества офферов.
            положительное число, по
            умолчанию 0 (Положительное число, по умолчанию 0).
            </param>
            <param name="count">
            Количество офферов, которое необходимо получить положительное число, по
            умолчанию 100, максимальное
            значение 100 (Положительное число, по умолчанию 100, максимальное значение
            100).
            </param>
            <returns>
            Возвращает массив, состоящий из общего количества старгетированных на текущего
            пользователя специальных предложений
            (первый элемент), и списка объектов с информацией о предложениях.
            В случае, если на пользователя не старгетировано ни одного специального
            предложения, массив будет содержать элемент
            0 (количество специальных предложений).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.getActiveOffers
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategory.BanUser(System.Int64)">
            <summary>
            Добавляет пользователя в черный список.
            </summary>
            <param name="userId">
            Идентификатор пользователя, которого нужно добавить в черный список.
            положительное число,
            обязательный параметр (Положительное число, обязательный параметр).
            </param>
            <returns>
            В случае успеха метод вернет <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.banUser
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategory.UnbanUser(System.Int64)">
            <summary>
            Убирает пользователя из черного списка.
            </summary>
            <param name="userId">
            Идентификатор пользователя, которого нужно убрать из черного списка.
            положительное число,
            обязательный параметр (Положительное число, обязательный параметр).
            </param>
            <returns>
            В случае успеха метод вернет <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.unbanUser
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategory.GetBanned(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает список пользователей, находящихся в черном списке.
            </summary>
            <param name="offset">
            Смещение необходимое для выборки определенного подмножества черного списка.
            положительное число
            (Положительное число).
            </param>
            <param name="count">
            Количество записей, которое необходимо вернуть. положительное число, по
            умолчанию 20, максимальное
            значение 200 (Положительное число, по умолчанию 20, максимальное значение 200).
            </param>
            <returns>
            Возвращает набор объектов пользователей, находящихся в черном списке.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.getBanned
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategory.GetInfo(VkNet.Enums.Filters.AccountFields)">
            <summary>
            Возвращает информацию о текущем аккаунте.
            </summary>
            <param name="fields">
            Список полей, которые необходимо вернуть. Возможные значения: (country,
            http_required,
            own_posts_default, no_wall_replies, intro, lang, По умолчанию будут возвращены
            все поля. список слов, разделенных
            через запятую (Список слов, разделенных через запятую).
            </param>
            <returns>
            Метод возвращает объект, содержащий следующие поля:
            country – строковой код страны, определенный по IP адресу, с которого сделан
            запрос;
            https_required – 1 - пользователь установил на сайте настройку "Всегда
            использовать безопасное соединение"; 0 -
            безопасное соединение не требуется;
            own_posts_default – 1 - на стене пользователя по-умолчанию должны отображаться
            только собственные записи.
            Соответствует настройке на сайте "Показывать только мои записи", 0 - на стене
            пользователя должны отображаться все
            записи;
            no_wall_replies – 1 - пользователь отключил комментирование записей на стене, 0
            - комментирование записей
            разрешено;
            intro – битовая маска отвечающая за прохождение обучения использованию
            приложения;
            lang – числовой идентификатор текущего языка пользователя.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.getInfo
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategory.SetInfo(System.String,System.String)">
            <summary>
            Позволяет редактировать информацию о текущем аккаунте.
            </summary>
            <param name="name"> Имя настройки. </param>
            <param name="value"> Значение настройки. </param>
            <returns>
            В результате успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.setInfo
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategory.ChangePassword(System.String,System.String,System.String,System.String)">
            <summary>
            Позволяет сменить пароль пользователя после успешного восстановления доступа к
            аккаунту через СМС, используя метод
            auth.restore.
            </summary>
            <param name="restoreSid">
            Идентификатор сессии, полученный при восстановлении доступа используя метод
            auth.restore. (В
            случае если пароль меняется сразу после восстановления доступа) строка
            (Строка).
            </param>
            <param name="changePasswordHash">
            Хэш, полученный при успешной OAuth авторизации по коду полученному по СМС (В
            случае
            если пароль меняется сразу после восстановления доступа) строка (Строка).
            </param>
            <param name="oldPassword"> Текущий пароль пользователя. строка (Строка). </param>
            <param name="newPassword">
            Новый пароль, который будет установлен в качестве текущего. строка, минимальная
            длина 6,
            обязательный параметр (Строка, минимальная длина 6, обязательный параметр).
            </param>
            <returns>
            В результате выполнения этого метода будет возвращен объект с полем token,
            содержащим новый токен, и полем secret в
            случае, если токен был nohttps.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.changePassword
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategory.GetProfileInfo">
            <summary>
            Возвращает информацию о текущем профиле.
            </summary>
            <returns> Информация о текущем профиле в виде Model.User </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.getProfileInfo
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategory.SaveProfileInfo(System.Int32)">
            <summary>
            Редактирует информацию текущего профиля.
            </summary>
            <param name="cancelRequestId">
            Идентификатор заявки на смену имени, которую
            необходимо отменить.
            </param>
            <returns> Результат отмены заявки. </returns>
            <remarks>
            Метод вынесен как отдельный, потому что если в запросе передан параметр
            <paramref name="cancelRequestId" />,
            все остальные параметры игнорируются.
            </remarks>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.saveProfileInfo
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategory.SaveProfileInfo(VkNet.Model.ChangeNameRequest@,VkNet.Model.RequestParams.AccountSaveProfileInfoParams)">
            <summary>
            Редактирует информацию текущего профиля.
            </summary>
            <param name="changeNameRequest">
            Если в параметрах передавалось имя или фамилия пользователя,
            в этом параметре будет возвращен объект типа ChangeNameRequest
            </param>
            <param name="params"> The parameters. </param>
            <returns>
            Результат отмены заявки.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.saveProfileInfo
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategory.GetPrivacySettings">
            <inheritdoc cref="M:VkNet.Abstractions.IAccountCategoryAsync.GetPrivacySettingsAsync(System.Threading.CancellationToken)" />
        </member>
        <member name="M:VkNet.Abstractions.IAccountCategory.SetPrivacy(System.String,System.String)">
            <inheritdoc cref="M:VkNet.Abstractions.IAccountCategoryAsync.SetPrivacyAsync(System.String,System.String)" />
        </member>
        <member name="T:VkNet.Abstractions.IAdsCategory">
            <summary>
            Методы этого класса позволяют производить действия с рекламными кабинетам
            пользователя.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.AddOfficeUsers(System.Int64,System.String)">
            <summary>
            Добавляет администраторов и/или наблюдателей в рекламный кабинет.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "data">
            Сериализованный JSON-массив объектов, описывающих добавляемых администраторов. Описание объектов user_specification см. ниже. обязательный параметр, строка
            </param>
            <returns>
            Возвращает массив значений - ответов на каждый запрос в массиве data. Соответствующее значение в выходном массиве равно true, если администратор успешно добавлен, и false в другом случае.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.addOfficeUsers
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.CheckLink(System.Int64,VkNet.Enums.SafetyEnums.AdsLinkType,System.String,System.Nullable{System.Int64})">
            <summary>
            Проверяет ссылку на рекламируемый объект.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "linkType">
            Вид рекламируемого объекта:
            community — сообщество;
            post — запись в сообществе;
            application — приложение ВКонтакте;
            video — видеозапись;
            site — внешний сайт.
            обязательный параметр, строка
            </param>
            <param name = "linkUrl">
            Ссылка на рекламируемый объект. обязательный параметр, строка
            </param>
            <param name = "campaignId">
            Id кампании, в которой будет создаваться объявление. целое число
            </param>
            <returns>
            Возвращается структура со следующими полями:
            status — статус ссылки:
            allowed — ссылку допустимо использовать в рекламных объявлениях;
            disallowed — ссылку недопустимо использовать для указанного вида рекламируемого объекта;
            in_progress — ссылка проверяется, необходимо немного подождать.
            description (если status равен disallowed, необязательное поле) — описание причины недопустимости использования ссылки.
            redirect_url (если конечная ссылка отличается от исходной и если status равен allowed) — конечная ссылка.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.checkLink
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.CreateAds(System.Int64,System.String)">
            <summary>
            Создает рекламные объявления.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "data">
            Сериализованный JSON-массив объектов, описывающих создаваемые объявления. Описание объектов ad_specification см. ниже.
            Пример значения data: [{
            "campaign_id": 123456,
            "ad_format": 1,
            "cost_type": 0,
            "cpc": 2.00,
            "category1_id" : 5,
            "title": "Test Title",
            "link_url" : "https://mysite.com",
            "name": "My ad"
            }] обязательный параметр, строка
            </param>
            <returns>
            Возвращает массив объектов - ответов на каждый запрос в массиве data. Соответствующий объект в выходном массиве имеет свойство id, соответствующее id созданного объявления (или 0 в случае неудачи), а также, возможно, поля error_code и error_desc, описывающие ошибку, при ее возникновении. Наличие одновременно ненулевого id и error_code говорит о том, что объявление было создано, однако, возможно, не все параметры установлены (например, объявление не запущено).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.createAds
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.CreateCampaigns(System.Int64,System.String)">
            <summary>
            Создает рекламные кампании.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "data">
            Сериализованный JSON-массив объектов, описывающих создаваемые кампании. Описание объектов campaign_specification см. ниже. обязательный параметр, строка
            </param>
            <returns>
            Возвращает массив ответов на запросы в массиве data. Соответствующий объект в выходном массиве содержит id созданной кампании (ноль в случае неудачи), и поля error_code и error_desc в случае возникновения ошибки. Ненулевой id и наличие error_code 602 говорит о том, что кампания создана, но, возможно, некоторые поля не были ей присвоены по причине их некорректности.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.createCampaigns
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.CreateClients(System.Int64,System.String)">
            <summary>
            Создаёт клиентов рекламного агентства.
            </summary>
            <param name = "accountId">
            Id рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "data">
            Сериализованный JSON-массив объектов, описывающих создаваемые кампании. Описание объектов client_specification см. ниже. обязательный параметр, строка
            </param>
            <returns>
            Возвращает массив ответов на запросы в массиве data. Соответствующий объект в выходном массиве содержит id созданного клиента (ноль в случае неудачи), и поля error_code и error_desc в случае возникновения ошибки. Ненулевой id и наличие error_code 602 говорит о том, что клиент создан, но, возможно, некоторые поля не были ему присвоены по причине их некорректности.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.createClients
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.CreateLookalikeRequest(System.Int64,System.String,System.Nullable{System.Int64},System.Object)">
            <summary>
            Создаёт запрос на поиск похожей аудитории.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "sourceType">
            Тип источника исходной аудитории. На данный момент может принимать единственное значение retargeting_group. строка, обязательный параметр
            </param>
            <param name = "clientId">
            Только для рекламных агентств.
            идентификатор клиента, для которого будет создаваться аудитория. целое число
            </param>
            <param name = "retargetingGroupId">
            Только для источника типа retargeting_group: идентификатор аудитории ретаргетинга.
            </param>
            <returns>
            Поле request_id, в котором указан идентификатор созданного запроса на поиск похожей аудитории.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.createLookalikeRequest
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.CreateTargetGroup(VkNet.Model.RequestParams.Ads.CreateTargetGroupParams)">
            <summary>
            Создает аудиторию для ретаргетинга рекламных объявлений на пользователей, которые посетили сайт рекламодателя (просмотрели информации о товаре, зарегистрировались и т.д.).
            </summary>
            <param name = "createTargetGroupParams">
            Входные параметры запроса.
            </param>
            <returns>
            Возвращает объект со следующими полями:
            id — идентификатор аудитории.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.createTargetGroup
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.CreateTargetPixel(System.Int64,System.String,System.String,System.Int64,System.Nullable{System.Int64})">
            <summary>
            Создаёт пиксель ретаргетинга.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "name">
            Название пикселя — строка до 64 символов. обязательный параметр, строка
            </param>
            <param name = "domain">
            Домен сайта, на котором будет размещен пиксель. строка
            </param>
            <param name = "categoryId">
            Идентификатор категории сайта, на котором будет размещен пиксель. Для получения списка возможных идентификаторов следует использовать метод ads.getSuggestions (раздел interest_categories_v2). обязательный параметр, целое число
            </param>
            <param name = "clientId">
            Только для рекламных агентств.
            id клиента, в рекламном кабинете которого будет создаваться пиксель. целое число
            </param>
            <returns>
            Возвращает объект со следующими полями:
            id — идентификатор пикселя
            pixel — код для размещения на сайте рекламодателя
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.createTargetPixel
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.DeleteAds(System.Int64,System.String)">
            <summary>
            Архивирует рекламные объявления.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "ids">
            Сериализованный JSON-массив, содержащий идентификаторы объявлений. обязательный параметр, строка
            </param>
            <returns>
            Возвращает массив ответов на каждый запрос. Каждый ответ является либо 0, что означает успешное удаление, либо код ошибки.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.deleteAds
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.DeleteCampaigns(System.Int64,System.String)">
            <summary>
            Архивирует рекламные кампании.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "ids">
            Сериализованный JSON-массив, содержащий id удаляемых кампаний. обязательный параметр, строка
            </param>
            <returns>
            Возвращает массив ответов на каждый запрос. Каждый ответ является либо 0, что означает успешное удаление, либо код ошибки.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.deleteCampaigns
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.DeleteClients(System.Int64,System.String)">
            <summary>
            Архивирует клиентов рекламного агентства.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "ids">
            Сериализованный JSON-массив, содержащий id удаляемых клиентов. обязательный параметр, строка
            </param>
            <returns>
            Возвращает массив ответов на каждый запрос. Каждый ответ является либо 0, что означает успешное удаление, либо код ошибки.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.deleteClients
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.DeleteTargetGroup(System.Int64,System.Int64,System.Nullable{System.Int64})">
            <summary>
            Удаляет аудиторию ретаргетинга.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "targetGroupId">
            Идентификатор аудитории. обязательный параметр, целое число
            </param>
            <param name = "clientId">
            Только для рекламных агентств.
            id клиента, в рекламном кабинете которого будет удаляться аудитория. целое число
            </param>
            <returns>
            В случае успеха метод возвратит 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.deleteTargetGroup
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.DeleteTargetPixel(System.Int64,System.Int64,System.Nullable{System.Int64})">
            <summary>
            Удаляет пиксель ретаргетинга.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "targetPixelId">
            Идентификатор пикселя. обязательный параметр, целое число
            </param>
            <param name = "clientId">
            Только для рекламных агентств.
            id клиента, в рекламном кабинете которого будет удаляться пиксель. целое число
            </param>
            <returns>
            В случае успеха метод возвратит 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.deleteTargetPixel
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.GetAccounts">
            <summary>
            Возвращает список рекламных кабинетов.
            </summary>
            <returns>
            Возвращает массив объектов, описывающих рекламные кабинеты. Каждый объект содержит следующие поля:
            account_id
            integerидентификатор рекламного кабинета. account_type
            stringтип рекламного кабинета. Возможные значения:
            general — обычный;
            agency — агентский. account_status
            integer, [0,1]статус рекламного кабинета. Возможные значения:
            1 — активен;
            0 — неактивен. access_role
            stringправа пользователя в рекламном кабинете. Возможные значения:
            admin — главный администратор;
            manager — администратор;
            reports — наблюдатель.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getAccounts
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.GetAds(VkNet.Model.RequestParams.Ads.GetAdsParams)">
            <summary>
            Возвращает список рекламных объявлений.
            </summary>
            <param name = "getAdsParams">
            Входные параметры запроса.
            </param>
            <returns>
            Возвращает массив объектов, описывающих объявления. Каждый объект содержит следующие поля:
            id
            integerидентификатор объявления. campaign_id
            integerидентификатор кампании. ad_format
            integerформат объявления. Возможные значения:
            1 — изображение и текст;
            2 — большое изображение;
            3 — эксклюзивный формат;
            4 — продвижение сообществ или приложений, квадратное изображение;
            5 — приложение в новостной ленте (устаревший);
            6 — мобильное приложение;
            9 — запись в сообществе. cost_type
            integer, [0,1]тип оплаты. Возможные значения:
            0 — оплата за переходы;
            1 — оплата за показы. cpc
            integer(если cost_type = 0) цена за переход в копейках. cpm
            integer(если cost_type = 1) цена за 1000 показов в копейках. impressions_limit
            integer(если задано) ограничение количества показов данного объявления на одного пользователя. Может присутствовать для некоторых форматов объявлений, для которых разрешена установка точного значения. impressions_limited
            integer, [1](если задано) признак того, что количество показов объявления на одного пользователя ограничено. Может присутствовать для некоторых объявлений, для которых разрешена установка ограничения, но не разрешена установка точного значения. 1 — не более 100 показов на одного пользователя. ad_platform(если значение применимо к данному формату объявления) рекламные площадки, на которых будет показываться объявление. Возможные значения:
            (если ad_format равен 1)
            0 — ВКонтакте и сайты-партнёры;
            1 — только ВКонтакте.
            (если ad_format равен 9)
            all — все площадки;
            desktop — полная версия сайта;
            mobile — мобильный сайт и приложения. ad_platform_no_wall
            integer, [1]1 — для объявления задано ограничение «Не показывать на стенах сообществ». all_limit
            integerобщий лимит объявления в рублях. 0 — лимит не задан. category1_id
            integerID тематики или подраздела тематики объявления. См. ads.getCategories. category2_id
            integerID тематики или подраздела тематики объявления. Дополнительная тематика. status
            integerстатус объявления. Возможные значения:
            0 — объявление остановлено;
            1 — объявление запущено;
            2 — объявление удалено. name
            stringназвание объявления. approved
            integerстатус модерации объявления. Возможные значения:
            0 — объявление не проходило модерацию;
            1 — объявление ожидает модерации;
            2 — объявление одобрено;
            3 — объявление отклонено. video
            integer, [1]1 — объявление является видеорекламой. disclaimer_medical
            integer, [1]1 — включено отображение предупреждения:
            «Есть противопоказания. Требуется консультация специалиста.» disclaimer_specialist
            integer, [1]1 — включено отображение предупреждения:
            «Необходима консультация специалистов.» disclaimer_supplements
            integer, [1]1 — включено отображение предупреждения:
            «БАД. Не является лекарственным препаратом.» events_retargeting_groups
            arrayТолько для ad_format = 9. Описание событий, собираемых в группы ретаргетинга. Массив объектов, где ключом является id группы ретаргетинга, а значением - массив событий. Допустимые значений для событий:
            1 — просмотр промопоста;
            2 — переход по ссылке или переход в сообщество;
            3 — переход в сообщество;
            4 — подписка на сообщество;
            5 — отписка от новостей сообщества;
            6 — скрытие или жалоба;
            10 — запуск видео;
            11 — досмотр видео до 3с;
            12 — досмотр видео до 25%;
            13 — досмотр видео до 50%;
            14 — досмотр видео до 75%;
            15 — досмотр видео до 100%;
            20 — лайк продвигаемой записи;
            21 — репост продвигаемой записи.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getAds
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.GetAdsLayout(VkNet.Model.RequestParams.Ads.GetAdsLayoutParams)">
            <summary>
            Возвращает описания внешнего вида рекламных объявлений.
            </summary>
            <param name = "getAdsLayoutParams">
            Входные параметры запроса.
            </param>
            <returns>
            Возвращает массив объектов, описывающих объявления. Каждый объект содержит следующие поля:
            id
            integer&gt;идентификатор объявления. campaign_id
            integer&gt;идентификатор кампании. ad_format
            integerформат объявления. Возможные значения:
            1 — изображение и текст;
            2 — большое изображение;
            3 — эксклюзивный формат;
            4 — продвижение сообществ или приложений, квадратное изображение;
            5 — приложение в новостной ленте (устаревший);
            6 — мобильное приложение;
            7 — специальный формат приложений;
            8 — специальный формат сообществ;
            9 — запись в сообществе;
            10 — витрина приложений. cost_type
            integer, [0,1]тип оплаты. Возможные значения:
            0 — оплата за переходы;
            1 — оплата за показы. video
            integer, [1]1 — объявление является видеорекламой. title
            stringзаголовок объявления. description
            stringописание объявления. link_url
            stringссылка на рекламируемый объект. link_domain
            stringдомен рекламируемого сайта. preview_link
            stringссылка, перейдя по которой можно просмотреть рекламное объявление так, как оно выглядит на сайте. Ссылка доступна в течение 30 минут после выполнения метода ads.getAdsLayout. image_src
            stringurl изображения объявления. image_src_2x
            stringurl изображения двойного разрешения.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getAdsLayout
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.GetAdsTargeting(VkNet.Model.RequestParams.Ads.GetAdsTargetingParams)">
            <summary>
            Возвращает параметры таргетинга рекламных объявлений
            </summary>
            <param name = "getAdsTargetingParams">
            Входные параметры запроса.
            </param>
            <returns>
            Возвращает массив объектов - описаний таргетинга объявлений.
            Отрицательные id в поле cities означают id регионов, взятых с обратным знаком.
            Поле count содержит размер целевой аудитории на момент сохранения объявления.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getAdsTargeting
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.GetBudget(System.Int64)">
            <summary>
            Возвращает текущий бюджет рекламного кабинета.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <returns>
            Возвращает единственное число — оставшийся бюджет в указанном рекламном кабинете.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getBudget
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.GetCampaigns(System.Int64,System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <summary>
            Возвращает список кампаний рекламного кабинета.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "campaignIds">
            Фильтр выводимых рекламных кампаний.
            Сериализованный JSON-массив, содержащий id кампаний. Выводиться будут только кампании, присутствующие в campaign_ids и являющиеся кампаниями указанного рекламного кабинета. Если параметр равен строке null, то выводиться будут все кампании. строка
            </param>
            <param name = "clientId">
            Обязателен для рекламных агентств, в остальных случаях не используется. Идентификатор клиента, у которого запрашиваются рекламные кампании. целое число
            </param>
            <param name = "includeDeleted">
            Флаг, задающий необходимость вывода архивных объявлений.
            0 — выводить только активные кампании;
            1 — выводить все кампании.
            флаг, может принимать значения 1 или 0
            </param>
            <returns>
            Возвращает массив объектов campaign, каждый из которых содержит следующие поля:
            id — идентификатор кампании
            type — тип кампании
            normal — обычная кампания, в которой можно создавать любые объявления, кроме мобильной рекламы и записей в сообществе
            vk_apps_managed — кампания, в которой можно рекламировать только администрируемые Вами приложения и у которой есть отдельный бюджет
            mobile_apps — кампания, в которой можно рекламировать только мобильные приложения
            promoted_posts — кампания, в которой можно рекламировать только записи в сообществе
            name — название кампании
            status — статус кампании
            0 — кампания остановлена
            1 — кампания запущена
            2 — кампания удалена
            day_limit — дневной лимит кампании в рублях
            0 — лимит не задан
            all_limit — общий лимит кампании в рублях
            0 — лимит не задан
            start_time — время запуска кампании в формате unixtime
            0 — время не задано
            stop_time — время остановки кампании в формате unixtime
            0 — время не задано
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getCampaigns
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.GetCategories(System.String)">
            <summary>
            Позволяет получить возможные тематики рекламных объявлений.
            </summary>
            <param name = "lang">
            Язык, на котором нужно вернуть результаты. Список поддерживаемых языков Вы можете найти на странице Запросы к API. строка
            </param>
            <returns>
            После успешного выполнения возвращает два массива объектов — v1 и v2, каждый из которых содержит объекты, описывающие тематики в следующем формате:
            id — идентификатор тематики;
            name — название тематики;
            subcategories[subcategory] (если есть хотя бы один подраздел) — список подразделов. Массив объектов, каждый из которых содержит следующие поля:
            id — идентификатор подраздела;
            name — название подраздела.
            Массив v1 включает устаревшие тематики. Актуальный список содержится в массиве v2.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getCategories
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.GetClients(System.Int64)">
            <summary>
            Возвращает список клиентов рекламного агентства.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <returns>
            Возвращает массив объектов client — клиентов агентства с номером account_id, каждый из которых содержит следующие поля:
            id — идентификатор клиента;
            name — название клиента;
            day_limit — дневной лимит клиента в рублях;
            all_limit — общий лимит клиента в рублях.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getClients
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.GetDemographics(VkNet.Model.RequestParams.Ads.GetDemographicsParams)">
            <summary>
            Возвращает демографическую статистику по рекламным объявлениям или кампаниям.
            </summary>
            <param name = "getDemographicsParams">
            Входные параметры запроса.
            </param>
            <returns>
            Каждый запрашиваемый объект имеет следующие поля:
            id — id объекта из параметра ids
            type — тип объекта из параметра ids_type
            stats — список структур описывающих статистику объекта за один временной период (конкретный временной период присутствует в списке, если по нему есть какая-то статистика)
            Структура в списке stats имеет следующие поля:
            day (если period равен day) — день в формате YYYY-MM-DD
            month (если period равен month) — месяц в формате YYYY-MM
            overall (если period равен overall) — 1
            sex — список структур, описывающих статистику по полу
            age — список структур, описывающих статистику по возрасту
            sex_age — список структур, описывающих статистику по полу и возрасту
            cities — список структур, описывающих статистику по городам
            Структура в списках sex, age, sex_age, cities имеет следующие поля:
            impressions_rate — часть аудитории, просмотревшая объявление, от 0 до 1
            clicks_rate — часть аудитории, кликнувшая по объявлению, от 0 до 1
            value — значение демографического показателя, имеет разные возможные значения для разных показателей
            sex (f — женщины, m — мужчины)
            age — один из следующих промежутков: 12-18, 18-21, 21-24, 24-27, 27-30, 30-35, 35-45, 45-100
            sex_age — комбинация значений sex и age, разделённых точкой с запятой, пример: m;21-24
            cities — id города или other для остальных городов
            name — наглядное название значения указанного в value (только для городов)
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getDemographics
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.GetFloodStats(System.Int64)">
            <summary>
            Возвращает информацию о текущем состоянии счетчика — количество оставшихся запусков методов и время до следующего обнуления счетчика в секундах.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <returns>
            Возвращает объект, содержащий следующие поля:
            left — количество оставшихся методов;
            refresh — время до следующего обновления в секундах.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getFloodStats
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.GetLookalikeRequests(VkNet.Model.RequestParams.Ads.GetLookalikeRequestsParams)">
             <summary>
             Возвращает список запросов на поиск похожей аудитории.
             </summary>
             <param name = "getLookalikeRequestsParams">
             Входные параметры запроса.
             </param>
             <returns>
             Если limit не равен 0, то возвращается объект с двумя полями:
            
             count — количество запросов на поиск похожей аудитории в данном кабинете.
             items — список объектов-запросов на поиск похожей аудитории запрошенного размера с запрошенным сдвигом.
             При limit равном 0, возвращается только поле count.
             Описание запроса на поиск похожей аудитории – объект со следующими полями:
             id — идентификатор запроса на поиск похожей аудитории. Является уникальным только в рамках конкретного кабинета (клиента в случае агентства).
             create_time — timestamp даты создания запроса.
             update_time — timestamp даты последнего обновления статуса запроса.
             status — текущий статус запроса, может принимать следующие значения: search_in_progress, search_done, search_failed, save_in_progress, save_done, save_failed.
             scheduled_delete_time —  timestamp даты запланированного удаления запроса.
             source_type — тип источника исходной аудитории для поиска похожей аудитории. Может принимать только значение retargeting_group.
             source_retargeting_group_id — при source_type равном retargeting_group в данном поле указан идентификатор аудитории ретаргетинга с исходной аудиторией.
             source_name — имя источника исходной аудитории. При source_type равном retargeting_group в данном поле указано название аудитории ретаргетинга на момент создания запроса.
             audience_count — размер исходной аудитории.
             save_audience_levels — Список доступных размеров аудитории для сохранения. Присутствует только после успешного поиска похожей аудитории. Поля:
             level — используется в качестве параметра level в ads.saveLookalikeRequestResult
             audience_count — размер похожей аудитории в данной опции.
             </returns>
             <remarks>
             Страница документации ВКонтакте http://vk.com/dev/ads.getLookalikeRequests
             </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.GetOfficeUsers(System.Int64)">
            <summary>
            Возвращает список администраторов и наблюдателей рекламного кабинета.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <returns>
            Возвращает массив объектов - описаний пользователей рекламного кабинета. Каждый объект содержит массив описаний прав доступа к конкретным клиентам. Описание содержит два поля: client_id — id клиента и role — строка admin, manager или reports. Для admin client_id не указывается.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getOfficeUsers
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.GetPostsReach(System.Int64,System.String,System.String)">
            <summary>
            Возвращает подробную статистику по охвату рекламных записей из объявлений и кампаний для продвижения записей сообщества.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "idsType">
            Тип запрашиваемых объектов, которые перечислены в параметре ids:
            ad — объявления;
            campaign — кампании.
            обязательный параметр, строка
            </param>
            <param name = "ids">
            Перечисленные через запятую id запрашиваемых объявлений или кампаний, в зависимости от того, что указано в параметре ids_type. Максимум 100 объектов. обязательный параметр, строка
            </param>
            <returns>
            Возвращает массив объектов, описывающих охват. Каждый объект содержит следующие поля:
            id
            integerID объекта из параметра ids. reach_subscribers
            integerохват подписчиков. reach_total
            integerсуммарный охват. links
            integerпереходы по ссылке. to_group
            integerпереходы в сообщество. join_group
            integerвступления в сообщество. report
            integerколичество жалоб на запись. hide
            integerколичество скрытий записи. unsubscribe
            integerколичество отписавшихся участников. video_views_start*
            integerколичество стартов просмотра видео. video_views_3s*
            integerколичество досмотров видео до 3 секунд. video_views_25p*
            integerколичество досмотров видео до 25 процентов. video_views_50p*
            integerколичество досмотров видео до 50 процентов. video_views_75p*
            integerколичество досмотров видео до 75 процентов. video_views_100p*
            integerколичество досмотров видео до 100 процентов.
            * — поля с данными по статистике видео возвращаются только для объявлений или кампаний с видео, созданных после 26 января 2017 года.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getPostsReach
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.GetRejectionReason(System.Int64,System.Int64)">
            <summary>
            Возвращает причину, по которой указанному объявлению было отказано в прохождении премодерации.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "adId">
            Идентификатор рекламного объявления. обязательный параметр, целое число
            </param>
            <returns>
            Возвращает объект, который может содержать поле comment, содержащее текстовый комментарий модератора, и/или массив rules, содержащий описание нарушенных объявлением правил. Ответ обязательно содержит хотя бы одно из полей comment или rules. Каждый элемент массива rules состоит из поля title (текстового пояснения) и массива paragraphs, каждый элемент которого содержит отдельный пункт правил. Элементы массива paragraphs могут содержать простую html-разметку.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getRejectionReason
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.GetStatistics(VkNet.Model.RequestParams.Ads.GetStatisticsParams)">
            <summary>
            Возвращает статистику показателей эффективности по рекламным объявлениям, кампаниям, клиентам или всему кабинету.
            </summary>
            <param name = "getStatisticsParams">
            Входные параметры запроса.
            </param>
            <returns>
            Каждый запрашиваемый объект имеет следующие поля:
            id — id объекта из параметра ids
            type — тип объекта из параметра ids_type
            stats — список структур описывающих статистику объекта за один временной период (конкретный временной период присутствует в списке, если по нему есть какая-то статистика)
            Структура в списке stats имеет следующие поля:
            day (если period равен day) — день в формате YYYY-MM-DD
            month (если period равен month) — день в формате YYYY-MM
            overall (если period равен overall) — 1
            spent — потраченные средства
            impressions — просмотры
            clicks — клики
            reach (если ids_type равен ad или campaign и period равен day или month) — охват
            video_views (если ids_type равен ad) — просмотры видеоролика (для видеорекламы)
            video_views_half (если ids_type равен ad) — просмотры половины видеоролика (для видеорекламы)
            video_views_full (если ids_type равен ad) — просмотры целого видеоролика (для видеорекламы)
            video_clicks_site (если ids_type равен ad) — переходы на сайт рекламодателя из видеорекламы (для видеорекламы)
            join_rate (если ids_type равен ad или campaign) — вступления в группу, событие, подписки на публичную страницу или установки приложения (только если в объявлении указана прямая ссылка на соответствующую страницу ВКонтакте)
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getStatistics
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.GetSuggestions(VkNet.Model.RequestParams.Ads.GetSuggestionsParams)">
            <summary>
            Возвращает набор подсказок для различных параметров таргетинга.
            </summary>
            <param name = "getSuggestionsParams">
            Входные параметры запроса.
            </param>
            <returns>
            Возвращает список объектов (подсказок), удовлетворяющих запросу.
            Для разделов countries, positions, interest_categories, religions, user_devices, user_os, user_browsers ответ возвращается в виде массива объектов со следующими полями:
            id — идентификатор объекта
            name — название объекта
            Для раздела regions ответ возвращается в виде массива объектов со следующими полями:
            id — идентификатор региона
            name — название региона
            type (необязательное) — название типа региона (область, автономный округ, край)
            Для разделов cities, districts, streets ответ возвращается в виде массива объектов со следующими полями:
            id — идентификатор объекта
            name — название объекта
            parent — название города или страны, в котором находится объект
            Для раздела schools ответ возвращается в виде массива объектов со следующими полями:
            id — идентификатор учебного заведения
            name — название учебного заведения
            desc — полное название учебного заведения
            type — тип учебного заведения
            school — школа
            university — университет
            faculty — факультет
            chair — кафедра
            parent — название города, в котором находится учебное заведение
            Для раздела interests ответ возвращается в виде массива строк.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getSuggestions
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.GetTargetGroups(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <summary>
            Возвращает список аудиторий ретаргетинга.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "clientId">
            Только для рекламных агентств.
            id клиента, в рекламном кабинете которого находятся аудитории. целое число
            </param>
            <param name = "extended">
            Если 1, в результатах будет указан код для размещения на сайте.
            Устаревший параметр. Используется только для старых групп ретаргетинга, которые пополнялись без помощи пикселя. Для новых аудиторий его следует опускать. флаг, может принимать значения 1 или 0
            </param>
            <returns>
            Возвращает массив объектов, описывающих группы ретаргетинга. Каждый объект содержит следующие поля:
            id (integer) — идентификатор аудитории;
            name (string) — название аудитории ретаргетинга;
            last_updated (integer) — дата и время последнего пополнения аудитории в формате Unixtime;
            is_audience (integer, 1) — 1, если группа является аудиторией (т.е.может быть пополнена при помощи пикселя);
            is_shared (integer, 1) — 1, если группа является копией (см. метод ads.shareTargetGroup);
            audience_count (integer) — приблизительное количество пользователей, входящих в аудиторию;
            lifetime (integer) — количество дней, через которое пользователи, добавляемые в аудиторию ретаргетинга, будут автоматически исключены из неё;
            file_source (integer, 1) — признак пополнения аудитории через файл;
            api_source (integer, 1) — признак пополнения аудитории через метод ads.importTargetContacts;
            lookalike_source (integer, 1) — признак аудитории, полученной при помощи Look-a-Like.
            pixel (string) — код для размещения на сайте рекламодателя. Возвращается, если параметр extended = 1 (только для старых групп).
            domain (string) — домен сайта, где размещен код учета пользователей (только для старых групп).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getTargetGroups
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.GetTargetPixels(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Возвращает список пикселей ретаргетинга.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "clientId">
            Только для рекламных агентств.
            id клиента, в рекламном кабинете которого находятся пиксели. целое число
            </param>
            <returns>
            Возвращает массив объектов, каждый из которых содержит следующие поля:
            target_pixel_id (integer) — идентификатор пикселя;
            name (string) — название пикселя;
            last_updated (integer) — дата и время последнего использования пикселя в формате Unixtime;
            domain (string) — домен сайта, где размещен пиксель;
            category_id (integer) — идентификатор категории сайта, где размещён пиксель (см. раздел interest_categories метода ads.getSuggestions);
            pixel (string) — код для размещения на сайте рекламодателя.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getTargetPixels
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.GetTargetingStats(VkNet.Model.RequestParams.Ads.GetTargetingStatsParams)">
            <summary>
            Возвращает размер целевой аудитории таргетинга, а также рекомендованные значения CPC и CPM.
            </summary>
            <param name = "getTargetingStatsParams">
            Входные параметры запроса.
            </param>
            <returns>
            Возвращает объект, описывающий целевую аудиторию и содержащий следующие поля:
            audience_count (integer) — размер целевой аудитории
            recommended_cpc (number) — рекомендованная цена для объявлений за клики, указана в рублях с копейками в дробной части.
            recommended_cpm (number)— рекомендованная цена для объявлений за показы, указана в рублях с копейками в дробной части.
            Обратите внимание, минимальный размер целевой аудитории — 100 человек. Если заданным критериям соответствует меньшее количество пользователей, размер аудитории будет считаться равным нулю.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getTargetingStats
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.GetUploadUrl(System.Int64)">
            <summary>
            Возвращает URL-адрес для загрузки фотографии рекламного объявления.
            </summary>
            <param name = "adFormat">
            Формат объявления:
            1 — изображение и текст;
            2 — большое изображение;
            3 — эксклюзивный формат;
            4 — продвижение сообществ или приложений, квадратное изображение;
            5 — приложение в новостной ленте (устаревший);
            6 — мобильное приложение;
            9 — запись в сообществе.
            обязательный параметр, целое число
            </param>
            <returns>
            Возвращает url-адрес для загрузки изображения.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getUploadURl
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.GetVideoUploadUrl">
            <summary>
            Возвращает URL-адрес для загрузки видеозаписи рекламного объявления.
            </summary>
            <returns>
            Возвращает url-адрес для загрузки видеоролика.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.getVideoUploadURl
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.ImportTargetContacts(System.Int64,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Импортирует список контактов рекламодателя для учета зарегистрированных во ВКонтакте пользователей в аудитории ретаргетинга.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "targetGroupId">
            Идентификатор аудитории таргетинга. обязательный параметр, целое число
            </param>
            <param name = "contacts">
            Список телефонов, email адресов или идентификаторов пользователей, указанных через запятую. Также принимаются их MD5-хеши. обязательный параметр, строка
            </param>
            <param name = "clientId">
            Только для рекламных агентств.
            id клиента, в рекламном кабинете которого находится аудитория. целое число
            </param>
            <returns>
            Возвращает количество обработанных контактов.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.importTargetContacts
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.RemoveOfficeUsers(System.Int64,System.String)">
            <summary>
            Удаляет администраторов и/или наблюдателей из рекламного кабинета.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "ids">
            Сериализованный JSON-массив, содержащий id удаляемых администраторов. обязательный параметр, строка
            </param>
            <returns>
            Возвращает массив значений - ответов на каждый запрос в массиве data. Соответствующее значение в выходном массиве равно true, если администратор успешно удален, и false в другом случае.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.removeOfficeUsers
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.RemoveTargetContacts(System.Int64,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Принимает запрос на исключение контактов рекламодателя из аудитории ретаргетинга.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "targetGroupId">
            Идентификатор аудитории таргетинга. обязательный параметр, целое число
            </param>
            <param name = "contacts">
            Список телефонов, email адресов или идентификаторов пользователей, указанных через запятую. Также принимаются их MD5-хеши. обязательный параметр, строка
            </param>
            <param name = "clientId">
            Только для рекламных агентств.
            id клиента, в рекламном кабинете которого находится аудитория. целое число
            </param>
            <returns>
            Возвращает 1 в случае успешного принятия заявки на исключение аудитории.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.removeTargetContacts
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.SaveLookalikeRequestResult(System.Int64,System.Int64,System.Int64,System.Nullable{System.Int64})">
             <summary>
             Сохраняет результат поиска похожей аудитории.
             </summary>
             <param name = "accountId">
             Идентификатор рекламного кабинета. обязательный параметр, целое число
             </param>
             <param name = "requestId">
             Идентификатор запроса на поиск похожей аудитории. Получить список всех запросов на поиск похожей аудитории для данного кабинета можно с помощью ads.getLookalikeRequests обязательный параметр, целое число
             </param>
             <param name = "level">
             Уровень конкретного размера похожей аудитории для сохранения. Получить список всех доступных размеров аудиторий можно с помощью ads.getLookalikeRequests. обязательный параметр, целое число
             </param>
             <param name = "clientId">
             Только для рекламных агентств.
             идентификатор клиента, для которого будут сохраняться аудитория. целое число
             </param>
             <returns>
             Возвращает объект с полями:
            
             retargeting_group_id – идентификатор группы ретаргетинга, в которую будет сохранена запрошенная похожая аудитория.
             audience_count – размер запрошенной похожей аудитории.
             </returns>
             <remarks>
             Страница документации ВКонтакте http://vk.com/dev/ads.saveLookalikeRequestResult
             </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.ShareTargetGroup(System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Предоставляет доступ к аудитории ретаргетинга другому рекламному кабинету. В результате выполнения метода возвращается идентификатор аудитории для указанного кабинета.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "targetGroupId">
            Идентификатор исходной аудитории. обязательный параметр, целое число
            </param>
            <param name = "clientId">
            Только для рекламных агентств.
            id клиента, в рекламном кабинете которого находится исходная аудитория. целое число
            </param>
            <param name = "shareWithClientId">
            Id клиента, рекламному кабинету которого необходимо предоставить доступ к аудитории. целое число
            </param>
            <returns>
            Возвращает объект со следующими полями:
            id — идентификатор аудитории.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.shareTargetGroup
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.UpdateAds(System.Int64,System.String)">
            <summary>
            Редактирует рекламные объявления.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "data">
            Сериализованный JSON-массив объектов, описывающих изменения в объявлениях. Описание объектов ad_edit_specification см. ниже обязательный параметр, строка
            </param>
            <returns>
            Возвращает массив ответов на каждый запрос в массиве data. Соответствующий объект в выходном массиве содержит идентификатор изменяемого объявления и, в случае возникновения ошибки, поля error_code и error_desc.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.updateAds
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.UpdateCampaigns(System.Int64,System.String)">
            <summary>
            Редактирует рекламные кампании.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "data">
            Сериализованный JSON-массив объектов, описывающих изменения в кампаниях. Описание объектов campaign_mod_specification см. ниже. обязательный параметр, строка
            </param>
            <returns>
            Возвращает массив ответов на каждый запрос в массиве data. Соответствующий объект в выходном массиве содержит идентификатор изменяемого клиента и, в случае возникновения ошибки, поля error_code и error_desc.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.updateCampaigns
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.UpdateClients(System.Int64,System.String)">
            <summary>
            Редактирует клиентов рекламного агентства.
            </summary>
            <param name = "accountId">
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </param>
            <param name = "data">
            Сериализованный JSON-массив объектов, описывающих изменения в клиентах. Описание объектов client_mod_specification см. ниже. обязательный параметр, строка
            </param>
            <returns>
            Возвращает массив ответов на каждый запрос в массиве data. Соответствующий объект в выходном массиве содержит id изменяемого клиента и, в случае возникновения ошибки, поля error_code и error_desc.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.updateClients
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.UpdateTargetGroup(VkNet.Model.RequestParams.Ads.UpdateTargetGroupParams)">
            <summary>
            Редактирует аудиторию ретаргетинга.
            </summary>
            <param name = "updateTargetGroupParams">
            Входные параметры запроса.
            </param>
            <returns>
            В случае успеха метод возвратит 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.updateTargetGroup
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAdsCategory.UpdateTargetPixel(VkNet.Model.RequestParams.Ads.UpdateTargetPixelParams)">
            <summary>
            Редактирует пиксель ретаргетинга.
            </summary>
            <param name = "updateTargetPixelParams">
            Входные параметры запроса.
            </param>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/ads.updateTargetPixel
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IAppsCategory">
            <summary>
            Методы для работы с приложениями.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IAppsCategory.GetCatalog(VkNet.Model.RequestParams.AppGetCatalogParams,System.Boolean)">
            <summary>
            Возвращает список приложений, доступных для пользователей сайта через каталог
            приложений.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            После успешного выполнения возвращает общее число найденных приложений и массив
            объектов приложений.
            </returns>
            <remarks>
            К методу можно делать не более 60 запросов в минуту с одного IP или id.
            Страница документации ВКонтакте http://vk.com/dev/apps.getCatalog
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAppsCategory.Get(VkNet.Model.RequestParams.AppGetParams,System.Boolean)">
            <summary>
            Возвращает данные о запрошенном приложении на платформе ВКонтакте
            </summary>
            <param name="params"> Параметры запроса. </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            После успешного выполнения возвращает объект приложения.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/apps.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAppsCategory.SendRequest(VkNet.Model.RequestParams.AppSendRequestParams)">
            <summary>
            Позволяет отправить запрос другому пользователю в приложении, использующем
            авторизацию ВКонтакте.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            В случае удачного выполнения метод возвращает идентификатор созданного запроса,
            например:
            10013.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/apps.sendRequest
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAppsCategory.DeleteAppRequests">
            <summary>
            Удаляет все уведомления о запросах, отправленных из текущего приложения.
            </summary>
            <returns>
            В случае успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/apps.deleteAppRequests
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAppsCategory.GetFriendsList(VkNet.Enums.SafetyEnums.AppRequestType,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Int64},VkNet.Enums.Filters.UsersFields)">
            <summary>
            Создает список друзей, который будет использоваться при отправке пользователем
            приглашений в приложение.
            </summary>
            <param name="type"> Tип создаваемого списка друзей. </param>
            <param name="extended">
            Параметр, определяющий необходимость возвращать расширенную информацию о
            пользователях.
            0 — возвращаются только идентификаторы;
            1 — будут дополнительно возвращены имя и фамилия. флаг, может принимать
            значения 1 или 0, по умолчанию 0 (Флаг,
            может принимать значения 1 или 0, по умолчанию 0).
            </param>
            <param name="count"> Количество пользователей в создаваемом списке. </param>
            <param name="offset">
            Смещение относительно первого пользователя для выборки определенного
            подмножества.
            </param>
            <param name="fields">
            Список дополнительных полей профилей, которые необходимо вернуть. См. подробное
            описание.
            </param>
            <returns>
            После успешного выполнения возвращает список пользователей.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/apps.getFriendsList
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAppsCategory.GetLeaderboard(VkNet.Enums.SafetyEnums.AppRatingType,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Возвращает рейтинг пользователей в игре.
            </summary>
            <param name="type">
            Level — рейтинг по уровням,
            points — рейтинг по очкам, начисленным за выполнение миссий.
            score — рейтинг по очкам, начисленным напрямую (apps.getScore). строка,
            обязательный параметр (Строка, обязательный
            параметр).
            </param>
            <param name="global">
            1 — глобальный рейтинг по всем игрокам,
            0 — рейтинг по друзьям пользователя флаг, может принимать значения 1 или 0, по
            умолчанию 1 (Флаг, может принимать
            значения 1 или 0, по умолчанию 1).
            </param>
            <param name="extended">
            1 — дополнительно возвращает информацию о пользователе. флаг, может принимать
            значения 1 или 0,
            по умолчанию 0 (Флаг, может принимать значения 1 или 0, по умолчанию 0).
            </param>
            <returns>
            После успешного выполнения возвращает список друзей с текущим уровнем и
            количеством очков в игре, отсортированный
            по убыванию текущего уровня или количества очков.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/apps.getLeaderboard
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAppsCategory.GetScore(System.Int64)">
            <summary>
            Метод возвращает количество очков пользователя в этой игре.
            </summary>
            <param name="userId">
            Идентификатор пользователя. положительное число, по умолчанию идентификатор
            текущего пользователя,
            обязательный параметр (Положительное число, по умолчанию идентификатор текущего
            пользователя, обязательный
            параметр).
            </param>
            <returns>
            После успешного выполнения возвращает число очков для пользователя.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/apps.getScore
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IAppWidgetsCategory">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Abstractions.IAppWidgetsCategory.GetAppImageUploadServer(VkNet.Enums.SafetyEnums.AppWidgetImageType)">
            <inheritdoc cref="M:VkNet.Abstractions.Category.IAppWidgetsCategoryAsync.GetAppImageUploadServerAsync(VkNet.Enums.SafetyEnums.AppWidgetImageType)"/>
        </member>
        <member name="M:VkNet.Abstractions.IAppWidgetsCategory.GetAppImages(System.Int32,System.Int32,VkNet.Enums.SafetyEnums.AppWidgetImageType)">
            <inheritdoc cref="M:VkNet.Abstractions.Category.IAppWidgetsCategoryAsync.GetAppImagesAsync(System.Int32,System.Int32,VkNet.Enums.SafetyEnums.AppWidgetImageType)"/>
        </member>
        <member name="M:VkNet.Abstractions.IAppWidgetsCategory.GetGroupImageUploadServer(VkNet.Enums.SafetyEnums.AppWidgetImageType)">
            <inheritdoc cref="M:VkNet.Abstractions.Category.IAppWidgetsCategoryAsync.GetGroupImageUploadServerAsync(VkNet.Enums.SafetyEnums.AppWidgetImageType)"/>
        </member>
        <member name="M:VkNet.Abstractions.IAppWidgetsCategory.GetGroupImages(System.Int32,System.Int32,VkNet.Enums.SafetyEnums.AppWidgetImageType)">
            <inheritdoc cref="M:VkNet.Abstractions.Category.IAppWidgetsCategoryAsync.GetGroupImagesAsync(System.Int32,System.Int32,VkNet.Enums.SafetyEnums.AppWidgetImageType)"/>
        </member>
        <member name="M:VkNet.Abstractions.IAppWidgetsCategory.GetImagesById(System.String)">
            <inheritdoc cref="M:VkNet.Abstractions.Category.IAppWidgetsCategoryAsync.GetImagesByIdAsync(System.String)"/>
        </member>
        <member name="M:VkNet.Abstractions.IAppWidgetsCategory.SaveAppImage(System.String,System.String)">
            <inheritdoc cref="M:VkNet.Abstractions.Category.IAppWidgetsCategoryAsync.SaveAppImageAsync(System.String,System.String)"/>
        </member>
        <member name="M:VkNet.Abstractions.IAppWidgetsCategory.SaveGroupImage">
            <inheritdoc cref="M:VkNet.Abstractions.Category.IAppWidgetsCategoryAsync.SaveGroupImageAsync"/>
        </member>
        <member name="M:VkNet.Abstractions.IAppWidgetsCategory.Update">
            <inheritdoc cref="M:VkNet.Abstractions.Category.IAppWidgetsCategoryAsync.UpdateAsync"/>
        </member>
        <member name="T:VkNet.Abstractions.IAudioCategory">
            <inheritdoc />
            <summary>
            Методы для работы с аудиозаписями.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategory.Add(System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Копирует аудиозапись на страницу пользователя или группы.
            </summary>
            <param name="audioId">
            Идентификатор аудиозаписи.
            </param>
            <param name="ownerId">
            Идентификатор владельца аудиозаписи.
            </param>
            <param name="groupId">
            Идентификатор сообщества (если аудиозапись необходимо скопировать в список
            сообщества).
            </param>
            <param name="albumId">
            Идентификатор альбома, в который нужно переместить аудиозапись.
            </param>
            <returns>
            После успешного выполнения возвращает идентификатор созданной аудиозаписи.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/audio.add
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategory.CreatePlaylist(System.Int64,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Создает пустой плейлист.
            </summary>
            <param name="ownerId">
            Идентификатор владельца (пользователь или сообщество).
            </param>
            <param name="title">
            Название плейлиста.
            </param>
            <param name="description">
            Описание плейлиста.
            </param>
            <param name="audioIds">
            Идентификаторы аудиозаписей, которые необходимо добавить в альбом, в виде
            {owner_id}_{audio_id}.
            </param>
            <returns>
            После успешного выполнения возвращает <see cref="T:VkNet.Model.Attachments.AudioPlaylist"/>.
            </returns>
            <remarks>
            Страница документации ВКонтакте -неизвестно-.
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategory.Delete(System.Int64,System.Int64)">
            <summary>
            Удаляет аудиозапись со страницы пользователя или сообщества.
            </summary>
            <param name="audioId">
            Идентификатор аудиозаписи.
            </param>
            <param name="ownerId">
            Идентификатор владельца аудиозаписи (пользователь или сообщество).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/audio.delete
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategory.DeletePlaylist(System.Int64,System.Int64)">
            <summary>
            Удаляет альбом аудиозаписей.
            </summary>
            <param name="ownerId">
            Идентификатор владельца (пользователь или сообщество).
            </param>
            <param name="playlistId">
            Идентификатор плейлиста.
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте -неизвестно-.
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategory.Edit(VkNet.Model.RequestParams.AudioEditParams)">
            <summary>
            Редактирует данные аудиозаписи на странице пользователя или сообщества.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает id текста, введенного пользователем
            (lyrics_id), если текст не был введен, вернет 0.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/audio.edit
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategory.EditPlaylist(System.Int64,System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Редактирует плейлист.
            </summary>
            <param name="ownerId">
            Идентификатор владельца (пользователь или сообщество).
            </param>
            <param name="playlistId">
            Идентификатор плейлиста.
            </param>
            <param name="title">
            Новое название для плейлиста.
            </param>
            <param name="description">
            Новое описание для плейлиста.
            </param>
            <param name="audioIds">
            Идентификаторы аудиозаписей, в виде {owner_id}_{audio_id}.
            Чтобы добавить аудиозаписи необходимо перечислить
            идентификаторы всех имеющихся аудиозаписей в плейлисте + новые.
            Не указывайте идентификаторы аудиозаписей, которые необходимо удалить.
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте -неизвестно-.
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategory.Get(VkNet.Model.RequestParams.AudioGetParams)">
            <summary>
            Возвращает список аудиозаписей пользователя или сообщества.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает список объектов <see cref="T:VkNet.Model.Attachments.Audio"/>.
            Обратите внимание, что ссылки на mp3 привязаны к ip-адресу.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/audio.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategory.GetPlaylists(System.Int64,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>
            Возвращает список плейлистов пользователя или группы.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества.
            </param>
            <param name="offset">
            Смещение, необходимое для выборки определенного подмножества плейлистов.
            </param>
            <param name="count">
            Количество плейлистов, которое необходимо вернуть. По умолчанию -неизвестно-, максимальное значение -неизвестно-.
            </param>
            <returns>
            После успешного выполнения возвращает общее количество альбомов с аудиозаписями
            и массив объектов <see cref="T:VkNet.Model.Attachments.AudioPlaylist"/>.
            </returns>
            <remarks>
            Страница документации ВКонтакте -неизвестно-.
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategory.GetPlaylistById(System.Int64,System.Int64)">
            <summary>
            Возвращает <see cref="T:VkNet.Model.Attachments.AudioPlaylist"/> пользователя или группы.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества.
            </param>
            <param name="playlistId">
            Идентификатор плейлиста.
            </param>
            <returns>
            После успешного выполнения возвращает <see cref="T:VkNet.Model.Attachments.AudioPlaylist"/>.
            </returns>
            <remarks>
            Страница документации ВКонтакте -неизвестно-.
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategory.GetBroadcastList(VkNet.Enums.Filters.AudioBroadcastFilter,System.Nullable{System.Boolean})">
            <summary>
            Возвращает список друзей и сообществ пользователя, которые транслируют музыку в
            статус.
            </summary>
            <param name="filter">
            Определяет, какие типы объектов необходимо получить.
            </param>
            <param name="active">
            true — будут возвращены только друзья и сообщества, которые транслируют музыку в
            данный момент.
            </param>
            <returns>
            После успешного выполнения возвращает список объектов <see cref="T:VkNet.Model.User"/> и <see cref="T:VkNet.Model.Group"/> с
            дополнительным полем status_audio — объект аудиозаписи, установленной в статус
            (если аудиозапись транслируется в текущей момент).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/audio.getBroadcastList
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategory.GetById(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Возвращает информацию об аудиозаписях.
            </summary>
            <param name="audios">
            Идентификаторы аудиозаписей, информацию о которых необходимо вернуть, в виде
            {owner_id}_{audio_id}.
            </param>
            <returns>
            После успешного выполнения возвращает массив объектов <see cref="T:VkNet.Model.Attachments.Audio"/>. Обратите внимание,
            что ссылки на аудиозаписи привязаны
            к ip адресу.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/audio.getById
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategory.GetCount(System.Int64)">
            <summary>
            Возвращает количество аудиозаписей пользователя или сообщества.
            </summary>
            <param name="ownerId">
            Идентификатор владельца аудиозаписей (пользователь или сообщество). Обратите
            внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1).
            </param>
            <returns>
            После успешного выполнения возвращает число, равное количеству аудиозаписей на
            странице пользователя или сообщества.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/audio.getCount
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategory.GetLyrics(System.Int64)">
            <summary>
            Возвращает текст аудиозаписи.
            </summary>
            <param name="lyricsId">
            Идентификатор текста аудиозаписи, информацию о котором необходимо вернуть.
            </param>
            <returns>
            После успешного выполнения возвращает объект <see cref="T:VkNet.Model.Lyrics"/>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/audio.getLyrics
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategory.GetPopular(System.Boolean,System.Nullable{VkNet.Enums.AudioGenre},System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>
            Возвращает список аудиозаписей из раздела "Популярное".
            </summary>
            <param name="onlyEng">
            true – возвращать только зарубежные аудиозаписи. false – возвращать все аудиозаписи.
            </param>
            <param name="genre">
            Идентификатор жанра из списка жанров.
            </param>
            <param name="offset">
            Смещение, необходимое для выборки определенного подмножества аудиозаписей.
            </param>
            <param name="count">
            Количество возвращаемых аудиозаписей. Максимальное
            значение 1000, по умолчанию 100.
            </param>
            <returns>
            После успешного выполнения возвращает список объектов <see cref="T:VkNet.Model.Attachments.Audio"/>. Обратите внимание,
            что ссылки на аудиозаписи привязаны
            к ip адресу.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/audio.getPopular
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategory.GetRecommendations(System.String,System.Nullable{System.Int64},System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Nullable{System.Boolean})">
            <summary>
            Возвращает список рекомендуемых аудиозаписей на основе списка воспроизведения
            заданного пользователя или на основе
            одной выбранной аудиозаписи.
            </summary>
            <param name="targetAudio">
            Идентификатор аудиозаписи, на основе которой будет строиться список
            рекомендаций.
            Используется вместо параметра uid. Идентификатор представляет из себя
            разделённые знаком подчеркивания id
            пользователя, которому принадлежит аудиозапись, и id самой аудиозаписи. Если
            аудиозапись принадлежит сообществу, то
            в качестве первого параметра используется -id сообщества.
            </param>
            <param name="userId">
            Идентификатор пользователя для получения списка рекомендаций на основе его
            набора аудиозаписей (по
            умолчанию — идентификатор текущего пользователя).
            </param>
            <param name="offset">
            Смещение относительно первой найденной аудиозаписи для выборки определенного
            подмножества.
            </param>
            <param name="count">
            Количество возвращаемых аудиозаписей. Максимальное значение 1000, по умолчанию 100.
            </param>
            <param name="shuffle">
            true — включен случайный порядок.
            </param>
            <returns>
            После успешного выполнения возвращает список объектов <see cref="T:VkNet.Model.Attachments.Audio"/>. Обратите внимание,
            что ссылки на аудиозаписи привязаны к ip адресу.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/audio.getRecommendations
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategory.GetUploadServer">
            <summary>
            Возвращает адрес сервера для загрузки аудиозаписей.
            </summary>
            <returns>
            После успешного выполнения возвращает обьект <see cref="T:System.Uri"/>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/audio.getUploadServer
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategory.AddToPlaylist(System.Int64,System.Int64,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Перемещает аудиозаписи в плейлист.
            </summary>
            <param name="ownerId">
            Идентификатор владельца (пользователь или сообщество).
            </param>
            <param name="playlistId">
            Идентификатор плейлиста.
            </param>
            <param name="audioIds">
            Идентификаторы аудиозаписей, которые требуется переместить, в виде {owner_id}_{audio_id}.
            </param>
            <returns>
            После успешного выполнения список идентификаторов аудиозаписей.
            Обратите внимание, в одном альбоме не может быть более 1000 аудиозаписей.
            </returns>
            <remarks>
            Страница документации ВКонтакте -неизвестно-
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategory.Reorder(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Изменяет порядок аудиозаписи, перенося ее между аудиозаписями, идентификаторы
            которых переданы параметрами after и before.
            </summary>
            <param name="audioId">
            Идентификатор аудиозаписи, которую нужно переместить.
            </param>
            <param name="ownerId">
            Идентификатор владельца аудиозаписи (пользователь или сообщество). По умолчанию
            — идентификатор текущего пользователя.
            </param>
            <param name="before">
            Идентификатор аудиозаписи, перед которой нужно поместить композицию.
            </param>
            <param name="after">
            Идентификатор аудиозаписи, после  которой нужно поместить композицию.
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/audio.reorder
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategory.Restore(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Восстанавливает аудиозапись после удаления.
            </summary>
            <param name="audioId">
            Идентификатор аудиозаписи.
            </param>
            <param name="ownerId">
            Идентификатор владельца аудиозаписи (пользователь или сообщество). По умолчанию
            — идентификатор текущего пользователя.
            </param>
            <returns>
            В случае успешного восстановления аудиозаписи возвращает объект <see cref="T:VkNet.Model.Attachments.Audio"/>.
            Если время хранения удаленной аудиозаписи истекло (обычно это 20 минут), сервер
            вернет ошибку 202 (Cache expired).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/audio.restore
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategory.Save(System.String,System.String,System.String)">
            <summary>
            Сохраняет аудиозаписи после успешной загрузки.
            </summary>
            <param name="response">
            Параметр, возвращаемый в результате загрузки аудиофайла
            на сервер.
            </param>
            <param name="artist"> Автор композиции. По умолчанию берется из ID3 тегов. </param>
            <param name="title"> Название композиции. По умолчанию берется из ID3 тегов. </param>
            <returns> Возвращает обьект загруженной аудиозаписи. </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/audio.save
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategory.Search(VkNet.Model.RequestParams.AudioSearchParams)">
            <summary>
            Возвращает список аудиозаписей в соответствии с заданным критерием поиска.
            </summary>
            <param name="params"> Критерии поиска </param>
            <returns>
            Список объектов <see cref="T:VkNet.Model.Attachments.Audio"/>.
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской,
            содержащей Settings.Audio
            Страница документации ВКонтакте http://vk.com/dev/audio.search
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAudioCategory.SetBroadcast(System.String,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Транслирует аудиозапись в статус пользователю или сообществу.
            </summary>
            <param name="audio">
            Идентификатор аудиозаписи, которая будет отображаться в статусе, в формате
            {owner_id}_{audio_id}.
            Например, 1_190442705. Если параметр не указан, аудиостатус указанных сообществ
            и пользователя будет удален.
            </param>
            <param name="targetIds">
            Перечисленные через запятую идентификаторы сообществ и пользователя, которым
            будет транслироваться аудиозапись. Идентификаторы сообществ должны быть заданы в
            формате "-gid", где gid - идентификатор
            сообщества. Например, 1,-34384434. По умолчанию аудиозапись транслируется
            текущему пользователю. (Количество элементов должно составлять не более 20).
            </param>
            <returns>
            Возвращает идентификаторы пользователя и сообществ для которых был установлен статус.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/audio.setBroadcast
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IAuthCategory">
            <summary>
            Методы для работы с авторизацией.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IAuthCategory.CheckPhone(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <summary>
            Проверяет правильность введённого номера.
            </summary>
            <param name="phone">
            Номер телефона регистрируемого пользователя. строка, обязательный параметр
            (Строка, обязательный
            параметр).
            </param>
            <param name="clientId">
            Идентификатор Вашего приложения. целое число (Целое
            число).
            </param>
            <param name="clientSecret">
            Секретный ключ приложения, доступный в разделе редактирования приложения.
            строка,
            обязательный параметр (Строка, обязательный параметр).
            </param>
            <param name="authByPhone">
            Флаг, может принимать значения 1 или 0 (Флаг, может
            принимать значения 1 или 0).
            </param>
            <returns>
            В случае, если номер пользователя является правильным, будет возвращён
            <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/auth.checkPhone
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAuthCategory.Signup(VkNet.Model.RequestParams.AuthSignupParams)">
            <summary>
            Регистрирует нового пользователя по номеру телефона.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            Возвращает результат выполнения метода.
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/auth.signup
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAuthCategory.Confirm(VkNet.Model.RequestParams.AuthConfirmParams)">
            <summary>
            Завершает регистрацию нового пользователя, начатую методом auth.signup, по
            коду, полученному через SMS.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            Возвращает результат выполнения метода.
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/auth.confirm
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IAuthCategory.Restore(System.String,System.String)">
            <summary>
            Позволяет восстановить доступ к аккаунту, используя код, полученный через SMS.
            </summary>
            <param name="phone"> Номер телефона пользователя. </param>
            <param name="lastName"> Фамилия пользователя. </param>
            <returns>
            Возвращает результат выполнения метода.
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/auth.restore
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IBoardCategory">
            <summary>
            Методы для работы со темами группы.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IBoardCategory.GetTopics(VkNet.Model.RequestParams.BoardGetTopicsParams,System.Boolean)">
            <summary>
            Возвращает список тем в обсуждениях указанной группы.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <param name="skipAuthorization"> Если <c> true </c> то пропустить авторизацию. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте
            <see href="https://new.vk.com/dev/board.getTopics" />.
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IBoardCategory.GetComments(VkNet.Model.RequestParams.BoardGetCommentsParams,System.Boolean)">
            <summary>
            Возвращает список сообщений в указанной теме.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <param name="skipAuthorization"> Если <c> true </c> то пропустить авторизацию. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте
            <see href="https://new.vk.com/dev/board.getComments" />.
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IBoardCategory.AddTopic(VkNet.Model.RequestParams.BoardAddTopicParams)">
            <summary>
            Создает новую тему в списке обсуждений группы.
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/board.addTopic
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IBoardCategory.DeleteTopic(VkNet.Model.RequestParams.BoardTopicParams)">
            <summary>
            Удаляет тему в обсуждениях группы.
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/board.deleteTopic
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IBoardCategory.CloseTopic(VkNet.Model.RequestParams.BoardTopicParams)">
            <summary>
            Закрывает тему в списке обсуждений группы (в такой теме невозможно оставлять
            новые сообщения).
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/board.closeTopic
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IBoardCategory.OpenTopic(VkNet.Model.RequestParams.BoardTopicParams)">
            <summary>
            Открывает ранее закрытую тему (в ней станет возможно оставлять новые
            сообщения).
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/board.openTopic
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IBoardCategory.FixTopic(VkNet.Model.RequestParams.BoardTopicParams)">
            <summary>
            Закрепляет тему в списке обсуждений группы (такая тема при любой сортировке
            выводится выше остальных).
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/board.fixTopic
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IBoardCategory.UnFixTopic(VkNet.Model.RequestParams.BoardTopicParams)">
            <summary>
            Отменяет прикрепление темы в списке обсуждений группы (тема будет выводиться
            согласно выбранной сортировке).
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/board.unfixTopic
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IBoardCategory.EditTopic(VkNet.Model.RequestParams.BoardEditTopicParams)">
            <summary>
            Изменяет заголовок темы в списке обсуждений группы.
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/board.editTopic
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IBoardCategory.CreateComment(VkNet.Model.RequestParams.BoardCreateCommentParams)">
            <summary>
            Добавляет новый комментарий в обсуждении.
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте
            <see href="https://new.vk.com/dev/board.createComment" />.
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IBoardCategory.DeleteComment(VkNet.Model.RequestParams.BoardCommentParams)">
            <summary>
            Удаляет сообщение в обсуждениях сообщества.
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте
            <see href="https://new.vk.com/dev/board.deleteComment" />.
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IBoardCategory.EditComment(VkNet.Model.RequestParams.BoardEditCommentParams)">
            <summary>
            Редактирует одно из сообщений в обсуждении сообщества..
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/board.editComment
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IBoardCategory.RestoreComment(VkNet.Model.RequestParams.BoardCommentParams)">
            <summary>
            Восстанавливает удаленное сообщение темы в обсуждениях группы.
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/board.restoreComment
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IDatabaseCategory">
            <summary>
            Методы для получения справочной информации (страны, города, школы, учебные
            заведения и т.п.).
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IDatabaseCategory.GetCountries(System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{VkNet.Enums.Iso3166},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc cref="M:VkNet.Abstractions.IDatabaseCategoryAsync.GetCountriesAsync(System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{VkNet.Enums.Iso3166},System.Nullable{System.Int32},System.Nullable{System.Int32})"/>
        </member>
        <member name="M:VkNet.Abstractions.IDatabaseCategory.GetRegions(System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc cref="M:VkNet.Abstractions.IDatabaseCategoryAsync.GetRegionsAsync(System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})"/>
        </member>
        <member name="M:VkNet.Abstractions.IDatabaseCategory.GetStreetsById(System.Int32[])">
            <inheritdoc cref="M:VkNet.Abstractions.IDatabaseCategoryAsync.GetStreetsByIdAsync(System.Int32[])"/>
        </member>
        <member name="M:VkNet.Abstractions.IDatabaseCategory.GetCountriesById(System.Int32[])">
            <inheritdoc cref="M:VkNet.Abstractions.IDatabaseCategoryAsync.GetCountriesByIdAsync(System.Int32[])"/>
        </member>
        <member name="M:VkNet.Abstractions.IDatabaseCategory.GetCities(VkNet.Model.RequestParams.Database.GetCitiesParams)">
            <inheritdoc cref="M:VkNet.Abstractions.IDatabaseCategoryAsync.GetCitiesAsync(VkNet.Model.RequestParams.Database.GetCitiesParams)" />
        </member>
        <member name="M:VkNet.Abstractions.IDatabaseCategory.GetCitiesById(System.Int32[])">
            <inheritdoc cref="M:VkNet.Abstractions.IDatabaseCategoryAsync.GetCitiesByIdAsync(System.Int32[])"/>
        </member>
        <member name="M:VkNet.Abstractions.IDatabaseCategory.GetUniversities(System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc cref="M:VkNet.Abstractions.IDatabaseCategoryAsync.GetUniversitiesAsync(System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})"/>
        </member>
        <member name="M:VkNet.Abstractions.IDatabaseCategory.GetSchools(System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc cref="M:VkNet.Abstractions.IDatabaseCategoryAsync.GetSchoolsAsync(System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})"/>
        </member>
        <member name="M:VkNet.Abstractions.IDatabaseCategory.GetFaculties(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc cref="M:VkNet.Abstractions.IDatabaseCategoryAsync.GetFacultiesAsync(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32})"/>
        </member>
        <member name="M:VkNet.Abstractions.IDatabaseCategory.GetSchoolClasses(System.Int64)">
            <inheritdoc cref="M:VkNet.Abstractions.IDatabaseCategoryAsync.GetSchoolClassesAsync(System.Int64)"/>
        </member>
        <member name="M:VkNet.Abstractions.IDatabaseCategory.GetChairs(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc cref="M:VkNet.Abstractions.IDatabaseCategoryAsync.GetChairsAsync(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32})"/>
        </member>
        <member name="M:VkNet.Abstractions.IDatabaseCategory.GetMetroStationsById(System.Collections.Generic.IEnumerable{System.UInt64})">
            <inheritdoc cref="M:VkNet.Abstractions.IDatabaseCategoryAsync.GetMetroStationsByIdAsync(System.Collections.Generic.IEnumerable{System.UInt64})"/>
        </member>
        <member name="M:VkNet.Abstractions.IDatabaseCategory.GetMetroStations(System.UInt64,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <inheritdoc cref="M:VkNet.Abstractions.IDatabaseCategoryAsync.GetMetroStationsAsync(System.UInt64,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)"/>
        </member>
        <member name="T:VkNet.Abstractions.IDocsCategory">
            <summary>
            Методы для работы с документами (получение списка, загрузка, удаление и т.д.)
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IDocsCategory.Get(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{VkNet.Enums.DocFilter})">
            <summary>
            Возвращает расширенную информацию о документах пользователя или сообщества.
            </summary>
            <param name="count">
            Количество документов, информацию о которых нужно вернуть. По умолчанию — все
            документы.
            </param>
            <param name="offset">
            Смещение, необходимое для выборки определенного подмножества документов.
            Положительное число.
            </param>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежат документы.
            Целое число, по
            умолчанию идентификатор текущего пользователя.
            </param>
            <param name="type"> Фильтр по типу документа. </param>
            <returns>
            После успешного выполнения возвращает список объектов документов.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/docs.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IDocsCategory.GetById(System.Collections.Generic.IEnumerable{VkNet.Model.Attachments.Document})">
            <summary>
            Возвращает информацию о документах по их идентификаторам.
            </summary>
            <param name="docs">
            Идентификаторы документов, информацию о которых нужно
            вернуть.
            </param>
            <returns> После успешного выполнения возвращает список объектов документов. </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/docs.getById
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IDocsCategory.GetUploadServer(System.Nullable{System.Int64})">
            <summary>
            Возвращает адрес сервера для загрузки документов.
            </summary>
            <param name="groupId">
            Идентификатор сообщества (если необходимо загрузить документ в список
            документов сообщества).
            Если документ нужно загрузить в список пользователя, метод вызывается без
            дополнительных параметров. Положительное
            число
            </param>
            <returns> После успешного выполнения возвращает объект UploadServerInfo </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/docs.getUploadServer
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IDocsCategory.GetWallUploadServer(System.Nullable{System.Int64})">
            <summary>
            Возвращает адрес сервера для загрузки документов в папку Отправленные, для
            последующей отправки документа на стену
            или личным сообщением.
            </summary>
            <param name="groupId">
            Идентификатор сообщества, в которое нужно загрузить документ. Положительное
            число.
            </param>
            <returns> После успешного выполнения возвращает объект UploadServerInfo </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/docs.getWallUploadServer
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IDocsCategory.Save(System.String,System.String,System.String,System.Nullable{System.Int64},System.String)">
            <summary>
            Сохраняет документ после его успешной загрузки на сервер.
            </summary>
            <param name="file">
            JSON-объект с полем file, возвращаемый после успешной загрузки документа
            сервер. Обязательный
            параметр.
            </param>
            <param name="title"> Название документа. </param>
            <param name="tags"> Метки для поиска. </param>
            <param name="captchaSid">
            Id капчи (только если для вызова метода необходимо
            ввести капчу)
            </param>
            <param name="captchaKey">
            Текст капчи (только если для вызова метода необходимо
            ввести капчу)
            </param>
            <returns> Возвращает массив с загруженными объектами. </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/docs.save
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IDocsCategory.Delete(System.Int64,System.Int64)">
            <summary>
            Удаляет документ пользователя или группы.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит документ. Целое
            число,
            обязательный параметр
            </param>
            <param name="docId">
            Идентификатор документа. Положительное число, обязательный
            параметр
            </param>
            <returns> После успешного выполнения возвращает 1. </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/docs.delete
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IDocsCategory.Add(System.Int64,System.Int64,System.String,System.Nullable{System.Int64},System.String)">
            <summary>
            Копирует документ в документы текущего пользователя.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит документ. Целое
            число,
            обязательный параметр
            </param>
            <param name="docId">
            Идентификатор документа. Положительное число, обязательный
            параметр
            </param>
            <param name="accessKey">
            Ключ доступа документа. Этот параметр следует передать, если вместе с
            остальными данными о
            документе было возвращено поле access_key.
            </param>
            <param name="captchaSid"> Идентификатор капчи </param>
            <param name="captchaKey"> Текст капчи, который ввел пользователь </param>
            <returns>
            После успешного выполнения возвращает идентификатор созданного
            документа (did).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/docs.add
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IDocsCategory.GetTypes(System.Int64)">
            <summary>
            Возвращает доступные типы документы для пользователя.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежат документы.
            целое число, по
            умолчанию идентификатор текущего пользователя, обязательный параметр (Целое
            число, по умолчанию идентификатор
            текущего пользователя, обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает список объектов type.
            Объект type — тип документов.
            id идентификатор типа.
            положительное число name название типа.
            строка count число документов;
            int (числовое значение).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/docs.getTypes
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IDocsCategory.Search(System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Возвращает результаты поиска по документам.
            </summary>
            <param name="query">
            Строка поискового запроса. Например, зеленые тапочки. строка, обязательный
            параметр, максимальная
            длина 512 (Строка, обязательный параметр, максимальная длина 512).
            </param>
            <param name="searchOwn"> 1 — искать среди собственных документов пользователя. </param>
            <param name="count">
            Количество документов, информацию о которых нужно вернуть. положительное число
            (Положительное
            число).
            </param>
            <param name="offset">
            Смещение, необходимое для выборки определенного подмножества документов.
            положительное число
            (Положительное число).
            </param>
            <returns>
            После успешного выполнения возвращает список объектов документов.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/docs.search
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IDocsCategory.Edit(System.Int64,System.Int64,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Редактирует документ пользователя или группы.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит документ.
            Обратите внимание, идентификатор сообщества в параметре owner_id необходимо
            указывать со знаком "-" — например,
            owner_id=-1 соответствует идентификатору сообщества ВКонтакте API (club1)
            целое число, по умолчанию идентификатор
            текущего пользователя, обязательный параметр (Целое число, по умолчанию
            идентификатор текущего пользователя,
            обязательный параметр).
            </param>
            <param name="docId">
            Идентификатор документа. положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <param name="title">
            Название документа. строка, максимальная длина 128 (Строка, максимальная длина
            128).
            </param>
            <param name="tags">
            Метки для поиска. список слов, разделенных через запятую (Список слов,
            разделенных через запятую).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/docs.edit
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IDocsCategory.GetMessagesUploadServer(System.Nullable{System.Int64},VkNet.Enums.SafetyEnums.DocMessageType)">
            <summary>
            Получает адрес сервера для загрузки документа в личное сообщение.
            </summary>
            <param name="peerId"> идентификатор назначения </param>
            <param name="type">
            тип документа. Возможные значения:
            doc — обычный документ;
            audio_message — голосовое сообщение.
            </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Abstractions.IExecuteCategory">
            <summary>
            Методы этого класса позволяют производить действия с универсальным методом.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IExecuteCategory.Execute(System.String)">
            <summary>
            Универсальный метод, который позволяет запускать последовательность других
            методов, сохраняя и фильтруя
            промежуточные результаты.
            </summary>
            <param name="code">
            Код алгоритма в VKScript - формате, похожем на JavaSсript или ActionScript
            (предполагается совместимость с
            ECMAScript).
            Алгоритм должен завершаться командой return %выражение%. Операторы должны быть
            разделены точкой с запятой.
            </param>
            <returns>
            Возвращает данные, запрошенные алгоритмом.
            При работе с методом execute структура ответа в XML ближе к JSON и может
            незначительно отличаться от стандартного
            представления других методов.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/execute
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IExecuteCategory.Execute``1(System.String)">
            <summary>
            Универсальный метод, который позволяет запускать последовательность других
            методов, сохраняя и фильтруя
            промежуточные результаты.
            </summary>
            <param name="code">
            Код алгоритма в VKScript - формате, похожем на JavaSсript или ActionScript
            (предполагается совместимость с
            ECMAScript).
            Алгоритм должен завершаться командой return %выражение%. Операторы должны быть
            разделены точкой с запятой.
            </param>
            <returns>
            Возвращает данные, запрошенные алгоритмом.
            При работе с методом execute структура ответа в XML ближе к JSON и может
            незначительно отличаться от стандартного
            представления других методов.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/execute
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IExecuteCategory.StoredProcedure``1(System.String,VkNet.Utils.VkParameters)">
            <summary>
            Универсальный метод, который позволяет запускать хранимые процедуры.
            </summary>
            <param name="procedureName"> Имя хранимой процедуры </param>
            <param name="vkParameters"> Параметры хранимой процедуры </param>
            <returns>
            Возвращает данные, запрошенные алгоритмом.
            При работе с методом execute структура ответа в XML ближе к JSON и может
            незначительно отличаться от стандартного
            представления других методов.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/execute
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IFaveCategory">
            <summary>
            Методы для работы с закладками.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategory.AddArticle(System.Uri,System.String,System.String,System.String)">
            <inheritdoc cref = "M:VkNet.Abstractions.IFaveCategoryAsync.AddArticleAsync(System.Uri,System.String,System.String,System.String)"/>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategory.AddLink(System.Uri)">
            <inheritdoc cref = "M:VkNet.Abstractions.IFaveCategoryAsync.AddLinkAsync(System.Uri)"/>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategory.AddPage(System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <inheritdoc cref = "M:VkNet.Abstractions.IFaveCategoryAsync.AddPageAsync(System.Nullable{System.UInt64},System.Nullable{System.UInt64})"/>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategory.AddPost(VkNet.Model.RequestParams.Fave.FaveAddPostParams)">
            <inheritdoc cref = "M:VkNet.Abstractions.IFaveCategoryAsync.AddPostAsync(VkNet.Model.RequestParams.Fave.FaveAddPostParams)"/>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategory.AddProduct(System.Int64,System.Int64,System.String,System.String,System.String)">
            <inheritdoc cref = "M:VkNet.Abstractions.IFaveCategoryAsync.AddProductAsync(System.Int64,System.Int64,System.String,System.String,System.String)"/>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategory.AddTag(System.String,System.String)">
            <inheritdoc cref = "M:VkNet.Abstractions.IFaveCategoryAsync.AddTagAsync(System.String,System.String)"/>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategory.AddVideo(System.Int64,System.Int64,System.String,System.String)">
            <inheritdoc cref = "M:VkNet.Abstractions.IFaveCategoryAsync.AddVideoAsync(System.Int64,System.Int64,System.String,System.String)"/>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategory.EditTag(System.Int64,System.String)">
            <inheritdoc cref = "M:VkNet.Abstractions.IFaveCategoryAsync.EditTagAsync(System.Int64,System.String)"/>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategory.Get(VkNet.Model.RequestParams.Fave.FaveGetParams)">
            <inheritdoc cref = "M:VkNet.Abstractions.IFaveCategoryAsync.GetAsync(VkNet.Model.RequestParams.Fave.FaveGetParams)"/>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategory.GetPages(VkNet.Enums.SafetyEnums.FavePageType,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.Int64})">
            <inheritdoc cref = "M:VkNet.Abstractions.IFaveCategoryAsync.GetPagesAsync(VkNet.Enums.SafetyEnums.FavePageType,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.Int64})"/>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategory.GetTags">
            <inheritdoc cref = "M:VkNet.Abstractions.IFaveCategoryAsync.GetTagsAsync"/>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategory.MarkSeen">
            <inheritdoc cref = "M:VkNet.Abstractions.IFaveCategoryAsync.MarkSeenAsync"/>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategory.RemoveArticle(System.Int64,System.UInt64,System.String)">
            <inheritdoc cref = "M:VkNet.Abstractions.IFaveCategoryAsync.RemoveArticleAsync(System.Int64,System.UInt64,System.String)"/>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategory.RemoveLink(System.String)">
            <inheritdoc cref = "M:VkNet.Abstractions.IFaveCategoryAsync.RemoveLinkAsync(System.String)" />
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategory.RemovePage(System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc cref = "M:VkNet.Abstractions.IFaveCategoryAsync.RemovePageAsync(System.Nullable{System.Int64},System.Nullable{System.Int64})"/>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategory.RemovePost(System.Int64,System.Int64)">
            <inheritdoc cref = "M:VkNet.Abstractions.IFaveCategoryAsync.RemovePostAsync(System.Int64,System.Int64)"/>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategory.RemoveProduct(System.Int64,System.Int64)">
            <inheritdoc cref = "M:VkNet.Abstractions.IFaveCategoryAsync.RemoveProductAsync(System.Int64,System.Int64)"/>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategory.RemoveTag(System.Int64)">
            <inheritdoc cref = "M:VkNet.Abstractions.IFaveCategoryAsync.RemoveTagAsync(System.Int64)"/>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategory.RemoveVideo(System.Int64,System.Int64)">
            <inheritdoc cref = "M:VkNet.Abstractions.IFaveCategoryAsync.RemoveVideoAsync(System.Int64,System.Int64)"/>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategory.ReorderTags(System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc cref = "M:VkNet.Abstractions.IFaveCategoryAsync.ReorderTagsAsync(System.Collections.Generic.IEnumerable{System.Int64})"/>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategory.SetPageTags(System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc cref = "M:VkNet.Abstractions.IFaveCategoryAsync.SetPageTagsAsync(System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Collections.Generic.IEnumerable{System.Int64})"/>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategory.SetTags(VkNet.Model.RequestParams.Fave.FaveSetTagsParams)">
            <inheritdoc cref = "M:VkNet.Abstractions.IFaveCategoryAsync.SetTagsAsync(VkNet.Model.RequestParams.Fave.FaveSetTagsParams)"/>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategory.TrackPageInteraction(System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <inheritdoc cref = "M:VkNet.Abstractions.IFaveCategoryAsync.TrackPageInteractionAsync(System.Nullable{System.UInt64},System.Nullable{System.UInt64})"/>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategory.GetUsers(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает список пользователей, добавленных текущим пользователем в закладки.
            </summary>
            <param name="offset">
            Смещение, необходимое для выборки определенного подмножества пользователей. По
            умолчанию — 0.
            положительное число (Положительное число).
            </param>
            <param name="count">
            Количество пользователей, информацию о которых необходимо вернуть.
            положительное число, по
            умолчанию 50 (Положительное число, по умолчанию 50).
            </param>
            <returns>
            После успешного выполнения возвращает список объектов пользователей.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.getUsers
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategory.GetPhotos(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Возвращает фотографии, на которых текущий пользователь поставил отметку "Мне
            нравится".
            </summary>
            <param name="offset">
            Смещение, необходимое для выборки определенного подмножества фотографий.
            По умолчанию 0. положительное число (Положительное число).
            </param>
            <param name="count">
            Число фотографий, информацию о которых необходимо вернуть. положительное число,
            по умолчанию 50
            (Положительное число, по умолчанию 50).
            </param>
            <param name="photoSizes">
            Параметр, указывающий нужно ли возвращать ли доступные размеры фотографии в
            специальном
            формате. флаг, может принимать значения 1 или 0 (Флаг, может принимать значения
            1 или 0).
            </param>
            <returns>
            После успешного выполнения возвращает список объектов фотографий.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.getPhotos
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategory.GetPosts(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Возвращает записи, на которых текущий пользователь поставил отметку "Мне
            нравится".
            </summary>
            <param name="offset">
            Смещение, необходимо для выборки определенного подмножества записей.
            По умолчанию — 0.
            (Положительное число).
            </param>
            <param name="count">
            Количество записей, информацию о которых нужно вернуть (но не более 100).
            (Положительное число, по умолчанию 50).
            </param>
            <param name="extended">
            1 — в ответе будут возвращены дополнительные поля profiles и groups, содержащие
            информацию о пользователях и
            сообществах.
            По умолчанию: 0.
            </param>
            <returns>
            После успешного выполнения возвращает список объектов записей на стене.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.getPosts
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategory.GetVideos(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Возвращает список видеозаписей, на которых текущий пользователь поставил
            отметку "Мне нравится".
            </summary>
            <param name="offset">
            Смещение, необходимое для выборки определенного подмножества видеозаписей.
            (Положительное число).
            </param>
            <param name="count">
            Количество видеозаписей, информацию о которых необходимо вернуть.
            (Положительное число, по умолчанию 50).
            </param>
            <param name="extended">
            1 — в ответе будут возвращены дополнительные поля profiles и groups, содержащие
            информацию о пользователях и
            сообществах.
            По умолчанию: 0.
            </param>
            <returns>
            После успешного выполнения возвращает список объектов видеозаписей.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.getVideos
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategory.GetLinks(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает ссылки, добавленные в закладки текущим пользователем.
            </summary>
            <param name="offset">
            Смещение, необходимое для выборки определенного подмножества ссылок.
            положительное число
            (Положительное число).
            </param>
            <param name="count">
            Количество ссылок, информацию о которых необходимо вернуть. положительное
            число, по умолчанию 50
            (Положительное число, по умолчанию 50).
            </param>
            <returns>
            После успешного выполнения возвращает общее количество ссылок и массив объектов
            link, каждый из которых содержит
            поля id, URL, title, description, photo_50 и photo_100.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.getLinks
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategory.AddUser(System.Int64)">
            <summary>
            Добавляет пользователя в закладки.
            </summary>
            <param name="userId">
            Идентификатор пользователя, которого нужно добавить в закладки. положительное
            число, обязательный
            параметр (Положительное число, обязательный параметр).
            </param>
            <returns>
            В случае успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.addUser
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategory.RemoveUser(System.Int64)">
            <summary>
            Удаляет пользователя из закладок.
            </summary>
            <param name="userId">
            Идентификатор пользователя, которого нужно удалить из закладок. положительное
            число, обязательный
            параметр (Положительное число, обязательный параметр).
            </param>
            <returns>
            В случае успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.removeUser
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategory.AddGroup(System.Int64)">
            <summary>
            Добавляет сообщество в закладки.
            </summary>
            <param name="groupId">
            Идентификатор сообщества, которое нужно добавить в закладки. положительное
            число, обязательный
            параметр (Положительное число, обязательный параметр).
            </param>
            <returns>
            В случае успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.addGroup
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategory.RemoveGroup(System.Int64)">
            <summary>
            Удаляет сообщество из закладок.
            </summary>
            <param name="groupId">
            Идентификатор сообщества, которое нужно удалить из закладок. положительное
            число, обязательный
            параметр (Положительное число, обязательный параметр).
            </param>
            <returns>
            В случае успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.removeGroup
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategory.AddLink(System.Uri,System.String)">
            <summary>
            Добавляет ссылку в закладки.
            </summary>
            <param name="link">
            Адрес добавляемой ссылки. Поддерживаются только внутренние ссылки на
            http://vk.com/. строка,
            обязательный параметр (Строка, обязательный параметр).
            </param>
            <param name="text"> Текст ссылки. строка (Строка). </param>
            <returns>
            В случае успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.addLink
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IFaveCategory.GetMarketItems(System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.Boolean})">
            <summary>
            Возвращает товары, добавленные в закладки текущим пользователем.
            </summary>
            <param name="count">
            Число товаров, информацию о которых необходимо вернуть. положительное число, по
            умолчанию 50
            (Положительное число, по умолчанию 50).
            </param>
            <param name="offset">
            Смещение, необходимое для выборки определенного подмножества товаров.
            положительное число, по
            умолчанию 0 (Положительное число, по умолчанию 0).
            </param>
            <param name="extended">
            1 — будут возвращены дополнительные поля likes, can_comment, can_repost,
            photos. По умолчанию
            данные поля не возвращается. флаг, может принимать значения 1 или 0 (Флаг,
            может принимать значения 1 или 0).
            </param>
            <returns>
            После успешного выполнения возвращает список объектов товаров.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/fave.getMarketItems
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IFriendsCategory">
            <inheritdoc cref="T:VkNet.Abstractions.IFriendsCategoryAsync"/>
        </member>
        <member name="M:VkNet.Abstractions.IFriendsCategory.Get(VkNet.Model.RequestParams.FriendsGetParams,System.Boolean)">
            <inheritdoc cref="M:VkNet.Abstractions.IFriendsCategoryAsync.GetAsync(VkNet.Model.RequestParams.FriendsGetParams,System.Boolean)"/>
        </member>
        <member name="M:VkNet.Abstractions.IFriendsCategory.GetAppUsers">
            <inheritdoc cref="M:VkNet.Abstractions.IFriendsCategoryAsync.GetAppUsersAsync"/>
        </member>
        <member name="M:VkNet.Abstractions.IFriendsCategory.GetOnline(VkNet.Model.RequestParams.FriendsGetOnlineParams)">
            <inheritdoc cref="M:VkNet.Abstractions.IFriendsCategoryAsync.GetOnlineAsync(VkNet.Model.RequestParams.FriendsGetOnlineParams)"/>
        </member>
        <member name="M:VkNet.Abstractions.IFriendsCategory.GetMutual(VkNet.Model.RequestParams.FriendsGetMutualParams)">
            <inheritdoc cref="M:VkNet.Abstractions.IFriendsCategoryAsync.GetMutualAsync(VkNet.Model.RequestParams.FriendsGetMutualParams)"/>
        </member>
        <member name="M:VkNet.Abstractions.IFriendsCategory.AreFriends(System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Boolean})">
            <inheritdoc cref="M:VkNet.Abstractions.IFriendsCategoryAsync.AreFriendsAsync(System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Boolean})"/>
        </member>
        <member name="M:VkNet.Abstractions.IFriendsCategory.AddList(System.String,System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc cref="M:VkNet.Abstractions.IFriendsCategoryAsync.AddListAsync(System.String,System.Collections.Generic.IEnumerable{System.Int64})"/>
        </member>
        <member name="M:VkNet.Abstractions.IFriendsCategory.DeleteList(System.Int64)">
            <inheritdoc cref="M:VkNet.Abstractions.IFriendsCategoryAsync.DeleteListAsync(System.Int64)"/>
        </member>
        <member name="M:VkNet.Abstractions.IFriendsCategory.GetLists(System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <inheritdoc cref="M:VkNet.Abstractions.IFriendsCategoryAsync.GetListsAsync(System.Nullable{System.Int64},System.Nullable{System.Boolean})"/>
        </member>
        <member name="M:VkNet.Abstractions.IFriendsCategory.EditList(System.Int64,System.String,System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc cref="M:VkNet.Abstractions.IFriendsCategoryAsync.EditListAsync(System.Int64,System.String,System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64})"/>
        </member>
        <member name="M:VkNet.Abstractions.IFriendsCategory.DeleteAllRequests">
            <inheritdoc cref="M:VkNet.Abstractions.IFriendsCategoryAsync.DeleteAllRequestsAsync"/>
        </member>
        <member name="M:VkNet.Abstractions.IFriendsCategory.Add(System.Int64,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.String)">
            <inheritdoc cref="M:VkNet.Abstractions.IFriendsCategoryAsync.AddAsync(System.Int64,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.String)"/>
        </member>
        <member name="M:VkNet.Abstractions.IFriendsCategory.Delete(System.Int64)">
            <inheritdoc cref="M:VkNet.Abstractions.IFriendsCategoryAsync.DeleteAsync(System.Int64)"/>
        </member>
        <member name="M:VkNet.Abstractions.IFriendsCategory.Edit(System.Int64,System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc cref="M:VkNet.Abstractions.IFriendsCategoryAsync.EditAsync(System.Int64,System.Collections.Generic.IEnumerable{System.Int64})"/>
        </member>
        <member name="M:VkNet.Abstractions.IFriendsCategory.GetRecent(System.Nullable{System.Int64})">
            <inheritdoc cref="M:VkNet.Abstractions.IFriendsCategoryAsync.GetRecentAsync(System.Nullable{System.Int64})"/>
        </member>
        <member name="M:VkNet.Abstractions.IFriendsCategory.GetRequests(VkNet.Model.RequestParams.FriendsGetRequestsParams)">
            <inheritdoc cref="M:VkNet.Abstractions.IFriendsCategoryAsync.GetRequestsAsync(VkNet.Model.RequestParams.FriendsGetRequestsParams)"/>
        </member>
        <member name="M:VkNet.Abstractions.IFriendsCategory.GetRequestsExtended(VkNet.Model.RequestParams.FriendsGetRequestsParams)">
            <inheritdoc cref="M:VkNet.Abstractions.IFriendsCategoryAsync.GetRequestsExtendedAsync(VkNet.Model.RequestParams.FriendsGetRequestsParams)"/>
        </member>
        <member name="M:VkNet.Abstractions.IFriendsCategory.GetSuggestions(VkNet.Enums.SafetyEnums.FriendsFilter,System.Nullable{System.Int64},System.Nullable{System.Int64},VkNet.Enums.Filters.UsersFields,VkNet.Enums.SafetyEnums.NameCase)">
            <inheritdoc cref="M:VkNet.Abstractions.IFriendsCategoryAsync.GetSuggestionsAsync(VkNet.Enums.SafetyEnums.FriendsFilter,System.Nullable{System.Int64},System.Nullable{System.Int64},VkNet.Enums.Filters.UsersFields,VkNet.Enums.SafetyEnums.NameCase)"/>
        </member>
        <member name="M:VkNet.Abstractions.IFriendsCategory.GetByPhones(System.Collections.Generic.IEnumerable{System.String},VkNet.Enums.Filters.ProfileFields)">
            <inheritdoc cref="M:VkNet.Abstractions.IFriendsCategoryAsync.GetByPhonesAsync(System.Collections.Generic.IEnumerable{System.String},VkNet.Enums.Filters.ProfileFields)"/>
        </member>
        <member name="M:VkNet.Abstractions.IFriendsCategory.Search(VkNet.Model.RequestParams.FriendsSearchParams)">
            <inheritdoc cref="M:VkNet.Abstractions.IFriendsCategoryAsync.SearchAsync(VkNet.Model.RequestParams.FriendsSearchParams)"/>
        </member>
        <member name="T:VkNet.Abstractions.IGiftsCategory">
            <summary>
            Методы для работы с подарками.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IGiftsCategory.Get(System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает список полученных подарков пользователя.
            </summary>
            <param name="userId">
            Идентификатор пользователя, для которого необходимо
            получить список подарков. По умолчанию идентификатор текущего пользователя.
            </param>
            <param name="count"> Количество подарков, которое нужно вернуть. </param>
            <param name="offset">
            Смещение, необходимое для выборки определенного
            подмножества подарков.
            </param>
            <returns>
            В случае успешного вступления в группу метод вернёт <c> true </c>, иначе
            <c> false </c>.
            Возвращает список объектов gift_item, каждый из которых содержит следующие
            поля:
            id — идентификатор полученного подарка;
            from_id — идентификатор пользователя, который отправил подарок, или 0, если
            отправитель скрыт;
            message — текст сообщения, приложенного к подарку;
            date — время отправки подарка в формате unixtime;
            gift — объект подарка в следующем формате:
            id — номер подарка;
            thumb_256 — url изображения подарка размером 256x256px;
            thumb_96 — url изображения подарка размером 96x96px;
            thumb_48 — url изображения подарка размером 48x48px;
            privacy — значение приватности подарка(только для текущего пользователя;
            возможные значения: 0 — имя отправителя и
            сообщение видно всем; 1 — имя отправителя видно всем, сообщение видно только
            получателю; 2 — имя отправителя
            скрыто, сообщение видно только получателю).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/gifts.get
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IGroupsCategory">
            <summary>
            Методы для работы с сообществами (группами).
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.AddAddress(VkNet.Model.RequestParams.Groups.AddAddressParams)">
            <inheritdoc cref = "M:VkNet.Abstractions.IGroupsCategoryAsync.AddAddressAsync(VkNet.Model.RequestParams.Groups.AddAddressParams)"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.EditAddress(VkNet.Model.RequestParams.Groups.EditAddressParams)">
            <inheritdoc cref = "M:VkNet.Abstractions.IGroupsCategoryAsync.EditAddressAsync(VkNet.Model.RequestParams.Groups.EditAddressParams)"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.DeleteAddress(System.UInt64,System.UInt64)">
            <inheritdoc cref = "M:VkNet.Abstractions.IGroupsCategoryAsync.DeleteAddressAsync(System.UInt64,System.UInt64)"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.GetAddresses(VkNet.Model.RequestParams.Groups.GetAddressesParams)">
            <inheritdoc cref = "M:VkNet.Abstractions.IGroupsCategoryAsync.GetAddressesAsync(VkNet.Model.RequestParams.Groups.GetAddressesParams)"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.Join(System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <inheritdoc cref="M:VkNet.Abstractions.IGroupsCategoryAsync.JoinAsync(System.Nullable{System.Int64},System.Nullable{System.Boolean})"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.Leave(System.Int64)">
            <inheritdoc cref="M:VkNet.Abstractions.IGroupsCategoryAsync.LeaveAsync(System.Int64)"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.Get(VkNet.Model.RequestParams.GroupsGetParams,System.Boolean)">
            <inheritdoc cref="M:VkNet.Abstractions.IGroupsCategoryAsync.GetAsync(VkNet.Model.RequestParams.GroupsGetParams,System.Boolean)"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.GetById(System.Collections.Generic.IEnumerable{System.String},System.String,VkNet.Enums.Filters.GroupsFields,System.Boolean)">
            <inheritdoc cref="M:VkNet.Abstractions.IGroupsCategoryAsync.GetByIdAsync(System.Collections.Generic.IEnumerable{System.String},System.String,VkNet.Enums.Filters.GroupsFields,System.Boolean)"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.GetMembers(VkNet.Model.RequestParams.GroupsGetMembersParams,System.Boolean)">
            <inheritdoc cref="M:VkNet.Abstractions.IGroupsCategoryAsync.GetMembersAsync(VkNet.Model.RequestParams.GroupsGetMembersParams,System.Boolean)"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.IsMember(System.String,System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Boolean},System.Boolean)">
            <inheritdoc cref="M:VkNet.Abstractions.IGroupsCategoryAsync.IsMemberAsync(System.String,System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Boolean},System.Boolean)"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.Search(VkNet.Model.RequestParams.GroupsSearchParams,System.Boolean)">
            <inheritdoc cref="M:VkNet.Abstractions.IGroupsCategoryAsync.SearchAsync(VkNet.Model.RequestParams.GroupsSearchParams,System.Boolean)"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.GetInvites(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <inheritdoc cref="M:VkNet.Abstractions.IGroupsCategoryAsync.GetInvitesAsync(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean})"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.BanUser(VkNet.Model.RequestParams.GroupsBanUserParams)">
            <inheritdoc cref="M:VkNet.Abstractions.IGroupsCategoryAsync.BanUserAsync(VkNet.Model.RequestParams.GroupsBanUserParams)"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.GetBanned(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},VkNet.Enums.Filters.GroupsFields,System.Nullable{System.Int64})">
            <inheritdoc cref="M:VkNet.Abstractions.IGroupsCategoryAsync.GetBannedAsync(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},VkNet.Enums.Filters.GroupsFields,System.Nullable{System.Int64})"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.UnbanUser(System.Int64,System.Int64)">
            <inheritdoc cref="M:VkNet.Abstractions.IGroupsCategoryAsync.UnbanUserAsync(System.Int64,System.Int64)"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.EditManager(VkNet.Model.RequestParams.GroupsEditManagerParams)">
            <inheritdoc cref="M:VkNet.Abstractions.IGroupsCategoryAsync.EditManagerAsync(VkNet.Model.RequestParams.GroupsEditManagerParams)"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.GetSettings(System.UInt64)">
            <inheritdoc cref="M:VkNet.Abstractions.IGroupsCategoryAsync.GetSettingsAsync(System.UInt64)"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.Edit(VkNet.Model.RequestParams.GroupsEditParams)">
            <inheritdoc cref="M:VkNet.Abstractions.IGroupsCategoryAsync.EditAsync(VkNet.Model.RequestParams.GroupsEditParams)"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.EditPlace(System.Int64,VkNet.Model.Place)">
            <inheritdoc cref="M:VkNet.Abstractions.IGroupsCategoryAsync.EditPlaceAsync(System.Int64,VkNet.Model.Place)"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.GetInvitedUsers(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},VkNet.Enums.Filters.UsersFields,VkNet.Enums.SafetyEnums.NameCase)">
            <inheritdoc cref="M:VkNet.Abstractions.IGroupsCategoryAsync.GetInvitedUsersAsync(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},VkNet.Enums.Filters.UsersFields,VkNet.Enums.SafetyEnums.NameCase)"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.Invite(System.Int64,System.Int64,System.Nullable{System.Int64},System.String)">
            <inheritdoc cref="M:VkNet.Abstractions.IGroupsCategoryAsync.InviteAsync(System.Int64,System.Int64,System.Nullable{System.Int64},System.String)"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.AddLink(System.Int64,System.Uri,System.String)">
            <inheritdoc cref="M:VkNet.Abstractions.IGroupsCategoryAsync.AddLinkAsync(System.Int64,System.Uri,System.String)"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.DeleteLink(System.Int64,System.UInt64)">
            <inheritdoc cref="M:VkNet.Abstractions.IGroupsCategoryAsync.DeleteLinkAsync(System.Int64,System.UInt64)"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.EditLink(System.Int64,System.UInt64,System.String)">
            <inheritdoc cref="M:VkNet.Abstractions.IGroupsCategoryAsync.EditLinkAsync(System.Int64,System.UInt64,System.String)"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.ReorderLink(System.Int64,System.Int64,System.Nullable{System.Int64})">
            <inheritdoc cref="M:VkNet.Abstractions.IGroupsCategoryAsync.ReorderLinkAsync(System.Int64,System.Int64,System.Nullable{System.Int64})"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.RemoveUser(System.Int64,System.Int64)">
            <inheritdoc cref="M:VkNet.Abstractions.IGroupsCategoryAsync.RemoveUserAsync(System.Int64,System.Int64)"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.ApproveRequest(System.Int64,System.Int64)">
            <inheritdoc cref="M:VkNet.Abstractions.IGroupsCategoryAsync.ApproveRequestAsync(System.Int64,System.Int64)"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.Create(System.String,System.String,VkNet.Enums.SafetyEnums.GroupType,System.Nullable{VkNet.Enums.Filters.GroupSubType},System.Nullable{System.UInt32})">
            <inheritdoc cref="M:VkNet.Abstractions.IGroupsCategoryAsync.CreateAsync(System.String,System.String,VkNet.Enums.SafetyEnums.GroupType,System.Nullable{VkNet.Enums.Filters.GroupSubType},System.Nullable{System.UInt32})"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.GetRequests(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},VkNet.Enums.Filters.UsersFields)">
            <inheritdoc cref="M:VkNet.Abstractions.IGroupsCategoryAsync.GetRequestsAsync(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},VkNet.Enums.Filters.UsersFields)"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.GetCatalog(System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <inheritdoc cref="M:VkNet.Abstractions.IGroupsCategoryAsync.GetCatalogAsync(System.Nullable{System.UInt64},System.Nullable{System.UInt64})"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.GetCatalogInfo(System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <inheritdoc cref="M:VkNet.Abstractions.IGroupsCategoryAsync.GetCatalogInfoAsync(System.Nullable{System.Boolean},System.Nullable{System.Boolean})"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.AddCallbackServer(System.UInt64,System.String,System.String,System.String)">
            <inheritdoc cref="M:VkNet.Abstractions.IGroupsCategoryAsync.AddCallbackServerAsync(System.UInt64,System.String,System.String,System.String)"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.DeleteCallbackServer(System.UInt64,System.UInt64)">
            <inheritdoc cref="M:VkNet.Abstractions.IGroupsCategoryAsync.DeleteCallbackServerAsync(System.UInt64,System.UInt64)"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.EditCallbackServer(System.UInt64,System.UInt64,System.String,System.String,System.String)">
            <inheritdoc cref="M:VkNet.Abstractions.IGroupsCategoryAsync.EditCallbackServerAsync(System.UInt64,System.UInt64,System.String,System.String,System.String)"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.GetCallbackConfirmationCode(System.UInt64)">
            <inheritdoc cref="M:VkNet.Abstractions.IGroupsCategoryAsync.GetCallbackConfirmationCodeAsync(System.UInt64)"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.GetCallbackServers(System.UInt64,System.Collections.Generic.IEnumerable{System.UInt64})">
            <inheritdoc cref="M:VkNet.Abstractions.IGroupsCategoryAsync.GetCallbackServersAsync(System.UInt64,System.Collections.Generic.IEnumerable{System.UInt64})"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.GetCallbackSettings(System.UInt64,System.UInt64)">
            <inheritdoc cref="M:VkNet.Abstractions.IGroupsCategoryAsync.GetCallbackSettingsAsync(System.UInt64,System.UInt64)"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.SetCallbackSettings(VkNet.Model.RequestParams.CallbackServerParams)">
            <inheritdoc cref="M:VkNet.Abstractions.IGroupsCategoryAsync.SetCallbackSettingsAsync(VkNet.Model.RequestParams.CallbackServerParams)"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.GetLongPollServer(System.UInt64)">
            <inheritdoc cref="M:VkNet.Abstractions.IGroupsCategoryAsync.GetLongPollServerAsync(System.UInt64)"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.DisableOnline(System.UInt64)">
            <inheritdoc cref="M:VkNet.Abstractions.IGroupsCategoryAsync.DisableOnlineAsync(System.UInt64)"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.EnableOnline(System.UInt64)">
            <inheritdoc cref="M:VkNet.Abstractions.IGroupsCategoryAsync.EnableOnlineAsync(System.UInt64)"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.GetBotsLongPollHistory(VkNet.Model.RequestParams.BotsLongPollHistoryParams)">
            <inheritdoc cref="M:VkNet.Abstractions.IGroupsCategoryAsync.GetBotsLongPollHistoryAsync(VkNet.Model.RequestParams.BotsLongPollHistoryParams)"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.GetOnlineStatus(System.UInt64)">
            <inheritdoc cref = "M:VkNet.Abstractions.IGroupsCategoryAsync.GetOnlineStatusAsync(System.UInt64)"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.GetTokenPermissions">
            <inheritdoc cref = "M:VkNet.Abstractions.IGroupsCategoryAsync.GetTokenPermissionsAsync"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.SetLongPollSettings(VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams)">
            <inheritdoc cref = "M:VkNet.Abstractions.IGroupsCategoryAsync.SetLongPollSettingsAsync(VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams)"/>
        </member>
        <member name="M:VkNet.Abstractions.IGroupsCategory.GetLongPollSettings(System.UInt64)">
            <inheritdoc cref = "M:VkNet.Abstractions.IGroupsCategoryAsync.GetLongPollSettingsAsync(System.UInt64)"/>
        </member>
        <member name="T:VkNet.Abstractions.ILeadsCategory">
            <summary>
            Leads При подключении к сервису рекламных акций партнёр получает доступ в
            специальный раздел для создания и
            управления рекламными акциями (офферами).
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.ILeadsCategory.CheckUser(VkNet.Model.RequestParams.Leads.CheckUserParams)">
            <summary>
            Проверяет, доступна ли рекламная акция пользователю.
            </summary>
            <param name="checkUserParams">
            Входные параметры запроса.
            </param>
            <returns>
            Возвращает объект, содержащий поля:
            result — признак того, может ли пользователь начать акцию (true/false), а
            также, в случае auto_start=1, признак
            успешного старта акции,
            reason — в случае result=false, описание причины, по которой пользователь не
            может начать акцию,
            start_link — в случае result=true и auto_start=0, ссылка, по которой должен
            перейти пользователь для начала акции.
            sid — в случае result=true и auto_start=1, идентификатор сессии начатой акции.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/leads.checkUser
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.ILeadsCategory.Complete(System.String,System.String,System.String)">
            <summary>
            Завершает начатую пользователем рекламную акцию, используя сессию и секретный
            ключ.
            </summary>
            <param name="vkSid">
            Cессия, полученная GET параметром при старте акции. строка, обязательный
            параметр
            </param>
            <param name="secret">
            Секретный ключ, доступный в интерфейсе тестирования рекламной акции. строка,
            обязательный параметр
            </param>
            <param name="comment">
            Комментарий строка
            </param>
            <returns>
            При успешном завершении оффера будет возвращен объект, содержащий следующие
            поля:
            limit — ограничение, установленное у текущего оффера;
            spent — количество потраченных на акцию голосов;
            cost — стоимость одной выполненной акции;
            test_mode — режим транзакции (1 — тестовый, 0 — реальный);
            success — результат выполнения транзакции (всегда равно 1).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/leads.complete
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.ILeadsCategory.GetStats(System.UInt64,System.String,System.String,System.String)">
            <summary>
            Возвращает статистику по рекламной акции.
            </summary>
            <param name="leadId">
            Идентификатор рекламной акции, доступный в интерфейсе тестирования рекламных
            акций. положительное число,
            обязательный параметр
            </param>
            <param name="secret">
            Секретный ключ, доступный в интерфейсе тестирования рекламной акции. строка
            </param>
            <param name="dateStart">
            Идентификатор дня, начиная с которого необходимо вернуть статистику в формате
            Y-m-d (8-и значное число). Например,
            2011-09-17. строка
            </param>
            <param name="dateEnd">
            Идентификатор дня, до которого необходимо вернуть статистику в формате Y-m-d
            (8-и значное число). Например,
            2011-09-19. строка
            </param>
            <returns>
            При успешном завершении оффера будет возвращен объект, содержащий следующие
            поля:
            limit — ограничения в голосах на текущую рекламную акцию;
            spent — количество голосов, уже потраченных на рекламную акцию;
            cost — стоимость (в голосах) одного прохождения;
            impressions — количество показов акций;
            started — количество начатых акций;
            completed — количество пройденных акций;
            days — данное поле возвращается, только если переданы входные параметры
            date_start и date_end.
            Параметр days Объект days содержит следующие поля:
            impressions — показы;
            started — начатые акции;
            completed — законченные акции;
            spent — потрачено голосов.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/leads.getStats
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.ILeadsCategory.GetUsers(VkNet.Model.RequestParams.Leads.GetUsersParams)">
            <summary>
            Возвращает список последних действий пользователей по рекламной акции.
            </summary>
            <param name="getUsersParams">
            Входные параметры запроса.
            </param>
            <returns>
            После успешного выполнения возвращает массив объектов entry, каждый из которых
            содержит поля:
            uid — идентификатор пользователя;
            aid — идентификатор приложения, из которого было выполнено действие;
            sid — идентификатор сессии;
            date — время действия в формате unixtime;
            start_date — время начала действия в формате unixtime для status = 1;
            status — 0 - начало действия, 1 - завершение действия, 2 - блокирование
            пользователя;
            test_mode — 0 - рабочий режим, 1 - тестовый режим;
            comment — текст комментария.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/leads.getUsers
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.ILeadsCategory.MetricHit(System.String)">
            <summary>
            Засчитывает событие метрики.
            </summary>
            <param name="data">
            Данные метрики, полученные в личном кабинете рекламной акции. обязательный
            параметр
            </param>
            <returns>
            Возвращает объект, содержащий поля:
            result - равен true в случае успеха, и false в обратном случае,
            redirect_link - возвращается в случае, когда пользователя нужно перенаправить
            по указанной ссылке.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/leads.metricHit
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.ILeadsCategory.Start(VkNet.Model.RequestParams.Leads.StartParams)">
            <summary>
            Создаёт новую сессию для прохождения рекламной акции для пользователя.
            </summary>
            <param name="startParams">
            Входные параметры запроса.
            </param>
            <returns>
            При успешном старте рекламной акции будет возвращен объект содержащий следующие
            поля:
            test_mode — режим транзакции (1 — тестовый, 0 — реальный);
            vk_sid — сессия рекламной акции.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/leads.start
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.ILikesCategory">
            <summary>
            API для работы с лайками.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.ILikesCategory.GetList(VkNet.Model.RequestParams.LikesGetListParams,System.Boolean)">
            <summary>
            Получает список идентификаторов пользователей или сообществ, которые добавили
            заданный объект в свой список Мне
            нравится.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            Возвращает список идентификаторов пользователей или сообществ, которые добавили
            заданный объект в свой список Мне
            нравится.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/likes.getList
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.ILikesCategory.GetListEx(VkNet.Model.RequestParams.LikesGetListParams)">
            <summary>
            Получает список идентификаторов пользователей или сообществ, которые добавили
            заданный объект в свой список Мне
            нравится.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            Возвращает список пользователей и сообществ, которые добавили заданный объект в
            свой список Мне нравится.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/likes.getList
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.ILikesCategory.Add(VkNet.Model.RequestParams.LikesAddParams)">
            <summary>
            Добавляет указанный объект в список Мне нравится текущего пользователя.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            В случае успеха возвращает объект с полем likes, в котором находится текущее
            количество пользователей, которые
            добавили данный объект в свой список Мне нравится.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/likes.add
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.ILikesCategory.Delete(VkNet.Enums.SafetyEnums.LikeObjectType,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)">
            <summary>
            Удаляет указанный объект из списка Мне нравится текущего пользователя
            </summary>
            <param name="type"> Тип объекта LikeObjectType </param>
            <param name="itemId">
            Идентификатор объекта. положительное число, обязательный
            параметр
            </param>
            <param name="ownerId">
            Идентификатор владельца объекта. целое число, по умолчанию идентификатор
            текущего пользователя
            </param>
            <param name="captchaSid"> Идентификатор капчи </param>
            <param name="captchaKey"> Текст, который ввел пользователь </param>
            <returns>
            В случае успеха возвращает объект с полем likes, в котором находится текущее
            количество пользователей, которые
            добавили данный объект в свой список Мне нравится.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/likes.delete
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.ILikesCategory.IsLiked(System.Boolean@,VkNet.Enums.SafetyEnums.LikeObjectType,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Проверяет, находится ли объект в списке Мне нравится заданного пользователя.
            </summary>
            <param name="copied"> Сделан ли репост текущим пользователем. </param>
            <param name="type"> Тип объекта LikeObjectType </param>
            <param name="itemId">
            Идентификатор объекта. положительное число, обязательный
            параметр
            </param>
            <param name="userId">
            Идентификатор пользователя, у которого необходимо проверить наличие объекта в
            списке «Мне
            нравится». Если параметр не задан, то считается, что он равен идентификатору
            текущего пользователя. положительное
            число, по умолчанию идентификатор текущего пользователя
            </param>
            <param name="ownerId">
            Идентификатор владельца Like-объекта. Если параметр не задан, то считается, что
            он равен
            идентификатору текущего пользователя. целое число, по умолчанию идентификатор
            текущего пользователя
            </param>
            <returns>
            В случае успеха возвращает одно из следующих числовых значений:
            false — указанный Like-объект не входит в список Мне нравится пользователя с
            идентификатором user_id.
            true — указанный Like-объект находится в списке Мне нравится пользователя с
            идентификатором user_id.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/likes.isLiked
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IMarketsCategory">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategory.Get(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <inheritdoc cref="M:VkNet.Abstractions.IMarketsCategoryAsync.GetAsync(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)"/>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategory.GetById(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <inheritdoc cref="M:VkNet.Abstractions.IMarketsCategoryAsync.GetByIdAsync(System.Collections.Generic.IEnumerable{System.String},System.Boolean)"/>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategory.Search(VkNet.Model.RequestParams.Market.MarketSearchParams)">
            <inheritdoc cref="M:VkNet.Abstractions.IMarketsCategoryAsync.SearchAsync(VkNet.Model.RequestParams.Market.MarketSearchParams)"/>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategory.GetAlbums(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc cref="M:VkNet.Abstractions.IMarketsCategoryAsync.GetAlbumsAsync(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32})"/>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategory.GetAlbumById(System.Int64,System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc cref="M:VkNet.Abstractions.IMarketsCategoryAsync.GetAlbumByIdAsync(System.Int64,System.Collections.Generic.IEnumerable{System.Int64})"/>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategory.CreateComment(VkNet.Model.RequestParams.Market.MarketCreateCommentParams)">
            <inheritdoc cref="M:VkNet.Abstractions.IMarketsCategoryAsync.CreateCommentAsync(VkNet.Model.RequestParams.Market.MarketCreateCommentParams)"/>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategory.GetComments(VkNet.Model.RequestParams.Market.MarketGetCommentsParams)">
            <inheritdoc cref="M:VkNet.Abstractions.IMarketsCategoryAsync.GetCommentsAsync(VkNet.Model.RequestParams.Market.MarketGetCommentsParams)"/>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategory.DeleteComment(System.Int64,System.Int64)">
            <inheritdoc cref="M:VkNet.Abstractions.IMarketsCategoryAsync.DeleteCommentAsync(System.Int64,System.Int64)"/>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategory.RestoreComment(System.Int64,System.Int64)">
            <inheritdoc cref="M:VkNet.Abstractions.IMarketsCategoryAsync.RestoreCommentAsync(System.Int64,System.Int64)"/>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategory.EditComment(System.Int64,System.Int64,System.String,System.Collections.Generic.IEnumerable{VkNet.Model.Attachments.MediaAttachment})">
            <inheritdoc cref="M:VkNet.Abstractions.IMarketsCategoryAsync.EditCommentAsync(System.Int64,System.Int64,System.String,System.Collections.Generic.IEnumerable{VkNet.Model.Attachments.MediaAttachment})"/>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategory.ReportComment(System.Int64,System.Int64,VkNet.Enums.ReportReason)">
            <inheritdoc cref="M:VkNet.Abstractions.IMarketsCategoryAsync.ReportCommentAsync(System.Int64,System.Int64,VkNet.Enums.ReportReason)"/>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategory.Report(System.Int64,System.Int64,VkNet.Enums.ReportReason)">
            <inheritdoc cref="M:VkNet.Abstractions.IMarketsCategoryAsync.ReportAsync(System.Int64,System.Int64,VkNet.Enums.ReportReason)"/>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategory.Add(VkNet.Model.RequestParams.Market.MarketProductParams)">
            <inheritdoc cref="M:VkNet.Abstractions.IMarketsCategoryAsync.AddAsync(VkNet.Model.RequestParams.Market.MarketProductParams)"/>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategory.Edit(VkNet.Model.RequestParams.Market.MarketProductParams)">
            <inheritdoc cref="M:VkNet.Abstractions.IMarketsCategoryAsync.EditAsync(VkNet.Model.RequestParams.Market.MarketProductParams)"/>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategory.Delete(System.Int64,System.Int64)">
            <inheritdoc cref="M:VkNet.Abstractions.IMarketsCategoryAsync.DeleteAsync(System.Int64,System.Int64)"/>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategory.Restore(System.Int64,System.Int64)">
            <inheritdoc cref="M:VkNet.Abstractions.IMarketsCategoryAsync.RestoreAsync(System.Int64,System.Int64)"/>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategory.ReorderItems(System.Int64,System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc cref="M:VkNet.Abstractions.IMarketsCategoryAsync.ReorderItemsAsync(System.Int64,System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64})"/>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategory.ReorderAlbums(System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc cref="M:VkNet.Abstractions.IMarketsCategoryAsync.ReorderAlbumsAsync(System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64})"/>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategory.AddAlbum(System.Int64,System.String,System.Nullable{System.Int64},System.Boolean)">
            <inheritdoc cref="M:VkNet.Abstractions.IMarketsCategoryAsync.AddAlbumAsync(System.Int64,System.String,System.Nullable{System.Int64},System.Boolean)"/>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategory.EditAlbum(System.Int64,System.Int64,System.String,System.Nullable{System.Int64},System.Boolean)">
            <inheritdoc cref="M:VkNet.Abstractions.IMarketsCategoryAsync.EditAlbumAsync(System.Int64,System.Int64,System.String,System.Nullable{System.Int64},System.Boolean)"/>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategory.DeleteAlbum(System.Int64,System.Int64)">
            <inheritdoc cref="M:VkNet.Abstractions.IMarketsCategoryAsync.DeleteAlbumAsync(System.Int64,System.Int64)"/>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategory.RemoveFromAlbum(System.Int64,System.Int64,System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc cref="M:VkNet.Abstractions.IMarketsCategoryAsync.RemoveFromAlbumAsync(System.Int64,System.Int64,System.Collections.Generic.IEnumerable{System.Int64})"/>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategory.AddToAlbum(System.Int64,System.Int64,System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc cref="M:VkNet.Abstractions.IMarketsCategoryAsync.AddToAlbumAsync(System.Int64,System.Int64,System.Collections.Generic.IEnumerable{System.Int64})"/>
        </member>
        <member name="M:VkNet.Abstractions.IMarketsCategory.GetCategories(System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc cref="M:VkNet.Abstractions.IMarketsCategoryAsync.GetCategoriesAsync(System.Nullable{System.Int64},System.Nullable{System.Int64})"/>
        </member>
        <member name="T:VkNet.Abstractions.IMessagesCategory">
            <summary>
            Методы для работы с личными сообщениями. Для моментального получения входящих
            сообщений используйте LongPoll сервер.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.AddChatUser(System.Int64,System.Int64)">
            <summary>
            Добавляет в мультидиалог нового пользователя.
            </summary>
            <param name="chatId">
            Идентификатор беседы. положительное число, обязательный параметр, максимальное
            значение 100000000
            </param>
            <param name="userId">
            Идентификатор пользователя, которого необходимо включить в беседу.
            положительное число, обязательный параметр deleteConversation
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.addChatUser
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.AllowMessagesFromGroup(System.Int64,System.String)">
            <summary>
            Позволяет разрешить отправку сообщений от сообщества текущему пользователю.
            </summary>
            <param name="groupId">
            Идентификатор сообщества. положительное число, обязательный параметр
            </param>
            <param name="key">
            Произвольная строка. Этот параметр можно использовать для идентификации
            пользователя.
            Его значение будет возвращено в событии message_allow Callback API. строка
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте
            http://vk.com/dev/messages.allowMessagesFromGroup
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.CreateChat(System.Collections.Generic.IEnumerable{System.UInt64},System.String)">
            <summary>
            Создаёт беседу с несколькими участниками.
            </summary>
            <param name="title">
            Название беседы. строка
            </param>
            <param name="userIds">
            Идентификаторы пользователей, которых нужно включить в мультидиалог.
            Должны быть в друзьях у текущего пользователя. список положительных чисел,
            разделенных запятыми
            </param>
            <returns>
            После успешного выполнения возвращает  идентификатор созданного чата (chat_id).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.createChat
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.Delete(System.Collections.Generic.IEnumerable{System.UInt64},System.Nullable{System.Boolean},System.Nullable{System.UInt64},System.Nullable{System.Boolean})">
            <summary>
            Удаляет сообщение.
            </summary>
            <param name="messageIds">
            Список идентификаторов сообщений, разделённых через запятую. список
            положительных чисел, разделенных запятыми
            </param>
            <param name="spam">
            Пометить сообщения как спам. флаг, может принимать значения 1 или 0
            </param>
            <param name="groupId">
            Идентификатор сообщества (для сообщений сообщества с ключом доступа
            пользователя). положительное число
            </param>
            <param name="deleteForAll">
            1 — если сообщение нужно удалить для получателей (если с момента отправки
            сообщения прошло не более 24 часов ).
            флаг, может принимать значения 1 или 0, по умолчанию
            </param>
            <returns>
            После успешного выполнения возвращает 1 для каждого удаленного сообщения.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.delete
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.DeleteChatPhoto(System.UInt64@,System.UInt64,System.Nullable{System.UInt64})">
            <summary>
            Позволяет удалить фотографию мультидиалога.
            </summary>
            <param name="messageId"> Идентификатор отправленного системного сообщения; </param>
            <param name="chatId">
            Идентификатор беседы. положительное число, обязательный параметр, максимальное
            значение 100000000
            </param>
            <param name="groupId">
            Идентификатор сообщества (для сообщений сообщества с ключом доступа
            пользователя). положительное число
            </param>
            <returns>
            После успешного выполнения возвращает объект, содержащий следующие поля:
            message_id — идентификатор отправленного системного сообщения;
            chat — объект мультидиалога.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.deleteChatPhoto
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.DenyMessagesFromGroup(System.Int64)">
            <summary>
            Позволяет запретить отправку сообщений от сообщества текущему пользователю.
            </summary>
            <param name="groupId"> Идентификатор сообщества. </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте
            https://vk.com/dev/messages.denyMessagesFromGroup
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.EditChat(System.Int64,System.String)">
            <summary>
            Изменяет название беседы.
            </summary>
            <param name="chatId">
            Идентификатор беседы. целое число, обязательный параметр (Целое число,
            обязательный параметр).
            </param>
            <param name="title">
            Новое название для беседы. строка, обязательный параметр (Строка, обязательный
            параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.editChat
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.GetById(System.Collections.Generic.IEnumerable{System.UInt64},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.UInt64},System.Nullable{System.Boolean},System.Nullable{System.UInt64})">
            <summary>
            Возвращает сообщения по их идентификаторам.
            </summary>
            <param name="messageIds">
            Идентификаторы сообщений. Максимум 100 идентификаторов. список положительных
            чисел, разделенных запятыми, обязательный параметр
            </param>
            <param name="fields">
            Список дополнительных полей для пользователей и сообществ. список слов,
            разделенных через запятую
            </param>
            <param name="previewLength">
            Количество символов, по которому нужно обрезать сообщение. Укажите 0, если Вы
            не хотите обрезать сообщение. (по умолчанию сообщения не обрезаются).
            положительное число, по умолчанию 0
            </param>
            <param name="extended">
            1 — возвращать дополнительные поля. флаг, может принимать значения 1 или 0
            </param>
            <param name="groupId">
            Идентификатор сообщества (для сообщений сообщества с ключом доступа
            пользователя). положительное число
            </param>
            <returns>
            После успешного выполнения возвращает объект, содержащий число результатов в
            поле count и массив объектов, описывающих  сообщения, в поле items.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.getById
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.Search(VkNet.Model.RequestParams.MessagesSearchParams)">
            <summary>
            Возвращает список найденных личных сообщений текущего пользователя по введенной
            строке поиска.
            </summary>
            <param name="params">
            Входные параметры запроса.
            </param>
            <returns>
            После успешного выполнения возвращает объект, содержащий число результатов в
            поле count и массив объектов, описывающих личные сообщения, в поле items.
            Обратите внимание, даже при использовании параметра offset максимальное число
            доступных результатов — 10000.
            Если extended = 1, в поле items возвращается массив объектов бесед.
            Дополнительно возвращаются массивы profiles и groups, содержащие объекты
            пользователей и сообществ.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.search
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.Send(VkNet.Model.RequestParams.MessagesSendParams)">
            <summary>
            Посылает личное сообщение.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            Возвращается идентификатор отправленного сообщения.
            </returns>
            <exception cref="T:System.ArgumentException"> Message can not be <c> null </c>. </exception>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской,
            содержащей Settings.Messages
            Страница документации ВКонтакте http://vk.com/dev/messages.send
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.SendToUserIds(VkNet.Model.RequestParams.MessagesSendParams)">
            <summary>
            Посылает личное сообщение.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            Возвращается идентификатор отправленного сообщения.
            </returns>
            <exception cref="T:System.ArgumentException"> Message can not be <c> null </c>. </exception>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской,
            содержащей Settings.Messages
            Страница документации ВКонтакте http://vk.com/dev/messages.send
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.Restore(System.UInt64,System.Nullable{System.UInt64})">
            <summary>
            Восстанавливает удаленное сообщение.
            </summary>
            <param name="messageId">
            Идентификатор сообщения, которое нужно восстановить.
            </param>
            <param name="groupId">
            Идентификатор сообщества (для сообщений сообщества с ключом доступа
            пользователя). положительное число
            </param>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской,
            содержащей Settings.Messages
            Страница документации ВКонтакте http://vk.com/dev/messages.restore
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.MarkAsRead(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Помечает сообщения как прочитанные.
            </summary>
            <param name="peerId">
            Идентификатор чата или пользователя, если это диалог.
            строка (Строка).
            </param>
            <param name="startMessageId">
            При передаче этого параметра будут помечены как прочитанные все сообщения,
            начиная с
            данного. положительное число (Положительное число).
            </param>
            <param name="groupId">
            Идентификатор сообщества (для сообщений сообщества с ключом доступа
            пользователя).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.markAsRead
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.SetActivity(System.String,VkNet.Enums.SafetyEnums.MessageActivityType,System.Nullable{System.Int64},System.Nullable{System.UInt64})">
            <summary>
            Изменяет статус набора текста пользователем в диалоге.
            </summary>
            <param name="userId"> Идентификатор пользователя </param>
            <param name="peerId">
            Идентификатор назначения. Для групповой беседы: 2000000000 + id беседы. Для
            сообщества: -id
            сообщества.
            </param>
            <param name="type"> typing — пользователь начал набирать текст. </param>
            <param name="groupId">
            Идентификатор сообщества (для сообщений сообщества с ключом доступа
            пользователя).
            </param>
            <returns>
            После успешного выполнения возвращает true, false в противном случае.
            Текст «N набирает сообщение...» отображается в течение 10 секунд после вызова
            метода, либо до момента отправки
            сообщения.
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской,
            содержащей Settings.Messages
            Страница документации ВКонтакте http://vk.com/dev/messages.setActivity
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.GetLastActivity(System.Int64)">
            <summary>
            Возвращает текущий статус и дату последней активности указанного пользователя.
            </summary>
            <param name="userId">
            Идентификатор пользователя, информацию о последней активности которого
            требуется получить. целое
            число, обязательный параметр (Целое число, обязательный параметр).
            </param>
            <returns>
            Возвращает объект, содержащий следующие поля:
            online — текущий статус пользователя (1 — в сети, 0 — не в сети);
            time — дата последней активности пользователя в формате unixtime.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.getLastActivity
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.GetChat(System.Int64,VkNet.Enums.Filters.ProfileFields,VkNet.Enums.SafetyEnums.NameCase)">
            <summary>
            Gets the chat.
            </summary>
            <param name="chatId"> The chat identifier. </param>
            <param name="fields"> The fields. </param>
            <param name="nameCase"> The name case. </param>
            <returns>
            После успешного выполнения возвращает объект (или список объектов)
            мультидиалога.
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/messages.getChat
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.GetChat(System.Collections.Generic.IEnumerable{System.Int64},VkNet.Enums.Filters.ProfileFields,VkNet.Enums.SafetyEnums.NameCase)">
            <summary>
            Возвращает информацию о беседе.
            </summary>
            <param name="chatIds">
            Список идентификаторов бесед. список целых чисел, разделенных запятыми (Список
            целых чисел,
            разделенных запятыми).
            </param>
            <param name="fields">
            Список дополнительных полей профилей, которые необходимо вернуть.
            Доступные значения: nickname, screen_name, sex, bdate, city, country, timezone,
            photo_50, photo_100,
            photo_200_orig, has_mobile, contacts, education, online, counters, relation,
            last_seen, status,
            can_write_private_message, can_see_all_posts, can_post, universities список
            строк, разделенных через запятую
            (Список строк, разделенных через запятую).
            </param>
            <param name="nameCase">
            Падеж для склонения имени и фамилии пользователя. Возможные значения:
            именительный – nom,
            родительный – gen, дательный – dat, винительный – acc, творительный – ins,
            предложный – abl. По умолчанию nom.
            строка (Строка).
            </param>
            <returns>
            После успешного выполнения возвращает объект (или список объектов)
            мультидиалога.
            Если был задан параметр fields, поле users содержит список объектов
            пользователей с дополнительным полем
            invited_by, содержащим идентификатор пользователя, пригласившего в беседу.
            </returns>
            <exception cref="T:System.ArgumentException">
            At least one chat ID must be
            defined;chatIds
            </exception>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.getChat
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.GetChatPreview(System.String,VkNet.Enums.Filters.ProfileFields)">
            <summary>
            Получает данные для превью чата с приглашением по ссылке.
            </summary>
            <param name="link"> Ссылка-приглашение. </param>
            <param name="fields"> Список полей профилей, данные о которых нужно получить. </param>
            <returns> Возвращает объект представляющий описание чата </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/messages.getChatPreview
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.GetHistory(VkNet.Model.RequestParams.MessagesGetHistoryParams)">
            <summary>
            Возвращает историю сообщений текущего пользователя с указанным пользователя или
            групповой беседы.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <returns>
            Возвращает историю сообщений с указанным пользователем или из
            указанной беседы
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской,
            содержащей Settings.Messages
            Страница документации ВКонтакте http://vk.com/dev/messages.getHistory
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.RemoveChatUser(System.UInt64,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Исключает из мультидиалога пользователя, если текущий пользователь был
            создателем беседы либо пригласил исключаемого пользователя.
            </summary>
            <param name="chatId">
            Идентификатор беседы. положительное число, обязательный параметр, максимальное
            значение 100000000
            </param>
            <param name="userId">
            Идентификатор пользователя, которого необходимо исключить из беседы. Может быть
            меньше нуля в случае, если пользователь приглашён по email. целое число
            </param>
            <param name="memberId">
            Идентификатор участника, которого необходимо исключить из беседы. Для сообществ
            — идентификатор сообщества со знаком «минус». целое число, доступен начиная с
            версии 5.81
            </param>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.removeChatUser
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.GetLongPollServer(System.Boolean,System.UInt32,System.Nullable{System.UInt64})">
            <summary>
            Возвращает данные, необходимые для подключения к Long Poll серверу.
            Long Poll подключение позволит Вам моментально узнавать о приходе новых
            сообщений и других событий.
            </summary>
            <param name="lpVersion">
            Версия для подключения к Long Poll. Актуальная версия:
            2.
            </param>
            <param name="needPts">
            <c> true </c> — возвращать поле pts, необходимое для работы метода
            messages.getLongPollHistory
            </param>
            <param name="groupId">
            Айди группы, от которой получать данные
            </param>
            <returns>
            Возвращает объект, с помощью которого можно подключиться к серверу быстрых
            сообщений для мгновенного
            получения приходящих сообщений и других событий.
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской,
            содержащей Settings.Messages
            Страница документации ВКонтакте http://vk.com/dev/messages.getLongPollServer
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.GetLongPollHistory(VkNet.Model.RequestParams.MessagesGetLongPollHistoryParams)">
            <summary>
            Возвращает обновления в личных сообщениях пользователя.
            Для ускорения работы с личными сообщениями может быть полезно кешировать уже
            загруженные ранее сообщения на
            мобильном устройстве / ПК пользователя, чтобы не получать их повторно при
            каждом обращении.
            Этот метод помогает осуществить синхронизацию локальной копии списка сообщений
            с актуальной версией.
            </summary>
            <param name="params">
            Параметры запроса к LongPool серверу
            MessagesGetLongPollHistoryParams
            </param>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской,
            содержащей Settings.Messages
            Страница документации ВКонтакте http://vk.com/dev/messages.getLongPollHistory
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.SetChatPhoto(System.Int64@,System.String)">
            <summary>
            Позволяет установить фотографию мультидиалога, загруженную с помощью метода
            photos.getChatUploadServer.
            </summary>
            <param name="file">
            Содержимое поля response из ответа специального upload сервера, полученного в
            результате загрузки
            изображения на адрес, полученный методом photos.getChatUploadServer. строка,
            обязательный параметр (Строка,
            обязательный параметр).
            </param>
            <param name="messageId"> Идентификатор отправленного системного сообщения; </param>
            <returns>
            После успешного выполнения возвращает объект, содержащий следующие поля:
            message_id — идентификатор отправленного системного сообщения;
            chat — объект мультидиалога.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.setChatPhoto
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.MarkAsImportant(System.Collections.Generic.IEnumerable{System.Int64},System.Boolean)">
            <summary>
            Помечает сообщения как важные либо снимает отметку.
            </summary>
            <param name="messageIds">
            Список идентификаторов сообщений, которые необходимо пометить.список
            положительных чисел,
            разделенных запятыми (Список положительных чисел, разделенных запятыми).
            </param>
            <param name="important">
            &#39;&#39;1&#39;&#39;, если сообщения необходимо пометить, как важные;&#39;
            &#39;0&#39;&#39;,
            если необходимо снять пометку.положительное число (Положительное число).
            </param>
            <returns>
            Возвращает список идентификаторов успешно помеченных сообщений.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.markAsImportant
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.SendSticker(VkNet.Model.RequestParams.MessagesSendStickerParams)">
            <summary>
            Отправляет стикер.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает идентификатор отправленного сообщения
            (mid).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.sendSticker
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.GetHistoryAttachments(VkNet.Model.RequestParams.MessagesGetHistoryAttachmentsParams,System.String@)">
            <summary>
            Возвращает материалы диалога или беседы..
            </summary>
            <param name="params"> Параметры запроса. </param>
            <param name="nextFrom"> Новое значение start_from. </param>
            <returns>
            После успешного выполнения возвращает массив объектов photo, video, audio или
            doc, в зависимости от значения
            media_type, а также дополнительное поле next_from, содержащее новое значение
            start_from.
            Если в media_type передано значение link, возвращает список объектов-ссылок:
            url URL ссылки.
            строка title заголовок сниппета.
            строка description описание сниппета.
            строка image_src URL изображения сниппета.
            строка.
            </returns>
            <remarks>
            Страница документации ВКонтакте
            http://vk.com/dev/messages.getHistoryAttachments
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.GetInviteLink(System.UInt64,System.Boolean)">
            <summary>
            Получает ссылку для приглашения пользователя в беседу.
            </summary>
            <param name="peerId"> Идентификатор назначения. </param>
            <param name="reset">
            1 — сгенерировать новую ссылку, сбросив предыдущую.
            0 — получить предыдущую ссылку.
            </param>
            <returns>
            Возвращает объект с единственным полем link (string), которое содержит ссылку
            для приглашения в беседу.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.getInviteLink
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.IsMessagesFromGroupAllowed(System.UInt64,System.UInt64)">
            <summary>
            Возвращает информацию о том, разрешена ли отправка сообщений от сообщества
            пользователю.
            </summary>
            <param name="groupId"> Идентификатор сообщества. </param>
            <param name="userId"> Идентификатор пользователя. </param>
            <returns>
            Возвращает объект с единственным полем is_allowed (integer, [0,1]). Если
            отправка сообщений разрешена, поле
            содержит 1, иначе — 0.
            </returns>
            <remarks>
            Страница документации ВКонтакте
            http://vk.com/dev/messages.isMessagesFromGroupAllowed
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.JoinChatByInviteLink(System.String)">
            <summary>
            Позволяет присоединиться к чату по ссылке-приглашению.
            </summary>
            <param name="link"> Ссылка-приглашение. </param>
            <returns>
            Возвращает идентификатор чата в поле chat_id.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.joinChatByInviteLink
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.MarkAsAnsweredConversation(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.UInt64})">
            <summary>
            Помечает беседу как отвеченную либо снимает отметку.
            </summary>
            <param name="peerId">
            Идентификатор беседы целое число, обязательный параметр
            </param>
            <param name="answered">
            <c> true </c> - беседа отмечена отвеченной, <c> false </c> - неотвеченной флаг,
            может принимать значения <c> true </c> или <c> false </c>, по умолчанию
            <c> true </c>
            </param>
            <param name="groupId">
            Идентификатор сообщества (для сообщений сообщества с ключом доступа
            пользователя). положительное число
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте
            http://vk.com/dev/messages.markAsAnsweredConversation
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.MarkAsImportantConversation(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.UInt64})">
            <summary>
            Помечает беседу как важную либо снимает отметку.
            </summary>
            <param name="peerId"> Идентификатор беседы </param>
            <param name="important">
            <c> true </c>, если сообщения необходимо пометить, как важные;
            <c> false </c>, если необходимо снять пометку. положительное число
            (Положительное число).
            </param>
            <param name="groupId">
            Идентификатор сообщества (для сообщений сообщества с ключом доступа
            пользователя). положительное число
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте
            http://vk.com/dev/messages.markAsImportantConversation
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.Edit(VkNet.Model.RequestParams.MessageEditParams)">
            <summary>
            Редактирует сообщение.
            </summary>
            <param name="params">
            Входные параметры запроса.
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.edit
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.DeleteConversation(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.UInt64})">
            <summary>
            Удаляет беседу.
            </summary>
            <param name = "userId">
            Идентификатор пользователя. Если требуется очистить историю беседы, используйте peer_id. строка
            </param>
            <param name = "peerId">
            Идентификатор назначения.
            Для групповой беседы:
            2000000000 + id беседы.
            Для сообщества:
            -id сообщества.
            целое число, доступен начиная с версии 5.38
            </param>
            <param name = "groupId">
            Идентификатор сообщества (для сообщений сообщества с ключом доступа пользователя). положительное число
            </param>
            <returns>
            После успешного выполнения возвращает поле last_deleted_id, содержащее идентификатор последнего удалённого сообщения в переписке.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.deleteConversation
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.GetConversationsById(System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Nullable{System.UInt64})">
            <summary>
            Позволяет получить беседу по её идентификатору.
            </summary>
            <param name="peerIds">
            Идентификаторы назначений, разделённые запятой.
            Для пользователя:
            id  пользователя.
            Для групповой беседы:
            2000000000 + id беседы.
            Для сообщества:
            -id сообщества.
            список целых чисел, разделенных запятыми, обязательный параметр
            </param>
            <param name="fields">
            Дополнительные поля пользователей и сообществ, которые необходимо вернуть в
            ответе. список слов, разделенных через запятую
            </param>
            <param name="extended">
            1 — возвращать дополнительные поля. флаг, может принимать значения 1 или 0
            </param>
            <param name="groupId">
            Идентификатор сообщества (для сообщений сообщества с ключом доступа
            пользователя). положительное число
            </param>
            <returns>
            Возвращает общее число результатов в поле count (integer) и массив объектов
            бесед в поле items.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.getConversationsById
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.GetConversations(VkNet.Model.RequestParams.GetConversationsParams)">
            <summary>
            Возвращает список бесед пользователя.
            </summary>
            <param name="getConversationsParams">
            Входные параметры запроса.
            </param>
            <returns>
            Возвращает объект, который содержит следующие поля:
            count
            integerчисло результатов. items
            array беседы. Массив объектов, каждый из которых содержит поля:
            conversation (object) — объект беседы.
            last_message (object) — объект, описывающий последнее сообщение в беседе.
            unread_count
            integer число непрочитанных бесед. profiles
            array массив объектов пользователей. groups
            array массив объектов сообществ.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.getConversations
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.GetConversationMembers(System.Int64,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.UInt64})">
            <summary>
            Позволяет получить список участников беседы.
            </summary>
            <param name="peerId">
            Идентификатор назначения.
            Для пользователя:
            id  пользователя.
            Для групповой беседы:
            2000000000 + id беседы.
            Для сообщества:
            -id сообщества.
            целое число, обязательный параметр
            </param>
            <param name="fields">
            Дополнительные поля пользователей и сообществ, которые необходимо вернуть в
            ответе. список слов, разделенных через запятую
            </param>
            <param name="groupId">
            Идентификатор сообщества (для сообщений сообщества с ключом доступа
            пользователя). положительное число
            </param>
            <returns>
            Возвращает объет, который содержит следующие поля:
            count
            integerчисло участников беседы. items
            arrayучастники беседы. Массив объектов, каждый из которых содержит поля:
            member_id (integer) — идентификатор участника беседы;
            invited_by (integer) — идентификатор пользователя, который пригласил участника;
            join_date (integer) — дата добавления в беседу;
            is_admin (boolean) — является ли пользователь администратором. profiles
            arrayмассив объектов пользователей. groups
            arrayмассив объектов сообществ.
            </returns>
            <remarks>
            Страница документации ВКонтакте
            http://vk.com/dev/messages.getConversationMembers
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.GetByConversationMessageId(System.Int64,System.Collections.Generic.IEnumerable{System.UInt64},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Nullable{System.UInt64})">
            <summary>
            Возвращает сообщения по их идентификаторам в рамках беседы.
            </summary>
            <param name="peerId">
            Идентификаторы назначений, разделённые запятой.
            Для пользователя:
            id  пользователя.
            Для групповой беседы:
            2000000000 + id беседы.
            Для сообщества:
            -id сообщества.
            целое число, обязательный параметр
            </param>
            <param name="conversationMessageIds">
            Идентификаторы сообщений. Максимум 100 идентификаторов. список положительных
            чисел, разделенных запятыми, обязательный параметр
            </param>
            <param name="fields">
            Дополнительные поля пользователей и сообществ, которые необходимо вернуть в
            ответе. список слов, разделенных через запятую
            </param>
            <param name="extended">
            1 — возвращать дополнительные поля. флаг, может принимать значения 1 или 0
            </param>
            <param name="groupId">
            Идентификатор сообщества (для сообщений сообщества с ключом доступа
            пользователя). положительное число
            </param>
            <returns>
            После успешного выполнения возвращает объект, содержащий число результатов в
            поле count и массив объектов, описывающих  сообщения, в поле items.
            </returns>
            <remarks>
            Страница документации ВКонтакте
            http://vk.com/dev/messages.getByConversationMessageId
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.SearchConversations(System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.UInt64},System.Nullable{System.Boolean},System.Nullable{System.UInt64})">
            <summary>
            Позволяет искать диалоги.
            </summary>
            <param name="q">
            Поисковой запрос. строка
            </param>
            <param name="fields">
            Дополнительные поля пользователей и сообществ, которые необходимо вернуть в
            ответе. список слов, разделенных через запятую
            </param>
            <param name="count">
            Максимальное число результатов для получения. положительное число, по умолчанию
            20
            </param>
            <param name="extended">
            1 — возвращать дополнительные поля. флаг, может принимать значения 1 или 0
            </param>
            <param name="groupId">
            Идентификатор сообщества (для сообщений сообщества с ключом доступа
            пользователя). положительное число
            </param>
            <returns>
            Возвращает общее число результатов в поле count (integer) и массив объектов
            диалогов в поле items.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.searchConversations
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.Pin(System.Int64,System.Nullable{System.UInt64})">
            <summary>
            Закрепляет сообщение.
            </summary>
            <param name="peerId">
            Идентификатор назначения.
            Для пользователя:
            id  пользователя.
            Для групповой беседы:
            2000000000 + id беседы.
            Для сообщества:
            -id сообщества.
            целое число, обязательный параметр
            </param>
            <param name="messageId">
            Идентификатор сообщения, которое нужно закрепить. положительное число
            </param>
            <returns>
            Возвращает объект закрепленного сообщения.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.pin
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.Unpin(System.Int64,System.Nullable{System.UInt64})">
            <summary>
            Открепляет сообщение.
            </summary>
            <param name="peerId">
            Идентификатор назначения.
            Для пользователя:
            id  пользователя.
            Для групповой беседы:
            2000000000 + id беседы.
            Для сообщества:
            -id сообщества.
            целое число, обязательный параметр
            </param>
            <param name="groupId">
            Идентификатор сообщества (для сообщений сообщества с ключом доступа
            пользователя). положительное число
            </param>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.unpin
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.GetImportantMessages(VkNet.Model.RequestParams.GetImportantMessagesParams)">
            <summary>
            Возвращает список важных сообщений пользователя.
            </summary>
            <param name="getImportantMessagesParams">
            Входные параметры запроса.
            </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.getImportantMessages
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.GetRecentCalls(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.Boolean})">
            <summary>
            Возвращает информацию о недавних звонках.
            </summary>
            <param name="fields">
            Список дополнительных полей для пользователей и сообществ. список слов,
            разделенных через запятую
            </param>
            <param name="count">
            Максимальное число результатов, которые нужно получить. положительное число, по
            умолчанию 40, максимальное значение 500
            </param>
            <param name="startMessageId">
            Идентификатор сообщения, начиная с которого нужно возвращать звонки.
            положительное число
            </param>
            <param name="extended">
            1 — возвращать дополнительные поля для пользователей и сообществ. флаг, может
            принимать значения 1 или 0
            </param>
            <returns>
            Возвращает объект, который содержит следующие поля:
            count
            integerчисло результатов. items
            arrayбеседы. Массив объектов, каждый из которых содержит поля:
            call (object) — объект со следующими полями
            initiator_id (integer) — инициатор звонка.
            receiver_id (integer) — получатель звонка.
            state (string) — состояние.
            canceled_by_initiator — сброшен инициатором
            canceled_by_receiver — сброшен получателем
            reached — состоялся
            duration (integer) — длительность звонка в секундах.
            message_id  (integer) — индетификатор сообщения profiles
            arrayмассив объектов пользователей. groups
            arrayмассив объектов сообществ.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.getRecentCalls
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.DeleteDialog(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>
            Удаляет все личные сообщения в диалоге.
            </summary>
            <param name="userId">
            Идентификатор пользователя.
            Если требуется очистить историю беседы, используйте peer_id.
            </param>
            <param name="peerId">
            Идентификатор назначения.
            Для групповой беседы: 2000000000 + id беседы.
            Для сообщества: -id сообщества.
            </param>
            <param name="offset">
            Смещение, начиная с которого нужно удалить переписку (по умолчанию удаляются
            все сообщения,
            начиная с первого).
            </param>
            <param name="count">
            Как много сообщений нужно удалить. Обратите внимание что на метод наложено
            ограничение, за один вызов
            нельзя удалить больше 10000 сообщений, поэтому если сообщений в переписке
            больше - метод нужно вызывать несколько
            раз.
            </param>
            <returns> Признак удалось ли удалить сообщения. </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской,
            содержащей Settings.Messages
            Страница документации ВКонтакте http://vk.com/dev/messages.deleteDialog
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.MarkAsAnsweredDialog(System.Int64,System.Boolean)">
            <summary>
            Помечает диалог как отвеченный либо снимает отметку.
            </summary>
            <param name="peerId"> Идентификатор диалога </param>
            <param name="answered"> флаг, может принимать значения 1 или 0, по умолчанию 1 </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.markAsAnsweredDialog
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.MarkAsImportantDialog(System.Int64,System.Boolean)">
            <summary>
            Помечает диалог как важный либо снимает отметку.
            </summary>
            <param name="peerId"> Идентификатор диалога </param>
            <param name="important">
            <c> true </c>, если сообщения необходимо пометить, как важные;
            <c> 0 </c>, если необходимо снять пометку.положительное число (Положительное
            число).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте
            http://vk.com/dev/messages.markAsImportantDialog
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.SearchDialogs(System.String,VkNet.Enums.Filters.ProfileFields,System.Nullable{System.UInt32})">
            <summary>
            Возвращает список найденных диалогов текущего пользователя по введенной строке
            поиска.
            </summary>
            <param name="query"> Подстрока, по которой будет производиться поиск. </param>
            <param name="limit"> Количество пользователей которое нужно вернуть. </param>
            <param name="fields"> Поля профилей собеседников, которые необходимо вернуть. </param>
            <returns>
            В результате выполнения данного метода будет возвращён массив объектов
            профилей, бесед и email.
            </returns>
            <exception cref="T:System.ArgumentException">
            Query can not be null or
            empty.;query
            </exception>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской,
            содержащей Settings.Messages
            Страница документации ВКонтакте http://vk.com/dev/messages.searchDialogs
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.Get(VkNet.Model.RequestParams.MessagesGetParams)">
            <summary>
            Возвращает список входящих либо исходящих личных сообщений текущего
            пользователя.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <returns> Список сообщений, удовлетворяющий условиям фильтрации. </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской,
            содержащей Settings.Messages
            Страница документации ВКонтакте http://vk.com/dev/messages.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.GetChatUsers(System.Collections.Generic.IEnumerable{System.Int64},VkNet.Enums.Filters.UsersFields,VkNet.Enums.SafetyEnums.NameCase)">
            <summary>
            Позволяет получить список пользователей мультидиалога по его id.
            </summary>
            <param name="chatIds">
            Идентификаторы бесед. список целых чисел, разделенных запятыми (Список целых
            чисел, разделенных
            запятыми).
            </param>
            <param name="fields">
            Список дополнительных полей профилей, которые необходимо вернуть.
            Доступные значения: nickname, screen_name, sex, bdate, city, country, timezone,
            photo_50, photo_100,
            photo_200_orig, has_mobile, contacts, education, online, counters, relation,
            last_seen, status,
            can_write_private_message, can_see_all_posts, can_post, universities список
            строк, разделенных через запятую
            (Список строк, разделенных через запятую).
            </param>
            <param name="nameCase">
            Падеж для склонения имени и фамилии пользователя. Возможные значения:
            именительный – nom,
            родительный – gen, дательный – dat, винительный – acc, творительный – ins,
            предложный – abl. По умолчанию nom.
            строка (Строка).
            </param>
            <returns>
            После успешного выполнения возвращает список идентификаторов участников беседы.
            Если был задан параметр fields, возвращает список объектов пользователей с
            дополнительным полем invited_by,
            содержащим идентификатор пользователя, пригласившего в беседу.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/messages.getChatUsers
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IMessagesCategory.GetDialogs(VkNet.Model.RequestParams.MessagesDialogsGetParams)">
            <summary>
            Возвращает список диалогов аккаунта
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <returns> В случае успеха возвращает список диалогов пользователя </returns>
        </member>
        <member name="T:VkNet.Abstractions.INewsFeedCategory">
            <summary>
            Методы для работы с новостной лентой пользователя.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.INewsFeedCategory.Get(VkNet.Model.RequestParams.NewsFeedGetParams)">
            <summary>
            Возвращает данные, необходимые для показа списка новостей для текущего
            пользователя.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            Возвращает результат выполнения метода.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/newsfeed.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INewsFeedCategory.GetRecommended(VkNet.Model.RequestParams.NewsFeedGetRecommendedParams)">
            <summary>
            Получает список новостей, рекомендованных пользователю.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            Возвращает результат выполнения метода.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/newsfeed.getRecommended
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INewsFeedCategory.GetComments(VkNet.Model.RequestParams.NewsFeedGetCommentsParams)">
            <summary>
            Возвращает данные, необходимые для показа раздела комментариев в новостях
            пользователя.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            Возвращает результат выполнения метода.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/newsfeed.getComments
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INewsFeedCategory.GetMentions(System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Возвращает список записей пользователей на своих стенах, в которых упоминается
            указанный пользователь.
            </summary>
            <param name="ownerId">
            Идентификатор группы или сообщества. по умолчанию идентификатор текущего
            пользователя
            </param>
            <param name="startTime">
            Время в формате unixtime начиная с которого следует получать упоминания о
            пользователе.
            </param>
            <param name="endTime">
            Время, в формате unixtime, до которого следует получать упоминания о
            пользователе.
            </param>
            <param name="offset">
            Смещение, необходимое для выборки определенного подмножества новостей. По
            умолчанию 0.
            </param>
            <param name="count">
            Количество возвращаемых записей. Если параметр не задан, то считается, что он
            равен 20.
            Максимальное значение параметра 50.
            </param>
            <returns>
            Возвращает результат выполнения метода.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/newsfeed.getMentions
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INewsFeedCategory.GetBanned">
            <summary>
            Возвращает список пользователей и групп, которые текущий пользователь скрыл из
            ленты новостей.
            </summary>
            <returns> Возвращает результат выполнения метода. </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/newsfeed.getBanned
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INewsFeedCategory.GetBannedEx(VkNet.Enums.Filters.UsersFields,VkNet.Enums.SafetyEnums.NameCase)">
            <summary>
            Возвращает список пользователей и групп, которые текущий пользователь скрыл из
            ленты новостей.
            </summary>
            <param name="fields">
            Список дополнительных полей профилей, которые необходимо
            вернуть.
            </param>
            <param name="nameCase"> Падеж для склонения имени и фамилии пользователя. </param>
            <returns>
            Возвращает результат выполнения метода.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/newsfeed.getBanned
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INewsFeedCategory.AddBan(System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Запрещает показывать новости от заданных пользователей и групп в ленте новостей
            текущего пользователя.
            </summary>
            <param name="userIds">
            Перечисленные через запятую идентификаторы друзей пользователя, новости от
            которых необходимо
            скрыть из ленты новостей текущего пользователя.
            </param>
            <param name="groupIds">
            Перечисленные через запятую идентификаторы групп пользователя, новости от
            которых необходимо
            скрыть из ленты новостей текущего пользователя.
            </param>
            <returns>
            Возвращает результат выполнения метода.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/newsfeed.addBan
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INewsFeedCategory.DeleteBan(System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Разрешает показывать новости от заданных пользователей и групп в ленте новостей
            текущего пользователя.
            </summary>
            <param name="userIds">
            Идентификаторы пользователей, новости от которых
            необходимо вернуть в ленту.
            </param>
            <param name="groupIds">
            Идентификаторы сообществ, новости от которых необходимо
            вернуть в ленту.
            </param>
            <returns>
            Возвращает результат выполнения метода.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/newsfeed.deleteBan
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INewsFeedCategory.IgnoreItem(VkNet.Enums.SafetyEnums.NewsObjectTypes,System.Int64,System.Int64)">
            <summary>
            Позволяет скрыть объект из ленты новостей.
            </summary>
            <param name="type"> Тип объекта. </param>
            <param name="ownerId">
            Идентификатор владельца объекта (пользователь или
            сообщество).
            </param>
            <param name="itemId"> Идентификатор объекта. </param>
            <returns>
            Возвращает результат выполнения метода.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/newsfeed.ignoreItem
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INewsFeedCategory.UnignoreItem(VkNet.Enums.SafetyEnums.NewsObjectTypes,System.Int64,System.Int64)">
            <summary>
            Позволяет вернуть ранее скрытый объект в ленту новостей.
            </summary>
            <returns> Возвращает результат выполнения метода. </returns>
            <param name="type"> Тип объекта. </param>
            <param name="ownerId">
            Идентификатор владельца объекта (пользователь или
            сообщество).
            </param>
            <param name="itemId"> Идентификатор объекта. </param>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/newsfeed.unignoreItem
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INewsFeedCategory.Search(VkNet.Model.RequestParams.NewsFeedSearchParams)">
            <summary>
            Возвращает результаты поиска по статусам. Новости возвращаются в порядке от
            более новых к более старым.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            Возвращает результат выполнения метода.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/newsfeed.search
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INewsFeedCategory.GetLists(System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Boolean})">
            <summary>
            Возвращает пользовательские списки новостей.
            </summary>
            <param name="listIds"> Идентификаторы списков. </param>
            <param name="extended">
            <c> true </c> — вернуть дополнительную информацию о списке (значения source_ids
            и no_reposts).
            </param>
            <returns>
            Метод возвращает список объектов пользовательских списков.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/newsfeed.getLists
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INewsFeedCategory.SaveList(System.String,System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <summary>
            Метод позволяет создавать или редактировать пользовательские списки для
            просмотра новостей.
            </summary>
            <param name="title"> Название списка. </param>
            <param name="sourceIds">
            Идентификаторы пользователей и сообществ, которые должны быть включены в
            список. Идентификаторы
            сообществ нужно указывать со знаком «минус».
            </param>
            <param name="listId">
            Числовой идентификатор списка (если не передан, будет
            назначен автоматически).
            </param>
            <param name="noReposts">
            Нужно ли отображать копии постов в списке (
            <c> true </c> — не нужно).
            </param>
            <returns>
            После успешного выполнения возвращает Идентификатор списка.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/newsfeed.saveList
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INewsFeedCategory.DeleteList(System.Int64)">
            <summary>
            Метод позволяет удалить пользовательский список новостей
            </summary>
            <param name="listId"> Числовой идентификатор списка . </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/newsfeed.deleteList
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INewsFeedCategory.Unsubscribe(VkNet.Enums.SafetyEnums.CommentObjectType,System.Int64,System.Nullable{System.Int64})">
            <summary>
            Отписывает текущего пользователя от комментариев к заданному объекту.
            </summary>
            <param name="type">
            Тип объекта, от комментариев к которому необходимо
            отписаться.
            </param>
            <param name="ownerId"> Идентификатор владельца объекта. </param>
            <param name="itemId"> Идентификатор объекта. </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/newsfeed.unsubscribe
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INewsFeedCategory.GetSuggestedSources(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean},VkNet.Enums.Filters.UsersFields)">
            <summary>
            Возвращает сообщества и пользователей, на которые текущему пользователю
            рекомендуется подписаться.
            </summary>
            <param name="offset">
            Отступ, необходимый для выборки определенного подмножества сообществ или
            пользователей.
            положительное число (Положительное число).
            </param>
            <param name="count">
            Количество сообществ или пользователей, которое необходимо вернуть.
            положительное число,
            максимальное значение 1000, по умолчанию 20 (Положительное число, максимальное
            значение 1000, по умолчанию 20).
            </param>
            <param name="shuffle">
            Перемешивать ли возвращаемый список. флаг, может принимать значения 1 или 0
            (Флаг, может
            принимать значения 1 или 0).
            </param>
            <param name="fields">
            Список дополнительных полей, которые необходимо вернуть. См. возможные поля для
            пользователей и
            сообществ. список слов, разделенных через запятую (Список слов, разделенных
            через запятую).
            </param>
            <returns>
            Список объектов пользователей и групп.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/newsfeed.getSuggestedSources
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.INotesCategory">
            <summary>
            Notes Методы для работы с заметками.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.INotesCategory.Add(VkNet.Model.RequestParams.Notes.NotesAddParams)">
            <summary>
            Создает новую заметку у текущего пользователя
            </summary>
            <param name="notesAddParams">
            Входные параметры запроса
            </param>
            <returns>После успешного выполнения возвращает идентификатор созданной заметки (nid).</returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/notifications.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INotesCategory.CreateComment(VkNet.Model.RequestParams.Notes.NotesCreateCommentParams)">
             <summary>
             Добавляет новый комментарий к заметке.
             </summary>
             <param name="createCommentParams">Входные параметры запроса</param>
             <returns>
             После успешного выполнения возвращает идентификатор созданного комментария (cid).
            </returns>
             <remarks>
             Страница документации ВКонтакте http://vk.com/dev/notifications.createComment
             </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INotesCategory.Delete(System.Int64)">
            <summary>
            Удаляет заметку текущего пользователя.
            </summary>
            <param name="noteId">идентификатор заметки.</param>
            <returns>После успешного выполнения возвращает true.</returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/notifications.delete
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INotesCategory.DeleteComment(VkNet.Model.RequestParams.Notes.NotesDeleteCommentParams)">
            <summary>
            Удаляет комментарий к заметке.
            </summary>
            <param name="deleteCommentParams">Входные параметры запроса</param>
            <returns>После успешного выполнения возвращает true. </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/notifications.deleteComment
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INotesCategory.Edit(VkNet.Model.RequestParams.Notes.NotesEditParams)">
            <summary>
            Редактирует заметку текущего пользователя.
            </summary>
            <param name="editParams">Входные параметры запроса</param>
            <returns>После успешного выполнения возвращает true.</returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/notifications.edit
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INotesCategory.EditComment(VkNet.Model.RequestParams.Notes.NotesEditCommentParams)">
            <summary>
            Редактирует указанный комментарий у заметки.
            </summary>
            <param name="editCommentParams">Входные параметры запроса</param>
            <returns>После успешного выполнения возвращает true.</returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/notifications.editComment
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INotesCategory.Get(VkNet.Model.RequestParams.Notes.NotesGetParams)">
            <summary>
            Возвращает список заметок, созданных пользователем.
            </summary>
            <param name="notesGetParams">Входные параметры запроса</param>
            <returns>возвращает список объектов заметок</returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/notifications.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INotesCategory.GetById(VkNet.Model.RequestParams.Notes.NotesGetByIdParams)">
            <summary>
            Возвращает заметку по её id.
            </summary>
            <param name="getByIdParams">Входные параметры запроса</param>
            <returns>Возвращает заметку</returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/notifications.getById
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INotesCategory.GetComments(VkNet.Model.RequestParams.Notes.NotesGetCommentParams)">
            <summary>
            Возвращает список комментариев к заметке.
            </summary>
            <param name="getCommentParams">Входные параметры запроса</param>
            <returns>Возвращает массив объектов comment</returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/notifications.getComments
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INotesCategory.RestoreComment(VkNet.Model.RequestParams.Notes.NotesRestoreCommentParams)">
            <summary>
            Восстанавливает удалённый комментарий.
            </summary>
            <param name="restoreCommentParams">Входные параметры запроса</param>
            <returns>После успешного выполнения возвращает true</returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/notifications.restoreComment
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.INotificationsCategory">
            <summary>
            Notifications
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.INotificationsCategory.Get(System.Nullable{System.UInt64},System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Возвращает список оповещений об ответах других пользователей на записи текущего
            пользователя.
            </summary>
            <param name="count">
            Указывает, какое максимальное число оповещений следует возвращать.
            положительное число, по умолчанию 30,
            максимальное значение 100
            </param>
            <param name="startFrom">
            Строковый идентификатор оповещения, полученного последним в предыдущем вызове
            (см. описание поля next_from в
            результате). строка, доступен начиная с версии 5.27
            </param>
            <param name="filters">
            Перечисленные через запятую типы оповещений, которые необходимо получить.
            Возможные значения:
            wall — записи на стене пользователя;
            mentions — упоминания в записях на стене, в комментариях или в обсуждениях;
            comments — комментарии к записям на стене, фотографиям и видеозаписям;
            likes — отметки «Мне нравится»;
            reposts — скопированные у текущего пользователя записи на стене, фотографии и
            видеозаписи;
            followers — новые подписчики;
            friends — принятые заявки в друзья.
            Если параметр не задан, то будут получены все возможные типы оповещений. список
            слов, разделенных через запятую
            </param>
            <param name="startTime">
            Время в формате Unixtime, начиная с которого следует получить оповещения для
            текущего пользователя. Если параметр
            не задан, то он считается равным значению времени, которое было сутки назад.
            целое число
            </param>
            <param name="endTime">
            Время в формате Unixtime, до которого следует получить оповещения для текущего
            пользователя. Если параметр не
            задан, то он считается равным текущему времени. целое число
            </param>
            <returns>
            После успешного выполнения возвращает объект, содержащий поля:
            items
            arrayмассив оповещений для текущего пользователя. profiles
            arrayинформация о пользователях, которые находятся в списке оповещений. groups
            arrayинформация о сообществах, которые находятся в списке оповещений.
            last_viewed
            integerвремя последнего просмотра пользователем раздела оповещений в формате
            Unixtime.
            Описание поля items Поле items содержит массив объектов, каждый из которых
            соответствует одному оповещению. Каждый
            из объектов содержит поля: type
            stringтип оповещения. Подробнее см. ниже. date
            integerвремя появления ответа в формате Unixtime. parent
            object (отсутствует, если type= follow, mention или wall)информация о
            материале, к которому появился ответ (запись
            на стене, комментарий, фотографию, видеозапись или обсуждение). Подробнее см. в
            описании поля type ниже. feedback
            [object,array]объект (или массив объектов, если type равно follow, like_* или
            copy_*), описывающий поступивший
            ответ. Оповещения о новых подписчиках, пометках «Мне нравится» и скопированных
            записях могут быть сгруппированы в
            виде массива. reply
            objectобъект, описывающий комментарий текущего пользователя, отправленный в
            ответ на данное оповещение.
            Отсутствует, если пользователь ещё не давал ответа.
            Описание поля type Поле type описывает тип оповещения. От данного типа зависит
            наличие и содержание полей parent и
            feedback. В данный момент поддерживаются следующие типы оповещений:
            Значение type Тип поля parentТип поля feedbackОписание follow-user[]У
            пользователя появился один или несколько
            новых подписчиков. friend_accepted-user[]Заявка в друзья, отправленная
            пользователем, была принята.
            mention-postБыла создана запись на чужой стене, содержащая упоминание
            пользователя. mention_commentspostcommentБыл
            оставлен комментарий, содержащий упоминание пользователя. wall-postБыла
            добавлена запись на стене пользователя.
            wall_publish-postБыла опубликована новость, предложенная пользователем в
            публичной странице.
            comment_postpostcommentБыл добавлен новый комментарий к записи, созданной
            пользователем.
            comment_photophotocommentБыл добавлен новый комментарий к фотографии
            пользователя. comment_videovideocommentБыл
            добавлен новый комментарий к видеозаписи пользователя.
            reply_commentcommentcommentБыл добавлен новый ответ на
            комментарий пользователя. reply_comment_photocommentcommentБыл добавлен новый
            ответ на комментарий пользователя к
            фотографии. reply_comment_videocommentcommentБыл добавлен новый ответ на
            комментарий пользователя к видеозаписи.
            reply_comment_marketcommentcommentБыл добавлен новый ответ на комментарий
            пользователя к товару.
            reply_topictopiccommentБыл добавлен новый ответ пользователю в обсуждении.
            like_postpostuser[]У записи пользователя
            появилась одна или несколько новых отметок «Мне нравится».
            like_commentcommentuser[]У комментария пользователя
            появилась одна или несколько новых отметок «Мне нравится».
            like_photophotouser[]У фотографии пользователя появилась
            одна или несколько новых отметок «Мне нравится». like_videovideouser[]У
            видеозаписи пользователя появилась одна или
            несколько новых отметок «Мне нравится». like_comment_photocommentuser[]У
            комментария пользователя к фотографии
            появилась одна или несколько новых отметок «Мне нравится».
            like_comment_videocommentuser[]У комментария
            пользователя к видеозаписи появилась одна или несколько новых отметок «Мне
            нравится».
            like_comment_topiccommentuser[]У комментария пользователя в обсуждении
            появилась одна или несколько новых отметок
            «Мне нравится». copy_postpostcopy[]Один или несколько пользователей скопировали
            запись пользователя
            copy_photophotocopy[]Один или несколько пользователей скопировали фотографию
            пользователя.
            copy_videovideocopy[]Один или несколько пользователей скопировали видеозапись
            пользователя.
            mention_comment_photophotocommentПод фотографией был оставлен комментарий,
            содержащий упоминание пользователя.
            mention_comment_videovideocommentПод видео был оставлен комментарий, содержащий
            упоминание пользователя.
            Описание поля parent (post) Содержит информацию о записи на стене:
            id — идентификатор записи;
            to_id — идентификатор владельца записи;
            from_id — идентификатор пользователя, создавшего запись;
            date — время публикации записи в формате unixtime;
            text — текст записи;
            attachments — содержит массив объектов, которые присоединены к текущей записи
            (фотографии, ссылки и т.п.). Более
            подробная информация представлена на странице Описание поля attachments.
            geo — находится в записях со стен, в которых имеется информация о
            местоположении, содержит поля:
            place_id — идентификатор места;
            title — название места;
            type — тип места;
            country_id — идентификатор страны;
            city_id — идентификатор города;
            address — строка с указанием адреса места в городе;
            showmap — данный параметр указывается, если местоположение является
            прикреплённой картой.
            copy_owner_id — если запись является копией записи с чужой стены, то в поле
            содержится идентификатор владельца
            стены у которого была скопирована запись;
            copy_post_id — если запись является копией записи с чужой стены, то в поле
            содержится идентификатор скопированной
            записи на стене ее владельца
            Описание поля parent (comment) Содержит информацию о комментарии:
            id — идентификатор комментария;
            owner_id — идентификатор автора комментария;
            date — время публикации комментария в формате unixtime;
            text — текст комментария;
            post — запись, к которой оставлен комментарий (для типов reply_comment и
            like_comment);
            photo — фотография, к которой оставлен комментарий (для типов
            reply_comment_photo и like_comment_photo);
            video — видеозапись, к которой оставлен комментарий (для типов
            reply_comment_video и like_comment_video);
            topic — обсуждение, в котором оставлен комментарий (для типа
            like_comment_topic).
            Описание поля parent (photo) Содержит информацию о фотографии:
            id — идентификатор фотографии;
            owner_id — идентификатор владельца фотографии;
            aid — идентификатор альбома фотографии;
            src — ссылка на изображение в разрешении 130 пикселей по большей стороне;
            src_big — ccылка на изображение в разрешении 604 пикселя по большей стороне;
            src_small — ссылка на изображение в разрешении 75 пикселей по большей стороне;
            text — текст описания фотографии;
            created — дата загрузки фотографии в формате unixtime.
            Описание поля parent (video) Содержит информацию о видеозаписи:
            id — идентификатор видеозаписи;
            owner_id — идентификатор владельца видеозаписи;
            title — название видеозаписи;
            description — описание видеозаписи;
            duration — продолжительность видеозаписи в секундах;
            link — ссылка на видео;
            image — ссылка на изображение в разрешении 320 пикселей в ширину;
            image_medium — ссылка на изображение в разрешении 160 пикселей в ширину;
            date — дата добавления видеозаписи в формате unixtime;
            views — количество просмотров;
            player — ссылка на встраиваемый i_frame-видеоплеер.
            Описание поля parent (topic) Содержит информацию о теме в обсуждениях
            сообщества:
            id — идентификатор темы;
            owner_id — идентификатор сообщества, содержащего тему в обсуждениях (со знаком
            "минус");
            title — заголовок темы;
            created — дата создания темы в формате unixtime;
            created_by — идентификатор пользователя, создавшего тему;
            updated — дата последнего сообщения в формате unixtime;
            updated_by — идентификатор пользователя, оставившего последнее сообщение;
            is_closed — 1, если тема является закрытой (в ней нельзя оставлять сообщения);
            is_fixed — 1, если тема является прилепленной (находится в начале списка тем);
            comments — число сообщений в теме.
            Описание поля feedback Cодержит информацию об оповещении:
            id (отсутствует, если type равно follow или like_*) — идентификатор
            записи-ответа;
            to_id — идентификатор владельца стены, на которой размещена запись;
            from_id — идентификатор автора ответа;
            text (отсутствует, если type равно follow, like_* или copy_*) — текст ответа;
            likes — находится в записях со стен и содержит информацию о числе людей,
            которым понравилась данная запись,
            содержит поля:
            count — число пользователей, которым понравилась запись,
            user_likes — наличие отметки «Мне нравится» от текущего пользователя
            (1 — есть, 0 — нет),
            can_like — информация о том, может ли текущий пользователь поставить отметку
            «Мне нравится»
            (1 — может, 0 — не может),
            can_publish — информация о том, может ли текущий пользователь сделать репост
            записи
            (1 — может, 0 — не может);
            В случае, если ответ является записью на стене (тип post в таблице выше), в
            объекте feedback также содержатся
            следующие поля:
            attachments — содержит массив объектов, которые присоединены к текущей записи
            (фотографии, ссылки и т.п.). Более
            подробная информация представлена на странице Описание поля attachments.
            geo — находится в записях со стен, в которых имеется информация о
            местоположении, содержит поля:
            place_id — идентификатор места;
            title — название места;
            type — тип места;
            country_id — идентификатор страны;
            city_id — идентификатор города;
            address — строка с указанием адреса места в городе;
            showmap — данный параметр указывается, если местоположение является
            прикреплённой картой.
            Описание поля reply Cодержит информацию об ответе пользователя на оповещение:
            id — идентификатор комментария;
            date — время публикации комментария в формате unixtime;
            text — текст комментария.
            Описание поля profiles Поле profiles содержит массив объектов user с
            информацией о данных пользователей, которые
            присутствуют в новостях. Каждый из объектов содержит следующие поля:
            uid — идентификатор пользователя;
            first_name — имя пользователя;
            last_name — фамилия пользователя;
            photo — адрес фотографии пользователя размером 50x50px;
            photo_medium_rec — адрес фотографии пользователя размером 100x100px;
            screen_name — короткий адрес страницы пользователя (например, andrew или
            id6492).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/notifications.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.INotificationsCategory.MarkAsViewed">
            <summary>
            Сбрасывает счетчик непросмотренных оповещений об ответах других пользователей
            на записи текущего пользователя.
            </summary>
            <returns>
            Если у пользователя присутствовали непросмотренные ответы, возвращает 1 в
            случае успешного завершения. В противном
            случае возвращает 0.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/notifications.markAsViewed
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IOrdersCategory">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Abstractions.IOrdersCategory.CancelSubscription(System.UInt64,System.UInt64,System.Nullable{System.Boolean})">
            <summary>
            Отменяет подписку.
            </summary>
            <param name = "userId">
            Идентификатор пользователя. положительное число, обязательный параметр
            </param>
            <param name = "subscriptionId">
            Идентификатор подписки. положительное число, обязательный параметр
            </param>
            <param name = "pendingCancel">
            1 — отключить подписку по истечении текущего оплаченного периода;
            0 — отключить подписку сразу. флаг, может принимать значения 1 или 0, по умолчанию 0
            </param>
            <returns>
            После успешного выполнения возвращает 1. При отмене подписки на адрес обратного вызова будет отправлено платёжное уведомление с типом subscription_status_change.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/orders.cancelSubscription
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IOrdersCategory.ChangeState(System.UInt64,VkNet.Enums.SafetyEnums.OrderStateAction,System.Nullable{System.UInt64},System.Nullable{System.Boolean})">
            <summary>
            Изменяет состояние заказа.
            </summary>
            <param name = "orderId">
            Идентификатор заказа. положительное число, обязательный параметр
            </param>
            <param name = "action">
            Действие, которое нужно произвести с заказом.
            Возможные действия:
            cancel — отменить неподтверждённый заказ.
            charge — подтвердить неподтверждённый заказ. Применяется только если не удалось обработать уведомление order_change_state.
            refund — отменить подтверждённый заказ.
            строка, обязательный параметр
            </param>
            <param name = "appOrderId">
            Внутренний идентификатор заказа в приложении. положительное число
            </param>
            <param name = "testMode">
            Если этот параметр равен 1, изменяется состояние заказа тестового режима. По умолчанию 0. флаг, может принимать значения 1 или 0
            </param>
            <returns>
            После успешного выполнения возвращает новый статус заказа.
            Статусы заказа
            chargeable — неподтверждённый заказ. В это состояние заказы попадают в случае, если магазин не обрабатывает уведомления.
            declined — отменённый заказ на этапе получения информации о товаре, например, была получена ошибка 20, "Товара не существует". В это состояние заказ может попасть из состояния chargeable.
            cancelled — отменённый заказ. В это состояние заказ может попасть из состояния chargeable.
            charged — оплаченный заказ. В это состояние заказ может попасть из состояния chargeable, либо сразу после оплаты, если приложение обрабатывает уведомления.
            refunded — отменённый после оплаты заказ, голоса возвращены пользователю.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/orders.changeState
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IOrdersCategory.Get(System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.Boolean})">
            <summary>
            Возвращает список заказов.
            </summary>
            <param name = "offset">
            Смещение относительно самого нового найденного заказа для выборки определенного подмножества. По умолчанию 0. положительное число, по умолчанию 0
            </param>
            <param name = "count">
            Количество возвращаемых заказов. положительное число, максимальное значение 1000, по умолчанию 100
            </param>
            <param name = "testMode">
            Если этот параметр равен 1, возвращается список заказов тестового режима. По умолчанию 0. флаг, может принимать значения 1 или 0
            </param>
            <returns>
            После успешного выполнения возвращает массив найденных заказов, отсортированный по дате в обратном порядке (самый новый в начале).
            Статусы заказа
            chargeable — неподтверждённый заказ. В это состояние заказы попадают в случае, если магазин не обрабатывает уведомления.
            declined — отменённый заказ на этапе получения информации о товаре, например, была получена ошибка 20, "Товара не существует". В это состояние заказ может попасть из состояния chargeable.
            cancelled — отменённый заказ. В это состояние заказ может попасть из состояния chargeable.
            charged — оплаченный заказ. В это состояние заказ может попасть из состояния chargeable, либо сразу после оплаты, если приложение обрабатывает уведомления.
            refunded — отменённый после оплаты заказ, голоса возвращены пользователю.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/orders.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IOrdersCategory.GetAmount(System.UInt64,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Возвращает стоимость голосов в валюте пользователя.
            </summary>
            <param name = "userId">
            Идентификатор пользователя положительное число, обязательный параметр
            </param>
            <param name = "votes">
            Список голосов. Например: 1,7,77 список слов, разделенных через запятую, обязательный параметр, количество элементов должно составлять не более 100
            </param>
            <returns>
            Возвращает валюту пользователя и массив результатов для каждого значения из votes.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/orders.getAmount
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IOrdersCategory.GetById(System.Collections.Generic.IEnumerable{System.UInt64},System.Nullable{System.Boolean})">
            <summary>
            Возвращает информацию об отдельном заказе.
            </summary>
            <param name = "orderIds">
            Идентификаторы заказов (при запросе информации о нескольких заказах). список положительных чисел, разделенных запятыми
            </param>
            <param name = "testMode">
            Если этот параметр равен 1, возвращаются заказы тестового режима. По умолчанию 0. флаг, может принимать значения 1 или 0
            </param>
            <returns>
            Возвращается массив найденных заказов, отсортированный по дате в обратном порядке (самый новый в начале).
            Статусы заказа
            chargeable — неподтверждённый заказ. В это состояние заказы попадают в случае, если магазин не обрабатывает уведомления.
            declined — отменённый заказ на этапе получения информации о товаре, например, была получена ошибка 20, "Товара не существует". В это состояние заказ может попасть из состояния chargeable.
            cancelled — отменённый заказ. В это состояние заказ может попасть из состояния chargeable.
            charged — оплаченный заказ. В это состояние заказ может попасть из состояния chargeable, либо сразу после оплаты, если приложение обрабатывает уведомления.
            refunded — отменённый после оплаты заказ, голоса возвращены пользователю.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/orders.getById
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IOrdersCategory.GetUserSubscriptionById(System.UInt64,System.UInt64)">
            <summary>
            Получает информацию о подписке по её идентификатору.
            </summary>
            <param name = "userId">
            Идентификатор пользователя. положительное число, обязательный параметр
            </param>
            <param name = "subscriptionId">
            Идентификатор подписки. положительное число, обязательный параметр
            </param>
            <returns>
            Возвращает объект, описывающий подписку. Содержит следующие поля:
            id (integer) — идентификатор подписки.
            item_id (string) — идентификатор товара в приложении.
            status (string) — статус подписки. Возможные значения:
            chargeable — неподтвержденная подписка;
            active — подписка активна;
            cancelled — подписка отменена.
            price (integer) — стоимость подписки.
            period (integer) — период подписки.
            create_time (integer) — дата создания в Unixtime.
            update_time (integer) — дата обновления в Unixtime.
            period_start_time (integer) — дата начала периода в Unixtime.
            next_bill_time (integer) — дата следующего платежа в Unixtime (если status = active).
            trial_expire_time (integer) — дата истечения триал-периода (если есть).
            pending_cancel (boolean, [true]) — true, если подписка ожидает отмены.
            cancel_reason (string) — причина отмены (если есть). Возможные значения:
            user_decision — по инициативе пользователя;
            app_decision — по инициативе приложения;
            payment_fail — из-за проблемы с платежом;
            unknown — причина неизвестна.
            test_mode (boolean, [true]) — true, если используется тестовый режим.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/orders.getUserSubscriptionById
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IOrdersCategory.GetUserSubscriptions(System.UInt64)">
            <summary>
            Получает список активных подписок пользователя.
            </summary>
            <param name = "userId">
            Идентификатор пользователя, подписки которого необходимо получить. положительное число, обязательный параметр
            </param>
            <returns>
            После успешного выполнения возвращает объект, содержащий число результатов в поле count и массив объектов, описывающих подписку, в поле items. Каждый объект массива items содержит следующие поля:
            id (integer) — идентификатор подписки.
            item_id (string) — идентификатор товара в приложении.
            status (string) — статус подписки. Возможные значения:
            active — подписка активна.
            price (integer) — стоимость подписки.
            period (integer) — период подписки.
            create_time (integer) — дата создания в Unixtime.
            update_time (integer) — дата обновления в Unixtime.
            period_start_time (integer) — дата начала периода в Unixtime.
            next_bill_time (integer) — дата следующего платежа в Unixtime (если status = active).
            trial_expire_time (integer) — дата истечения триал-периода (если есть).
            pending_cancel (boolean, [true]) — true, если подписка ожидает отмены.
            cancel_reason (string) — причина отмены (если есть). Возможные значения:
            user_decision — по инициативе пользователя;
            app_decision — по инициативе приложения;
            payment_fail — из-за проблемы с платежом;
            unknown — причина неизвестна.
            test_mode (boolean, [true]) — true, если используется тестовый режим.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/orders.getUserSubscriptions
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IOrdersCategory.UpdateSubscription(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Обновляет цену подписки для пользователя.
            </summary>
            <param name = "userId">
            Идентификатор пользователя. положительное число, обязательный параметр
            </param>
            <param name = "subscriptionId">
            Идентификатор подписки. Подписка должна быть активна. положительное число, обязательный параметр
            </param>
            <param name = "price">
            Новая стоимость подписки (должна быть ниже, чем текущая). положительное число, обязательный параметр
            </param>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/orders.updateSubscription
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IPagesCategory">
            <summary>
            Методы для работы с wiki.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IPagesCategory.Get(VkNet.Model.RequestParams.PagesGetParams)">
            <summary>
            Возвращает информацию о вики-странице..
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            Возвращает информацию о вики-странице в виде объекта page.
            Если был задан параметр need_source равный 1, дополнительно будет возвращено
            поле source.
            Если был задан параметр need_html равный 1, дополнительно будет возвращено поле
            html..
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/pages.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPagesCategory.Save(System.String,System.Int64,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Сохраняет текст вики-страницы.
            </summary>
            <param name="text"> Новый текст страницы в вики-формате. </param>
            <param name="pageId"> Идентификатор вики-страницы. </param>
            <param name="groupId">
            Идентификатор сообщества, которому принадлежит
            вики-страница.
            </param>
            <param name="userId"> Идентификатор пользователя, создавшего вики-страницу. </param>
            <param name="title"> Название вики-страницы. </param>
            <returns>
            В случае успеха возвращает id созданной страницы.
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/pages.save
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPagesCategory.SaveAccess(System.Int64,System.Int64,System.Nullable{System.Int64},VkNet.Enums.AccessPages,VkNet.Enums.AccessPages)">
            <summary>
            Сохраняет новые настройки доступа на чтение и редактирование вики-страницы.
            </summary>
            <param name="pageId"> Идентификатор вики-страницы. </param>
            <param name="groupId">
            Идентификатор сообщества, которому принадлежит
            вики-страница.
            </param>
            <param name="userId"> Идентификатор пользователя, создавшего вики-страницу. </param>
            <param name="view"> Значение настройки доступа на чтение. </param>
            <param name="edit"> Значение настройки доступа на редактирование. </param>
            <returns>
            В случае успеха возвращает id страницы, доступ к которой был отредактирован.
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/pages.saveAccess
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPagesCategory.GetHistory(System.Int64,System.Int64,System.Nullable{System.Int64})">
            <summary>
            Возвращает список всех старых версий вики-страницы.
            </summary>
            <param name="pageId"> Идентификатор вики-страницы. </param>
            <param name="groupId">
            Идентификатор сообщества, которому принадлежит
            вики-страница.
            </param>
            <param name="userId"> Идентификатор пользователя, создавшего вики-страницу. </param>
            <returns>
            Возвращает массив объектов page_version, имеющих следующую структуру.
            id — идентификатор версии страницы;
            length длина версии страницы в байтах;
            edited — дата редактирования страницы;
            editor_id — идентификатор редактора;
            editor_name — имя редактора.
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/pages.getHistory
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPagesCategory.GetTitles(System.Int64)">
            <summary>
            Возвращает список вики-страниц в группе.
            </summary>
            <param name="groupId">
            Идентификатор сообщества, которому принадлежит
            вики-страница.
            </param>
            <returns>
            Возвращает массив объектов вики-страниц.
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/pages.getTitles
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPagesCategory.GetVersion(System.Int64,System.Int64,System.Boolean,System.Nullable{System.Int64})">
            <summary>
            Возвращает текст одной из старых версий страницы.
            </summary>
            <param name="versionId"> Идентификатор версии. </param>
            <param name="groupId">
            Идентификатор сообщества, которому принадлежит
            вики-страница.
            </param>
            <param name="needHtml">
            Определяет, требуется ли в ответе html-представление
            вики-страницы.
            </param>
            <param name="userId"> Идентификатор пользователя, который создал страницу. </param>
            <returns>
            Возвращает объект вики-страницы.
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/pages.getVersion
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPagesCategory.ParseWiki(System.String,System.UInt64)">
            <summary>
            Возвращает html-представление вики-разметки.
            </summary>
            <param name="text"> Текст в вики-формате. </param>
            <param name="groupId">
            Идентификатор группы, в контексте которой
            интерпретируется данная страница.
            </param>
            <returns>
            В случае успеха возвращает экранированный html, соответствующий вики-разметке.
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/pages.parseWiki
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPagesCategory.ClearCache(System.Uri)">
            <summary>
            Позволяет очистить кеш отдельных внешних страниц, которые могут быть
            прикреплены к записям ВКонтакте.
            После очистки кеша при последующем прикреплении ссылки к записи, данные о
            странице будут обновлены.
            Внешние страницы – страницы которые прикрепляются к записям вместе с ссылкой и
            доступные по кнопке "Предпросмотр".
            </summary>
            <param name="url"> URL. </param>
            <returns>
            При удачной очистке кеша – метод возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/pages.clearCache
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IPhotoCategory">
            <summary>
            Методы для работы с фотографиями.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.CreateAlbum(VkNet.Model.RequestParams.PhotoCreateAlbumParams)">
            <summary>
            Создает пустой альбом для фотографий.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает объект PhotoAlbum
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.createAlbum
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.EditAlbum(VkNet.Model.RequestParams.PhotoEditAlbumParams)">
            <summary>
            Редактирует данные альбома для фотографий пользователя.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.editAlbum
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.GetAlbums(VkNet.Model.RequestParams.PhotoGetAlbumsParams,System.Boolean)">
            <summary>
            Возвращает список альбомов пользователя или сообщества.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            Возвращает список объектов PhotoAlbum
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.getAlbums
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.Get(VkNet.Model.RequestParams.PhotoGetParams,System.Boolean)">
            <summary>
            Возвращает список фотографий в альбоме.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            После успешного выполнения возвращает список объектов Photo
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.GetAlbumsCount(System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Возвращает количество доступных альбомов пользователя или сообщества.
            </summary>
            <param name="userId">
            Идентификатор пользователя, количество альбомов которого необходимо получить.
            целое число, по
            умолчанию идентификатор текущего пользователя (Целое число, по умолчанию
            идентификатор текущего пользователя).
            </param>
            <param name="groupId">
            Идентификатор сообщества, количество альбомов которого необходимо получить.
            целое число (Целое
            число).
            </param>
            <returns>
            После успешного выполнения возвращает количество альбомов с учетом настроек
            приватности.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.getAlbumsCount
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.GetById(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Возвращает информацию о фотографиях по их идентификаторам.
            </summary>
            <param name="photos">
            Перечисленные через запятую идентификаторы, которые представляют собой идущие
            через знак подчеркивания id
            пользователей, разместивших фотографии, и id самих фотографий. Чтобы получить
            информацию о фотографии в альбоме
            группы, вместо id пользователя следует указать -id группы.
            Пример значения photos: 1_129207899,6492_135055734,
            -20629724_271945303
            Некоторые фотографии, идентификаторы которых могут быть получены через API,
            закрыты приватностью, и не будут
            получены. В этом случае следует использовать ключ доступа фотографии
            (access_key) в её идентификаторе. Пример
            значения photos: 1_129207899_220df2876123d3542f,
            6492_135055734_e0a9bcc31144f67fbd
            Поле access_key будет возвращено вместе с остальными данными фотографии в
            методах, которые возвращают фотографии,
            закрытые приватностью но доступные в данном контексте. Например данное поле
            имеют фотографии, возвращаемые методом
            newsfeed.get. список строк, разделенных через запятую, обязательный параметр
            (Список строк, разделенных через
            запятую, обязательный параметр).
            </param>
            <param name="extended">
            1 — будут возвращены дополнительные поля likes, comments, tags, can_comment,
            can_repost. Поля
            comments и tags содержат только количество объектов. По умолчанию данные поля
            не возвращается. флаг, может
            принимать значения 1 или 0 (Флаг, может принимать значения 1 или 0).
            </param>
            <param name="photoSizes">
            Возвращать ли доступные размеры фотографии в специальном формате. флаг, может
            принимать
            значения 1 или 0 (Флаг, может принимать значения 1 или 0).
            </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            После успешного выполнения возвращает массив объектов photo.
            Если к фотографии прикреплено местоположение, также возвращаются поля lat и
            long, содержащие географические
            координаты отметки.
            Если был задан параметр extended=1, возвращаются дополнительные поля:
            likes — количество отметок Мне нравится и информация о том, поставил ли лайк
            текущий пользователь;
            comments — количество комментариев к фотографии;
            tags — количество отметок на фотографии;
            can_comment — может ли текущий пользователь комментировать фото (1 — может, 0 —
            не может);
            can_repost — может ли текущий пользователь сделать репост фотографии (1 —
            может, 0 — не может).
            Если был задан параметр photo_sizes, вместо полей width и height возвращаются
            размеры копий фотографии в
            специальном формате.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.getById
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.GetUploadServer(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Возвращает адрес сервера для загрузки фотографий.
            </summary>
            <param name="albumId"> Идентификатор альбома. целое число (Целое число). </param>
            <param name="groupId">
            Идентификатор сообщества, которому принадлежит альбом (если необходимо
            загрузить фотографию в
            альбом сообщества). целое число (Целое число).
            </param>
            <returns> После успешного выполнения возвращает объект UploadServerInfo </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.getUploadServer
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.GetOwnerPhotoUploadServer(System.Nullable{System.Int64})">
            <summary>
            Возвращает адрес сервера для загрузки главной фотографии на страницу
            пользователя или сообщества.
            </summary>
            <param name="ownerId">
            Идентификатор сообщества или текущего пользователя. Обратите внимание,
            идентификатор сообщества в
            параметре owner_id необходимо указывать со знаком "-" — например, owner_id=-1
            соответствует идентификатору
            сообщества ВКонтакте API (club1)  целое число, по умолчанию идентификатор
            текущего пользователя (Целое число, по
            умолчанию идентификатор текущего пользователя).
            </param>
            <returns>
            После успешного выполнения возвращает объект с единственным полем upload_url.
            </returns>
            <remarks>
            Страница документации ВКонтакте
            http://vk.com/dev/photos.getOwnerPhotoUploadServer
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.GetChatUploadServer(System.UInt64,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <summary>
            Позволяет получить адрес для загрузки фотографий мультидиалогов.
            </summary>
            <param name="chatId">
            Идентификатор беседы, для которой нужно загрузить фотографию. положительное
            число, обязательный
            параметр (Положительное число, обязательный параметр).
            </param>
            <param name="cropX">
            Координата x для обрезки фотографии. положительное число
            (Положительное число).
            </param>
            <param name="cropY">
            Координата y для обрезки фотографии. положительное число
            (Положительное число).
            </param>
            <param name="cropWidth">
            Ширина фотографии после обрезки в px. положительное число, минимальное значение
            200
            (Положительное число, минимальное значение 200).
            </param>
            <returns>
            После успешного выполнения возвращает объект с единственным полем upload_url.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.getChatUploadServer
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.SaveOwnerPhoto(System.String,System.Nullable{System.Int64},System.String)">
            <summary>
            Позволяет сохранить главную фотографию пользователя или сообщества.
            </summary>
            <param name="response">
            Параметр, возвращаемый в результате загрузки фотографии
            на сервер.
            </param>
            <param name="captchaSid"> Идентификатор капчи </param>
            <param name="captchaKey"> текст, который ввел пользователь </param>
            <returns>
            После успешного выполнения возвращает объект, содержащий поля photo_hash и
            photo_src (при работе через VK.api метод
            вернёт поля photo_src, photo_src_big, photo_src_small). Параметр photo_hash
            необходим для подтверждения
            пользователем изменения его фотографии через вызов метода saveProfilePhoto
            Javascript API. Поле photo_src содержит
            путь к загруженной фотографии.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.saveOwnerPhoto
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.SaveWallPhoto(System.String,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.String)">
            <summary>
            Сохраняет фотографии после успешной загрузки на URI, полученный методом
            photos.getWallUploadServer.
            </summary>
            <param name="userId">
            Идентификатор пользователя, на стену которого нужно
            сохранить фотографию
            </param>
            <param name="groupId">
            Идентификатор сообщества, на стену которого нужно
            сохранить фотографию
            </param>
            <param name="response">
            Параметр, возвращаемый в результате загрузки фотографии
            на сервер
            </param>
            <param name="caption"> Описание загружаемой фотографии </param>
            <returns>
            После успешного выполнения возвращает массив, содержащий объект с загруженной
            фотографией.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.saveWallPhoto
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.GetWallUploadServer(System.Nullable{System.Int64})">
            <summary>
            Возвращает адрес сервера для загрузки фотографии на стену пользователя или
            сообщества.
            </summary>
            <param name="groupId">
            Идентификатор сообщества, на стену которого нужно загрузить фото (без знака
            «минус»). целое число
            (Целое число).
            </param>
            <returns>
            После успешного выполнения возвращает объект с полями upload_url, album_id,
            user_id.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.getWallUploadServer
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.GetMessagesUploadServer(System.Int64)">
            <summary>
            Возвращает адрес сервера для загрузки фотографии в личное сообщение
            пользователю.
            </summary>
            <param name="peerId">
            Идентификатор назначения (для загрузки фотографии в
            сообщениях сообществ).
            </param>
            <returns> После успешного выполнения возвращает объект UploadServerInfo </returns>
            <remarks>
            Страница документации ВКонтакте
            http://vk.com/dev/photos.getMessagesUploadServer
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.SaveMessagesPhoto(System.String)">
            <summary>
            Сохраняет фотографию после успешной загрузки на URI, полученный методом
            GetMessagesUploadServer
            </summary>
            <param name="response">
            Параметр, возвращаемый в результате загрузки фотографии
            на сервер
            </param>
            <returns>
            После успешного выполнения возвращает массив с загруженной фотографией,
            возвращённый объект имеет поля id,
            pid, aid, owner_id, src, src_big, src_small, created. В случае наличия
            фотографий в высоком разрешении также будут
            возвращены адреса с названиями src_xbig и src_xxbig.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.saveMessagesPhoto
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.GetOwnerCoverPhotoUploadServer(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Возвращает адрес сервера для загрузки обложки сообщества.
            </summary>
            <param name="groupId">
            Идентификатор сообщества, для которого необходимо загрузить обложку.
            положительное число,
            обязательный параметр (Положительное число, обязательный параметр).
            </param>
            <param name="cropX">
            Координата X верхнего левого угла для обрезки изображения. Положительное число
            (Положительное
            число).
            </param>
            <param name="cropY">
            Координата Y верхнего левого угла для обрезки изображения. Положительное число
            (Положительное
            число).
            </param>
            <param name="cropX2">
            Координата X нижнего правого угла для обрезки изображения. Положительное число
            (Положительное
            число).
            </param>
            <param name="cropY2">
            Координата Y нижнего правого угла для обрезки изображения. Положительное число
            (Положительное
            число).
            </param>
            <returns> После успешного выполнения возвращает объект UploadServerInfo </returns>
            <remarks>
            Страница документации ВКонтакте
            http://vk.com/dev/photos.getOwnerCoverPhotoUploadServer
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.SaveOwnerCoverPhoto(System.String)">
            <summary>
            Сохраняет фотографию после успешной загрузки на URI, полученный методом
            GetOwnerCoverPhotoUploadServer
            </summary>
            <param name="response">
            Параметр, возвращаемый в результате загрузки фотографии
            на сервер
            </param>
            <returns>
            После успешного выполнения возвращает массив, содержащий объект с загруженной
            фотографией.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.saveOwnerCoverPhoto
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.Report(System.Int64,System.UInt64,VkNet.Enums.ReportReason)">
            <summary>
            Позволяет пожаловаться на фотографию.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит фотография.
            целое число,
            обязательный параметр (Целое число, обязательный параметр).
            </param>
            <param name="photoId">
            Идентификатор фотографии. положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <param name="reason">
            Причина жалобы:
            0 — спам;
            1 — детская порнография;
            2 — экстремизм;
            3 — насилие;
            4 — пропаганда наркотиков;
            5 — материал для взрослых;
            6 — оскорбление.
            положительное число (Положительное число).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.report
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.ReportComment(System.Int64,System.UInt64,VkNet.Enums.ReportReason)">
            <summary>
            Позволяет пожаловаться на комментарий к фотографии.
            </summary>
            <param name="ownerId">
            Идентификатор владельца фотографии к которой оставлен комментарий. целое число,
            обязательный
            параметр (Целое число, обязательный параметр).
            </param>
            <param name="commentId">
            Идентификатор комментария. положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <param name="reason">
            Причина жалобы:
            0 — спам;
            1 — детская порнография;
            2 — экстремизм;
            3 — насилие;
            4 — пропаганда наркотиков;
            5 — материал для взрослых;
            6 — оскорбление.
            положительное число (Положительное число).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.reportComment
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.Search(VkNet.Model.RequestParams.PhotoSearchParams,System.Boolean)">
            <summary>
            Осуществляет поиск изображений по местоположению или описанию.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            После успешного выполнения возвращает список объектов фотографий.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.search
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.Save(VkNet.Model.RequestParams.PhotoSaveParams)">
            <summary>
            Сохраняет фотографии после успешной загрузки.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает список объектов Photo
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.save
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.Copy(System.Int64,System.UInt64,System.String)">
            <summary>
            Позволяет скопировать фотографию в альбом "Сохраненные фотографии".
            </summary>
            <param name="ownerId">
            Идентификатор владельца фотографии целое число, обязательный параметр (Целое
            число, обязательный
            параметр).
            </param>
            <param name="photoId">
            Индентификатор фотографии положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <param name="accessKey">
            Специальный код доступа для приватных фотографий
            строка (Строка).
            </param>
            <returns>
            Возвращает идентификатор созданной фотографии.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.copy
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.Edit(VkNet.Model.RequestParams.PhotoEditParams)">
            <summary>
            Изменяет описание у выбранной фотографии.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.edit
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.Move(System.Int64,System.UInt64,System.Nullable{System.Int64})">
            <summary>
            Переносит фотографию из одного альбома в другой.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит фотография.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="targetAlbumId">
            Идентификатор альбома, в который нужно переместить фотографию. целое число,
            обязательный
            параметр (Целое число, обязательный параметр).
            </param>
            <param name="photoId">
            Идентификатор фотографии, которую нужно перенести. целое число, обязательный
            параметр (Целое
            число, обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.move
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.MakeCover(System.UInt64,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Делает фотографию обложкой альбома.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит фотография.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="photoId">
            Идентификатор фотографии. Фотография должна находиться в альбоме album_id.
            целое число,
            обязательный параметр (Целое число, обязательный параметр).
            </param>
            <param name="albumId"> Идентификатор альбома. целое число (Целое число). </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.makeCover
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.ReorderAlbums(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Меняет порядок альбома в списке альбомов пользователя.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит альбом.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="albumId">
            Идентификатор альбома. целое число, обязательный параметр (Целое число,
            обязательный параметр).
            </param>
            <param name="before">
            Идентификатор альбома, перед которым следует поместить альбом. целое число
            (Целое число).
            </param>
            <param name="after">
            Идентификатор альбома, после которого следует поместить альбом. целое число
            (Целое число).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.reorderAlbums
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.ReorderPhotos(System.UInt64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Меняет порядок фотографии в списке фотографий альбома пользователя.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит фотография.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="photoId">
            Идентификатор фотографии. целое число, обязательный параметр (Целое число,
            обязательный
            параметр).
            </param>
            <param name="before">
            Идентификатор фотографии, перед которой следует поместить фотографию. Если
            параметр не указан,
            фотография будет помещена последней. целое число (Целое число).
            </param>
            <param name="after">
            Идентификатор фотографии, после которой следует поместить фотографию. Если
            параметр не указан,
            фотография будет помещена первой. целое число (Целое число).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.reorderPhotos
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.GetAll(VkNet.Model.RequestParams.PhotoGetAllParams)">
            <summary>
            Возвращает все фотографии пользователя или сообщества в антихронологическом
            порядке.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает список объектов Photo
            <remarks>
            Если был задан параметр extended — будет возвращено поле likes:
            user_likes: 1 — текущему пользователю нравится данная фотография, 0 - не
            указано.
            count — количество пользователей, которым нравится текущая фотография.
            Если был задан параметр photo_sizes=1, вместо полей width и height возвращаются
            размеры копий фотографии в
            специальном формате.
            </remarks>
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.getAll
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.GetUserPhotos(VkNet.Model.RequestParams.PhotoGetUserPhotosParams)">
            <summary>
            Возвращает список фотографий, на которых отмечен пользователь.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает список объектов photo.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.getUserPhotos
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.DeleteAlbum(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Удаляет указанный альбом для фотографий у текущего пользователя.
            </summary>
            <param name="albumId">
            Идентификатор альбома. целое число, положительное число, обязательный параметр
            (Целое число,
            положительное число, обязательный параметр).
            </param>
            <param name="groupId">
            Идентификатор сообщества, в котором размещен альбом. целое число, положительное
            число (Целое
            число, положительное число).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.deleteAlbum
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.Delete(System.UInt64,System.Nullable{System.Int64})">
            <summary>
            Удаление фотографии на сайте.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит фотография.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="photoId">
            Идентификатор фотографии. положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.delete
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.Restore(System.UInt64,System.Nullable{System.Int64})">
            <summary>
            Восстанавливает удаленную фотографию.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит фотография.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="photoId">
            Идентификатор фотографии. положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.restore
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.ConfirmTag(System.UInt64,System.UInt64,System.Nullable{System.Int64})">
            <summary>
            Подтверждает отметку на фотографии.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит фотография.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="photoId">
            Идентификатор фотографии. обязательный параметр
            (Обязательный параметр).
            </param>
            <param name="tagId">
            Идентификатор отметки на фотографии. целое число, обязательный параметр (Целое
            число, обязательный
            параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.confirmTag
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.GetComments(VkNet.Model.RequestParams.PhotoGetCommentsParams)">
            <summary>
            Возвращает список комментариев к фотографии.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает список объектов Comment
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.getComments
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.GetAllComments(VkNet.Model.RequestParams.PhotoGetAllCommentsParams)">
            <summary>
            Возвращает отсортированный в антихронологическом порядке список всех
            комментариев к конкретному альбому или ко всем
            альбомам пользователя.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает список объектов Comment
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.getAllComments
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.CreateComment(VkNet.Model.RequestParams.PhotoCreateCommentParams)">
            <summary>
            Создает новый комментарий к фотографии.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <returns>
            После успешного выполнения возвращает идентификатор созданного комментария.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.createComment
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.DeleteComment(System.UInt64,System.Nullable{System.Int64})">
            <summary>
            Удаляет комментарий к фотографии.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит фотография.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="commentId">
            Идентификатор комментария. целое число, обязательный параметр (Целое число,
            обязательный
            параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c> (0, если комментарий не
            найден).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.deleteComment
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.RestoreComment(System.UInt64,System.Nullable{System.Int64})">
            <summary>
            Восстанавливает удаленный комментарий к фотографии.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит фотография.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="commentId">
            Идентификатор удаленного комментария. целое число, обязательный параметр (Целое
            число,
            обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c> (0, если комментарий с
            таким идентификатором не является
            удаленным).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.restoreComment
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.EditComment(System.UInt64,System.String,System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{VkNet.Model.Attachments.MediaAttachment})">
            <summary>
            Изменяет текст комментария к фотографии.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит фотография.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)
            </param>
            <param name="commentId"> Идентификатор комментария </param>
            <param name="message">
            Новый текст комментария (является обязательным, если не задан параметр
            attachments)
            </param>
            <param name="attachments">
            Новый список объектов, приложенных к комментарию и разделённых символом ",".
            Поле attachments представляется в
            формате: &lt;type&gt;&lt;owner_id&gt;_&lt;media_id&gt;,&lt;type&gt;&lt;owner_id
            &gt;_&lt;media_id&gt; &lt;type&gt; —
            тип медиа-вложения:
            photo — фотография
            video — видеозапись
            audio — аудиозапись
            doc — документ
            &lt;owner_id&gt; — идентификатор владельца медиа-вложения
            &lt;media_id&gt; — идентификатор медиа-вложения.
            <example>
            Например:
            photo100172_166443618,photo66748_265827614
            </example>
            Параметр является обязательным, если не задан параметр message. список строк,
            разделенных через запятую
            </param>
            <returns> После успешного выполнения возвращает true. </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.editComment
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.GetTags(System.UInt64,System.Nullable{System.Int64},System.String)">
            <summary>
            Возвращает список отметок на фотографии.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит фотография.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="photoId">
            Идентификатор фотографии. целое число, обязательный параметр (Целое число,
            обязательный
            параметр).
            </param>
            <param name="accessKey">
            Строковой ключ доступа, который може быть получен при получении объекта
            фотографии. строка
            (Строка).
            </param>
            <returns>
            После успешного выполнения возвращает массив объектов tag, каждый из которых
            содержит следующие поля:
            user_id — идентификатор пользователя, которому соответствует отметка;
            id — идентификатор отметки;
            placer_id — идентификатор пользователя, сделавшего отметку;
            tagged_name — название отметки;
            date — дата добавления отметки в формате unixtime;
            x, y, x2, y2 — координаты прямоугольной области, на которой сделана отметка
            (верхний левый угол и нижний правый
            угол) в процентах;
            viewed — статус отметки (1 — подтвержденная, 0 — неподтвержденная).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.getTags
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.PutTag(VkNet.Model.RequestParams.PhotoPutTagParams)">
            <summary>
            Добавляет отметку на фотографию.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает идентификатор созданной отметки (tag id).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.putTag
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.RemoveTag(System.UInt64,System.UInt64,System.Nullable{System.Int64})">
            <summary>
            Удаляет отметку с фотографии.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит фотография.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="photoId">
            Идентификатор фотографии. целое число, обязательный параметр (Целое число,
            обязательный
            параметр).
            </param>
            <param name="tagId">
            Идентификатор отметки. целое число, обязательный параметр (Целое число,
            обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.removeTag
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.GetNewTags(System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>
            Возвращает список фотографий, на которых есть непросмотренные отметки.
            </summary>
            <param name="offset">
            Смещение, необходимое для получения определённого подмножества фотографий.
            целое число (Целое
            число).
            </param>
            <param name="count">
            Количество фотографий, которые необходимо вернуть. положительное число,
            максимальное значение 100,
            по умолчанию 20 (Положительное число, максимальное значение 100, по умолчанию
            20).
            </param>
            <returns>
            После успешного выполнения возвращает список объектов Photo
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.getNewTags
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.GetMarketUploadServer(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Возвращает адрес сервера для загрузки фотографии товаров сообщества.
            </summary>
            <param name="groupId">
            Идентификатор сообщества, для которого необходимо загрузить фотографию товара.
            положительное
            число, обязательный параметр (Положительное число, обязательный параметр).
            </param>
            <param name="mainPhoto">
            Является ли фотография обложкой товара  (1 — фотография для обложки, 0 —
            дополнительная
            фотография) флаг, может принимать значения 1 или 0 (Флаг, может принимать
            значения 1 или 0).
            </param>
            <param name="cropX">
            Координата x для обрезки фотографии. положительное число
            (Положительное число).
            </param>
            <param name="cropY">
            Координата y для обрезки фотографии. положительное число
            (Положительное число).
            </param>
            <param name="cropWidth">
            Ширина фотографии после обрезки в px. положительное число, минимальное значение
            200
            (Положительное число, минимальное значение 200).
            </param>
            <returns>
            После успешного выполнения возвращает объект с единственным полем upload_url.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.getMarketUploadServer
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.GetMarketAlbumUploadServer(System.Int64)">
            <summary>
            Возвращает адрес сервера для загрузки фотографии подборки товаров в сообществе.
            </summary>
            <param name="groupId">
            Идентификатор сообщества, для которого необходимо загрузить фотографию подборки
            товаров. целое
            число (Целое число).
            </param>
            <returns>
            .
            </returns>
            <remarks>
            Страница документации ВКонтакте
            http://vk.com/dev/photos.getMarketAlbumUploadServer
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.SaveMarketPhoto(System.Int64,System.String)">
            <summary>
            Сохраняет фотографии после успешной загрузки на URI, полученный методом
            photos.getMarketUploadServer.
            </summary>
            <param name="groupId">
            Идентификатор группы, для которой нужно загрузить фотографию. положительное
            число (положительное
            число).
            </param>
            <param name="response">
            Параметр, возвращаемый в результате загрузки фотографии на сервер. строка,
            обязательный параметр
            (строка, обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает массив, содержащий объект с загруженной
            фотографией.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.saveMarketPhoto
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPhotoCategory.SaveMarketAlbumPhoto(System.Int64,System.String)">
            <summary>
            Сохраняет фотографии после успешной загрузки на URI, полученный методом
            photos.getMarketAlbumUploadServer.
            </summary>
            <param name="groupId">
            Идентификатор группы, для которой нужно загрузить фотографию. положительное
            число, обязательный
            параметр (положительное число, обязательный параметр).
            </param>
            <param name="response">
            Параметр, возвращаемый в результате загрузки фотографии на сервер. строка,
            обязательный параметр
            (строка, обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает массив, содержащий объект с загруженной
            фотографией.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.saveMarketAlbumPhoto
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IPlacesCategory">
            <summary>
            Places Методы для работы с местами.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IPlacesCategory.Add(VkNet.Model.RequestParams.PlacesAddParams)">
            <summary>
            Добавляет новое место в базу географических мест.
            </summary>
            <param name="placesAddParams">
            Входные параметры запроса.
            </param>
            <returns>
            После успешного выполнения возвращает идентификатор созданного места (pid).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/places.add
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPlacesCategory.Checkin(VkNet.Model.RequestParams.PlacesCheckinParams)">
            <summary>
            Отмечает пользователя в указанном месте.
            </summary>
            <param name="placesCheckinParams">
            Входные параметры запроса.
            </param>
            <returns>
            После успешного выполнения возвращает идентификатор созданной отметки.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/places.checkin
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPlacesCategory.GetById(System.Collections.Generic.IEnumerable{System.UInt64})">
            <summary>
            Возвращает информацию о местах по их идентификаторам.
            </summary>
            <param name="places">
            Перечисленные через запятую идентификаторы мест список положительных чисел,
            разделенных запятыми, обязательный
            параметр
            </param>
            <returns>
            После успешного выполнения возвращает массив объектов place, каждый из которых
            имеет следующие поля:
            id — идентификатор места;
            title — название места;
            latitude — географическая широта, заданная в градусах (от -90 до 90);
            longitude — географическая долгота, заданная в градусах (от -180 до 180);
            created — дата добавления места в формате unixtime.
            Также, при наличии соответствующей информации, в объект могут включаться поля
            checkins, updated, type, country,
            city, address.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/places.getById
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPlacesCategory.GetCheckins(VkNet.Model.RequestParams.PlacesGetCheckinsParams)">
            <summary>
            Возвращает список отметок пользователей в местах согласно заданным параметрам.
            </summary>
            <param name="placesGetCheckinsParams">
            Входные параметры запроса.
            </param>
            <returns>
            После успешного выполнения возвращает количество отметок и массив объектов
            chekin, каждый из которых имеет
            следующие поля:
            id — идентификатор отметки;
            user_id — идентификатор отметившегося пользователя;
            date — дата добавления отметки в формате unixtime;
            latitude — географическая широта, заданная в градусах (от -90 до 90);
            longitude — географическая долгота, заданная в градусах (от -180 до 180);
            place_id — идентификатор места;
            text — текст сопроводительного сообщения;
            distance — расстояние от места до заданной точки.
            Если в запросе был задан параметр need_places, то в объекте могут дополнительно
            содержаться следующие поля:
            place_title — наименование места;
            place_country — идентификатор страны;
            place_city — идентификатор города;
            place_address — адрес;
            place_type — тип места;
            place_icon.
            Если не заданы параметры latitude и longitude или параметр place, то будет
            возвращена лента обновлений отметок
            друзей. При указании параметра timestamp будут возвращены только те отметки из
            ленты обновлений, которые были
            созданы после указанного значения timestamp. Если timestamp не указан, то
            отметки из ленты будут возвращены с
            учетом параметров offset и count (если они заданы).
            Если заданы параметры latitude и longitude, то будут возвращены все отметки,
            сделанные за последние 24 часа,
            координаты которых находятся недалеко от Вас. Если задан параметр friends_only,
            то будут возвращены только
            последние ближайшие отметки Ваших друзей.
            Если задан параметр place, то будут возвращены последние 20 отметок, сделанные
            в месте с идентификатором, указанном
            в параметре place.
            Если задан параметр uid, то будут возвращены последние 20 отметок, сделанные
            пользователем с идентификатором,
            указанном в параметре uid.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/places.getCheckins
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPlacesCategory.GetTypes">
            <summary>
            Возвращает список всех возможных типов мест.
            </summary>
            <returns>
            Возвращает массив всех возможных типов мест, каждый из объектов которого
            содержит поля tid, title и icon.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/places.getTypes
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPlacesCategory.Search(VkNet.Model.RequestParams.PlacesSearchParams)">
            <summary>
            Возвращает список мест, найденных по заданным условиям поиска.
            </summary>
            <param name="placesSearchParams">
            Входные параметры запроса.
            </param>
            <returns>
            После успешного выполнения возвращает общее количество найденных мест и массив
            объектов place, каждый из которых
            имеет следующие поля:
            id — идентификатор места;
            title — название места;
            latitude — географическая широта, заданная в градусах (от -90 до 90);
            longitude — географическая долгота, заданная в градусах (от -180 до 180);
            created — дата добавления места;
            type — тип места;
            icon — иконка (url изображения);
            checkins — количество чекинов;
            updated — дата последнего чекина;
            type — идентификатор типа места;
            country — идентификатор страны;
            city — идентификатор города;
            address — адрес;
            distance — расстояние от исходной точки.
            Если место прикреплено к сообществу, дополнительно возвращаются поля group_id и
            group_photo.
            Если не задан параметр radius, то по умолчанию он будет иметь значение 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/places.search
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IPollsCategory">
            <summary>
            Методы этого класса позволяют производить действия с опросами.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IPollsCategory.GetById(VkNet.Model.RequestParams.PollsGetByIdParams)">
            <summary>
            Возвращает детальную информацию об опросе по его идентификатору.
            </summary>
            <param name="params"> Параметры </param>
            <returns> </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/polls.GetById
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPollsCategory.Edit(VkNet.Model.RequestParams.PollsEditParams)">
            <summary>
            Позволяет редактировать созданные опросы.
            </summary>
            <param name="params"> Параметры </param>
            <returns> </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/polls.Edit
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPollsCategory.AddVote(VkNet.Model.RequestParams.PollsAddVoteParams)">
            <summary>
            Отдает голос текущего пользователя за выбранный вариант ответа в указанном
            опросе.
            </summary>
            <param name="params"> Параметры </param>
            <returns>
            1 — если голос текущего пользователя был отдан за выбранный вариант ответа;
            0 — если текущий пользователь уже голосовал в указанном опросе
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/polls.addVote
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPollsCategory.DeleteVote(VkNet.Model.RequestParams.PollsDeleteVoteParams)">
            <summary>
            Снимает голос текущего пользователя с выбранного варианта ответа в указанном
            опросе.
            </summary>
            <param name="params"> Параметры </param>
            <returns>
            1 — если голос текущего пользователя был снят с выбранного варианта ответа
            0 — если текущий пользователь еще не голосовал в указанном опросе или указан не
            выбранный им вариант ответа
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/polls.DeleteVote
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPollsCategory.GetVoters(VkNet.Model.RequestParams.PollsGetVotersParams)">
            <summary>
            Получает список идентификаторов пользователей, которые выбрали определенные
            варианты ответа в опросе.
            </summary>
            <param name="params"> Параметры </param>
            <returns> </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/polls.GetVoters
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IPollsCategory.Create(VkNet.Model.RequestParams.Polls.PollsCreateParams)">
            <summary>
            Позволяет создавать опросы, которые впоследствии можно прикреплять к записям на
            странице пользователя или
            сообщества.
            </summary>
            <param name="params"> Параметры </param>
            <returns>
            В случае успешного создания опроса в качестве результата возвращается объект
            опроса.
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/polls.create
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.ISearchCategory">
            <summary>
            Методы для работы с поиском.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.ISearchCategory.GetHints(VkNet.Model.RequestParams.SearchGetHintsParams)">
            <summary>
            Метод позволяет получить результаты быстрого поиска по произвольной подстроке
            </summary>
            <param name="params"> Параметры запроса </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/search.getHints
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.ISecureCategory">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Abstractions.ISecureCategory.AddAppEvent(System.UInt64,System.UInt64,System.Nullable{System.UInt64})">
            <inheritdoc cref="M:VkNet.Abstractions.Category.ISecureCategoryAsync.AddAppEventAsync(System.UInt64,System.UInt64,System.Nullable{System.UInt64})" />
        </member>
        <member name="M:VkNet.Abstractions.ISecureCategory.CheckToken(System.String,System.String)">
            <inheritdoc cref="M:VkNet.Abstractions.Category.ISecureCategoryAsync.CheckTokenAsync(System.String,System.String)" />
        </member>
        <member name="M:VkNet.Abstractions.ISecureCategory.GetAppBalance">
            <inheritdoc cref="M:VkNet.Abstractions.Category.ISecureCategoryAsync.GetAppBalanceAsync" />
        </member>
        <member name="M:VkNet.Abstractions.ISecureCategory.GetSmsHistory(System.Nullable{System.UInt64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.UInt64})">
            <inheritdoc cref="M:VkNet.Abstractions.Category.ISecureCategoryAsync.GetSmsHistoryAsync(System.Nullable{System.UInt64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.UInt64})" />
        </member>
        <member name="M:VkNet.Abstractions.ISecureCategory.GetTransactionsHistory">
            <inheritdoc cref="M:VkNet.Abstractions.Category.ISecureCategoryAsync.GetTransactionsHistoryAsync" />
        </member>
        <member name="M:VkNet.Abstractions.ISecureCategory.GetUserLevel(System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc cref="M:VkNet.Abstractions.Category.ISecureCategoryAsync.GetUserLevelAsync(System.Collections.Generic.IEnumerable{System.Int64})" />
        </member>
        <member name="M:VkNet.Abstractions.ISecureCategory.GiveEventSticker(System.Collections.Generic.IEnumerable{System.UInt64},System.UInt64)">
            <inheritdoc cref="M:VkNet.Abstractions.Category.ISecureCategoryAsync.GiveEventStickerAsync(System.Collections.Generic.IEnumerable{System.UInt64},System.UInt64)" />
        </member>
        <member name="M:VkNet.Abstractions.ISecureCategory.SendNotification(System.String,System.Collections.Generic.IEnumerable{System.UInt64})">
            <inheritdoc cref="M:VkNet.Abstractions.Category.ISecureCategoryAsync.SendNotificationAsync(System.String,System.Collections.Generic.IEnumerable{System.UInt64})" />
        </member>
        <member name="M:VkNet.Abstractions.ISecureCategory.SendSmsNotification(System.UInt64,System.String)">
            <inheritdoc cref="M:VkNet.Abstractions.Category.ISecureCategoryAsync.SendSmsNotificationAsync(System.UInt64,System.String)" />
        </member>
        <member name="M:VkNet.Abstractions.ISecureCategory.SetCounter(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.UInt64},System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <inheritdoc cref="M:VkNet.Abstractions.Category.ISecureCategoryAsync.SetCounterAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.UInt64},System.Nullable{System.Int64},System.Nullable{System.Boolean})" />
        </member>
        <member name="T:VkNet.Abstractions.IStatsCategory">
            <summary>
            Методы для работы со статистикой.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IStatsCategory.Get(VkNet.Model.StatsGetParams)">
            <summary>
            Возвращает статистику сообщества или приложения.
            </summary>
            <param name = "getParams">
            Входные параметры запроса.
            </param>
            <returns>
            После успешного выполнения возвращает объект с данными статистики.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/stats.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IStatsCategory.TrackVisitor">
            <summary>
            Добавляет данные о текущем сеансе в статистику посещаемости приложения..
            </summary>
            <returns>
            В случае успешной обработки данных метод вернет <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/stats.trackVisitor
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IStatsCategory.GetPostReach(System.Int64,System.Int64)">
            <summary>
            Возвращает статистику для записи на стене.
            </summary>
            <param name="ownerId">
            Идентификатор сообщества — владельца записи. Указывается
            со знаком «минус».
            </param>
            <param name="postId">
            Идентификатор записи. Обратите внимание — данные по статистике доступны только
            для 300
            последних(самых свежих) записей на стене сообщества.
            </param>
            <returns>
            Возвращает результат выполнения метода.
            </returns>
            <remarks>
            Необходимо входить в число руководителей этого сообщества.
            Страница документации ВКонтакте https://vk.com/dev/stats.getPostReach
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IStatusCategory">
            <summary>
            Методы для работы со статусом пользователя или сообщества.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IStatusCategory.Get(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Получает статус пользователя или сообщества.
            </summary>
            <param name="userId">
            Идентификатор пользователя или сообщества, информацию о статусе которого нужно
            получить.
            </param>
            <param name="groupId">
            Идентификатор сообщества, статус которого необходимо получить. положительное
            число (Положительное
            число).
            </param>
            <returns>
            В случае успеха возвращается статус пользователдя или сообщества.
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской,
            содержащей Settings.Status
            Страница документации ВКонтакте http://vk.com/dev/status.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IStatusCategory.Set(System.String,System.Nullable{System.Int64})">
            <summary>
            Устанавливает новый статус текущему пользователю.
            </summary>
            <param name="text">
            Текст статуса, который необходимо установить текущему пользователю. Если
            параметр
            равен пустой строке, то статус текущего пользователя будет очищен.
            </param>
            <param name="groupId">
            Идентификатор сообщества, в котором будет установлен статус. По умолчанию
            статус устанавливается
            текущему пользователю.
            </param>
            <returns>
            Возвращает true, если статус был успешно установлен, false в
            противном случае.
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской,
            содержащей Settings.Status
            Страница документации ВКонтакте http://vk.com/dev/status.set
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IStorageCategory">
            <inheritdoc />
            <summary>
            Storage Методы для работы с переменными в приложении.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IStorageCategory.Get(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.UInt64},System.Nullable{System.Boolean})">
            <summary>
            Возвращает значение переменной, название которой передано в параметре key.
            </summary>
            <param name="keys">
            Список названий переменных, разделённых запятыми. Если указан этот параметр, то
            параметр key не учитывается. список
            слов, разделенных через запятую, количество элементов должно составлять не
            более 1000
            </param>
            <param name="userId">
            Id пользователя, переменная которого устанавливается, в случае если данные
            запрашиваются серверным методом.
            положительное число
            </param>
            <param name="global">
            Указывается 1, если необходимо работать с глобальными переменными, а не с
            переменными пользователя. флаг, может
            принимать значения 1 или 0, по умолчанию 0
            </param>
            <returns>
            Возвращает значение одной или нескольких переменных. Если переменная на сервере
            отсутствует, то будет возвращена
            пустая строка.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/storage.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IStorageCategory.GetKeys(System.Nullable{System.UInt64},System.Nullable{System.Boolean},System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <summary>
            Возвращает названия всех переменных.
            </summary>
            <param name="userId">
            Id пользователя, названия переменных которого получаются, в случае если данные
            запрашиваются серверным методом.
            положительное число
            </param>
            <param name="global">
            Указывается 1, если необходимо работать с глобальными переменными, а не с
            переменными пользователя. флаг, может
            принимать значения 1 или 0, по умолчанию 0
            </param>
            <param name="offset">
            Смещение, необходимое для выборки определенного подмножества названий
            переменных. По умолчанию 0. положительное
            число, по умолчанию 0
            </param>
            <param name="count">
            Количество названий переменных, информацию о которых необходимо получить.
            положительное число, максимальное
            значение 1000, по умолчанию 100
            </param>
            <returns>
            Возвращает массив названий переменных.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/storage.getKeys
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IStorageCategory.Set(System.String,System.String,System.Nullable{System.UInt64},System.Nullable{System.Boolean})">
            <summary>
            Сохраняет значение переменной, название которой передано в параметре key.
            </summary>
            <param name="key">
            Название переменной. Может содержать символы латинского алфавита, цифры, знак
            тире, нижнее подчёркивание [a-zA-Z_
            &#092;-0-9]. строка, максимальная длина 100, обязательный параметр
            </param>
            <param name="value">
            Значение переменной, сохраняются только первые 4096 байта. строка
            </param>
            <param name="userId">
            Id пользователя, переменная которого устанавливается, в случае если данные
            запрашиваются серверным методом.
            положительное число
            </param>
            <param name="global">
            Указывается 1, если необходимо работать с глобальными переменными, а не с
            переменными пользователя. флаг, может
            принимать значения 1 или 0, по умолчанию 0
            </param>
            <returns>
            Возвращает 1 в случае удачного сохранения переменной.
            Для удаления переменной необходимо передать пустое значение в параметре value.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/storage.set
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IStoriesCategory">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Abstractions.IStoriesCategory.BanOwner(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Позволяет скрыть из ленты новостей истории от выбранных источников.
            </summary>
            <param name = "ownersIds">
            Список идентификаторов источников. список целых чисел, разделенных запятыми, обязательный параметр
            </param>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/stories.banOwner
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IStoriesCategory.Delete(System.Int64,System.UInt64)">
            <summary>
            Удаляет историю.
            </summary>
            <param name = "ownerId">
            Идентификатор владельца истории. целое число, по умолчанию идентификатор текущего пользователя, обязательный параметр
            </param>
            <param name = "storyId">
            Идентификатор истории. положительное число, обязательный параметр
            </param>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/stories.delete
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IStoriesCategory.Get(System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <summary>
            Возвращает истории, доступные для текущего пользователя.
            </summary>
            <param name = "ownerId">
            Идентификатор пользователя, истории которого необходимо получить. целое число
            </param>
            <param name = "extended">
            1 — возвращать в ответе дополнительную информацию о профилях пользователей. флаг, может принимать значения 1 или 0, по умолчанию 0
            </param>
            <returns>
            После успешного выполнения возвращает объект, содержащий число подборок в поле count и массив подборок историй  в поле items. Каждая подборка — массив историй от одного владельца.
            Если был задан параметр extended=1, дополнительно возвращает массив объектов пользователей в поле profiles (array) и сообществ в поле groups (array).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/stories.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IStoriesCategory.GetBanned(System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Возвращает список источников историй, скрытых из ленты текущего пользователя.
            </summary>
            <param name = "fields">
            Дополнительные поля пользователей и сообществ, которые необходимо вернуть. список слов, разделенных через запятую
            </param>
            <param name = "extended">
            1 — возвращать расширенную информацию о пользователях и сообществах. флаг, может принимать значения 1 или 0
            </param>
            <returns>
            После успешного выполнения возвращает общее количество скрытых источников в поле count (integer) и их идентификаторы в массиве items. Если extended = 1, items содержит два поля:
            profiles (array) — массив объектов, описывающих пользователей;
            groups (array) — массив объектов, описывающих сообщества.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/stories.getBanned
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IStoriesCategory.GetById(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Возвращает информацию об истории по её идентификатору.
            </summary>
            <param name = "stories">
            Перечисленные через запятую идентификаторы, которые представляют собой идущие через знак подчеркивания идентификаторы владельцев историй и идентификаторы самих историй.
            Пример значения stories:
            93388_21539,93388_20904 список слов, разделенных через запятую, обязательный параметр
            </param>
            <param name = "fields">
            Дополнительные поля профилей и сообществ, которые необходимо вернуть в ответе. список слов, разделенных через запятую
            </param>
            <param name = "extended">
            1 — возвращать в ответе дополнительную информацию о пользователях. флаг, может принимать значения 1 или 0, по умолчанию 0
            </param>
            <returns>
            После успешного выполнения возвращает объект, содержащий число историй в поле count и массив объектов историй  в поле items.
            Если был задан параметр extended = 1, дополнительно возвращает массив объектов  пользователей в поле profiles и объектов сообществ в поле groups.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/stories.getById
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IStoriesCategory.GetPhotoUploadServer(VkNet.Model.RequestParams.Stories.GetPhotoUploadServerParams)">
            <summary>
            Позволяет получить адрес для загрузки истории с фотографией.
            </summary>
            <param name = "getPhotoUploadServerParams">
            Входные параметры запроса.
            </param>
            <returns>
            После успешного выполнения возвращает объект, содержащий следующие поля:
            upload_url (string) — адрес сервера для загрузки файла;
            user_ids (array) — идентификаторы пользователей, которые могут видеть историю.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/stories.getPhotoUploadServer
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IStoriesCategory.GetReplies(System.Int64,System.UInt64,System.String,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Позволяет получить ответы на историю.
            </summary>
            <param name = "ownerId">
            Идентификатор владельца истории. целое число, обязательный параметр
            </param>
            <param name = "storyId">
            Идентификатор истории. положительное число, обязательный параметр
            </param>
            <param name = "accessKey">
            Ключ доступа для приватного объекта. строка
            </param>
            <param name = "fields">
            Дополнительные поля профилей и сообществ, которые необходимо вернуть в ответе. список слов, разделенных через запятую
            </param>
            <param name = "extended">
            1 — возвращать дополнительную информацию о профилях и сообществах. флаг, может принимать значения 1 или 0, по умолчанию
            </param>
            <returns>
            После успешного выполнения возвращает объект, содержащий число подборок в поле count и массив подборок историй  в поле items. Каждая подборка — массив историй от одного владельца.
            Если был задан параметр extended=1, дополнительно возвращает массив объектов пользователей в поле profiles (array) и сообществ в поле groups (array).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/stories.getReplies
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IStoriesCategory.GetStats(System.Int64,System.UInt64)">
            <summary>
            Возвращает статистику истории.
            </summary>
            <param name = "ownerId">
            Идентификатор владельца истории. целое число, обязательный параметр
            </param>
            <param name = "storyId">
            Идентификатор истории. положительное число, обязательный параметр
            </param>
            <returns>
            Возвращает объект, который содержит следующие поля:
            views (object) — просмотры. Содержит поля:
            state (string) — доступность значения (on — доступно, off — недоступно);
            count (integer) — значение счётчика;
            replies  (object) — ответы на историю. Содержит поля:
            state (string) — доступность значения (on — доступно, off — недоступно);
            count (integer) — значение счётчика;
            answer (object) — число
            state (string) — доступность значения (on — доступно, off — недоступно);
            count (integer) — значение счётчика;
            shares  (object) — расшаривания истории. Содержит поля:
            state (string) — доступность значения (on — доступно, off — недоступно);
            count (integer) — значение счётчика;
            subscribers (object) — новые подписчики. Содержит поля:
            state (string) — доступность значения (on — доступно, off — недоступно);
            count (integer) — значение счётчика;
            bans  (object) — скрытия истории. Содержит поля:
            state (string) — доступность значения (on — доступно, off — недоступно);
            count (integer) — значение счётчика;
            open_link (object) — переходы по ссылке. Содержит поля:
            state (string) — доступность значения (on — доступно, hidden — недоступно);
            count (integer) — значение счётчика.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/stories.getStats
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IStoriesCategory.GetVideoUploadServer(VkNet.Model.RequestParams.Stories.GetVideoUploadServerParams)">
            <summary>
            Позволяет получить адрес для загрузки видеозаписи в историю.
            </summary>
            <param name = "getVideoUploadServerParams">
            Входные параметры запроса.
            </param>
            <returns>
            После успешного выполнения возвращает объект, содержащий следующие поля:
            upload_url (string) — адрес сервера для загрузки файла;
            user_ids (array) — идентификаторы пользователей, которые могут видеть историю.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/stories.getVideoUploadServer
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IStoriesCategory.GetViewers(System.Int64,System.UInt64,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.Boolean})">
            <summary>
            Возвращает список пользователей, просмотревших историю.
            </summary>
            <param name = "ownerId">
            Идентификатор владельца истории. целое число, по умолчанию идентификатор текущего пользователя, обязательный параметр
            </param>
            <param name = "storyId">
            Идентификатор истории. положительное число, обязательный параметр
            </param>
            <param name = "count">
            Максимальное число результатов в ответе. положительное число, по умолчанию 100
            </param>
            <param name = "offset">
            Сдвиг для получения определённого подмножества результатов. положительное число, по умолчанию 0
            </param>
            <param name = "extended">
            1 — возвращать в ответе расширенную информацию о пользователях. флаг, может принимать значения 1 или 0, по умолчанию 0
            </param>
            <returns>
            После успешного выполнения возвращает объект, содержащий число результатов в поле count и идентификаторы пользователей в поле items (array). Если extended = 1, поле items (array) содержит массив объектов пользователей.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/stories.getViewers
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IStoriesCategory.HideAllReplies(System.Int64)">
            <summary>
            Скрывает все ответы автора за последние сутки на истории текущего пользователя.
            </summary>
            <param name = "ownerId">
            Идентификатор пользователя, ответы от которого нужно скрыть. целое число, обязательный параметр
            </param>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/stories.hideAllReplies
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IStoriesCategory.HideReply(System.Int64,System.UInt64,System.String)">
            <summary>
            Скрывает ответ на историю.
            </summary>
            <param name = "ownerId">
            Идентификатор владельца истории (ответной). целое число, обязательный параметр
            </param>
            <param name = "storyId">
            Идентификатор истории (ответной). положительное число, обязательный параметр
            </param>
            <param name = "accessKey">
            Ключ доступа к приватному объекту. строка
            </param>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/stories.hideReply
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IStoriesCategory.UnbanOwner(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Позволяет вернуть пользователя или сообщество в список отображаемых историй в ленте.
            </summary>
            <param name = "ownersIds">
            Список идентификаторов владельцев историй, разделённых запятой. список целых чисел, разделенных запятыми, обязательный параметр
            </param>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/stories.unbanOwner
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IStreamingCategory">
            <summary>
            Список методов секции Streaming
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IStreamingCategory.GetServerUrl">
            <summary>
            Позволяет получить данные для подключения к Streaming API.
            </summary>
            <returns>
            Возвращает объект, который содержит следующие поля:
            endpoint (string) — хост для подключения к серверу;
            key (string) — ключ доступа. Ключ бессрочный и прекращает действовать только
            после получения нового ключа.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/streaming.getServerUrl
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IStreamingCategory.GetSettings">
            <summary>
            Позволяет получить значение порога для Streaming API.
            </summary>
            <returns>
            Возвращает объект с единственным полем monthly_limit (string), которое содержит
            значение tier_1-tier_6 или
            unlimited и соответствует установленному порогу для приложения.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/streaming.getSettings
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IStreamingCategory.GetStats(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Позволяет получить статистику для подготовленных и доставленных событий
            Streaming API.
            </summary>
            <param name="type">
            Тип статистики. Возможные значения:
            received — события, полученные приложением;
            prepared — события, сгенерированные со стороны ВКонтакте.
            строка
            </param>
            <param name="interval">
            Интервалы статистики. Возможные значения:
            5m — пять минут. Максимальный период — 3 дня между start_time и end_time;
            1h — один час. Максимальный период — 7 дней между start_time и end_time;
            24h — сутки. Максимальный период — 31 день между start_time и end_time.
            строка, по умолчанию 5m
            </param>
            <param name="startTime">
            Время начала отсчёта в Unixtime. По умолчанию: end_time минус сутки.
            положительное число
            </param>
            <param name="endTime">
            Время окончания отсчёта в Unixtime. По умолчанию: текущее время. положительное
            число
            </param>
            <returns>
            Возвращает массив объектов, каждый из которых содержит поля:
            event_type (string) — тип событий. Возможные значения:
            post — записи на стене;
            comment — комментарии;
            share — репосты.
            stats (array) — значения статистики. Массив объектов, каждый из которых
            содержит оля:
            timestamp (integer) — время, соответствующее значению;
            value (integer) — значение.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/streaming.getStats
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IStreamingCategory.SetSettings(VkNet.Enums.SafetyEnums.MonthlyLimit)">
            <summary>
            Позволяет задать значение порога для Streaming API.
            </summary>
            <param name="monthlyTier">
            Значение порога в месяц. Возможные значения:
            </param>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/streaming.setSettings
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IUsersCategory">
            <summary>
            Методы для работы с информацией о пользователях.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IUsersCategory.Search(VkNet.Model.RequestParams.UserSearchParams)">
            <summary>
            Возвращает список пользователей в соответствии с заданным критерием поиска.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает список объектов пользователей, найденных
            в соответствии с заданными
            критериями.
            </returns>
            <exception cref="T:System.ArgumentException"> Query can not be <c> null </c> or empty. </exception>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/users.search
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IUsersCategory.IsAppUser(System.Nullable{System.Int64})">
            <summary>
            Возвращает информацию о том, установил ли пользователь приложение.
            </summary>
            <param name="userId">
            Идентификатор пользователя. целое число, по умолчанию идентификатор текущего
            пользователя (Целое
            число, по умолчанию идентификатор текущего пользователя).
            </param>
            <returns>
            После успешного выполнения возвращает 1 в случае, если пользователь установил у
            себя данное приложение, иначе 0.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/users.isAppUser
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IUsersCategory.Get(System.Collections.Generic.IEnumerable{System.Int64},VkNet.Enums.Filters.ProfileFields,VkNet.Enums.SafetyEnums.NameCase,System.Boolean)">
            <summary>
            Возвращает расширенную информацию о пользователях. Метод не требует авторизацию
            </summary>
            <param name="userIds">
            Идентификаторы пользователей, о которых необходимо
            получить информацию.
            </param>
            <param name="fields"> Поля профилей, которые необходимо возвратить. </param>
            <param name="nameCase"> Падеж для склонения имени и фамилии пользователя </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns> Список объектов с запрошенной информацией о пользователях. </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/users.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IUsersCategory.Get(System.Collections.Generic.IEnumerable{System.String},VkNet.Enums.Filters.ProfileFields,VkNet.Enums.SafetyEnums.NameCase,System.Boolean)">
            <summary>
            Возвращает расширенную информацию о пользователях.
            </summary>
            <param name="screenNames">
            Короткие имена пользователей, о которых необходимо
            получить информацию.
            </param>
            <param name="fields"> Поля профилей, которые необходимо возвратить. </param>
            <param name="nameCase"> Падеж для склонения имени и фамилии пользователя </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns> Список объектов с запрошенной информацией о пользователях. </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/users.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IUsersCategory.GetSubscriptions(System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},VkNet.Enums.Filters.GroupsFields,System.Boolean)">
            <summary>
            Возвращает список идентификаторов пользователей и групп, которые входят в
            список подписок пользователя.
            </summary>
            <param name="userId">
            Идентификатор пользователя, подписки которого необходимо
            получить
            </param>
            <param name="count"> Количество подписок, которые необходимо вернуть </param>
            <param name="offset">
            Смещение необходимое для выборки определенного
            подмножества подписок
            </param>
            <param name="fields">
            Список дополнительных полей для объектов user и group, которые необходимо
            вернуть.
            </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            Пока возвращается только список групп.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/users.getSubscriptions
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IUsersCategory.GetFollowers(System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},VkNet.Enums.Filters.ProfileFields,VkNet.Enums.SafetyEnums.NameCase,System.Boolean)">
            <summary>
            Возвращает список идентификаторов пользователей, которые являются подписчиками
            пользователя.
            </summary>
            <param name="userId"> Идентификатор пользователя </param>
            <param name="count">
            Количество подписчиков, информацию о которых нужно
            получить
            </param>
            <param name="offset">
            Смещение, необходимое для выборки определенного
            подмножества подписчиков
            </param>
            <param name="fields"> Список дополнительных полей, которые необходимо вернуть </param>
            <param name="nameCase"> Падеж для склонения имени и фамилии пользователя </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns> Список подписчиков </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/users.getFollowers
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IUsersCategory.Report(System.Int64,VkNet.Enums.SafetyEnums.ReportType,System.String)">
            <summary>
            Позволяет пожаловаться на пользователя.
            </summary>
            <param name="userId">
            Идентификатор пользователя, на которого осуществляется
            жалоба
            </param>
            <param name="type"> Тип жалобы </param>
            <param name="comment"> Комментарий к жалобе на пользователя </param>
            <returns> В случае успешной жалобы метод вернет true. </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/users.report
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IUsersCategory.GetNearby(VkNet.Model.RequestParams.UsersGetNearbyParams)">
            <summary>
            Индексирует текущее местоположение пользователя и возвращает список
            пользователей, которые находятся вблизи.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <returns>
            После успешного выполнения возвращает список объектов user.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/users.getNearby
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IUtilsCategory">
            <summary>
            Служебные методы.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IUtilsCategory.CheckLink(System.String,System.Boolean)">
            <summary>
            Возвращает информацию о том, является ли внешняя ссылка заблокированной на
            сайте ВКонтакте.
            </summary>
            <param name="url"> Внешняя ссылка, которую необходимо проверить. </param>
            <param name="skipAuthorization"> Без авторизации </param>
            <returns> Статус ссылки </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/utils.checkLink
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IUtilsCategory.CheckLink(System.Uri,System.Boolean)">
            <summary>
            Возвращает информацию о том, является ли внешняя ссылка заблокированной на
            сайте ВКонтакте.
            </summary>
            <param name="url"> Внешняя ссылка, которую необходимо проверить. </param>
            <param name="skipAuthorization"> Без авторизации </param>
            <returns> Статус ссылки </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/utils.checkLink
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IUtilsCategory.ResolveScreenName(System.String)">
            <summary>
            Определяет тип объекта (пользователь, сообщество, приложение) и его
            идентификатор по короткому имени ScreenName.
            </summary>
            <param name="screenName"> Короткое имя </param>
            <returns> Тип объекта </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/utils.resolveScreenName
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IUtilsCategory.GetServerTime">
            <summary>
            Возвращает текущее время на сервере ВКонтакте в unixtime.
            </summary>
            <returns> Время на сервере ВКонтакте в unixtime </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/utils.getServerTime
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IUtilsCategory.GetShortLink(System.Uri,System.Boolean)">
            <summary>
            Позволяет получить URL, сокращенный с помощью vk.cc.
            </summary>
            <returns> URL, сокращенный с помощью vk.cc </returns>
        </member>
        <member name="M:VkNet.Abstractions.IUtilsCategory.DeleteFromLastShortened(System.String)">
            <summary>
            Удаляет сокращенную ссылку из списка пользователя.
            </summary>
            <param name="key"> сокращенная ссылка (часть URL после "vk.cc/"). </param>
            <returns>
            После успешного выполнения возвращает 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/utils.deleteFromLastShortened
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IUtilsCategory.GetLastShortenedLinks(System.UInt64,System.UInt64)">
            <summary>
            Получает список сокращенных ссылок для текущего пользователя.
            </summary>
            <param name="count"> количество ссылок, которые необходимо получить. </param>
            <param name="offset"> сдвиг для получения определенного подмножества ссылок. </param>
            <returns>
            Возвращает количество ссылок в поле count (integer) и массив объектов items,
            описывающих ссылки.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/utils.getLastShortenedLinks
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IUtilsCategory.GetLinkStats(VkNet.Model.RequestParams.LinkStatsParams)">
            <summary>
            Возвращает статистику переходов по сокращенной ссылке.
            </summary>
            <param name="params"> Параметры запроса </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Abstractions.IVideoCategory">
            <inheritdoc cref="T:VkNet.Abstractions.IVideoCategoryAsync"/>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategory.Get(VkNet.Model.RequestParams.VideoGetParams)">
            <inheritdoc cref="M:VkNet.Abstractions.IVideoCategoryAsync.GetAsync(VkNet.Model.RequestParams.VideoGetParams)"/>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategory.Edit(VkNet.Model.RequestParams.VideoEditParams)">
            <inheritdoc cref="M:VkNet.Abstractions.IVideoCategoryAsync.EditAsync(VkNet.Model.RequestParams.VideoEditParams)"/>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategory.Add(System.Int64,System.Int64,System.Nullable{System.Int64})">
            <inheritdoc cref="M:VkNet.Abstractions.IVideoCategoryAsync.AddAsync(System.Int64,System.Int64,System.Nullable{System.Int64})"/>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategory.Save(VkNet.Model.RequestParams.VideoSaveParams)">
            <inheritdoc cref="M:VkNet.Abstractions.IVideoCategoryAsync.SaveAsync(VkNet.Model.RequestParams.VideoSaveParams)"/>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategory.Delete(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc cref="M:VkNet.Abstractions.IVideoCategoryAsync.DeleteAsync(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64})"/>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategory.Restore(System.Int64,System.Nullable{System.Int64})">
            <inheritdoc cref="M:VkNet.Abstractions.IVideoCategoryAsync.RestoreAsync(System.Int64,System.Nullable{System.Int64})"/>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategory.Search(VkNet.Model.RequestParams.VideoSearchParams)">
            <inheritdoc cref="M:VkNet.Abstractions.IVideoCategoryAsync.SearchAsync(VkNet.Model.RequestParams.VideoSearchParams)"/>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategory.GetAlbums(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <inheritdoc cref="M:VkNet.Abstractions.IVideoCategoryAsync.GetAlbumsAsync(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean})"/>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategory.AddAlbum(System.String,System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{VkNet.Enums.SafetyEnums.Privacy})">
            <inheritdoc cref="M:VkNet.Abstractions.IVideoCategoryAsync.AddAlbumAsync(System.String,System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{VkNet.Enums.SafetyEnums.Privacy})"/>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategory.EditAlbum(System.Int64,System.String,System.Nullable{System.Int64},VkNet.Enums.SafetyEnums.Privacy)">
            <inheritdoc cref="M:VkNet.Abstractions.IVideoCategoryAsync.EditAlbumAsync(System.Int64,System.String,System.Nullable{System.Int64},VkNet.Enums.SafetyEnums.Privacy)"/>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategory.DeleteAlbum(System.Int64,System.Nullable{System.Int64})">
            <inheritdoc cref="M:VkNet.Abstractions.IVideoCategoryAsync.DeleteAlbumAsync(System.Int64,System.Nullable{System.Int64})"/>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategory.GetComments(VkNet.Model.RequestParams.VideoGetCommentsParams)">
            <inheritdoc cref="M:VkNet.Abstractions.IVideoCategoryAsync.GetCommentsAsync(VkNet.Model.RequestParams.VideoGetCommentsParams)"/>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategory.CreateComment(VkNet.Model.RequestParams.VideoCreateCommentParams)">
            <inheritdoc cref="M:VkNet.Abstractions.IVideoCategoryAsync.CreateCommentAsync(VkNet.Model.RequestParams.VideoCreateCommentParams)"/>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategory.DeleteComment(System.Int64,System.Nullable{System.Int64})">
            <inheritdoc cref="M:VkNet.Abstractions.IVideoCategoryAsync.DeleteCommentAsync(System.Int64,System.Nullable{System.Int64})"/>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategory.RestoreComment(System.Int64,System.Nullable{System.Int64})">
            <inheritdoc cref="M:VkNet.Abstractions.IVideoCategoryAsync.RestoreCommentAsync(System.Int64,System.Nullable{System.Int64})"/>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategory.EditComment(System.Int64,System.String,System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{VkNet.Model.Attachments.MediaAttachment})">
            <inheritdoc cref="M:VkNet.Abstractions.IVideoCategoryAsync.EditCommentAsync(System.Int64,System.String,System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{VkNet.Model.Attachments.MediaAttachment})"/>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategory.Report(System.Int64,VkNet.Enums.ReportReason,System.Nullable{System.Int64},System.String,System.String)">
            <inheritdoc cref="M:VkNet.Abstractions.IVideoCategoryAsync.ReportAsync(System.Int64,VkNet.Enums.ReportReason,System.Nullable{System.Int64},System.String,System.String)"/>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategory.ReportComment(System.Int64,System.Int64,VkNet.Enums.ReportReason)">
            <inheritdoc cref="M:VkNet.Abstractions.IVideoCategoryAsync.ReportCommentAsync(System.Int64,System.Int64,VkNet.Enums.ReportReason)"/>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategory.GetAlbumById(System.Int64,System.Nullable{System.Int64})">
            <inheritdoc cref="M:VkNet.Abstractions.IVideoCategoryAsync.GetAlbumByIdAsync(System.Int64,System.Nullable{System.Int64})"/>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategory.ReorderAlbums(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc cref="M:VkNet.Abstractions.IVideoCategoryAsync.ReorderAlbumsAsync(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})"/>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategory.ReorderVideos(VkNet.Model.RequestParams.VideoReorderVideosParams)">
            <inheritdoc cref="M:VkNet.Abstractions.IVideoCategoryAsync.ReorderVideosAsync(VkNet.Model.RequestParams.VideoReorderVideosParams)"/>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategory.AddToAlbum(System.Int64,System.Int64,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc cref="M:VkNet.Abstractions.IVideoCategoryAsync.AddToAlbumAsync(System.Int64,System.Int64,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int64},System.Nullable{System.Int64})"/>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategory.RemoveFromAlbum(System.Int64,System.Int64,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc cref="M:VkNet.Abstractions.IVideoCategoryAsync.RemoveFromAlbumAsync(System.Int64,System.Int64,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int64},System.Nullable{System.Int64})"/>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategory.GetAlbumsByVideo(System.Nullable{System.Int64},System.Int64,System.Int64,System.Nullable{System.Boolean})">
            <inheritdoc cref="M:VkNet.Abstractions.IVideoCategoryAsync.GetAlbumsByVideoAsync(System.Nullable{System.Int64},System.Int64,System.Int64,System.Nullable{System.Boolean})"/>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategory.GetCatalog(VkNet.Model.RequestParams.VideoGetCatalogParams)">
            <inheritdoc cref="M:VkNet.Abstractions.IVideoCategoryAsync.GetCatalogAsync(VkNet.Model.RequestParams.VideoGetCatalogParams)"/>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategory.GetCatalogSection(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <inheritdoc cref="M:VkNet.Abstractions.IVideoCategoryAsync.GetCatalogSectionAsync(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Boolean})"/>
        </member>
        <member name="M:VkNet.Abstractions.IVideoCategory.HideCatalogSection(System.Int64)">
            <inheritdoc cref="M:VkNet.Abstractions.IVideoCategoryAsync.HideCatalogSectionAsync(System.Int64)"/>
        </member>
        <member name="T:VkNet.Abstractions.IWallCategory">
            <summary>
            Методы для работы со стеной пользователя.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategory.Get(VkNet.Model.RequestParams.WallGetParams,System.Boolean)">
            <summary>
            Возвращает список записей со стены пользователя или сообщества.
            </summary>
            <param name="params"> Входные параметры. </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            В случае успеха возвращается запрошенный список записей со стены.
            </returns>
            <exception cref="T:System.ArgumentException">
            OwnerID must be negative in case
            filter equal to Suggests;ownerId
            </exception>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.get
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategory.GetComments(VkNet.Model.RequestParams.WallGetCommentsParams,System.Boolean)">
            <summary>
            Возвращает список комментариев к записи на стене.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            После успешного выполнения возвращает список объектов комментариев.
            Если был задан параметр need_likes=1, у объектов комментариев возвращается
            дополнительное поле likes:
            count — число пользователей, которым понравился комментарий;
            user_likes — наличие отметки «Мне нравится» от текущего пользователя
            (1 — есть, 0 — нет);
            can_like — информация о том, может ли текущий пользователь поставить отметку
            «Мне нравится»
            (1 — может, 0 — не может).
            Если был передан параметр start_comment_id, будет также возвращено поле
            real_offset – итоговое смещение данного
            подмножества комментариев (оно может быть отрицательным, если был указан
            отрицательный offset).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.getComments
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategory.GetById(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Nullable{System.Int64},VkNet.Enums.Filters.ProfileFields,System.Boolean)">
            <summary>
            Возвращает список записей со стен пользователей или сообществ по их
            идентификаторам.
            </summary>
            <param name="posts">
            Перечисленные через запятую идентификаторы, которые представляют собой идущие
            через знак подчеркивания id
            владельцев стен и id самих записей на стене.
            Пример значения posts:
            93388_21539,93388_20904,-1_340364 список строк, разделенных через запятую,
            обязательный параметр (Список строк,
            разделенных через запятую, обязательный параметр).
            </param>
            <param name="extended">
            1 - возвращает объекты пользователей и групп, необходимые для отображения
            записей. флаг, может
            принимать значения 1 или 0 (Флаг, может принимать значения 1 или 0).
            </param>
            <param name="copyHistoryDepth">
            Определяет размер массива copy_history, возвращаемого в ответе, если запись
            является репостом записи с другой
            стены.
            Например, copy_history_depth=1 — copy_history будет содержать один элемент с
            информацией о записи, прямым репостом
            которой является текущая.
            copy_history_depth=2 — copy_history будет содержать два элемента, добавляется
            информация о записи, репостом которой
            является первый элемент, и так далее (при условии, что иерархия репостов
            требуемой глубины для текущей записи
            существует). целое число, по умолчанию 2 (Целое число, по умолчанию 2).
            </param>
            <param name="fields">
            Список дополнительных полей для профилей и  групп, которые необходимо вернуть.
            См. описание полей объекта user и
            описание полей объекта group.
            Обратите внимание, этот параметр учитывается только при extended=1. список
            строк, разделенных через запятую (Список
            строк, разделенных через запятую).
            </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            После успешного выполнения возвращает список объектов записей со стены.
            Если был задан параметр extended=1, ответ содержит три отдельных списка:
            items — содержит объекты записей со стены;
            profiles — содержит объекты пользователей с дополнительными полями sex, photo,
            photo_medium_rec и online;
            groups — содержит объекты сообществ.
            Если запись является репостом записи с другой стены, в ответе дополнительно
            возвращается массив copy_history
            записей со стены, репостом которых является текущая.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.getById
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategory.Post(VkNet.Model.RequestParams.WallPostParams)">
            <summary>
            Публикует новую запись на своей или чужой стене.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <returns>
            После успешного выполнения возвращает идентификатор созданной записи (post_id).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.post
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategory.Repost(System.String,System.String,System.Nullable{System.Int64},System.Boolean)">
            <summary>
            Копирует объект на стену пользователя или сообщества.
            </summary>
            <param name="object">
            Строковый идентификатор объекта, который необходимо разместить на стене,
            например, wall66748_3675
            или wall-1_340364. строка, обязательный параметр (Строка, обязательный
            параметр).
            </param>
            <param name="message">
            Сопроводительный текст, который будет добавлен к записи с объектом. строка
            (Строка).
            </param>
            <param name="groupId">
            Идентификатор сообщества, на стене которого будет размещена запись с объектом.
            Если не указан,
            запись будет размещена на стене текущего пользователя. положительное число
            (Положительное число).
            </param>
            <param name="markAsAds"> Строка (Строка). </param>
            <returns>
            После успешного выполнения возвращает объект со следующими полями:
            success
            post_id — идентификатор созданной записи;
            reposts_count — количество репостов объекта с учетом осуществленного;
            likes_count — число отметок «Мне нравится» у объекта.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.repost
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategory.Repost(System.String,System.String,System.Nullable{System.Int64},System.Boolean,System.Int64,System.String)">
            <summary>
            Копирует объект на стену пользователя или сообщества.
            </summary>
            <param name="object">
            Строковый идентификатор объекта, который необходимо разместить на стене,
            например, wall66748_3675
            или wall-1_340364. строка, обязательный параметр (Строка, обязательный
            параметр).
            </param>
            <param name="message">
            Сопроводительный текст, который будет добавлен к записи с объектом. строка
            (Строка).
            </param>
            <param name="groupId">
            Идентификатор сообщества, на стене которого будет размещена запись с объектом.
            Если не указан,
            запись будет размещена на стене текущего пользователя. положительное число
            (Положительное число).
            </param>
            <param name="markAsAds"> Строка (Строка). </param>
            <param name="captchaSid">Id капчи</param>
            <param name="captchaKey">Текст капчи</param>
            <returns>
            После успешного выполнения возвращает объект со следующими полями:
            success
            post_id — идентификатор созданной записи;
            reposts_count — количество репостов объекта с учетом осуществленного;
            likes_count — число отметок «Мне нравится» у объекта.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.repost
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategory.Edit(VkNet.Model.RequestParams.WallEditParams)">
            <summary>
            Редактирует запись на стене.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.edit
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategory.Delete(System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Удаляет запись со стены.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, на стене которого находится запись.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="postId">
            Идентификатор записи на стене. положительное число
            (Положительное число).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.delete
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategory.Restore(System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Восстанавливает удаленную запись на стене пользователя или сообщества.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, на стене которого находилась
            удаленная запись.
            Обратите внимание, идентификатор сообщества в параметре owner_id необходимо
            указывать со знаком "-" — например,
            owner_id=-1 соответствует идентификатору сообщества ВКонтакте API (club1)
            целое число, по умолчанию идентификатор
            текущего пользователя (Целое число, по умолчанию идентификатор текущего
            пользователя).
            </param>
            <param name="postId">
            Идентификатор записи на стене. положительное число
            (Положительное число).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.restore
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategory.CreateComment(VkNet.Model.RequestParams.WallCreateCommentParams)">
            <summary>
            Добавляет комментарий к записи на стене.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <returns>
            После успешного выполнения возвращает идентификатор добавленного комментария
            (comment_id).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.createComment
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategory.DeleteComment(System.Nullable{System.Int64},System.Int64)">
            <summary>
            Удаляет комментарий текущего пользователя к записи на своей или чужой стене.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя, на чьей стене находится комментарий к записи.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="commentId">
            Идентификатор комментария. положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.deleteComment
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategory.RestoreComment(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Восстанавливает комментарий текущего пользователя к записи на своей или чужой
            стене.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, на стене которого находится
            комментарий к записи.
            Обратите внимание, идентификатор сообщества в параметре owner_id необходимо
            указывать со знаком "-" — например,
            owner_id=-1 соответствует идентификатору сообщества ВКонтакте API (club1)
            целое число, по умолчанию идентификатор
            текущего пользователя (Целое число, по умолчанию идентификатор текущего
            пользователя).
            </param>
            <param name="commentId">
            Идентификатор комментария на стене. целое число, обязательный параметр (Целое
            число,
            обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.restoreComment
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategory.Search(VkNet.Model.RequestParams.WallSearchParams,System.Boolean)">
            <summary>
            Метод, позволяющий осуществлять поиск по стенам пользователей.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            После успешного выполнения возвращает список объектов записей на стене.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.search
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategory.GetReposts(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Boolean)">
            <summary>
            Позволяет получать список репостов заданной записи.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, на стене которого находится запись.
            Если параметр не
            задан, то он считается равным идентификатору текущего пользователя. Обратите
            внимание, идентификатор сообщества в
            параметре owner_id необходимо указывать со знаком "-" — например, owner_id=-1
            соответствует идентификатору
            сообщества ВКонтакте API (club1)  целое число, по умолчанию идентификатор
            текущего пользователя (Целое число, по
            умолчанию идентификатор текущего пользователя).
            </param>
            <param name="postId">
            Идентификатор записи на стене. положительное число
            (Положительное число).
            </param>
            <param name="offset">
            Смещение, необходимое для выборки определенного подмножества записей.
            положительное число
            (Положительное число).
            </param>
            <param name="count">
            Количество записей, которое необходимо получить. положительное число, по
            умолчанию 20, максимальное
            значение 1000 (Положительное число, по умолчанию 20, максимальное значение
            1000).
            </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            После успешного выполнения возвращает объект, содержащий поля:
            items — содержит массив записей-репостов;
            profiles — содержит объекты пользователей с дополнительными полями sex, online,
            photo, photo_medium_rec,
            screen_name;
            groups — содержит информацию о сообществах.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.getReposts
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategory.Pin(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Закрепляет запись на стене (запись будет отображаться выше остальных).
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, на стене которого находится запись.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="postId">
            Идентификатор записи на стене. положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.pin
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategory.Unpin(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Отменяет закрепление записи на стене.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, на стене которого находится запись.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="postId">
            Идентификатор записи на стене. положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.unpin
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategory.EditComment(System.Int64,System.String,System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{VkNet.Model.Attachments.MediaAttachment})">
            <summary>
            Редактирует комментарий на стене пользователя или сообщества.
            </summary>
            <param name="ownerId">
            Идентификатор владельца стены. целое число, по умолчанию идентификатор текущего
            пользователя
            (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="commentId">
            Идентификатор комментария, который необходимо отредактировать. положительное
            число,
            обязательный параметр (Положительное число, обязательный параметр).
            </param>
            <param name="message"> Новый текст комментария. строка (Строка). </param>
            <param name="attachments">
            Новые вложения к комментарию. список строк, разделенных через запятую (Список
            строк,
            разделенных через запятую).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.editComment
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategory.ReportPost(System.Int64,System.Int64,System.Nullable{VkNet.Enums.ReportReason})">
            <summary>
            Позволяет пожаловаться на запись.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит запись. целое
            число, обязательный
            параметр (Целое число, обязательный параметр).
            </param>
            <param name="postId">
            Идентификатор записи. положительное число, обязательный параметр (Положительное
            число,
            обязательный параметр).
            </param>
            <param name="reason">
            Причина жалобы:
            0 — спам;
            1 — детская порнография;
            2 — экстремизм;
            3 — насилие;
            4 — пропаганда наркотиков;
            5 — материал для взрослых;
            6 — оскорбление.
            положительное число (Положительное число).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.reportPost
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategory.ReportComment(System.Int64,System.Int64,System.Nullable{VkNet.Enums.ReportReason})">
            <summary>
            Позволяет пожаловаться на комментарий к записи.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит комментарий.
            целое число,
            обязательный параметр (Целое число, обязательный параметр).
            </param>
            <param name="commentId">
            Идентификатор комментария. положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <param name="reason">
            Причина жалобы:
            0 — спам;
            1 — детская порнография;
            2 — экстремизм;
            3 — насилие;
            4 — пропаганда наркотиков;
            5 — материал для взрослых;
            6 — оскорбление.
            положительное число (Положительное число).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.reportComment
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategory.EditAdsStealth(VkNet.Model.RequestParams.EditAdsStealthParams)">
            <summary>
            Позволяет отредактировать скрытую запись.
            </summary>
            <param name="params"> Параметры запроса </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.editAdsStealth
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategory.PostAdsStealth(VkNet.Model.RequestParams.PostAdsStealthParams)">
            <summary>
            Позволяет создать скрытую запись,
            которая не попадает на стену сообщества и в дальнейшем может быть использована
            для создания рекламного объявления типа "Запись в сообществе".
            </summary>
            <param name="params"> Параметры запроса </param>
            <returns>
            Идентификатор созданной записи
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.postAdsStealth
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategory.OpenComments(System.Int64,System.Int64)">
            <summary>
            Включает комментирование записи
            Работает только с конкретными записями, комментирование которых было
            выключено с помощью wall.closeComments
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, на стене которого находится запись.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1).
            </param>
            <param name="postId">
            Идентификатор записи на стене. положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.openComments
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWallCategory.CloseComments(System.Int64,System.Int64)">
            <summary>
            Выключает комментирование записи
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, на стене которого находится запись.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1).
            </param>
            <param name="postId">
            Идентификатор записи на стене. положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/wall.closeComments
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IWidgetsCategory">
            <summary>
            Widgets Методы для работы с виджетами на внешних сайтах.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IWidgetsCategory.GetComments(VkNet.Model.RequestParams.GetCommentsParams)">
            <summary>
            Получает список комментариев к странице, оставленных через Виджет комментариев.
            </summary>
            <param name="getCommentsParams">
            Входные параметры запроса.
            </param>
            <returns>
            В случае успеха возвращает объект со следующими полями:
            count — общее количество комментариев первого уровня к странице (без учета
            ограничений из входного параметра
            count).
            posts — список комментариев первого уровня. Каждый элемент списка имеет
            структуру, схожую с объектами post из
            результатов метода wall.get. Помимо этого:
            В случае, если среди необходимых полей было указано replies, в поле
            comments.replies будет содержаться список
            комментариев второго уровня. Каждый элемент этого списка имеет структуру,
            схожую с объектами comment из результатов
            метода wall.getComments.
            В случае, если были указаны любые другие необходимые поля анкет, в каждом
            элементе post и comment будет поле user,
            содержащее соответствующую информацию об авторе комментария.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/widgets.getComments
            </remarks>
        </member>
        <member name="M:VkNet.Abstractions.IWidgetsCategory.GetPages(System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <summary>
            Получает список страниц приложения/сайта, на которых установлен Виджет
            комментариев или «Мне нравится».
            </summary>
            <param name="widgetApiId">
            Идентификатор приложения/сайта, с которым инициализируются виджеты. целое число
            </param>
            <param name="order">
            Тип сортировки страниц. Возможные значения: date, comments, likes,
            friend_likes. строка, по умолчанию friend_likes
            </param>
            <param name="period">
            Период выборки. Возможные значения: day, week, month, alltime. строка, по
            умолчанию week
            </param>
            <param name="offset">
            Смещение необходимое для выборки определенного подмножества комментариев. По
            умолчанию 0. положительное число, по
            умолчанию 0
            </param>
            <param name="count">
            Количество возвращаемых записей. положительное число, по умолчанию 10,
            минимальное значение 10, максимальное
            значение 200
            </param>
            <returns>
            В случае успеха возвращает объект со следующими полями:
            count — общее количество страниц (без учета ограничений входного параметра
            count)
            pages — список объектов-страниц
            Каждый объект, описывающий страницу, имеет следующие поля:
            id — идентификатор страницы в системе;
            title — заголовок страницы (берется из мета-тегов на странице или задается
            параметром pageTitle при инициализации)
            description — краткое описание страницы (берется из мета-тегов на странице или
            задается параметром pageDescription
            при инициализации);
            photo — объект, содержащий фотографию-миниатюру страницы (берется из мета-тегов
            на странице или задается параметром
            pageImage при инициализации)
            url — абсолютный адрес страницы;
            likes — объект, содержащий поле count — количество отметок «Мне нравится» к
            странице. Для получения списка
            пользователей, отметивших страницу можно использовать метод likes.getList с
            параметром type равным site_page;
            comments — объект, содержащий поле count — количество комментариев к странице
            внутри виджета. Для получения списка
            комментариев можно использовать метод widgets.getComments;
            date — дата первого обращения к виджетам на странице
            page_id — внутренний идентификатор страницы в приложении/на сайте (в случае,
            если при инициализации виджетов
            использовался параметр page_id);
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/widgets.getPages
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.Core.IAwaitableConstraint">
            <summary>
            The <see cref="T:VkNet.Abstractions.Core.IAwaitableConstraint"/>.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.Core.IAwaitableConstraint.WaitForReadiness(System.Threading.CancellationToken)">
            <summary>
            Starts a <see cref="T:System.Threading.Tasks.Task"/> that will complete after readiness.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.Core.IAwaitableConstraint.SetRate(System.Int32,System.TimeSpan)">
            <summary>
            Sets a rate for a constraint.
            </summary>
            <param name="number">
            Maximum <paramref name="number"/> times per <paramref name="timeSpan"/>.
            </param>
            <param name="timeSpan">
            Time interval.
            </param>
        </member>
        <member name="T:VkNet.Abstractions.Core.ICaptchaHandler">
            <summary>
            Обработчик капчи
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.Core.ICaptchaHandler.MaxCaptchaRecognitionCount">
            <summary>
            Максимальное количество попыток распознавания капчи c помощью
            зарегистрированного обработчика
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.Core.ICaptchaHandler.Perform``1(System.Func{System.Nullable{System.UInt64},System.String,``0})">
            <summary>
            Обработка капчи
            </summary>
            <param name="action"> Действие </param>
            <typeparam name="T"> Тип результата </typeparam>
            <returns> Результат действия </returns>
        </member>
        <member name="T:VkNet.Abstractions.Core.ILanguageService">
            <summary>
            Сервис управления языком
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.Core.ILanguageService.SetLanguage(VkNet.Enums.Language)">
            <summary>
            Установить язык
            </summary>
            <param name="language"> </param>
        </member>
        <member name="M:VkNet.Abstractions.Core.ILanguageService.GetLanguage">
            <summary>
            Установить язык
            </summary>
        </member>
        <member name="T:VkNet.Abstractions.Core.INeedValidationHandler">
            <summary>
            Выполняет обход ошибки валидации: https://vk.com/dev/need_validation
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.Core.INeedValidationHandler.Validate(System.String,System.String)">
            <summary>
            Выполняет обход ошибки валидации: https://vk.com/dev/need_validation
            </summary>
            <param name="validateUrl"> Адрес страницы валидации </param>
            <param name="phoneNumber">
            Номер телефона, который необходимо ввести на
            странице валидации
            </param>
            <returns> Информация об авторизации приложения. </returns>
        </member>
        <member name="M:VkNet.Abstractions.Core.INeedValidationHandler.Validate(System.String)">
            <summary>
            Выполняет обход ошибки валидации: https://vk.com/dev/need_validation
            </summary>
            <param name="validateUrl"> Адрес страницы валидации </param>
            <returns> Информация об авторизации приложения. </returns>
        </member>
        <member name="M:VkNet.Abstractions.Core.INeedValidationHandler.ValidateAsync(System.String)">
            <summary>
            Выполняет обход ошибки валидации: https://vk.com/dev/need_validation
            </summary>
            <param name="validateUrl"> Адрес страницы валидации </param>
            <returns> Информация об авторизации приложения. </returns>
        </member>
        <member name="T:VkNet.Abstractions.Core.IRateLimiter">
            <summary>
            The <see cref="T:VkNet.Abstractions.Core.IRateLimiter"/>.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.Core.IRateLimiter.Perform(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Runs a <see cref="T:System.Threading.Tasks.Task"/> with a constraint.
            </summary>
            <param name="perform">
            Func to perform.
            </param>
            <param name="cancellationToken">
            Propagates notification that operations should be canceled.
            </param>
            <returns></returns>
        </member>
        <member name="M:VkNet.Abstractions.Core.IRateLimiter.Perform(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Runs a <see cref="T:System.Threading.Tasks.Task"/> with a constraint.
            </summary>
            <param name="perform">
            Func to perform.
            </param>
            <returns></returns>
        </member>
        <member name="M:VkNet.Abstractions.Core.IRateLimiter.Perform``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Runs a <see cref="T:System.Threading.Tasks.Task"/> with a constraint.
            </summary>
            <param name="perform">
            Func to perform.
            </param>
            <typeparam name="T">
            The type of the <see cref="T:System.Threading.Tasks.Task"/> item.
            </typeparam>
            <returns></returns>
        </member>
        <member name="M:VkNet.Abstractions.Core.IRateLimiter.Perform``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Runs a <see cref="T:System.Threading.Tasks.Task"/> with a constraint.
            </summary>
            <param name="perform">
            Func to perform.
            </param>
            <param name="cancellationToken">
            Propagates notification that operations should be canceled.
            </param>
            <typeparam name="T">
            The type of the <see cref="T:System.Threading.Tasks.Task"/> item.
            </typeparam>
            <returns></returns>
        </member>
        <member name="M:VkNet.Abstractions.Core.IRateLimiter.Perform(System.Action,System.Threading.CancellationToken)">
            <summary>
            Runs a <see cref="T:System.Threading.Tasks.Task"/> with a constraint.
            </summary>
            <param name="perform">
            Action> to perform.
            </param>
            <param name="cancellationToken">
            Propagates notification that operations should be canceled.
            </param>
            <returns></returns>
        </member>
        <member name="M:VkNet.Abstractions.Core.IRateLimiter.Perform(System.Action)">
            <summary>
            Runs a <see cref="T:System.Threading.Tasks.Task"/> with a constraint.
            </summary>
            <param name="perform">
            Action to perform.
            </param>
            <returns></returns>
        </member>
        <member name="M:VkNet.Abstractions.Core.IRateLimiter.Perform``1(System.Func{``0})">
            <summary>
            Runs a <see cref="T:System.Threading.Tasks.Task"/> with a constraint.
            </summary>
            <param name="perform">
            Func to perform.
            </param>
            <typeparam name="T">
            The type of the func item.
            </typeparam>
            <returns></returns>
        </member>
        <member name="M:VkNet.Abstractions.Core.IRateLimiter.Perform``1(System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            Runs a <see cref="T:System.Threading.Tasks.Task"/> with a constraint.
            </summary>
            <param name="perform">
            Func to perform.
            </param>
            <param name="cancellationToken">
            Propagates notification that operations should be canceled.
            </param>
            <typeparam name="T">
            The type of the func item.
            </typeparam>
            <returns></returns>
        </member>
        <member name="M:VkNet.Abstractions.Core.IRateLimiter.SetRate(System.Int32,System.TimeSpan)">
            <summary>
            Sets a rate for a constraint.
            </summary>
            <param name="number">
            Maximum <paramref name="number"/> times per <paramref name="timeSpan"/>.
            </param>
            <param name="timeSpan">
            Time interval.
            </param>
        </member>
        <member name="T:VkNet.Abstractions.Core.ITokenManager">
            <summary>
            Менеджер управления токеном приложения
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.Core.ITokenManager.Token">
            <summary>
            Токен приложения
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.Core.ITokenManager.ExpireTime">
            <summary>
            Время истечения токена
            </summary>
            <remarks>
            В секундах, 0 - бесконечный токен
            </remarks>
        </member>
        <member name="P:VkNet.Abstractions.Core.ITokenManager.IsExpired">
            <summary>
            <c> true </c> - если токен приложения истек
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.Core.ITokenManager.RefreshToken">
            <summary>
            Обновить токен
            </summary>
            <returns> <c> true </c> - если обновление токена приложения прошло успешно </returns>
        </member>
        <member name="M:VkNet.Abstractions.Core.ITokenManager.SetToken(System.String)">
            <summary>
            Установить значение токена приложения
            </summary>
            <param name="token"> Токен приложения </param>
        </member>
        <member name="T:VkNet.Abstractions.Core.IVkApiVersionManager">
            <summary>
            Менеджер версий Vk Api
            </summary>
            <remarks>
            <a href="https://vk.com/dev/versions">Версии API</a>
            </remarks>
        </member>
        <member name="P:VkNet.Abstractions.Core.IVkApiVersionManager.Version">
            <summary>
            Версия Vk Api
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.Core.IVkApiVersionManager.SetVersion(System.Int32,System.Int32)">
            <summary>
            Установить версию Vk Api по умолчанию
            </summary>
            <param name="major">Мажорная версия Vk Api</param>
            <param name="minor">Минорная версия Vk Api</param>
        </member>
        <member name="M:VkNet.Abstractions.Core.IVkApiVersionManager.IsGreaterThanOrEqual(System.Int32,System.Int32)">
            <summary>
            Проверить что версия больше либо равна значению <paramref name="major"/> и <paramref name="minor"/>
            </summary>
            <param name="major">Мажорная версия Vk Api</param>
            <param name="minor">Минорная версия Vk Api</param>
            <returns>
            <c>true</c> если версия больше или равна значению <paramref name="major"/> и <paramref name="minor"/>
            </returns>
        </member>
        <member name="M:VkNet.Abstractions.Core.IVkApiVersionManager.IsLessThanOrEqual(System.Int32,System.Int32)">
            <summary>
            Проверить что версия меньше либо равна значению <paramref name="major"/> и <paramref name="minor"/>
            </summary>
            <param name="major">Мажорная версия Vk Api</param>
            <param name="minor">Минорная версия Vk Api</param>
            <returns>
            <c>true</c> если версия меньше или равна значению <paramref name="major"/> и <paramref name="minor"/>
            </returns>
        </member>
        <member name="T:VkNet.Abstractions.IVkApi">
            <summary>
            VkApi
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApi.RequestsPerSecond">
            <summary>
            Ограничение на кол-во запросов в секунду
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApi.Browser">
            <summary>
            Браузер.
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApi.AuthorizationFlow">
            <summary>
            Поток авторизации
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApi.NeedValidationHandler">
            <summary>
            Выполняет обход ошибки валидации: https://vk.com/dev/need_validation
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApi.VkApiVersion">
            <summary>
            Версия API vk.com.
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApi.Token">
            <summary>
            Токен для доступа к методам API
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApi.UserId">
            <summary>
            Идентификатор пользователя, от имени которого была проведена авторизация.
            Если авторизация не была произведена с использованием метода Authorize(int
            то возвращается null.
            </summary>
        </member>
        <member name="E:VkNet.Abstractions.IVkApi.OnTokenExpires">
            <summary>
            Оповещает об истечении срока токена доступа
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IVkApi.SetLanguage(VkNet.Enums.Language)">
            <summary>
            Установить язык
            </summary>
            <param name="language"> </param>
        </member>
        <member name="M:VkNet.Abstractions.IVkApi.GetLanguage">
            <summary>
            Установить язык
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IVkApi.Validate(System.String)">
            <summary>
            Обход ошибки валидации: https://vk.com/dev/need_validation
            </summary>
            <param name="validateUrl"> Адрес, на который нужно перейти для валидации </param>
        </member>
        <member name="T:VkNet.Abstractions.IVkApiAuth">
            <summary>
            VkApi Authorization
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiAuth.IsAuthorized">
            <summary>
            Была ли произведена авторизация каким либо образом
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IVkApiAuth.Authorize(VkNet.Model.IApiAuthParams)">
            <summary>
            Авторизация и получение токена
            </summary>
            <param name="params"> Данные авторизации </param>
        </member>
        <member name="M:VkNet.Abstractions.IVkApiAuth.Authorize(VkNet.Model.ApiAuthParams)">
            <summary>
            Авторизация и получение токена
            </summary>
            <param name="params"> Данные авторизации </param>
        </member>
        <member name="M:VkNet.Abstractions.IVkApiAuth.RefreshToken(System.Func{System.String})">
            <summary>
            Получает новый AccessToken используя логин, пароль, приложение и настройки
            указанные при последней авторизации.
            </summary>
            <param name="code">
            Делегат двух факторной авторизации. Если не указан - будет взят из параметров
            (если есть)
            </param>
            <exception cref="T:System.AggregateException">
            Невозможно обновить токен доступа т.к. последняя авторизация происходила не при
            помощи логина и пароля
            </exception>
        </member>
        <member name="M:VkNet.Abstractions.IVkApiAuth.LogOut">
            <summary>
            Выйти из системы
            </summary>
            <remarks>
            Забыть токен авторизации
            </remarks>
        </member>
        <member name="T:VkNet.Abstractions.IVkApiAuthAsync">
            <inheritdoc cref="T:VkNet.Abstractions.IVkApiAuth"/>
        </member>
        <member name="M:VkNet.Abstractions.IVkApiAuthAsync.AuthorizeAsync(VkNet.Model.IApiAuthParams)">
            <inheritdoc cref="M:VkNet.Abstractions.IVkApiAuth.Authorize(VkNet.Model.IApiAuthParams)"/>
        </member>
        <member name="M:VkNet.Abstractions.IVkApiAuthAsync.RefreshTokenAsync(System.Func{System.String})">
            <inheritdoc cref="M:VkNet.Abstractions.IVkApiAuth.RefreshToken(System.Func{System.String})"/>
        </member>
        <member name="M:VkNet.Abstractions.IVkApiAuthAsync.LogOutAsync">
            <inheritdoc cref="M:VkNet.Abstractions.IVkApiAuth.LogOut"/>
        </member>
        <member name="T:VkNet.Abstractions.IVkApiCaptcha">
            <summary>
            VkApi капча
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCaptcha.CaptchaSolver">
            <summary>
            Обработчик распознавания капчи
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCaptcha.MaxCaptchaRecognitionCount">
            <summary>
            Максимальное количество попыток распознавания капчи c помощью
            зарегистрированного обработчика
            </summary>
        </member>
        <member name="T:VkNet.Abstractions.IVkApiCategories">
            <summary>
            Категории api
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCategories.Users">
            <summary>
            API для работы с пользователями.
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCategories.Friends">
            <summary>
            API для работы с друзьями.
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCategories.Status">
            <summary>
            API для работы со статусом пользователя или сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCategories.Messages">
            <summary>
            API для работы с сообщениями.
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCategories.Groups">
            <summary>
            API для работы с группами.
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCategories.Audio">
            <summary>
            API для работы с аудио записями.
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCategories.Database">
            <summary>
            API для получения справочной информации (страны, города, школы, учебные
            заведения и т.п.).
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCategories.Utils">
            <summary>
            API для работы со служебными методами.
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCategories.Wall">
            <summary>
            API для работы со стеной пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCategories.Board">
            <summary>
            API для работы со темами групп.
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCategories.Fave">
            <summary>
            API для работы с закладками.
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCategories.Video">
            <summary>
            API для работы с видео файлами.
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCategories.Account">
            <summary>
            API для работы с аккаунтом пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCategories.Photo">
            <summary>
            API для работы с фотографиями
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCategories.Docs">
            <summary>
            API для работы с документами
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCategories.Likes">
            <summary>
            API для работы с лайками
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCategories.Pages">
            <summary>
            API для работы с wiki.
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCategories.Apps">
            <summary>
            API для работы с приложениями.
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCategories.NewsFeed">
            <summary>
            API для работы с новостной лентой.
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCategories.Stats">
            <summary>
            API для работы со статистикой.
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCategories.Gifts">
            <summary>
            API для работы с подарками.
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCategories.Markets">
            <summary>
            API для работы с товарами.
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCategories.Auth">
            <summary>
            API для работы с Авторизацией.
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCategories.Execute">
            <summary>
            API для работы с универсальным методом.
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCategories.PollsCategory">
            <summary>
            API для работы с опросами.
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCategories.Search">
            <summary>
            API для работы с поиском.
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCategories.Storage">
            <summary>
            Storage Методы для работы с переменными в приложении.
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCategories.Ads">
            <summary>
            Методы этого класса позволяют производить действия с рекламными кабинетам
            пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCategories.Notifications">
            <summary>
            Notifications
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCategories.Widgets">
            <summary>
            Widgets
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCategories.Leads">
            <summary>
            Leads
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCategories.Streaming">
            <summary>
            Streaming
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCategories.Places">
            <summary>
            Places
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCategories.Notes">
            <summary>
            Notes
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCategories.AppWidgets">
            <summary>
            AppWidgets
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCategories.Orders">
            <summary>
            Orders
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCategories.Secure">
            <summary>
            Secure
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCategories.Stories">
            <summary>
            Stories
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiCategories.LeadForms">
            <summary>
            Lead Forms
            </summary>
        </member>
        <member name="T:VkNet.Abstractions.IVkApiInvoke">
            <summary>
            Вызов методов VkApi
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiInvoke.LastInvokeTime">
            <summary>
            Время вызова последнего метода этим объектом
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.IVkApiInvoke.LastInvokeTimeSpan">
            <summary>
            Время, прошедшее с момента последнего обращения к API этим объектом
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IVkApiInvoke.Call(System.String,VkNet.Utils.VkParameters,System.Boolean)">
            <summary>
            Вызвать метод.
            </summary>
            <param name="methodName"> Название метода. </param>
            <param name="parameters"> Параметры. </param>
            <param name="skipAuthorization"> Если <c> true </c> то пропустить авторизацию. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Abstractions.IVkApiInvoke.Call``1(System.String,VkNet.Utils.VkParameters,System.Boolean,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Вызвать метод.
            </summary>
            <param name="methodName"> Название метода. </param>
            <param name="parameters"> Параметры. </param>
            <param name="skipAuthorization"> Если <c> true </c> то пропустить авторизацию. </param>
            <param name="jsonConverters"> JsonConverters </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Abstractions.IVkApiInvoke.CallAsync(System.String,VkNet.Utils.VkParameters,System.Boolean)">
            <summary>
            Вызвать метод.
            </summary>
            <param name="methodName"> Название метода. </param>
            <param name="parameters"> Параметры. </param>
            <param name="skipAuthorization"> Если <c> true </c> то пропустить авторизацию. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Abstractions.IVkApiInvoke.CallAsync``1(System.String,VkNet.Utils.VkParameters,System.Boolean)">
            <summary>
            Вызвать метод.
            </summary>
            <param name="methodName"> Название метода. </param>
            <param name="parameters"> Параметры. </param>
            <param name="skipAuthorization"> Если <c> true </c> то пропустить авторизацию. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Abstractions.IVkApiInvoke.Invoke(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <summary>
            Прямой вызов API-метода
            </summary>
            <param name="methodName"> Название метода. Например, "wall.get". </param>
            <param name="parameters"> Вход. параметры метода. </param>
            <param name="skipAuthorization">
            Флаг, что метод можно вызывать без
            авторизации.
            </param>
            <exception cref="T:VkNet.Exception.AccessTokenInvalidException"> </exception>
            <returns> Ответ сервера в формате JSON. </returns>
        </member>
        <member name="M:VkNet.Abstractions.IVkApiInvoke.InvokeAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <summary>
            Прямой вызов API-метода в асинхронном режиме
            </summary>
            <param name="methodName"> Название метода. Например, "wall.get". </param>
            <param name="parameters"> Вход. параметры метода. </param>
            <param name="skipAuthorization">
            Флаг, что метод можно вызывать без
            авторизации.
            </param>
            <returns> Ответ сервера в формате JSON. </returns>
        </member>
        <member name="T:VkNet.Abstractions.IVkInvoke">
            <summary>
            Вызовы API
            </summary>
        </member>
        <member name="T:VkNet.Abstractions.IVkLongPollInvoke">
            <summary>
            Вызов LongPoll API
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.IVkLongPollInvoke.CallLongPoll(System.String,VkNet.Utils.VkParameters)">
            <summary>
            Вызвать ожидание событий LongPoll API.
            </summary>
            <param name="server"> Сервер. </param>
            <param name="parameters"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Abstractions.IVkLongPollInvoke.CallLongPollAsync(System.String,VkNet.Utils.VkParameters)">
            <summary>
            Вызвать ожидание событий LongPoll API.
            </summary>
            <param name="server"> Сервер. </param>
            <param name="parameters"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Abstractions.IVkLongPollInvoke.InvokeLongPoll(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Прямой вызов LongPoll API
            </summary>
            <param name="server"> Сервер </param>
            <param name="parameters"> Вход. параметры LongPoll. </param>
            <exception cref="T:System.ArgumentException"> </exception>
            <returns> Ответ сервера в формате JSON. </returns>
        </member>
        <member name="M:VkNet.Abstractions.IVkLongPollInvoke.InvokeLongPollAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Прямой вызов LongPoll API в асинхронном режиме
            </summary>
            <param name="server"> Сервер </param>
            <param name="parameters"> Вход. параметры LongPoll. </param>
            <exception cref="T:System.ArgumentException"> </exception>
            <returns> Ответ сервера в формате JSON. </returns>
        </member>
        <member name="T:VkNet.Abstractions.Utils.ILeadFormsQuestionBuilder">
            <summary>
            Построитель вопросов для запросов LeadForms
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.Utils.ILeadFormsQuestionBuilder.AddStandard(VkNet.Enums.SafetyEnums.StandardQuestion)">
            <summary>
            Добавить стандартный вопрос
            </summary>
            <param name="question">стандартный вопрос</param>
            <returns>
            Построитель вопросов для запросов LeadForms.
            </returns>
        </member>
        <member name="M:VkNet.Abstractions.Utils.ILeadFormsQuestionBuilder.AddInput(System.String)">
            <summary>
            Добавить текстовое поле.
            </summary>
            <param name="label">Описание поля.</param>
            <returns>
            Построитель вопросов для запросов LeadForms.
            </returns>
        </member>
        <member name="M:VkNet.Abstractions.Utils.ILeadFormsQuestionBuilder.AddSelect(System.String,System.String,VkNet.Model.QuestionOption[])">
            <summary>
            Добавить выпадающий список.
            </summary>
            <param name="key">Уникальный ключ ответа.</param>
            <param name="label">Описание поля.</param>
            <param name="options">Массив возможных ответов на вопрос</param>
            <returns>
            Построитель вопросов для запросов LeadForms.
            </returns>
        </member>
        <member name="M:VkNet.Abstractions.Utils.ILeadFormsQuestionBuilder.AddRadio(System.String,VkNet.Model.QuestionOption[])">
            <summary>
            Добавить выбор одного из нескольких вариантов
            </summary>
            <param name="label">Текст ответа.</param>
            <param name="options">Массив возможных ответов на вопрос</param>
            <returns>
            Построитель вопросов для запросов LeadForms.
            </returns>
        </member>
        <member name="M:VkNet.Abstractions.Utils.ILeadFormsQuestionBuilder.AddCheckbox(System.String,System.String,VkNet.Model.QuestionOption[])">
            <summary>
            Добавить выбор нескольких вариантов
            </summary>
            <param name="key">Уникальный ключ ответа.</param>
            <param name="label">Текст ответа.</param>
            <param name="options">Массив возможных ответов на вопрос</param>
            <returns>
            Построитель вопросов для запросов LeadForms.
            </returns>
        </member>
        <member name="M:VkNet.Abstractions.Utils.ILeadFormsQuestionBuilder.AddTextArea(System.String)">
            <summary>
            Добавить многострочное текстовое поле
            </summary>
            <param name="label">Описание поля.</param>
            <returns>
            Построитель вопросов для запросов LeadForms.
            </returns>
        </member>
        <member name="M:VkNet.Abstractions.Utils.ILeadFormsQuestionBuilder.Build">
            <summary>
            Построить список вопросов.
            </summary>
            <returns>
            Сериализованный в массив список вопросов.
            </returns>
        </member>
        <member name="T:VkNet.Abstractions.Utils.IRestClient">
            <summary>
            Rest Client
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.Utils.IRestClient.Proxy">
            <summary>
            Proxy
            </summary>
        </member>
        <member name="P:VkNet.Abstractions.Utils.IRestClient.Timeout">
            <summary>
            Таймаут на время выполнения запроса в секундах. Значение по умолчанию 300
            секунд.
            </summary>
        </member>
        <member name="M:VkNet.Abstractions.Utils.IRestClient.GetAsync(System.Uri,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Get request
            </summary>
            <param name="uri"> Uri </param>
            <param name="parameters"> </param>
            <returns> String result </returns>
        </member>
        <member name="M:VkNet.Abstractions.Utils.IRestClient.PostAsync(System.Uri,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            POST запрос
            </summary>
            <param name="uri"> Uri </param>
            <param name="parameters"> Параметры </param>
            <returns> Строковый результат </returns>
        </member>
        <member name="T:VkNet.Utils.IBrowser">
            <summary>
            Интерфейс браузера, с помощью которого осуществляется сетевое взаимодействие.
            Интерфейс введен с целью обеспечения возможности выполнения модульного
            тестирования.
            </summary>
        </member>
        <member name="P:VkNet.Utils.IBrowser.Proxy">
            <summary>
            Прокси сервер
            </summary>
        </member>
        <member name="M:VkNet.Utils.IBrowser.GetJson(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Выполняет JSON-запрос к ВКонтакте.
            </summary>
            <param name="url"> Адрес получения json </param>
            <param name="parameters"> Параметры метода api </param>
            <returns> Результат выполнения запроса, полученный от сервера в формате JSON. </returns>
        </member>
        <member name="T:VkNet.Utils.AntiCaptcha.ICaptchaSolver">
            <summary>
            Определяет интерфейс взаимодействия с сервисом-распознавателем капчи
            </summary>
        </member>
        <member name="M:VkNet.Utils.AntiCaptcha.ICaptchaSolver.Solve(System.String)">
            <summary>
            Распознает текст капчи.
            </summary>
            <param name="url"> Ссылка на изображение капчи. </param>
            <returns> Строка, содержащая текст, который был закодирован в капче. </returns>
        </member>
        <member name="M:VkNet.Utils.AntiCaptcha.ICaptchaSolver.CaptchaIsFalse">
            <summary>
            Сообщает сервису, что последняя капча была распознана неверно.
            </summary>
        </member>
        <member name="T:VkNet.Utils.IVkAuthorization`1">
            <summary>
            Информация об авторизации приложения на действия.
            </summary>
        </member>
        <member name="M:VkNet.Utils.IVkAuthorization`1.GetAuthorizationResult(System.Uri)">
            <summary>
            Получить результат авторизации
            </summary>
            <param name="url">
            URL в котором содержатся параметры о авторизации
            </param>
            <returns>
            Результат авторизации <see cref="T:VkNet.Model.AuthorizationResult" />
            </returns>
            <exception cref="T:System.ArgumentException">
            URL должен начинаться со строки 'https://oauth.vk.com/blank.html'
            </exception>
        </member>
        <member name="M:VkNet.Utils.IVkAuthorization`1.GetPageType(System.Uri)">
            <summary>
            Получить тип страницы авторизации
            </summary>
            <param name="url">
            Текщий URL страницы авторизации
            </param>
            <returns>
            Тип страницы для авторизации Implicit Flow
            </returns>
        </member>
        <member name="T:VkNet.Utils.Browser">
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.Browser.AuthorizeAsync">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.Browser.ValidateAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.Browser.GetJsonAsync(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Асинхронное получение json по url-адресу
            </summary>
            <param name="methodUrl"> Адрес получения json </param>
            <param name="parameters"> Параметры метода api </param>
            <returns> Строка в формате json </returns>
        </member>
        <member name="M:VkNet.Utils.Browser.FilledTwoFactorFormAsync(System.Func{System.String},VkNet.Utils.WebCallResult)">
            <summary>
            Заполнить форму двухфакторной авторизации асинхронно
            </summary>
            <param name="code"> Функция возвращающая код двухфакторной авторизации </param>
            <param name="loginFormPostResult"> Ответ сервера vk </param>
            <returns> Ответ сервера vk </returns>
        </member>
        <member name="M:VkNet.Utils.Browser.FilledLoginFormAsync(System.String,System.String,VkNet.Utils.WebCallResult)">
            <summary>
            Заполнить форму логин и пароль асинхронно
            </summary>
            <param name="email"> Логин </param>
            <param name="password"> Пароль </param>
            <param name="authorizeUrlResult"> </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Utils.Browser.FilledCaptchaLoginFormAsync(System.String,System.String,VkNet.Utils.WebCallResult)">
            <summary>
            Заполнить форму логин и пароль
            </summary>
            <param name="email"> Логин </param>
            <param name="password"> Пароль </param>
            <param name="authorizeUrlResult"> </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Utils.Browser.ValidateAsync(System.String,System.String)">
            <summary>
            Выполняет обход ошибки валидации асинхронно: https://vk.com/dev/need_validation
            </summary>
            <param name="validateUrl"> Адрес страницы валидации </param>
            <param name="phoneNumber">
            Номер телефона, который необходимо ввести на
            странице валидации
            </param>
            <returns> Информация об авторизации приложения. </returns>
        </member>
        <member name="M:VkNet.Utils.Browser.EndAuthorizeAsync(VkNet.Utils.WebCallResult,System.Net.IWebProxy)">
            <summary>
            Закончить авторизацию асинхронно
            </summary>
            <param name="result"> Результат </param>
            <param name="webProxy"> Настройки прокси </param>
            <returns> </returns>
            <exception cref="T:VkNet.Exception.CaptchaNeededException"> </exception>
        </member>
        <member name="M:VkNet.Utils.Browser.OpenAuthDialogAsync">
            <summary>
            Открытие окна авторизации асинхронно
            </summary>
            <returns> </returns>
        </member>
        <member name="F:VkNet.Utils.Browser._logger">
            <summary>
            Логгер
            </summary>
        </member>
        <member name="F:VkNet.Utils.Browser._versionManager">
            <summary>
            Менеджер версий VkApi
            </summary>
        </member>
        <member name="M:VkNet.Utils.Browser.#ctor(Microsoft.Extensions.Logging.ILogger{VkNet.Utils.Browser},VkNet.Abstractions.Core.IVkApiVersionManager,System.Net.IWebProxy,VkNet.Utils.IVkAuthorization{VkNet.Enums.ImplicitFlowPageType},VkNet.Utils.AntiCaptcha.ICaptchaSolver)">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Utils.Browser.Proxy">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.Browser.GetJson(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.Browser.SetAuthorizationParams(VkNet.Model.IApiAuthParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.Browser.CreateAuthorizeUrl(System.UInt64,System.UInt64,VkNet.Enums.SafetyEnums.Display,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.Browser.CreateAuthorizeUrl">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.Browser.Validate(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.Browser.Validate(System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.Browser.IsAuthSuccessfull(VkNet.Utils.WebCallResult)">
            <summary>
            Авторизация прошла успешно
            </summary>
            <param name="webCallResult"> </param>
            <returns> true, если авторизация прошла успешно </returns>
        </member>
        <member name="M:VkNet.Utils.Browser.UriHasAccessToken(System.Uri)">
            <summary>
            Проверка наличия токена в url
            </summary>
            <param name="uri"> </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Utils.Browser.GetTokenUri(VkNet.Utils.WebCallResult)">
            <summary>
            Получить токен из uri
            </summary>
            <param name="webCallResult"> Результат запроса </param>
            <returns> Возвращает uri содержащий токен </returns>
            <exception cref="T:VkNet.Exception.VkApiException"> URI должен содержать токен! </exception>
        </member>
        <member name="T:VkNet.Utils.WebCall">
            <inheritdoc />
            <summary>
            WebCall
            </summary>
        </member>
        <member name="M:VkNet.Utils.WebCall.MakeCallAsync(System.String,System.Net.IWebProxy)">
            <summary>
            Выполнить запрос асинхронно.
            </summary>
            <param name="url"> URL. </param>
            <param name="webProxy"> Данные прокси сервера. </param>
            <returns> Результат </returns>
        </member>
        <member name="M:VkNet.Utils.WebCall.PostCallAsync(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Net.IWebProxy)">
            <summary>
            Выполнить POST запрос асинхронно.
            </summary>
            <param name="url"> URL. </param>
            <param name="parameters"> Параметры запроса. </param>
            <param name="webProxy"> Хост. </param>
            <returns> Результат </returns>
        </member>
        <member name="M:VkNet.Utils.WebCall.PostAsync(VkNet.Utils.WebForm,System.Net.IWebProxy)">
            <summary>
            Post запрос из формы асинхронно.
            </summary>
            <param name="form"> Форма. </param>
            <param name="webProxy"> Хост. </param>
            <returns> Результат </returns>
        </member>
        <member name="M:VkNet.Utils.WebCall.RedirectToAsync(System.String,System.Net.IWebProxy)">
            <summary>
            Асинхронная переадресация.
            </summary>
            <param name="url"> URL. </param>
            <param name="webProxy"> Хост. </param>
            <returns> Результат </returns>
        </member>
        <member name="M:VkNet.Utils.WebCall.MakeRequestAsync(System.Net.Http.HttpResponseMessage,System.Uri,System.Net.IWebProxy)">
            <summary>
            Выполнить запрос асинхронно.
            </summary>
            <param name="uri"> Uri из которого получаем куки </param>
            <param name="webProxy"> Хост. </param>
            <param name="response"> Ответ сервера </param>
            <returns> Результат </returns>
            <exception cref="T:VkNet.Exception.VkApiException"> Response is null. </exception>
        </member>
        <member name="F:VkNet.Utils.WebCall._request">
            <summary>
            Получить HTTP запрос.
            </summary>
        </member>
        <member name="F:VkNet.Utils.WebCall._result">
            <summary>
            Результат.
            </summary>
        </member>
        <member name="M:VkNet.Utils.WebCall.#ctor(System.String,VkNet.Utils.Cookies,System.Net.IWebProxy,System.Boolean)">
            <summary>
            WebCall.
            </summary>
            <param name="url"> URL. </param>
            <param name="cookies"> Cookies. </param>
            <param name="webProxy"> Хост. </param>
            <param name="allowAutoRedirect"> Разрешить авто редиррект </param>
        </member>
        <member name="M:VkNet.Utils.WebCall.Dispose">
            <summary>
            </summary>
        </member>
        <member name="M:VkNet.Utils.WebCall.MakeCall(System.String,System.Net.IWebProxy)">
            <summary>
            Выполнить запрос.
            </summary>
            <param name="url"> URL. </param>
            <param name="webProxy"> Данные прокси сервера. </param>
            <returns> Результат </returns>
        </member>
        <member name="M:VkNet.Utils.WebCall.PostCall(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Net.IWebProxy)">
            <summary>
            Выполнить POST запрос.
            </summary>
            <param name="url"> URL. </param>
            <param name="parameters"> Параметры запроса. </param>
            <param name="webProxy"> Хост. </param>
            <returns> Результат </returns>
        </member>
        <member name="M:VkNet.Utils.WebCall.Post(VkNet.Utils.WebForm,System.Net.IWebProxy)">
            <summary>
            Post запрос из формы.
            </summary>
            <param name="form"> Форма. </param>
            <param name="webProxy"> Хост. </param>
            <returns> Результат </returns>
        </member>
        <member name="M:VkNet.Utils.WebCall.RedirectTo(System.String,System.Net.IWebProxy)">
            <summary>
            Пере адресация.
            </summary>
            <param name="url"> URL. </param>
            <param name="webProxy"> Хост. </param>
            <returns> Результат </returns>
        </member>
        <member name="M:VkNet.Utils.WebCall.MakeRequest(System.Net.Http.HttpResponseMessage,System.Uri,System.Net.IWebProxy)">
            <summary>
            Выполнить запрос.
            </summary>
            <param name="uri"> Uri из которого получаем куки </param>
            <param name="webProxy"> Хост. </param>
            <param name="response"> Ответ сервера </param>
            <returns> Результат </returns>
            <exception cref="T:VkNet.Exception.VkApiException"> Response is null. </exception>
        </member>
        <member name="T:VkNet.Utils.CaptchaHandler">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.CaptchaHandler.#ctor(Microsoft.Extensions.Logging.ILogger{VkNet.Utils.CaptchaHandler},VkNet.Utils.AntiCaptcha.ICaptchaSolver)">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Utils.CaptchaHandler.MaxCaptchaRecognitionCount">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.CaptchaHandler.Perform``1(System.Func{System.Nullable{System.UInt64},System.String,``0})">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Utils.Cookies">
            <summary>
            Cookies
            </summary>
        </member>
        <member name="M:VkNet.Utils.Cookies.#ctor">
            <summary>
            Cookies.
            </summary>
        </member>
        <member name="P:VkNet.Utils.Cookies.Container">
            <summary>
            Получить контейнер Cookies.
            </summary>
        </member>
        <member name="M:VkNet.Utils.Cookies.AddFrom(System.Uri,System.Net.CookieCollection)">
            <summary>
            Добавить из.
            </summary>
            <param name="responseUrl"> URL ответа. </param>
            <param name="cookies"> Cookies. </param>
        </member>
        <member name="M:VkNet.Utils.Cookies.BugFixCookieDomain">
            <summary>
            Исправление ошибки в домене указанной куки.
            </summary>
        </member>
        <member name="T:VkNet.Utils.CountByIntervalAwaitableConstraint">
            <summary>
            Represents the behavior for the constraint.
            </summary>
        </member>
        <member name="M:VkNet.Utils.CountByIntervalAwaitableConstraint.#ctor">
            <inheritdoc />
            <summary>
            Initializes a new instance of the
            <see cref="T:VkNet.Utils.CountByIntervalAwaitableConstraint" /> class
            with default values.
            </summary>
        </member>
        <member name="M:VkNet.Utils.CountByIntervalAwaitableConstraint.#ctor(System.Int32,System.TimeSpan)">
            <summary>
            Initializes a new instance of the
            <see cref="T:VkNet.Utils.CountByIntervalAwaitableConstraint" /> class,
            specifying the maximum number of requests per time interval.
            </summary>
            <param name="number">
            Maximum <paramref name="number" /> times per <paramref name="timeSpan" />.
            </param>
            <param name="timeSpan">
            Time interval.
            </param>
            <exception cref="T:System.ArgumentException">
            The <paramref name="number" /> and <paramref name="timeSpan" /> should be
            strictly positive.
            </exception>
        </member>
        <member name="M:VkNet.Utils.CountByIntervalAwaitableConstraint.WaitForReadiness(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.CountByIntervalAwaitableConstraint.SetRate(System.Int32,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Utils.DateTimeHelper">
            <summary>
            Методы расширения для даты
            </summary>
        </member>
        <member name="M:VkNet.Utils.DateTimeHelper.ToShortDateString(System.DateTime)">
            <summary>
            Приветси дату в строковый вид в формате "DD.MM.YYYY"
            </summary>
            <param name="dateTime"> Дата </param>
            <returns> Строковое представление даты в формате "DD.MM.YYYY" </returns>
        </member>
        <member name="T:VkNet.Utils.DefaultValueAttribute">
            <summary>
            Значение enum, используемое по умолчанию.
            </summary>
        </member>
        <member name="T:VkNet.Utils.DisposableAction">
            <summary>
            The disposable action.
            </summary>
        </member>
        <member name="M:VkNet.Utils.DisposableAction.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:VkNet.Utils.DisposableAction"/> class.
            </summary>
            <param name="dispose">
            The dispose.
            </param>
        </member>
        <member name="M:VkNet.Utils.DisposableAction.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:VkNet.Utils.DisposableAction.Dispose(System.Boolean)">
            <summary>
            The dispose.
            </summary>
            <param name="disposing">
            The disposing.
            </param>
        </member>
        <member name="T:VkNet.Utils.ExecuteErrorsHandler">
            <summary>
            Обработчик ошибок при вызове метода execute
            </summary>
        </member>
        <member name="M:VkNet.Utils.ExecuteErrorsHandler.GetExecuteExceptions(System.String)">
            <summary>
            Получить <see cref="T:System.AggregateException" /> со всеми ошибками запроса execute
            </summary>
            <param name="response"> Json ответ </param>
            <returns> </returns>
            <exception cref="T:System.ArgumentException"> Параметр response должен иметь значение. </exception>
        </member>
        <member name="T:VkNet.Utils.HttpResponse`1">
            <summary>
            The HTTP response.
            </summary>
            <typeparam name="TResponse"> The type of the response. </typeparam>
        </member>
        <member name="P:VkNet.Utils.HttpResponse`1.Value">
            <summary>
            Gets the value (object deserialized from response).
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:VkNet.Utils.HttpResponse`1.StatusCode">
            <summary>
            Gets the HTTP status code.
            </summary>
            <value>
            The HTTP status code.
            </value>
        </member>
        <member name="P:VkNet.Utils.HttpResponse`1.IsSuccess">
            <summary>
            Gets a value indicating whether the call resulted in success.
            </summary>
            <value>
            <c> true </c> if this instance is the call resulted in success; otherwise,
            <c> false </c>.
            </value>
        </member>
        <member name="P:VkNet.Utils.HttpResponse`1.Message">
            <summary>
            Gets the error message.
            </summary>
            <value>
            The error message.
            </value>
        </member>
        <member name="P:VkNet.Utils.HttpResponse`1.RequestUri">
            <summary>
            Gets the request URI.
            </summary>
            <value>
            The request URI.
            </value>
        </member>
        <member name="M:VkNet.Utils.HttpResponse`1.Success(System.Net.HttpStatusCode,`0,System.String)">
            <summary>
            Creates the success response.
            </summary>
            <param name="httpStatusCode"> The HTTP status code. </param>
            <param name="value"> The value. </param>
            <param name="requestUri"> The request URI. </param>
            <returns> The HTTP response. </returns>
        </member>
        <member name="M:VkNet.Utils.HttpResponse`1.Fail(System.Net.HttpStatusCode,System.String,System.String)">
            <summary>
            Creates the failed response.
            </summary>
            <param name="httpStatusCode"> The HTTP status code. </param>
            <param name="message"> The message. </param>
            <param name="requestUri"> The request URI. </param>
            <returns>
            The HTTP response.
            </returns>
        </member>
        <member name="T:VkNet.Utils.ImplicitFlow">
            <inheritdoc />
        </member>
        <member name="F:VkNet.Utils.ImplicitFlow._logger">
            <summary>
            Логгер
            </summary>
        </member>
        <member name="F:VkNet.Utils.ImplicitFlow._versionManager">
            <summary>
            Менеджер версий VkApi
            </summary>
        </member>
        <member name="M:VkNet.Utils.ImplicitFlow.#ctor(Microsoft.Extensions.Logging.ILogger{VkNet.Utils.ImplicitFlow},VkNet.Abstractions.Core.IVkApiVersionManager,VkNet.Infrastructure.Authorization.ImplicitFlow.IAuthorizationFormFactory,VkNet.Utils.IVkAuthorization{VkNet.Enums.ImplicitFlowPageType})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.ImplicitFlow.AuthorizeAsync">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.ImplicitFlow.SetAuthorizationParams(VkNet.Model.IApiAuthParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.ImplicitFlow.CreateAuthorizeUrl(System.UInt64,System.UInt64,VkNet.Enums.SafetyEnums.Display,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.ImplicitFlow.CreateAuthorizeUrl">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.ImplicitFlow.ValidateAuthorizationParameters">
            <summary>
            Валидация параметров авторизации
            </summary>
            <exception cref="T:VkNet.Exception.VkApiException"> Список неверно заданных параметров </exception>
        </member>
        <member name="T:VkNet.Utils.ImplicitFlowVkAuthorization">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.ImplicitFlowVkAuthorization.GetAuthorizationResult(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.ImplicitFlowVkAuthorization.GetPageType(System.Uri)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Utils.IVkModel">
            <summary>
            Модель данных vk.com
            </summary>
        </member>
        <member name="P:VkNet.Utils.IVkModel.Id">
            <summary>
            Идентификатор.
            </summary>
        </member>
        <member name="M:VkNet.Utils.IVkModel.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Преобразовать из JSON
            </summary>
            <param name="response"> Ответ от сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Utils.JsonConverter.AttachmentJsonConverter">
            <summary>
            Attachment JsonConverter
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:VkNet.Utils.JsonConverter.AttachmentJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
            <exception cref="T:System.NotImplementedException"> </exception>
        </member>
        <member name="M:VkNet.Utils.JsonConverter.AttachmentJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
            <exception cref="T:System.TypeAccessException"> </exception>
        </member>
        <member name="M:VkNet.Utils.JsonConverter.AttachmentJsonConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Utils.JsonConverter.DateTimeToStringFormatConverter">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.JsonConverter.DateTimeToStringFormatConverter.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.JsonConverter.DateTimeToStringFormatConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.JsonConverter.DateTimeToStringFormatConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.JsonConverter.DateTimeToStringFormatConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Utils.JsonConverter.IgnoreUnexpectedArraysConverter">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.JsonConverter.IgnoreUnexpectedArraysConverter.#ctor(Newtonsoft.Json.Serialization.IContractResolver)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.JsonConverter.IgnoreUnexpectedArraysConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Utils.JsonConverter.IgnoreUnexpectedArraysConverterBase">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.JsonConverter.IgnoreUnexpectedArraysConverterBase.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Utils.JsonConverter.IgnoreUnexpectedArraysConverterBase.CanWrite">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.JsonConverter.IgnoreUnexpectedArraysConverterBase.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Utils.JsonConverter.IgnoreUnexpectedArraysConverter`1">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.JsonConverter.IgnoreUnexpectedArraysConverter`1.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Utils.JsonConverter.SafetyEnumJsonConverter">
            <summary>
            TODO: Description
            </summary>
        </member>
        <member name="M:VkNet.Utils.JsonConverter.SafetyEnumJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            TODO: Description
            </summary>
        </member>
        <member name="M:VkNet.Utils.JsonConverter.SafetyEnumJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            TODO: Description
            </summary>
        </member>
        <member name="M:VkNet.Utils.JsonConverter.SafetyEnumJsonConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Utils.JsonConverter.ToNullIfArrayConverter`1">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.JsonConverter.ToNullIfArrayConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.JsonConverter.ToNullIfArrayConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.JsonConverter.ToNullIfArrayConverter`1.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Utils.JsonConverter.VkCollectionJsonConverter">
            <summary>
            Vk Collection Json Converter
            </summary>
        </member>
        <member name="M:VkNet.Utils.JsonConverter.VkCollectionJsonConverter.#ctor(System.String)">
            <summary>
            Инициализация
            </summary>
            <param name="collectionField"> Collection Field </param>
        </member>
        <member name="M:VkNet.Utils.JsonConverter.VkCollectionJsonConverter.#ctor">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Utils.JsonConverter.VkCollectionJsonConverter.CountField">
            <summary>
            Количество
            </summary>
        </member>
        <member name="P:VkNet.Utils.JsonConverter.VkCollectionJsonConverter.CollectionField">
            <summary>
            Поле с коллекцией данных
            </summary>
        </member>
        <member name="M:VkNet.Utils.JsonConverter.VkCollectionJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Сериализация объекта в Json
            </summary>
            <param name="writer"> Json writer </param>
            <param name="value"> Значение </param>
            <param name="serializer"> Сериализатор </param>
            <exception cref="T:System.NotImplementedException"> </exception>
        </member>
        <member name="M:VkNet.Utils.JsonConverter.VkCollectionJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Преобразование JSON в VkCollection
            </summary>
            <param name="reader"> Json reader </param>
            <param name="objectType"> Тип объекта </param>
            <param name="existingValue"> Существующее значение </param>
            <param name="serializer"> Seerilizer </param>
            <returns> </returns>
            <exception cref="T:System.TypeAccessException"> </exception>
        </member>
        <member name="M:VkNet.Utils.JsonConverter.VkCollectionJsonConverter.CanConvert(System.Type)">
            <summary>
            Может преобразовать
            </summary>
            <param name="objectType"> Тип объекта </param>
            <returns> <c> true </c> если можно преобразовать </returns>
        </member>
        <member name="T:VkNet.Utils.JsonConverter.VkDefaultJsonConverter">
            <summary>
            Конвертер значений по умолчанию
            </summary>
        </member>
        <member name="P:VkNet.Utils.JsonConverter.VkDefaultJsonConverter.CanWrite">
            <summary>
            Gets a value indicating whether this
            <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
            <value>
            <c> true </c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write
            JSON; otherwise, <c> false </c>.
            </value>
        </member>
        <member name="M:VkNet.Utils.JsonConverter.VkDefaultJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary> Writes the JSON representation of the object. </summary>
            <param name="writer">
            The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write
            to.
            </param>
            <param name="value"> The value. </param>
            <param name="serializer"> The calling serializer. </param>
        </member>
        <member name="M:VkNet.Utils.JsonConverter.VkDefaultJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary> Reads the JSON representation of the object. </summary>
            <param name="reader">
            The <see cref="T:Newtonsoft.Json.JsonReader" /> to read
            from.
            </param>
            <param name="objectType"> Type of the object. </param>
            <param name="existingValue"> The existing value of object being read. </param>
            <param name="serializer"> The calling serializer. </param>
            <returns> The object value. </returns>
        </member>
        <member name="M:VkNet.Utils.JsonConverter.VkDefaultJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType"> Type of the object. </param>
            <returns>
            <c> true </c> if this instance can convert the specified object type;
            otherwise, <c> false </c>.
            </returns>
        </member>
        <member name="T:VkNet.Utils.LanguageService">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Utils.LanguageService.Language">
            <summary>
            Язык получаемых данных
            </summary>
        </member>
        <member name="M:VkNet.Utils.LanguageService.SetLanguage(VkNet.Enums.Language)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.LanguageService.GetLanguage">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Utils.LeadFormsQuestionBuilder">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.LeadFormsQuestionBuilder.AddStandard(VkNet.Enums.SafetyEnums.StandardQuestion)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.LeadFormsQuestionBuilder.AddInput(System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.LeadFormsQuestionBuilder.AddSelect(System.String,System.String,VkNet.Model.QuestionOption[])">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.LeadFormsQuestionBuilder.AddRadio(System.String,VkNet.Model.QuestionOption[])">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.LeadFormsQuestionBuilder.AddCheckbox(System.String,System.String,VkNet.Model.QuestionOption[])">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.LeadFormsQuestionBuilder.AddTextArea(System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.LeadFormsQuestionBuilder.Build">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Utils.VkParameters">
            <inheritdoc />
            <summary>
            Параметры запроса к ВКонтакте.
            </summary>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.AccountRegisterDeviceParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.AccountRegisterDeviceParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.SearchGetHintsParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.AccountSaveProfileInfoParams" /> в
            VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.PostAdsStealthParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.AccountSaveProfileInfoParams" /> в
            VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.EditAdsStealthParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.AccountSaveProfileInfoParams" /> в
            VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.VideoGetCatalogParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.AccountSaveProfileInfoParams" /> в
            VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.LinkStatsParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.AccountSaveProfileInfoParams" /> в
            VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.MessagesSearchParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.AccountSaveProfileInfoParams" /> в
            VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.CallbackServerParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.Database.GetCitiesParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.MessageEditParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.Database.GetCitiesParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.Database.GetCitiesParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.Database.GetCitiesParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.AccountSaveProfileInfoParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.AccountSaveProfileInfoParams" /> в
            VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.AppGetCatalogParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.AppGetCatalogParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.AppGetParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.AppGetParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.AppSendRequestParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.AppSendRequestParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.AudioEditParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.AudioEditParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.AudioGetParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.AudioGetParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.AudioSearchParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.AudioSearchParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.AuthConfirmParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.AuthConfirmParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.AuthSignupParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.AuthSignupParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.BoardAddTopicParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.BoardAddTopicParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.BoardCommentParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.BoardCommentParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.BoardCreateCommentParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.BoardCreateCommentParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.BoardEditCommentParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.BoardEditCommentParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.BoardEditTopicParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.BoardEditTopicParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.BoardGetCommentsParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.BoardGetCommentsParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.BoardGetTopicsParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.BoardGetTopicsParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.BoardTopicParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.BoardTopicParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.FriendsGetMutualParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.FriendsGetMutualParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.FriendsGetOnlineParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.FriendsGetOnlineParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.FriendsGetParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.FriendsGetParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.FriendsGetRequestsParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.FriendsGetRequestsParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.FriendsSearchParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.FriendsSearchParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.GroupsBanUserParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.GroupsBanUserParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.GroupsEditManagerParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.GroupsEditManagerParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.GroupsEditParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.GroupsEditParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.GroupsGetMembersParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.GroupsGetMembersParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.GroupsGetParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.GroupsGetParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.GroupsSearchParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.GroupsSearchParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.LikesAddParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.LikesAddParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.LikesGetListParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.LikesGetListParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.Market.MarketCreateCommentParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.Market.MarketCreateCommentParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.Market.MarketGetCommentsParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.Market.MarketGetCommentsParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.Market.MarketProductParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.Market.MarketProductParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.Market.MarketSearchParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.Market.MarketSearchParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.MessagesDialogsGetParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.MessagesDialogsGetParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.MessagesGetHistoryAttachmentsParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.MessagesGetHistoryAttachmentsParams" /> в
            VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.MessagesGetHistoryParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.MessagesGetHistoryParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.MessagesGetLongPollHistoryParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.MessagesGetLongPollHistoryParams" /> в
            VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.MessagesGetParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.MessagesGetParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.MessagesSendParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.MessagesSendParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.MessagesSendStickerParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.MessagesSendStickerParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.NewsFeedGetCommentsParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.NewsFeedGetCommentsParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.NewsFeedGetParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.NewsFeedGetParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.NewsFeedGetRecommendedParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.NewsFeedGetRecommendedParams" /> в
            VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.NewsFeedSearchParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.NewsFeedSearchParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.PagesGetParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.PagesGetParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.PhotoCreateAlbumParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.PhotoCreateAlbumParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.PhotoCreateCommentParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.PhotoCreateCommentParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.PhotoEditAlbumParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.PhotoEditAlbumParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.PhotoEditParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.PhotoEditParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.PhotoGetAlbumsParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.PhotoGetAlbumsParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.PhotoGetAllCommentsParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.PhotoGetAllCommentsParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.PhotoGetAllParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.PhotoGetAllParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.PhotoGetCommentsParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.PhotoGetCommentsParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.PhotoGetParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.PhotoGetParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.PhotoGetUserPhotosParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.PhotoGetUserPhotosParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.PhotoPutTagParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.PhotoPutTagParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.PhotoSaveParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.PhotoSaveParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.PhotoSearchParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.PhotoSearchParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.PollsAddVoteParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.PollsAddVoteParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.Polls.PollsCreateParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.Polls.PollsCreateParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.PollsDeleteVoteParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.PollsDeleteVoteParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.PollsEditParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.PollsEditParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.PollsGetByIdParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.PollsGetByIdParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.PollsGetVotersParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.PollsGetVotersParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.UserSearchParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.UserSearchParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.UsersGetNearbyParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.UsersGetNearbyParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.VideoCreateCommentParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.VideoCreateCommentParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.VideoEditParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.VideoEditParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.VideoGetCommentsParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.VideoGetCommentsParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.VideoGetParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.VideoGetParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.VideoReorderVideosParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.VideoReorderVideosParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.VideoSaveParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.VideoSaveParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.VideoSearchParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.VideoSearchParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.WallAddCommentParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.WallAddCommentParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.WallCreateCommentParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.WallCreateCommentParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.WallEditParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.WallEditParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.WallGetCommentsParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.WallGetCommentsParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.WallGetParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.WallGetParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.WallPostParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.WallPostParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.WallSearchParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.WallSearchParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.op_Implicit(VkNet.Model.RequestParams.Ads.AdsGetCampaignsParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.Ads.AdsGetCampaignsParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkParameters.#ctor">
            <inheritdoc />
            <summary>
            Инициализирует новый экземпляр класса VkParameters
            </summary>
        </member>
        <member name="M:VkNet.Utils.VkParameters.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc />
            <summary>
            Инициализирует новый экземпляр класса VkParameters
            </summary>
            <param name="parameters">
            Параметры запроса.
            </param>
        </member>
        <member name="P:VkNet.Utils.VkParameters.Empty">
            <summary>
            Параметры для запроса без параметров.
            </summary>
        </member>
        <member name="M:VkNet.Utils.VkParameters.Add``1(System.String,``0)">
            <summary>
            Добавляет параметр запроса.
            </summary>
            <typeparam name="T"> Тип значения параметра запроса. </typeparam>
            <param name="name"> Имя параметра запроса. </param>
            <param name="value"> Значение параметра запроса. </param>
        </member>
        <member name="M:VkNet.Utils.VkParameters.Add``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Добавляет параметр запроса, представляющий собой последовательность элементов
            заданного типа.
            Последовательность добавляется в виде строкового значения, содержащего ее
            элементы, разделенные запятой.
            </summary>
            <typeparam name="T"> Имя типа элементов последовательности. </typeparam>
            <param name="name"> Имя параметра запроса. </param>
            <param name="collection">
            Последовательность, представляющая значение параметра
            запроса.
            </param>
        </member>
        <member name="M:VkNet.Utils.VkParameters.Add``1(System.String,System.Collections.Generic.List{``0})">
            <summary>
            Добавляет именованный параметр запроса, представляющий собой коллекцию
            элементов заданного типа.
            Коллекция добавляетсяв виде строкового значения, содержащего ее элементы,
            разделенные запятой.
            </summary>
            <typeparam name="T"> Имя типа элементов коллекции. </typeparam>
            <param name="name"> Имя параметра запроса. </param>
            <param name="collection"> Коллекция, представляющая значение параметра запроса. </param>
        </member>
        <member name="M:VkNet.Utils.VkParameters.Add``1(System.String,System.Nullable{``0})">
            <summary>
            Добавляет параметр запроса.
            Если передан null, то добавление параметра не производится.
            </summary>
            <typeparam name="T"> Тип значения параметра запроса. </typeparam>
            <param name="name"> Имя параметра запроса. </param>
            <param name="nullableValue"> Значение параметра запроса. </param>
        </member>
        <member name="M:VkNet.Utils.VkParameters.Add(System.String,System.Nullable{System.DateTime})">
            <summary>
            Добавляет параметр-дату.
            Если передан null, то добавление не производится.
            </summary>
            <param name="name"> Имя параметра запроса. </param>
            <param name="nullableDateTime"> Значение параметра. </param>
        </member>
        <member name="M:VkNet.Utils.VkParameters.Add(System.String,System.Nullable{System.Boolean})">
            <summary>
            Добавляет логический параметр.
            Если передан null или значение параметра false, то добавление не производится.
            </summary>
            <param name="name"> Имя параметра запроса. </param>
            <param name="nullableValue"> Значение параметра. </param>
        </member>
        <member name="M:VkNet.Utils.VkParameters.Add(System.String,System.Boolean)">
            <summary>
            Добавляет логический параметр.
            Если передан null, то добавление не производится.
            </summary>
            <param name="name"> Имя параметра запроса. </param>
            <param name="value"> Значение параметра. </param>
        </member>
        <member name="M:VkNet.Utils.VkParameters.Add(System.String,System.Decimal)">
            <summary>
            Добавляет параметр десятичное число.
            Если передан null, то добавление не производится.
            </summary>
            <param name="name"> Имя параметра запроса. </param>
            <param name="value"> Значение параметра. </param>
        </member>
        <member name="M:VkNet.Utils.VkParameters.Add(System.String,System.Nullable{System.Decimal})">
            <summary>
            Добавляет параметр десятичное число.
            Если передан null, то добавление не производится.
            </summary>
            <param name="name"> Имя параметра запроса. </param>
            <param name="value"> Значение параметра. </param>
        </member>
        <member name="M:VkNet.Utils.VkParameters.Add(System.String,System.Double)">
            <summary>
            Добавляет параметр десятичное число.
            Если передан null, то добавление не производится.
            </summary>
            <param name="name"> Имя параметра запроса. </param>
            <param name="value"> Значение параметра. </param>
        </member>
        <member name="M:VkNet.Utils.VkParameters.Add(System.String,System.Nullable{System.Double})">
            <summary>
            Добавляет параметр десятичное число.
            Если передан null, то добавление не производится.
            </summary>
            <param name="name"> Имя параметра запроса. </param>
            <param name="value"> Значение параметра. </param>
        </member>
        <member name="M:VkNet.Utils.VkParameters.Add(System.String,System.Single)">
            <summary>
            Добавляет параметр десятичное число.
            Если передан null, то добавление не производится.
            </summary>
            <param name="name"> Имя параметра запроса. </param>
            <param name="value"> Значение параметра. </param>
        </member>
        <member name="M:VkNet.Utils.VkParameters.Add(System.String,System.Nullable{System.Single})">
            <summary>
            Добавляет параметр десятичное число.
            Если передан null, то добавление не производится.
            </summary>
            <param name="name"> Имя параметра запроса. </param>
            <param name="value"> Значение параметра. </param>
        </member>
        <member name="T:VkNet.Utils.ObsoleteText">
            <summary>
            Тексты для атрибута Obsolete
            </summary>
        </member>
        <member name="F:VkNet.Utils.ObsoleteText.CaptchaNeeded">
            <summary>
            Использование параметров капчи устаревший метод взаимодействия с <b>Captcha</b>.
            Необходимо реализовать интерфейс <see cref="T:VkNet.Utils.AntiCaptcha.ICaptchaSolver"/> и внедрить через конструктор.
            <para>
            Данный параметр будет удален в версии <b>2.0.0</b>
            </para>
            </summary>
        </member>
        <member name="F:VkNet.Utils.ObsoleteText.StatsGet">
            <summary>
            Устаревший параметр, доступен только для версий меньше <b>5.86</b>
            </summary>
        </member>
        <member name="F:VkNet.Utils.ObsoleteText.Browser">
            <summary>
            "Интерфейс был разделен на <see cref="T:VkNet.Abstractions.Authorization.IImplicitFlow"/> и <see cref="T:VkNet.Abstractions.Core.INeedValidationHandler"/>
            </summary>
        </member>
        <member name="F:VkNet.Utils.ObsoleteText.SettingsDependencyInjection">
            <summary>
            Настройки должны внедряться через DI
            </summary>
        </member>
        <member name="F:VkNet.Utils.ObsoleteText.Attachment">
            <summary>
            Данный тип данных устарел, используйте вместо него <see cref="T:VkNet.Model.Attachments.MediaAttachment"/>
            </summary>
        </member>
        <member name="F:VkNet.Utils.ObsoleteText.Validate">
            <summary>
            Данный метод устарел, используйте перегрузку класса <see cref="T:VkNet.Abstractions.Core.INeedValidationHandler"/>.<see cref="M:VkNet.Abstractions.Core.INeedValidationHandler.Validate(System.String)"/>
            </summary>
        </member>
        <member name="F:VkNet.Utils.ObsoleteText.MessageGet">
            <summary>
            <inheritdoc cref="F:VkNet.Utils.ObsoleteText.Deprecated"/> <see cref="M:VkNet.Abstractions.IMessagesCategory.GetConversations(VkNet.Model.RequestParams.GetConversationsParams)"/>
            </summary>
        </member>
        <member name="F:VkNet.Utils.ObsoleteText.MessageSearchDialogs">
            <summary>
            <inheritdoc cref="F:VkNet.Utils.ObsoleteText.Deprecated"/> <see cref="M:VkNet.Abstractions.IMessagesCategory.SearchConversations(System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.UInt64},System.Nullable{System.Boolean},System.Nullable{System.UInt64})"/>
            </summary>
        </member>
        <member name="F:VkNet.Utils.ObsoleteText.MessageMarkAsImportantDialog">
            <summary>
            <inheritdoc cref="F:VkNet.Utils.ObsoleteText.Deprecated"/> <see cref="M:VkNet.Abstractions.IMessagesCategory.MarkAsImportantConversation(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.UInt64})"/>
            </summary>
        </member>
        <member name="F:VkNet.Utils.ObsoleteText.MessageMarkAsAnsweredDialog">
            <summary>
            <inheritdoc cref="F:VkNet.Utils.ObsoleteText.Deprecated"/> <see cref="M:VkNet.Abstractions.IMessagesCategory.MarkAsAnsweredConversation(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.UInt64})"/>
            </summary>
        </member>
        <member name="F:VkNet.Utils.ObsoleteText.MessageDeleteDialog">
            <summary>
            <inheritdoc cref="F:VkNet.Utils.ObsoleteText.Deprecated"/> <see cref="M:VkNet.Abstractions.IMessagesCategory.DeleteConversation(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.UInt64})"/>
            </summary>
        </member>
        <member name="F:VkNet.Utils.ObsoleteText.MessageGetChatUsers">
            <summary>
            <inheritdoc cref="F:VkNet.Utils.ObsoleteText.Deprecated"/> <see cref="M:VkNet.Abstractions.IMessagesCategory.GetConversationMembers(System.Int64,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.UInt64})"/>
            </summary>
        </member>
        <member name="F:VkNet.Utils.ObsoleteText.MessageGetById">
            <summary>
            <inheritdoc cref="F:VkNet.Utils.ObsoleteText.Deprecated"/> <see cref="M:VkNet.Abstractions.IMessagesCategory.GetById(System.Collections.Generic.IEnumerable{System.UInt64},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.UInt64},System.Nullable{System.Boolean},System.Nullable{System.UInt64})"/>
            </summary>
        </member>
        <member name="F:VkNet.Utils.ObsoleteText.FriendsAddList">
            <summary>
            <inheritdoc cref="F:VkNet.Utils.ObsoleteText.Deprecated"/> <see cref="M:VkNet.Abstractions.IFriendsCategory.AddList(System.String,System.Collections.Generic.IEnumerable{System.Int64})"/>
            </summary>
        </member>
        <member name="F:VkNet.Utils.ObsoleteText.Deprecated">
            <summary>
            <inheritdoc cref="F:VkNet.Utils.ObsoleteText.Obsolete"/> Используйте вместо него
            </summary>
        </member>
        <member name="F:VkNet.Utils.ObsoleteText.Obsolete">
            <summary>
            Данный метод устарел и может быть отключён через некоторое время, пожалуйста, избегайте его использования.
            </summary>
        </member>
        <member name="T:VkNet.Utils.PerformanceActivator">
            <summary>
            Высокопроизводительное динамическое создание объектов
            </summary>
            <remarks>
            <a href="https://rogerjohansson.blog/2008/02/28/linq-expressions-creating-objects/">link</a>
            </remarks>
        </member>
        <member name="M:VkNet.Utils.PerformanceActivator.CreateInstance``1(System.Object[])">
            <inheritdoc cref="M:VkNet.Utils.PerformanceActivator.CreateInstance``1(System.Func{System.Reflection.ConstructorInfo,System.Boolean},System.Object[])"/>
        </member>
        <member name="M:VkNet.Utils.PerformanceActivator.CreateInstance``1(System.Func{System.Reflection.ConstructorInfo,System.Boolean},System.Object[])">
            <summary>
            Создать экземпляр объекта
            </summary>
            <param name="constructorFilter">Фильтр конструктора объекта</param>
            <param name="args">Параметры конструктора</param>
            <typeparam name="TResult">Возвращаемый тип</typeparam>
            <returns>Экземпляр класса <typeparamref name="TResult"/></returns>
        </member>
        <member name="M:VkNet.Utils.PerformanceActivator.CreateInstance``1(System.Type,System.Func{System.Reflection.ConstructorInfo,System.Boolean},System.Object[])">
            <summary>
            Создать экземпляр объекта
            </summary>
            <param name="constructorFilter">Фильтр конструктора объекта</param>
            <param name="args">Параметры конструктора</param>
            <typeparam name="TResult">Возвращаемый тип</typeparam>
            <returns>Экземпляр класса <typeparamref name="TResult"/></returns>
        </member>
        <member name="T:VkNet.Utils.RateLimiter">
            <summary>
            Represents a client-side rate limiting utility.
            </summary>
        </member>
        <member name="M:VkNet.Utils.RateLimiter.#ctor(VkNet.Abstractions.Core.IAwaitableConstraint)">
            <summary>
            Initializes a new instance of the <see cref="T:VkNet.Utils.RateLimiter" /> class,
            specifying the behavior for the constraint.
            </summary>
            <param name="awaitableConstraint">
            The behavior that will be used for the constraint.
            </param>
        </member>
        <member name="M:VkNet.Utils.RateLimiter.Perform(System.Func{System.Threading.Tasks.Task})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.RateLimiter.Perform``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.RateLimiter.Perform(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.RateLimiter.Perform``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.RateLimiter.Perform(System.Action,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.RateLimiter.Perform(System.Action)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.RateLimiter.Perform``1(System.Func{``0})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.RateLimiter.Perform``1(System.Func{``0},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.RateLimiter.SetRate(System.Int32,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.RateLimiter.Transform(System.Action)">
            <summary>
            Performs a transformation.
            </summary>
            <param name="act">
            The action.
            </param>
            <returns>
            Transformed function.
            </returns>
        </member>
        <member name="M:VkNet.Utils.RateLimiter.Transform``1(System.Func{``0})">
            <summary>
            Performs a transformation.
            </summary>
            <param name="compute">
            The func.
            </param>
            <returns>
            Transformed function.
            </returns>
        </member>
        <member name="T:VkNet.Utils.RestClient">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.RestClient.#ctor(Microsoft.Extensions.Logging.ILogger{VkNet.Utils.RestClient})">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Utils.RestClient.Proxy">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Utils.RestClient.Timeout">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.RestClient.GetAsync(System.Uri,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.RestClient.PostAsync(System.Uri,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.RestClient.Dispose">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Utils.TypeHelper">
            <summary>
            Методы расширения для типов
            </summary>
        </member>
        <member name="M:VkNet.Utils.TypeHelper.RegisterDefaultDependencies(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            DI регистрация зависимостей по умолчанию
            </summary>
            <param name="container"> DI контейнер </param>
        </member>
        <member name="M:VkNet.Utils.TypeHelper.TryInvokeMethodAsync``1(System.Func{``0})">
            <summary>
            Попытаться асинхронно выполнить метод.
            </summary>
            <param name="func"> Синхронный метод. </param>
            <typeparam name="T"> Тип ответа </typeparam>
            <returns> Результат выполнения функции. </returns>
        </member>
        <member name="M:VkNet.Utils.TypeHelper.TryInvokeMethodAsync(System.Action)">
            <summary>
            Попытаться асинхронно выполнить метод.
            </summary>
            <param name="func"> Синхронный метод. </param>
            <returns> Результат выполнения функции. </returns>
        </member>
        <member name="T:VkNet.Utils.Utilities">
            <summary>
            Утилиты.
            </summary>
        </member>
        <member name="M:VkNet.Utils.Utilities.EnumFrom``1(System.Int32)">
            <summary>
            Преобразовать в перечисление из числа.
            </summary>
            <typeparam name="T"> Тип перечисления. </typeparam>
            <param name="value"> Числовое значение. </param>
            <returns> Перечисление указанного типа. </returns>
            <exception cref="T:System.ArgumentException"> value </exception>
        </member>
        <member name="M:VkNet.Utils.Utilities.NullableEnumFrom``1(System.Int32)">
            <summary>
            Преобразовать в перечисление из числа.
            </summary>
            <typeparam name="T"> Тип перечисления. </typeparam>
            <param name="value"> Числовое значение. </param>
            <returns> Перечисление указанного типа. </returns>
        </member>
        <member name="M:VkNet.Utils.Utilities.GetNullableLongId(VkNet.Utils.VkResponse)">
            <summary>
            Получение идентификатора.
            Применять когда id может быть задано как строкой так и числом в json'e.
            </summary>
            <param name="response"> Ответ от сервера vk.com </param>
            <returns> Число типа long или null </returns>
        </member>
        <member name="M:VkNet.Utils.Utilities.JoinNonEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Объединить не пустую коллекцию.
            </summary>
            <typeparam name="T"> Тип коллекции. </typeparam>
            <param name="collection"> Коллекция. </param>
            <param name="separator"> Разделитель. </param>
            <returns> Строковое представление коллекции через разделитель. </returns>
        </member>
        <member name="M:VkNet.Utils.Utilities.Convert``1(VkNet.Utils.VkResponseArray,System.Func{VkNet.Utils.VkResponse,``0})">
            <summary>
            Преобразовать массив объектов ответа сервера vk.com.
            </summary>
            <typeparam name="T"> Тип коллекции. </typeparam>
            <param name="response"> Ответ от сервера vk.com. </param>
            <param name="selector"> Функция фильтрации. </param>
            <returns> Коллекция данных указанного типа. </returns>
        </member>
        <member name="M:VkNet.Utils.Utilities.PrettyPrintJson(System.String)">
            <summary>
            Вывести в консоль Json.
            </summary>
            <param name="json"> Json. </param>
            <returns> Json </returns>
        </member>
        <member name="M:VkNet.Utils.Utilities.SerializeToJson``1(``0)">
            <summary>
            Сериализует объект в JSON
            </summary>
            <param name="object"> Объект </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Utils.VkAuthorization2">
            <summary>
            Информация об авторизации приложения на действия.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkAuthorization2._nameValues">
            <summary>
            Список наименования полей.
            </summary>
        </member>
        <member name="M:VkNet.Utils.VkAuthorization2.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
            <param name="uriFragment"> URL ответа. </param>
        </member>
        <member name="P:VkNet.Utils.VkAuthorization2.IsAuthorized">
            <summary>
            Возвращает признак была ли авторизация успешной.
            </summary>
        </member>
        <member name="P:VkNet.Utils.VkAuthorization2.IsAuthorizationRequired">
            <summary>
            Проверяет требуется ли получения у авторизации на запрошенные приложением
            действия (при установке приложения
            пользователю).
            </summary>
        </member>
        <member name="P:VkNet.Utils.VkAuthorization2.AccessToken">
            <summary>
            Маркер доступа, который необходимо использовать для доступа к API ВКонтакте.
            </summary>
        </member>
        <member name="P:VkNet.Utils.VkAuthorization2.ExpiresIn">
            <summary>
            Время истечения срока действия маркера доступа.
            </summary>
        </member>
        <member name="P:VkNet.Utils.VkAuthorization2.State">
            <summary>
            Произвольная строка, которая будет возвращена вместе с результатом авторизации.
            </summary>
        </member>
        <member name="P:VkNet.Utils.VkAuthorization2.UserId">
            <summary>
            Идентификатор пользователя, у которого работает приложение (от имени которого
            был произведен вход).
            </summary>
        </member>
        <member name="P:VkNet.Utils.VkAuthorization2.Email">
            <summary>
            E-mail пользователя, у которого работает приложение (от имени которого был
            произведен вход).
            </summary>
        </member>
        <member name="P:VkNet.Utils.VkAuthorization2.IsCaptchaNeeded">
            <summary>
            ID капчи, если она появилась
            </summary>
        </member>
        <member name="P:VkNet.Utils.VkAuthorization2.CaptchaSid">
            <summary>
            ID капчи, если она появилась
            </summary>
        </member>
        <member name="M:VkNet.Utils.VkAuthorization2.From(System.String)">
            <summary>
            Извлекает из URL, на которую произошло перенаправление при авторизации,
            информацию об авторизации.
            </summary>
            <param name="uriFragment">
            URL, на которую произошло перенаправление при авторизации.
            </param>
            <returns> Информация об авторизации. </returns>
        </member>
        <member name="M:VkNet.Utils.VkAuthorization2.GetFieldValue(System.String)">
            <summary>
            Получить значение поля.
            </summary>
            <param name="fieldName"> Наименование поля. </param>
            <returns> Значение поля. </returns>
        </member>
        <member name="M:VkNet.Utils.VkAuthorization2.Decode(System.String)">
            <summary>
            Расшифровывает указанный URL.
            </summary>
            <param name="urlFragment"> URL. </param>
            <returns> Список наименования полей. </returns>
        </member>
        <member name="T:VkNet.Utils.VkCollection`1">
            <summary>
            Коллекция данных возвращенных от vk.com
            </summary>
            <typeparam name="T"> Тип данных. </typeparam>
        </member>
        <member name="M:VkNet.Utils.VkCollection`1.#ctor(System.UInt64,System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
            <summary>
            Конструктор.
            </summary>
            <param name="totalCount"> Общее количество. </param>
            <param name="list"> Список элементов. </param>
        </member>
        <member name="P:VkNet.Utils.VkCollection`1.TotalCount">
            <summary>
            Общее количество элементов.
            </summary>
        </member>
        <member name="P:VkNet.Utils.VkCollection`1.Item(System.Int32)">
            <summary>
            Текущий элемент.
            </summary>
            <param name="index"> Индекс. </param>
        </member>
        <member name="M:VkNet.Utils.VkCollection`1.GetEnumerator">
            <inheritdoc />
            <summary>
            Возвращает перечислитель, выполняющий итерацию в коллекции.
            </summary>
            <returns>
            Интерфейс T:System
            </returns>
        </member>
        <member name="T:VkNet.Utils.VkErrorAttribute">
            <summary>
            Код ошибки vk.com
            </summary>
        </member>
        <member name="M:VkNet.Utils.VkErrorAttribute.#ctor(System.Int32)">
            <summary>
            Код ошибки vk.com
            </summary>
            <param name="errorCode"> Код ошибки </param>
        </member>
        <member name="P:VkNet.Utils.VkErrorAttribute.ErrorCode">
            <summary>
            Код ошибки
            </summary>
        </member>
        <member name="T:VkNet.Utils.VkErrorCode">
            <summary>
            Список кодов ошибок.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.Unknown">
            <summary>
            Произошла неизвестная ошибка.
            Попробуйте повторить запрос позже.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.AppOff">
            <summary>
            Приложение выключено.
            Необходимо включить приложение в настройках https://vk.com/editapp?id={Ваш
            API_ID} или использовать тестовый режим
            (test_mode=1)
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.UnknownMethod">
            <summary>
            Передан неизвестный метод.
            Проверьте, правильно ли указано название вызываемого метода:
            http://vk.com/dev/methods.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.InvalidSignature">
            <summary>
            Неверная подпись.
            Проверьте правильность формирования подписи запроса:
            https://vk.com/dev/api_nohttps
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.AuthorizationFailed">
            <summary>
            Авторизация пользователя не удалась.
            Убедитесь, что Вы используете верную схему авторизации. Для работы с методами
            без префикса secure Вам нужно
            авторизовать пользователя одним из этих способов: http://vk.com/dev/auth_sites,
            http://vk.com/dev/auth_mobile.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.TooManyRequestsPerSecond">
            <summary>
            Слишком много запросов в секунду.
            Задайте больший интервал между вызовами или используйте метод execute.
            Подробнее об ограничениях на частоту вызовов
            см. на странице http://vk.com/dev/api_requests.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.PermissionToPerformThisAction">
            <summary>
            Нет прав для выполнения этого действия.
            Проверьте, получены ли нужные права доступа при авторизации. Это можно сделать
            с помощью метода
            account.getAppPermissions.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.InvalidRequest">
            <summary>
            Неверный запрос.
            Проверьте синтаксис запроса и список используемых параметров (его можно найти
            на странице с описанием метода).
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.TooMuchOfTheSameTypeOfAction">
            <summary>
            Слишком много однотипных действий.
            Нужно сократить число однотипных обращений. Для более эффективной работы Вы
            можете использовать execute или JSONP.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.PublicServerError">
            <summary>
            Произошла внутренняя ошибка сервера.
            Попробуйте повторить запрос позже.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.OffAppOrLogin">
            <summary>
            В тестовом режиме приложение должно быть выключено или пользователь должен быть
            залогинен.
            Выключите приложение в настройках https://vk.com/editapp?id={Ваш API_ID}
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.ImpossibleToCompileCode">
            <summary>
            Невозможно скомпилировать код.
            Проверьте код на ошибки.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.ErrorExecutingCode">
            <summary>
            Ошибка выполнения кода.
            Дополнительные сведения будут содержаться в сообщении об ошибке.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.CaptchaNeeded">
            <summary>
            Требуется ввод кода с картинки (Captcha).
            Процесс обработки этой ошибки подробно описан на отдельной странице.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.CannotBlacklistYourself">
            <summary>
            Доступ запрещён.
            Убедитесь, что Вы используете верные идентификаторы, и доступ к контенту для
            текущего пользователя есть в полной
            версии сайта.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.NeedHttps">
            <summary>
            Требуется выполнение запросов по протоколу HTTPS, т.к. пользователь включил
            настройку, требующую работу через
            безопасное соединение.
            Чтобы избежать появления такой ошибки, в Standalone-приложении Вы можете
            предварительно проверять состояние этой
            настройки у пользователя методом account.getInfo.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.NeedValidationOfUser">
            <summary>
            Требуется валидация пользователя.
            Действие требует подтверждения — необходимо перенаправить пользователя на
            служебную страницу для валидации.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.UserDeletedOrBanned">
            <summary>
            Пользователь не найден, удален или заблокирован
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.ContentDenied">
            <summary>
            Контент недоступен.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.NonStandaloneApplications">
            <summary>
            Данное действие запрещено для не Standalone приложений.
            Если ошибка возникает несмотря на то, что Ваше приложение имеет тип Standalone,
            убедитесь, что при авторизации Вы
            используете redirect_uri=https://oauth.vk.com/blank.html. Подробнее см.
            http://vk.com/dev/auth_mobile.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.OnlySandaloneOrOpenApi">
            <summary>
            Данное действие разрешено только для Standalone и Open API приложений.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.LoadingError">
            <summary>
            Ошибка загрузки документа.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.MethodHasBeenSwitchedOff">
            <summary>
            Метод был выключен.
            Все актуальные методы ВК API, которые доступны в настоящий момент, перечислены
            здесь: http://vk.com/dev/methods.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.ConfirmationUser">
            <summary>
            Требуется подтверждение со стороны пользователя.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.GroupKeyInvalid">
            <summary>
            Ключ доступа сообщества недействителен.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.AppKeyInvalid">
            <summary>
            Ключ доступа приложения недействителен.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.RateLimitReached">
            <summary>
            Достигнут количественный лимит на вызов метода
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.ParameterMissingOrInvalid">
            <summary>
            Один из необходимых параметров был не передан или неверен.
            Проверьте список требуемых параметров и их формат на странице с описанием
            метода.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.InvalidAppId">
            <summary>
            Неверный API ID приложения.
            Найдите приложение в списке администрируемых на странице
            http://vk.com/apps?act=settings и укажите в запросе верный
            API_ID (идентификатор приложения).
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.OutOfLimits">
            <summary>
            Выход за пределы.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.InvalidUserId">
            <summary>
            Неверный идентификатор пользователя.
            Убедитесь, что Вы используете верный идентификатор. Получить ID по короткому
            имени можно методом
            utils.resolveScreenName.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.InvalidServer">
            <summary>
            Недопустимый сервер загрузки.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.InvalidParameter">
            <summary>
            Неверный параметр.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.InvalidHash">
            <summary>
            Неверный хэш.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.InvalidGroupId">
            <summary>
            Неверный идентификатор сообщества.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.AccessToMenuDenied">
            <summary>
            Доступ к меню запрещен.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.InvalidTimestamp">
            <summary>
            Неверный timestamp.
            Получить актуальное значение Вы можете методом utils.getServerTime.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.UserAccessDenied">
            <summary>
            Доступ к пользователю запрещён.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.ListIdInvalid">
            <summary>
            Недопустимый идентификатор списка.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.ListAmountMaximum">
            <summary>
            Создано максимальное количество списков.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.CannotAddYourself">
            <summary>
            Невозможно добавить в друзья самого себя.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.CannotAddYouBlacklisted">
            <summary>
            Невозможно добавить в друзья пользователя, который занес Вас в свой черный
            список.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.CannotAddUserBlacklisted">
            <summary>
            Невозможно добавить в друзья пользователя, который занесен в Ваш черный список.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.CannotAddUserNotFound">
            <summary>
            Невозможно добавить в друзья пользователя, т.к. он не найден.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.AlbumAccessDenied">
            <summary>
            Доступ к альбому запрещён.
            Убедитесь, что Вы используете верные идентификаторы (для пользователей owner_id
            положительный, для сообществ —
            отрицательный), и доступ к запрашиваемому контенту для текущего пользователя
            есть в полной версии сайта.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.AudioAccessDenied">
            <summary>
            Доступ к аудио запрещён.
            Убедитесь, что Вы используете верные идентификаторы (для пользователей owner_id
            положительный, для сообществ —
            отрицательный), и доступ к запрашиваемому контенту для текущего пользователя
            есть в полной версии сайта.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.GroupAccessDenied">
            <summary>
            Доступ к группе запрещён.
            Убедитесь, что текущий пользователь является участником или руководителем
            сообщества (для закрытых и частных групп
            и встреч).
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.VideoAccessDenied">
            <summary>
            Нет доступа к видео.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.PostAccessDenied">
            <summary>
            Нет доступа к записи.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.CommentsWallAccessDenied">
            <summary>
            Нет доступа к комментариям на этой стене.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.CommentsPostAccessDenied">
            <summary>
            Нет доступа к комментариям записи.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.AccessToCommentDenied">
            <summary>
            Нет доступа к комментированию записи
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.AccessToAddingPostDenied">
            <summary>
            Публикация запрещена. Превышен лимит на число публикаций в сутки, либо на
            указанное время уже запланирована другая
            запись, либо для текущего пользователя недоступно размещение записи на этой
            стене.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.AdsRecentlyPosted">
            <summary>
            Рекламный пост уже недавно публиковался.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.StatusAccessDenied">
            <summary>
            Доступ к статусу запрещён.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.UserDisabledTrackNameBroadcast">
            <summary>
            Пользователь отключил вещание названия трека.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.PostLinksDenied">
            <summary>
            Запрещено размещать ссылки.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.CommentsLimitReached">
            <summary>
            Превышен лимит комментариев на стене
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.ToomanyAdsPosts">
            <summary>
            Превышен лимит комментариев на стене
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.GroupsListAccessDenied">
            <summary>
            Доступ к списку групп запрещен из-за настроек конфиденциальности пользователя.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.AlbumIsFull">
            <summary>
            Альбом переполнен.
            Перед продолжением работы нужно удалить лишние объекты из альбома или
            использовать другой альбом.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.VideoAlbumIsFull">
            <summary>
            Альбом видео переполнен.
            Перед продолжением работы нужно удалить лишние объекты из альбома или
            использовать другой альбом.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.PermissionDenied">
            <summary>
            Действие запрещено. Вы должны включить переводы голосов в настройках
            приложения.
            Проверьте настройки приложения: http://vk.com/editapp?id={Ваш API_ID}&amp;
            section=payments
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.AdsAccessDenied">
            <summary>
            Нет прав на выполнение данных операций с рекламным кабинетом.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.ErrorWorkWithAds">
            <summary>
            Произошла ошибка при работе с рекламным кабинетом.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.VideoAlreadyAdded">
            <summary>
            Это видео уже добавлено.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.VideoCommentsClosed">
            <summary>
            Комментарии к этому видео закрыты
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.CannotSendBlacklisted">
            <summary>
            Нельзя отправлять сообщение пользователю из черного списка.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.CannotSendToUserFirstly">
            <summary>
            Нельзя первым писать пользователю от имени сообщества.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.CannotSendDuePrivacy">
            <summary>
            Нельзя отправлять сообщения этому пользователю в связи с настройками
            приватности.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.TooMuchSentMessages">
            <summary>
            Слишком много пересланных сообщений.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.MessageIsTooLong">
            <summary>
            Сообщение слишком длинное.
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.ConversationAccessDenied">
            <summary>
            Нет доступа к беседе
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkErrorCode.UserNotFoundInChat">
            <summary>
            Пользователя нет в чате
            </summary>
        </member>
        <member name="T:VkNet.Utils.VkErrorFactory">
            <summary>
            Фабрика по созданию исключений
            </summary>
        </member>
        <member name="M:VkNet.Utils.VkErrorFactory.Create(VkNet.Model.VkError)">
            <summary>
            Создать ошибку
            </summary>
            <param name="error"> Ошибка VK </param>
            <returns>
            <see cref="T:VkNet.Exception.VkApiMethodInvokeException" />
            </returns>
        </member>
        <member name="T:VkNet.Utils.VkErrors">
            <summary>
            Ошибки VK
            </summary>
        </member>
        <member name="M:VkNet.Utils.VkErrors.ThrowIfNullOrEmpty(System.Linq.Expressions.Expression{System.Func{System.String}})">
            <summary>
            Ошибка если строка null или пустая.
            </summary>
            <param name="expr"> Выражение. </param>
            <exception cref="T:System.ArgumentNullException">
            Параметр не должен быть равен
            null
            </exception>
        </member>
        <member name="M:VkNet.Utils.VkErrors.ThrowIfNumberNotInRange``1(``0,``0,``0)">
            <summary>
            Ошибка если число не в диапозоне.
            </summary>
            <typeparam name="T"> Тип данных </typeparam>
            <param name="value"> Значение. </param>
            <param name="min"> Минимальное значение. </param>
            <param name="max"> Максимальное значение. </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Значение {value} не должно выходить за пределы диапозона [{min},
            {max}]
            </exception>
        </member>
        <member name="M:VkNet.Utils.VkErrors.ThrowIfNumberIsNegative(System.Linq.Expressions.Expression{System.Func{System.Nullable{System.Int64}}})">
            <summary>
            Ошибка если число отрицательное.
            </summary>
            <param name="expr"> Выражение. </param>
            <exception cref="T:System.ArgumentException"> Отрицательное значение. </exception>
        </member>
        <member name="M:VkNet.Utils.VkErrors.ThrowIfNumberIsNegative(System.Linq.Expressions.Expression{System.Func{System.Int64}})">
            <summary>
            Ошибка если число отрицательное.
            </summary>
            <param name="expr"> Выражение. </param>
            <exception cref="T:System.ArgumentException"> Отрицательное значение. </exception>
        </member>
        <member name="M:VkNet.Utils.VkErrors.ThrowIfNumberIsNegative``1(System.Linq.Expressions.Expression{``0})">
            <summary>
            Ошибка если число отрицательное.
            </summary>
            <typeparam name="T"> Тип данных </typeparam>
            <param name="expr"> Выражение. </param>
            <returns> Результат проверки </returns>
            <exception cref="T:System.ArgumentNullException">
            Выражение не может быть равно
            null
            </exception>
        </member>
        <member name="M:VkNet.Utils.VkErrors.IfErrorThrowException(System.String)">
            <summary>
            Ошибки VK.
            </summary>
            <param name="json"> JSON. </param>
            <exception cref="T:VkNet.Exception.VkApiException">
            Неправильный данные JSON.
            </exception>
        </member>
        <member name="T:VkNet.Utils.VkResponse">
            <summary>
            Ответ vk.com
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkResponse._token">
            <summary>
            JSON токен
            </summary>
        </member>
        <member name="M:VkNet.Utils.VkResponse.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Ответ vk.com
            </summary>
            <param name="token"> JSON токен. </param>
        </member>
        <member name="P:VkNet.Utils.VkResponse.RawJson">
            <summary>
            Сырой JSON.
            </summary>
        </member>
        <member name="P:VkNet.Utils.VkResponse.Item(System.Object)">
            <summary>
            Получить объект по указанному ключу.
            </summary>
            <param name="key"> Ключ. </param>
            <returns> Объект </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.HasToken">
            <summary>
            HasToken
            </summary>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.ContainsKey(System.String)">
            <summary>
            Определяет, содержит ли JSON указанный ключ.
            </summary>
            <param name="key"> Ключ. </param>
            <returns> Признак наличия ключа в JSON </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Utils.VkResponseArray">
            <summary>
            Выполняет неявное преобразование из VkResponse
            </summary>
            <param name="response"> Ответ vk.com </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.ToString">
            <summary>
            Преобразовать объект в строку.
            </summary>
            <returns>
            Строковое представление объекта.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Coordinates">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~System.Boolean">
            <summary>
            Выполняет неявное преобразование из VkResponse
            </summary>
            <param name="response"> Ответ vk.com </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~System.Nullable{System.Boolean}">
            <summary>
            Выполняет неявное преобразование из VkResponse
            </summary>
            <param name="response"> Ответ vk.com </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~System.Int64">
            <summary>
            Выполняет неявное преобразование из VkResponse
            </summary>
            <param name="response"> Ответ vk.com </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~System.Nullable{System.Int64}">
            <summary>
            Выполняет неявное преобразование из VkResponse
            </summary>
            <param name="response"> Ответ vk.com </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~System.UInt64">
            <summary>
            Выполняет неявное преобразование из VkResponse
            </summary>
            <param name="response"> Ответ vk.com </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~System.Nullable{System.UInt64}">
            <summary>
            Выполняет неявное преобразование из VkResponse
            </summary>
            <param name="response"> Ответ vk.com </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~System.Single">
            <summary>
            Выполняет неявное преобразование из VkResponse
            </summary>
            <param name="response"> Ответ vk.com </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~System.Nullable{System.Single}">
            <summary>
            Выполняет неявное преобразование из VkResponse
            </summary>
            <param name="response"> Ответ vk.com </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~System.Decimal">
            <summary>
            Выполняет неявное преобразование из VkResponse
            </summary>
            <param name="response"> Ответ vk.com </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~System.Nullable{System.Decimal}">
            <summary>
            Выполняет неявное преобразование из VkResponse
            </summary>
            <param name="response"> Ответ vk.com </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~System.UInt32">
            <summary>
            Выполняет неявное преобразование из VkResponse
            </summary>
            <param name="response"> Ответ vk.com </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~System.Nullable{System.UInt32}">
            <summary>
            Выполняет неявное преобразование из VkResponse
            </summary>
            <param name="response"> Ответ vk.com </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~System.Int32">
            <summary>
            Выполняет неявное преобразование из VkResponse
            </summary>
            <param name="response"> Ответ vk.com </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~System.Nullable{System.Int32}">
            <summary>
            Выполняет неявное преобразование из VkResponse
            </summary>
            <param name="response"> Ответ vk.com </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~System.String">
            <summary>
            Выполняет неявное преобразование из VkResponse
            </summary>
            <param name="response"> Ответ vk.com </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~System.Nullable{System.DateTime}">
            <summary>
            Выполняет неявное преобразование из VkResponse
            </summary>
            <param name="response"> Ответ vk.com </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~System.DateTime">
            <summary>
            Выполняет неявное преобразование из VkResponse
            </summary>
            <param name="response"> Ответ vk.com </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.TimestampToDateTime(System.Int64)">
            <summary>
            Timestamps to date time.
            </summary>
            <param name="unixTimeStamp"> The unix time stamp. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~System.Uri">
            <summary>
            Выполняет неявное преобразование из VkResponse
            </summary>
            <param name="response"> Ответ vk.com </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~System.Nullable{VkNet.Enums.PageAccessKind}">
            <summary>
            Выполняет неявное преобразование из VkResponse
            </summary>
            <param name="response"> Ответ vk.com </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~System.Nullable{VkNet.Enums.GroupPublicity}">
            <summary>
            Выполняет неявное преобразование из VkResponse
            </summary>
            <param name="response"> Ответ vk.com </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~System.Nullable{VkNet.Enums.ContentAccess}">
            <summary>
            Выполняет неявное преобразование из VkResponse
            </summary>
            <param name="response"> Ответ vk.com </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~System.Nullable{VkNet.Enums.GroupSubjects}">
            <summary>
            Выполняет неявное преобразование из VkResponse
            </summary>
            <param name="response"> Ответ vk.com </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~System.Nullable{VkNet.Enums.AdminLevel}">
            <summary>
            Выполняет неявное преобразование из VkResponse
            </summary>
            <param name="response"> Ответ vk.com </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~System.Nullable{VkNet.Enums.AudioGenre}">
            <summary>
            Выполняет неявное преобразование из VkResponse
            </summary>
            <param name="response"> Ответ vk.com </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~System.Nullable{VkNet.Enums.MessageType}">
            <summary>
            Выполняет неявное преобразование из VkResponse
            </summary>
            <param name="response"> Ответ vk.com </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~System.Nullable{VkNet.Enums.MessageReadState}">
            <summary>
            Выполняет неявное преобразование из VkResponse
            </summary>
            <param name="response"> Ответ vk.com </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.DocumentTypeEnum">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.AddFriendStatus">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.WallType">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.AgeLimit">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.MemberStatus">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.Attitude">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.BanReason">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.BirthdayVisibility">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.DeleteFriendStatus">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.FriendStatus">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.GiftPrivacy">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.GroupAccess">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.LeaderboardTypes">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.LifeMain">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.MainSection">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.MarketCurrencyId">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.PeopleMain">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.PoliticalPreferences">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.ProductAvailability">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.ProductSort">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.RelationType">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.ReportReason">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.Sex">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.WallContentAccess">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.AccountStatus">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.CampaignStatus">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.MessagesSendResult">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.PageVersion">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.FriendsDeleteResult">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.AreFriendsResult">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.CallbackSettings">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.CallbackServerItem">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.ChatPreviewField">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.ChatPreview">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.ChatPhoto">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Email">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.AccountInfo">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.AccountPushSettings">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.ShortLink">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.AccountChangePasswordResult">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.App">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.AppGetObject">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Application">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Attachments.Attachment">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.AuthConfirmResult">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.BanInfo">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Button">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Career">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.CategoryGroup">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Chair">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.ChangeNameRequest">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Chat">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.ChatPushSettings">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.City">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Comments">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Connections">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Contact">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Contacts">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Counters">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Country">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.CropPhoto">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Currency">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.DocumentType">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Education">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Exports">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.ExternalLink">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Faculty">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.FaveVideoEx">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.FriendList">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.FriendOnline">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Geo">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.GiftItem">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Group">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.GroupCover">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.GroupCoverImage">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.GroupInfo">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.GroupMember">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.GroupsCatalogInfo">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.RequestParams.GroupsEditParams">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.History">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.HistoryAttachment">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.InformationAboutOffers">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.LastActivity">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.LastSeen">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Likes">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.LinkButton">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.LinkButtonAction">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.LongPollHistoryResponse">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.LongPollServerResponse">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.LookupContactsOther">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.LookupContactsResult">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Lyrics">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Market">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.MarketCategory">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.MarketCategorySection">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.MarketComment">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Mention">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.MessagesGetObject">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.MessagesPushSettings">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Military">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.NewsBannedExList">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.NewsBannedList">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.NewsSuggestions">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.NewsUserListItem">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Occupation">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.PhotoAlbum">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.PhotoSize">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Place">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.PollAnswer">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.PollAnswerVoters">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.PostReach">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.PostSource">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.PostSourceData">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.PostView">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Previews">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Price">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.PushSettings">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Rating">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Rect">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Region">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Relative">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.RepostResult">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Reposts">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.School">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.SchoolClass">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.SearchDialogsResponse">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.StandInLife">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.StatsStruct">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Status">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Store">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Street">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Tag">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Tags">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Topic">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.University">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.UploadServerInfo">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.User">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.UserOrGroup">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.VideoCatalog">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.VideoCatalogItem">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.VideoFiles">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.VkObject">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.WallGetObject">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.AdsAccount">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.AudioAlbum">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.PollBackgroundType">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.OnlineStatusType">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.Filters.AppFilter">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.VideoView">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.DocMessageType">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.VideoCatalogFilters">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.CallbackServerStatus">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.AppPlatforms">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.AppRatingType">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.AppRequestType">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.AppSort">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.AppType">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.ChangeNameStatus">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.CommentObjectType">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.CommentsSort">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.Deactivated">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.Display">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.FeedType">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.FriendsFilter">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.FriendsOrder">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.GroupsMemberFilters">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.GroupsSort">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.GroupType">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.LikeObjectType">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.LikesFilter">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.LinkAccessType">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.ManagerRole">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.MediaType">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.NameCase">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.NewsObjectTypes">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.Filters.NewsTypes">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.OccupationType">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.PhotoAlbumType">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.PhotoFeedType">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.PhotoSearchRadius">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.PhotoSizeType">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.Platform">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.PostSourceType">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.PostType">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.PostTypeOrder">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.Privacy">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.RelativeType">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.ReportType">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.Services">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.UserSection">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.VideoCatalogItemType">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.VideoCatalogType">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.WallFilter">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.AccountType">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.AccessRole">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.CampaignType">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.KeyboardButtonActionType">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.KeyboardButtonColor">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.MarketItemButtonTitle">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="T:VkNet.Utils.VkResponseArray">
            <summary>
            Массив
            </summary>
        </member>
        <member name="F:VkNet.Utils.VkResponseArray._array">
            <summary>
            Массив
            </summary>
        </member>
        <member name="M:VkNet.Utils.VkResponseArray.#ctor(Newtonsoft.Json.Linq.JArray)">
            <summary>
            Инициализация нового массива.
            </summary>
            <param name="array"> Массив. </param>
        </member>
        <member name="P:VkNet.Utils.VkResponseArray.Item(System.Object)">
            <summary>
            Взять VkResponse
            </summary>
            <value>
            The VkResponse
            </value>
            <param name="key"> Ключ. </param>
            <returns> Текущий объект </returns>
        </member>
        <member name="P:VkNet.Utils.VkResponseArray.Count">
            <summary>
            Количество.
            </summary>
            <value>
            Количество.
            </value>
        </member>
        <member name="M:VkNet.Utils.VkResponseArray.GetEnumerator">
            <summary>
            Возвращает перечислитель, выполняющий итерацию в коллекции.
            </summary>
            <returns>
            Интерфейс T:System
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponseArray.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Возвращает перечислитель, который осуществляет перебор элементов коллекции.
            </summary>
            <returns>
            Объект T:System
            </returns>
        </member>
        <member name="T:VkNet.Utils.VkResponseEx">
            <summary>
            Методы расширения для ответов vk.com
            </summary>
        </member>
        <member name="M:VkNet.Utils.VkResponseEx.ToCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            В коллекцию.
            </summary>
            <typeparam name="T"> Тип данных коллекции. </typeparam>
            <param name="source"> Коллекция данных. </param>
            <returns> Коллекция данных. </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponseEx.ToCollectionOf``1(VkNet.Utils.VkResponse,System.Func{VkNet.Utils.VkResponse,``0})">
            <summary>
            В коллекцию.
            </summary>
            <typeparam name="T"> Тип данных коллекции. </typeparam>
            <param name="response"> Ответ vk.com. </param>
            <param name="selector"> Функция выборки. </param>
            <returns> Коллекция данных. </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponseEx.ToReadOnlyCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            В коллекцию только для чтения.
            </summary>
            <typeparam name="T"> Тип данных коллекции. </typeparam>
            <param name="source"> Коллекция данных. </param>
            <returns> Коллекция данных только для чтения. </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponseEx.ToReadOnlyCollectionOf``1(VkNet.Utils.VkResponse,System.Func{VkNet.Utils.VkResponse,``0})">
            <summary>
            В коллекцию только для чтения.
            </summary>
            <typeparam name="T"> Тип данных коллекции. </typeparam>
            <param name="response"> Ответ vk.com. </param>
            <param name="selector"> Функция выборки. </param>
            <returns> Коллекция данных только для чтения. </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponseEx.ToReadOnlyCollectionOf``1(VkNet.Utils.VkResponse)">
            <summary>
            В коллекцию только для чтения.
            </summary>
            <typeparam name="T"> Тип данных коллекции. </typeparam>
            <param name="response"> Ответ vk.com. </param>
            <returns> Коллекция данных только для чтения. </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponseEx.ToReadOnlyCollectionOf``1(System.Collections.Generic.IEnumerable{VkNet.Utils.VkResponse},System.Func{VkNet.Utils.VkResponse,``0})">
            <summary>
            В коллекцию только для чтения.
            </summary>
            <typeparam name="T"> Тип данных коллекции. </typeparam>
            <param name="responses"> Коллекция ответов от vk.com. </param>
            <param name="selector"> Функция выборки. </param>
            <returns> Коллекция данных только для чтения. </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponseEx.ToListOf``1(VkNet.Utils.VkResponse,System.Func{VkNet.Utils.VkResponse,``0})">
            <summary>
            В список.
            </summary>
            <typeparam name="T"> Тип данных списка. </typeparam>
            <param name="response"> Ответ vk.com. </param>
            <param name="selector"> Функция выборки. </param>
            <returns>
            Список данных.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponseEx.ToListOf``1(System.Collections.Generic.IEnumerable{VkNet.Utils.VkResponse},System.Func{VkNet.Utils.VkResponse,``0})">
            <summary>
            В список.
            </summary>
            <typeparam name="T"> Тип данных списка. </typeparam>
            <param name="responses"> Ответ vk.com. </param>
            <param name="selector"> Функция выборки. </param>
            <returns>
            Список данных.
            </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponseEx.ToVkCollectionOf``1(VkNet.Utils.VkResponse,System.Func{VkNet.Utils.VkResponse,``0},System.String)">
            <summary>
            В специальную коллекцию данных vk с общим количеством.
            </summary>
            <typeparam name="T"> Тип данных </typeparam>
            <param name="response"> Ответ vk.com. </param>
            <param name="selector"> Функция выборки. </param>
            <param name="arrayName"> Наименование поля массива </param>
            <returns> Специальная коллекция данных vk с общим количеством. </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponseEx.ToEnum``1(VkNet.Utils.VkResponse)">
            <summary>
            Преобразовать <see cref="T:VkNet.Utils.VkResponse" /> к <see cref="T:System.IConvertible" />
            </summary>
            <param name="response"> Ответ vk.com. </param>
            <typeparam name="T"> Тип перечисления </typeparam>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Utils.VkResponseEx.IsValidJson(System.String)">
            <summary>
            Проверка что строка является JSON
            </summary>
            <param name="input"> </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Utils.WebCallResult">
            <summary>
            </summary>
        </member>
        <member name="M:VkNet.Utils.WebCallResult.#ctor(System.String,VkNet.Utils.Cookies)">
            <summary>
            Инициализация класса WebCallResult
            </summary>
            <param name="url"> URL. </param>
            <param name="cookies"> Куки. </param>
        </member>
        <member name="P:VkNet.Utils.WebCallResult.RequestUrl">
            <summary>
            URL запроса.
            </summary>
        </member>
        <member name="P:VkNet.Utils.WebCallResult.Cookies">
            <summary>
            Куки.
            </summary>
        </member>
        <member name="P:VkNet.Utils.WebCallResult.ResponseUrl">
            <summary>
            Получить URL ответа.
            </summary>
        </member>
        <member name="P:VkNet.Utils.WebCallResult.Response">
            <summary>
            Ответ.
            </summary>
        </member>
        <member name="M:VkNet.Utils.WebCallResult.SaveCookies(System.Net.CookieCollection)">
            <summary>
            Сохранить куки.
            </summary>
            <param name="cookies"> Куки. </param>
        </member>
        <member name="M:VkNet.Utils.WebCallResult.SaveResponse(System.Uri,System.IO.Stream,System.Text.Encoding)">
            <summary>
            Сохранить ответ.
            </summary>
            <param name="responseUrl"> URL ответ. </param>
            <param name="stream"> Поток. </param>
            <param name="encoding"> Кодировка. </param>
        </member>
        <member name="T:VkNet.Utils.WebForm">
            <summary>
            WEB форма
            </summary>
        </member>
        <member name="F:VkNet.Utils.WebForm._html">
            <summary>
            HTML документ
            </summary>
        </member>
        <member name="F:VkNet.Utils.WebForm._inputs">
            <summary>
            Коллекция input на форме
            </summary>
        </member>
        <member name="F:VkNet.Utils.WebForm._responseBaseUrl">
            <summary>
            Базовый URL-ответ
            </summary>
            <remarks>
            Если форма имеет относительный URL
            </remarks>
        </member>
        <member name="F:VkNet.Utils.WebForm._lastName">
            <summary>
            Наименование поля
            </summary>
        </member>
        <member name="M:VkNet.Utils.WebForm.#ctor(VkNet.Utils.WebCallResult)">
            <summary>
            WEB форма.
            </summary>
            <param name="result"> Результат. </param>
        </member>
        <member name="P:VkNet.Utils.WebForm.Cookies">
            <summary>
            Cookies.
            </summary>
        </member>
        <member name="P:VkNet.Utils.WebForm.ActionUrl">
            <summary>
            URL действия.
            </summary>
        </member>
        <member name="P:VkNet.Utils.WebForm.OriginalUrl">
            <summary>
            Gets the original URL.
            </summary>
            <value>
            The original URL.
            </value>
        </member>
        <member name="M:VkNet.Utils.WebForm.From(VkNet.Utils.WebCallResult)">
            <summary>
            Из результата.
            </summary>
            <param name="result"> Результат. </param>
            <returns> WEB форма. </returns>
        </member>
        <member name="M:VkNet.Utils.WebForm.IsOAuthBlank(VkNet.Utils.WebCallResult)">
            <summary>
            Проверка на отсутствие двухфакторной авторизации.
            </summary>
            <param name="result"> Результат. </param>
            <returns> WEB форма. </returns>
        </member>
        <member name="M:VkNet.Utils.WebForm.And">
            <summary>
            И.
            </summary>
            <returns> WEB форма. </returns>
        </member>
        <member name="M:VkNet.Utils.WebForm.WithField(System.String)">
            <summary>
            С полем.
            </summary>
            <param name="name"> Наименование поля. </param>
            <returns> WEB форма. </returns>
        </member>
        <member name="M:VkNet.Utils.WebForm.GetFieldValue(System.String)">
            <summary>
            С полем.
            </summary>
            <param name="name"> Наименование поля. </param>
            <returns> WEB форма. </returns>
        </member>
        <member name="M:VkNet.Utils.WebForm.FilledWith(System.String)">
            <summary>
            Заполнить поле с.
            </summary>
            <param name="value"> Значение. </param>
            <returns> WEB форма. </returns>
            <exception cref="T:System.InvalidOperationException"> Field name not set! </exception>
        </member>
        <member name="M:VkNet.Utils.WebForm.GetRequest">
            <summary>
            Получить запрос.
            </summary>
            <returns> Массив байт </returns>
        </member>
        <member name="M:VkNet.Utils.WebForm.GetRequestAsStringArray">
            <summary>
            Получить запрос.
            </summary>
            <returns> Массив байт </returns>
        </member>
        <member name="M:VkNet.Utils.WebForm.GetFormFields">
            <summary>
            Получить значения полей.
            </summary>
            <returns> Словарь значений по именам полей. </returns>
        </member>
        <member name="M:VkNet.Utils.WebForm.ParseInputs">
            <summary>
            Разобрать поля ввода.
            </summary>
            <returns> Коллекция полей ввода </returns>
        </member>
        <member name="M:VkNet.Utils.WebForm.GetFormNode">
            <summary>
            Получить из HTML элемента.
            </summary>
            <returns> HTML элемент </returns>
            <exception cref="T:VkNet.Exception.VkApiException"> Элемент не найден на форме. </exception>
        </member>
        <member name="T:VkNet.Utils.WebProxy">
            <inheritdoc />
            <summary>
            Реализация WebProxy
            </summary>
        </member>
        <member name="F:VkNet.Utils.WebProxy._proxyUri">
            <summary>
            Uri прокси
            </summary>
        </member>
        <member name="M:VkNet.Utils.WebProxy.#ctor(System.Uri)">
            <summary>
            Инициализация класса прокси
            </summary>
            <param name="proxyUri"> Uri прокси </param>
        </member>
        <member name="P:VkNet.Utils.WebProxy.Credentials">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.WebProxy.GetProxy(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.WebProxy.IsBypassed(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Utils.WebProxy.GetCredentials(System.String,System.String)">
            <summary>
            Получить данные авторизации
            </summary>
            <param name="proxyLogin"> Логин </param>
            <param name="proxyPassword"> Пароль </param>
            <returns> Данные авторизации </returns>
        </member>
        <member name="M:VkNet.Utils.WebProxy.GetProxy(System.String,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Получить прокси
            </summary>
            <param name="host"> Имя узла прокси-сервера </param>
            <param name="port"> Порт </param>
            <param name="proxyLogin"> Логин </param>
            <param name="proxyPassword"> Пароль </param>
            <returns> Прокси </returns>
        </member>
        <member name="T:VkNet.Categories.AccountCategory">
            <summary>
            Методы этого класса позволяют производить действия с аккаунтом пользователя.
            </summary>
            <inheritdoc />
        </member>
        <member name="F:VkNet.Categories.AccountCategory._vk">
            <summary>
            API.
            </summary>
        </member>
        <member name="M:VkNet.Categories.AccountCategory.#ctor(VkNet.Abstractions.IVkApiInvoke)">
            <summary>
            Методы для работы с аккаунтом пользователя.
            </summary>
            <param name="vk"> API. </param>
        </member>
        <member name="M:VkNet.Categories.AccountCategory.GetCounters(VkNet.Enums.Filters.CountersFilter)">
            <summary>
            Возвращает ненулевые значения счетчиков пользователя.
            </summary>
            <param name="filter">
            Счетчики, информацию о которых нужно вернуть (friends, messages, photos,
            videos, notes, gifts, events, groups,
            notifications, sdk, app_requests).
            sdk - возвращает количество запросов в приложениях.
            app_requests - возвращает количество непрочитанных запросов в приложениях.
            список слов, разделенных через запятую
            (Список слов, разделенных через запятую).
            </param>
            <returns>
            Возвращает объект, который может содержать поля friends, messages, photos,
            videos, notes, gifts, events, groups,
            notifications, sdk, app_requests.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.getCounters
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AccountCategory.SetNameInMenu(System.String,System.Nullable{System.Int64})">
            <summary>
            Устанавливает короткое название приложения (до 17 символов), которое выводится
            пользователю в левом меню.
            </summary>
            <param name="userId">
            Идентификатор пользователя. положительное число, по умолчанию идентификатор
            текущего пользователя,
            обязательный параметр (Положительное число, по умолчанию идентификатор текущего
            пользователя, обязательный
            параметр).
            </param>
            <param name="name"> Короткое название приложения. строка (Строка). </param>
            <returns>
            Возвращает 1 в случае успешной установки короткого названия.
            Если пользователь не установил приложение в левое меню, метод вернет ошибку 148
            (Access to the menu of the user
            denied). Избежать этой ошибки можно с помощью метода account.getAppPermissions.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.setNameInMenu
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AccountCategory.SetOnline(System.Nullable{System.Boolean})">
            <summary>
            Помечает текущего пользователя как online на 15 минут.
            </summary>
            <param name="voip">
            Возможны ли видеозвонки для данного устройства флаг, может принимать значения 1
            или 0 (Флаг, может
            принимать значения 1 или 0).
            </param>
            <returns>
            В случае успешного выполнения метода будет возвращён код 1.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.setOnline
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AccountCategory.SetOffline">
            <summary>
            Помечает текущего пользователя как offline.
            </summary>
            <returns>
            В случае успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.setOffline
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AccountCategory.RegisterDevice(VkNet.Model.RequestParams.AccountRegisterDeviceParams)">
            <summary>
            Подписывает устройство на базе iOS, Android или Windows Phone на получение
            Push-уведомлений.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            Возвращает 1 в случае успешного выполнения метода.
            На iOS и Windows Phone push-уведомления будут отображены без какой либо
            обработки.
            На Android будут приходить события в следующем формате.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.registerDevice
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AccountCategory.UnregisterDevice(System.String,System.Nullable{System.Boolean})">
            <summary>
            Отписывает устройство от Push уведомлений.
            </summary>
            <param name="deviceId">
            Уникальный идентификатор устройства. строка, доступен начиная с версии 5.31
            (Строка, доступен
            начиная с версии 5.31).
            </param>
            <param name="sandbox">
            Флаг предназначен для iOS устройств. 1 — отписать устройство, использующего
            sandbox сервер для
            отправки push-уведомлений, 0 — отписать устройство, не использующее sandbox
            сервер флаг, может принимать значения 1
            или 0, по умолчанию 0 (Флаг, может принимать значения 1 или 0, по умолчанию 0).
            </param>
            <returns>
            Возвращает <c> true </c> в случае успешного выполнения метода.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.unregisterDevice
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AccountCategory.SetSilenceMode(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Отключает push-уведомления на заданный промежуток времени.
            </summary>
            <param name="deviceId"> Идентификатор устройства для сервиса push уведомлений. </param>
            <param name="time">
            Время в секундах на которое требуется отключить уведомления. (-1 - отключить
            навсегда)
            </param>
            <param name="peerId">
            Идентификатор чата, для которого следует отключить
            уведомления.
            </param>
            <param name="sound">
            1 - включить звук в данном диалоге, 0 - отключить звук (параметр работает
            только если указан в
            peer_id передан идентификатор групповой беседы или пользователя)
            </param>
            <returns>
            Возвращает результат выполнения метода.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.setSilenceMode
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AccountCategory.GetPushSettings(System.String)">
            <summary>
            Позволяет получать настройки Push уведомлений.
            </summary>
            <param name="deviceId">
            Уникальный идентификатор устройства. строка, доступен начиная с версии 5.31
            (Строка, доступен
            начиная с версии 5.31).
            </param>
            <returns>
            Возвращает объект, содержащий поля:
            disabled — отключены ли уведомления.
            disabled_until — unixtime-значение времени, до которого временно отключены
            уведомления.
            conversations — список, содержащий настройки конкретных диалогов, и их
            количество первым элементом.
            settings — объект с настройками Push-уведомлений в специальном формате.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.getPushSettings
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AccountCategory.SetPushSettings(System.String,VkNet.Model.PushSettings,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Изменяет настройку Push-уведомлений.
            </summary>
            <param name="deviceId">
            Уникальный идентификатор устройства. строка, обязательный параметр (Строка,
            обязательный
            параметр).
            </param>
            <param name="settings">
            Сериализованный JSON-объект, описывающий настройки уведомлений в специальном
            формате данные в
            формате JSON (Данные в формате JSON).
            </param>
            <param name="key"> Ключ уведомления. строка (Строка). </param>
            <param name="value">
            Новое значение уведомления в специальном формате. список слов, разделенных
            через запятую (Список
            слов, разделенных через запятую).
            </param>
            <returns>
            Возвращает 1 в случае успешного выполнения метода.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.setPushSettings
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AccountCategory.GetAppPermissions(System.Int64)">
            <summary>
            Получает настройки текущего пользователя в данном приложении.
            </summary>
            <param name="userId">
            Идентификатор пользователя, информацию о настройках которого необходимо
            получить. По умолчанию —
            текущий пользователь. положительное число, по умолчанию идентификатор текущего
            пользователя, обязательный параметр
            (Положительное число, по умолчанию идентификатор текущего пользователя,
            обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает битовую маску настроек текущего
            пользователя в данном приложении.
            Пример Если Вы хотите получить права на Доступ к друзьям и Доступ к статусам
            пользователя, то Ваша битовая маска
            будет равна: 2   1024 = 1026.
            Если, имея битовую маску 1026, Вы хотите проверить, имеет ли она доступ к
            друзьям — Вы можете сделать 1026 &amp; 2.
            Например alert(1026 &amp; 2);
            см. Список возможных настроек прав доступа.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.getAppPermissions
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AccountCategory.GetActiveOffers(System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <summary>
            Возвращает список активных рекламных предложений (офферов), выполнив которые
            пользователь сможет получить
            соответствующее количество голосов на свой счёт внутри приложения.
            </summary>
            <param name="offset">
            Смещение, необходимое для выборки определенного подмножества офферов.
            положительное число, по
            умолчанию 0 (Положительное число, по умолчанию 0).
            </param>
            <param name="count">
            Количество офферов, которое необходимо получить положительное число, по
            умолчанию 100, максимальное
            значение 100 (Положительное число, по умолчанию 100, максимальное значение
            100).
            </param>
            <returns>
            Возвращает массив, состоящий из общего количества старгетированных на текущего
            пользователя специальных предложений
            (первый элемент), и списка объектов с информацией о предложениях.
            В случае, если на пользователя не старгетировано ни одного специального
            предложения, массив будет содержать элемент
            0 (количество специальных предложений).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.getActiveOffers
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AccountCategory.BanUser(System.Int64)">
            <summary>
            Добавляет пользователя в черный список.
            </summary>
            <param name="userId">
            Идентификатор пользователя, которого нужно добавить в черный список.
            положительное число,
            обязательный параметр (Положительное число, обязательный параметр).
            </param>
            <returns>
            В случае успеха метод вернет <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.banUser
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AccountCategory.UnbanUser(System.Int64)">
            <summary>
            Убирает пользователя из черного списка.
            </summary>
            <param name="userId">
            Идентификатор пользователя, которого нужно убрать из черного списка.
            положительное число,
            обязательный параметр (Положительное число, обязательный параметр).
            </param>
            <returns>
            В случае успеха метод вернет <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.unbanUser
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AccountCategory.GetBanned(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Возвращает список пользователей, находящихся в черном списке.
            </summary>
            <param name="offset">
            Смещение необходимое для выборки определенного подмножества черного списка.
            положительное число
            (Положительное число).
            </param>
            <param name="count">
            Количество записей, которое необходимо вернуть. положительное число, по
            умолчанию 20, максимальное
            значение 200 (Положительное число, по умолчанию 20, максимальное значение 200).
            </param>
            <returns>
            Возвращает набор объектов пользователей, находящихся в черном списке.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.getBanned
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AccountCategory.GetInfo(VkNet.Enums.Filters.AccountFields)">
            <summary>
            Возвращает информацию о текущем аккаунте.
            </summary>
            <param name="fields">
            Список полей, которые необходимо вернуть. Возможные значения: (country,
            http_required,
            own_posts_default, no_wall_replies, intro, lang, По умолчанию будут возвращены
            все поля. список слов, разделенных
            через запятую (Список слов, разделенных через запятую).
            </param>
            <returns>
            Метод возвращает объект, содержащий следующие поля:
            country – строковой код страны, определенный по IP адресу, с которого сделан
            запрос;
            https_required – 1 - пользователь установил на сайте настройку "Всегда
            использовать безопасное соединение"; 0 -
            безопасное соединение не требуется;
            own_posts_default – 1 - на стене пользователя по-умолчанию должны отображаться
            только собственные записи.
            Соответствует настройке на сайте "Показывать только мои записи", 0 - на стене
            пользователя должны отображаться все
            записи;
            no_wall_replies – 1 - пользователь отключил комментирование записей на стене, 0
            - комментирование записей
            разрешено;
            intro – битовая маска отвечающая за прохождение обучения использованию
            приложения;
            lang – числовой идентификатор текущего языка пользователя.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.getInfo
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AccountCategory.SetInfo(System.String,System.String)">
            <summary>
            Позволяет редактировать информацию о текущем аккаунте.
            </summary>
            <param name="name"> Имя настройки. </param>
            <param name="value"> Значение настройки. </param>
            <returns>
            В результате успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.setInfo
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AccountCategory.ChangePassword(System.String,System.String,System.String,System.String)">
            <summary>
            Позволяет сменить пароль пользователя после успешного восстановления доступа к
            аккаунту через СМС, используя метод
            auth.restore.
            </summary>
            <param name="restoreSid">
            Идентификатор сессии, полученный при восстановлении доступа используя метод
            auth.restore. (В
            случае если пароль меняется сразу после восстановления доступа) строка
            (Строка).
            </param>
            <param name="changePasswordHash">
            Хэш, полученный при успешной OAuth авторизации по коду полученному по СМС (В
            случае
            если пароль меняется сразу после восстановления доступа) строка (Строка).
            </param>
            <param name="oldPassword"> Текущий пароль пользователя. строка (Строка). </param>
            <param name="newPassword">
            Новый пароль, который будет установлен в качестве текущего. строка, минимальная
            длина 6,
            обязательный параметр (Строка, минимальная длина 6, обязательный параметр).
            </param>
            <returns>
            В результате выполнения этого метода будет возвращен объект с полем token,
            содержащим новый токен, и полем secret в
            случае, если токен был nohttps.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.changePassword
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AccountCategory.GetProfileInfo">
            <summary>
            Возвращает информацию о текущем профиле.
            </summary>
            <returns> Информация о текущем профиле в виде Model.User </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.getProfileInfo
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AccountCategory.SaveProfileInfo(System.Int32)">
            <summary>
            Редактирует информацию текущего профиля.
            </summary>
            <param name="cancelRequestId">
            Идентификатор заявки на смену имени, которую
            необходимо отменить.
            </param>
            <returns> Результат отмены заявки. </returns>
            <remarks>
            Метод вынесен как отдельный, потому что если в запросе передан параметр
            <paramref name="cancelRequestId" />,
            все остальные параметры игнорируются.
            </remarks>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.saveProfileInfo
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AccountCategory.SaveProfileInfo(VkNet.Model.ChangeNameRequest@,VkNet.Model.RequestParams.AccountSaveProfileInfoParams)">
            <summary>
            Редактирует информацию текущего профиля.
            </summary>
            <param name="changeNameRequest">
            Если в параметрах передавалось имя или фамилия пользователя,
            в этом параметре будет возвращен объект типа ChangeNameRequest
            </param>
            <param name="params"> The parameters. </param>
            <returns>
            Результат отмены заявки.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/account.saveProfileInfo
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AccountCategory.GetPrivacySettings">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AccountCategory.SetPrivacy(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AccountCategory.GetCountersAsync(VkNet.Enums.Filters.CountersFilter)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AccountCategory.SetNameInMenuAsync(System.String,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AccountCategory.SetOnlineAsync(System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AccountCategory.SetOfflineAsync">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AccountCategory.RegisterDeviceAsync(VkNet.Model.RequestParams.AccountRegisterDeviceParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AccountCategory.UnregisterDeviceAsync(System.String,System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AccountCategory.SetSilenceModeAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AccountCategory.GetPushSettingsAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AccountCategory.SetPushSettingsAsync(System.String,VkNet.Model.PushSettings,System.String,System.Collections.Generic.List{System.String})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AccountCategory.GetAppPermissionsAsync(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AccountCategory.GetActiveOffersAsync(System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AccountCategory.BanUserAsync(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AccountCategory.UnbanUserAsync(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AccountCategory.GetBannedAsync(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AccountCategory.GetInfoAsync(VkNet.Enums.Filters.AccountFields)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AccountCategory.SetInfoAsync(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AccountCategory.ChangePasswordAsync(System.String,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AccountCategory.GetProfileInfoAsync">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AccountCategory.SaveProfileInfoAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AccountCategory.SaveProfileInfoAsync(VkNet.Model.RequestParams.AccountSaveProfileInfoParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AccountCategory.GetPrivacySettingsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AccountCategory.SetPrivacyAsync(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Categories.AdsCategory">
            <inheritdoc/>
            <inheritdoc />
        </member>
        <member name="F:VkNet.Categories.AdsCategory._vk">
            <summary>
            API.
            </summary>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.#ctor(VkNet.Abstractions.IVkApiInvoke)">
            <inheritdoc/>
            <param name = "api">
            Api vk.com
            </param>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.AddOfficeUsers(System.Int64,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.CheckLink(System.Int64,VkNet.Enums.SafetyEnums.AdsLinkType,System.String,System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.CreateAds(System.Int64,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.CreateCampaigns(System.Int64,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.CreateClients(System.Int64,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.CreateLookalikeRequest(System.Int64,System.String,System.Nullable{System.Int64},System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.CreateTargetGroup(VkNet.Model.RequestParams.Ads.CreateTargetGroupParams)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.CreateTargetPixel(System.Int64,System.String,System.String,System.Int64,System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.DeleteAds(System.Int64,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.DeleteCampaigns(System.Int64,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.DeleteClients(System.Int64,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.DeleteTargetGroup(System.Int64,System.Int64,System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.DeleteTargetPixel(System.Int64,System.Int64,System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetAccounts">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetAds(VkNet.Model.RequestParams.Ads.GetAdsParams)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetAdsLayout(VkNet.Model.RequestParams.Ads.GetAdsLayoutParams)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetAdsTargeting(VkNet.Model.RequestParams.Ads.GetAdsTargetingParams)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetBudget(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetCampaigns(System.Int64,System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetCategories(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetClients(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetDemographics(VkNet.Model.RequestParams.Ads.GetDemographicsParams)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetFloodStats(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetLookalikeRequests(VkNet.Model.RequestParams.Ads.GetLookalikeRequestsParams)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetOfficeUsers(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetPostsReach(System.Int64,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetRejectionReason(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetStatistics(VkNet.Model.RequestParams.Ads.GetStatisticsParams)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetSuggestions(VkNet.Model.RequestParams.Ads.GetSuggestionsParams)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetTargetGroups(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetTargetPixels(System.Int64,System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetTargetingStats(VkNet.Model.RequestParams.Ads.GetTargetingStatsParams)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetUploadUrl(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetVideoUploadUrl">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.ImportTargetContacts(System.Int64,System.Int64,System.String,System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.RemoveOfficeUsers(System.Int64,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.RemoveTargetContacts(System.Int64,System.Int64,System.String,System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.SaveLookalikeRequestResult(System.Int64,System.Int64,System.Int64,System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.ShareTargetGroup(System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.UpdateAds(System.Int64,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.UpdateCampaigns(System.Int64,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.UpdateClients(System.Int64,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.UpdateTargetGroup(VkNet.Model.RequestParams.Ads.UpdateTargetGroupParams)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.UpdateTargetPixel(VkNet.Model.RequestParams.Ads.UpdateTargetPixelParams)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.AddOfficeUsersAsync(System.Int64,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.CheckLinkAsync(System.Int64,VkNet.Enums.SafetyEnums.AdsLinkType,System.String,System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.CreateAdsAsync(System.Int64,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.CreateCampaignsAsync(System.Int64,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.CreateClientsAsync(System.Int64,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.CreateLookalikeRequestAsync(System.Int64,System.String,System.Nullable{System.Int64},System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.CreateTargetGroupAsync(VkNet.Model.RequestParams.Ads.CreateTargetGroupParams)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.CreateTargetPixelAsync(System.Int64,System.String,System.String,System.Int64,System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.DeleteAdsAsync(System.Int64,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.DeleteCampaignsAsync(System.Int64,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.DeleteClientsAsync(System.Int64,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.DeleteTargetGroupAsync(System.Int64,System.Int64,System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.DeleteTargetPixelAsync(System.Int64,System.Int64,System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetAccountsAsync">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetAdsAsync(VkNet.Model.RequestParams.Ads.GetAdsParams)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetAdsLayoutAsync(VkNet.Model.RequestParams.Ads.GetAdsLayoutParams)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetAdsTargetingAsync(VkNet.Model.RequestParams.Ads.GetAdsTargetingParams)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetBudgetAsync(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetCampaignsAsync(System.Int64,System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetCategoriesAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetClientsAsync(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetDemographicsAsync(VkNet.Model.RequestParams.Ads.GetDemographicsParams)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetFloodStatsAsync(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetLookalikeRequestsAsync(VkNet.Model.RequestParams.Ads.GetLookalikeRequestsParams)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetOfficeUsersAsync(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetPostsReachAsync(System.Int64,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetRejectionReasonAsync(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetStatisticsAsync(VkNet.Model.RequestParams.Ads.GetStatisticsParams)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetSuggestionsAsync(VkNet.Model.RequestParams.Ads.GetSuggestionsParams)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetTargetGroupsAsync(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetTargetPixelsAsync(System.Int64,System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetTargetingStatsAsync(VkNet.Model.RequestParams.Ads.GetTargetingStatsParams)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetUploadUrlAsync(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.GetVideoUploadUrlAsync">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.ImportTargetContactsAsync(System.Int64,System.Int64,System.String,System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.RemoveOfficeUsersAsync(System.Int64,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.RemoveTargetContactsAsync(System.Int64,System.Int64,System.String,System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.SaveLookalikeRequestResultAsync(System.Int64,System.Int64,System.Int64,System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.ShareTargetGroupAsync(System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.UpdateAdsAsync(System.Int64,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.UpdateCampaignsAsync(System.Int64,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.UpdateClientsAsync(System.Int64,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.UpdateTargetGroupAsync(VkNet.Model.RequestParams.Ads.UpdateTargetGroupParams)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AdsCategory.UpdateTargetPixelAsync(VkNet.Model.RequestParams.Ads.UpdateTargetPixelParams)">
            <inheritdoc/>
        </member>
        <member name="T:VkNet.Categories.AppsCategory">
            <summary>
            Методы для работы с приложениями.
            </summary>
            <inheritdoc />
        </member>
        <member name="F:VkNet.Categories.AppsCategory._vk">
            <summary>
            API.
            </summary>
        </member>
        <member name="M:VkNet.Categories.AppsCategory.#ctor(VkNet.Abstractions.IVkApiInvoke)">
            <summary>
            Методы для работы с приложениями.
            </summary>
            <param name="vk"> API. </param>
        </member>
        <member name="M:VkNet.Categories.AppsCategory.GetCatalog(VkNet.Model.RequestParams.AppGetCatalogParams,System.Boolean)">
            <summary>
            Возвращает список приложений, доступных для пользователей сайта через каталог
            приложений.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            После успешного выполнения возвращает общее число найденных приложений и массив
            объектов приложений.
            </returns>
            <remarks>
            К методу можно делать не более 60 запросов в минуту с одного IP или id.
            Страница документации ВКонтакте http://vk.com/dev/apps.getCatalog
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AppsCategory.Get(VkNet.Model.RequestParams.AppGetParams,System.Boolean)">
            <summary>
            Возвращает данные о запрошенном приложении на платформе ВКонтакте
            </summary>
            <param name="params"> Параметры запроса. </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            После успешного выполнения возвращает объект приложения.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/apps.get
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AppsCategory.SendRequest(VkNet.Model.RequestParams.AppSendRequestParams)">
            <summary>
            Позволяет отправить запрос другому пользователю в приложении, использующем
            авторизацию ВКонтакте.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            В случае удачного выполнения метод возвращает идентификатор созданного запроса,
            например:
            10013.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/apps.sendRequest
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AppsCategory.DeleteAppRequests">
            <summary>
            Удаляет все уведомления о запросах, отправленных из текущего приложения.
            </summary>
            <returns>
            В случае успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/apps.deleteAppRequests
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AppsCategory.GetFriendsList(VkNet.Enums.SafetyEnums.AppRequestType,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Int64},VkNet.Enums.Filters.UsersFields)">
            <summary>
            Создает список друзей, который будет использоваться при отправке пользователем
            приглашений в приложение.
            </summary>
            <param name="type"> Tип создаваемого списка друзей. </param>
            <param name="extended">
            Параметр, определяющий необходимость возвращать расширенную информацию о
            пользователях.
            0 — возвращаются только идентификаторы;
            1 — будут дополнительно возвращены имя и фамилия. флаг, может принимать
            значения 1 или 0, по умолчанию 0 (Флаг,
            может принимать значения 1 или 0, по умолчанию 0).
            </param>
            <param name="count"> Количество пользователей в создаваемом списке. </param>
            <param name="offset">
            Смещение относительно первого пользователя для выборки определенного
            подмножества.
            </param>
            <param name="fields">
            Список дополнительных полей профилей, которые необходимо вернуть. См. подробное
            описание.
            </param>
            <returns>
            После успешного выполнения возвращает список пользователей.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/apps.getFriendsList
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AppsCategory.GetLeaderboard(VkNet.Enums.SafetyEnums.AppRatingType,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Возвращает рейтинг пользователей в игре.
            </summary>
            <param name="type">
            Level — рейтинг по уровням,
            points — рейтинг по очкам, начисленным за выполнение миссий.
            score — рейтинг по очкам, начисленным напрямую (apps.getScore). строка,
            обязательный параметр (Строка, обязательный
            параметр).
            </param>
            <param name="global">
            1 — глобальный рейтинг по всем игрокам,
            0 — рейтинг по друзьям пользователя флаг, может принимать значения 1 или 0, по
            умолчанию 1 (Флаг, может принимать
            значения 1 или 0, по умолчанию 1).
            </param>
            <param name="extended">
            1 — дополнительно возвращает информацию о пользователе. флаг, может принимать
            значения 1 или 0,
            по умолчанию 0 (Флаг, может принимать значения 1 или 0, по умолчанию 0).
            </param>
            <returns>
            После успешного выполнения возвращает список друзей с текущим уровнем и
            количеством очков в игре, отсортированный
            по убыванию текущего уровня или количества очков.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/apps.getLeaderboard
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AppsCategory.GetScore(System.Int64)">
            <summary>
            Метод возвращает количество очков пользователя в этой игре.
            </summary>
            <param name="userId">
            Идентификатор пользователя. положительное число, по умолчанию идентификатор
            текущего пользователя,
            обязательный параметр (Положительное число, по умолчанию идентификатор текущего
            пользователя, обязательный
            параметр).
            </param>
            <returns>
            После успешного выполнения возвращает число очков для пользователя.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/apps.getScore
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AppsCategory.GetCatalogAsync(VkNet.Model.RequestParams.AppGetCatalogParams,System.Boolean)">
            <summary>
            Возвращает список приложений, доступных для пользователей сайта через каталог
            приложений.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            После успешного выполнения возвращает общее число найденных приложений и массив
            объектов приложений.
            </returns>
            <remarks>
            К методу можно делать не более 60 запросов в минуту с одного IP или id.
            Страница документации ВКонтакте http://vk.com/dev/apps.getCatalog
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AppsCategory.GetAsync(VkNet.Model.RequestParams.AppGetParams,System.Boolean)">
            <summary>
            Возвращает данные о запрошенном приложении на платформе ВКонтакте
            </summary>
            <param name="params"> Параметры запроса. </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            После успешного выполнения возвращает объект приложения.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/apps.get
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AppsCategory.SendRequestAsync(VkNet.Model.RequestParams.AppSendRequestParams)">
            <summary>
            Позволяет отправить запрос другому пользователю в приложении, использующем
            авторизацию ВКонтакте.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            В случае удачного выполнения метод возвращает идентификатор созданного запроса,
            например:
            10013.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/apps.sendRequest
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AppsCategory.DeleteAppRequestsAsync">
            <summary>
            Удаляет все уведомления о запросах, отправленных из текущего приложения.
            </summary>
            <returns>
            В случае успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/apps.deleteAppRequests
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AppsCategory.GetFriendsListAsync(VkNet.Enums.SafetyEnums.AppRequestType,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Int64},VkNet.Enums.Filters.UsersFields)">
            <summary>
            Создает список друзей, который будет использоваться при отправке пользователем
            приглашений в приложение.
            </summary>
            <param name="type"> Tип создаваемого списка друзей. </param>
            <param name="extended">
            Параметр, определяющий необходимость возвращать расширенную информацию о
            пользователях.
            0 — возвращаются только идентификаторы;
            1 — будут дополнительно возвращены имя и фамилия. флаг, может принимать
            значения 1 или 0, по умолчанию 0
            Async(Флаг, может принимать значения 1 или 0, по умолчанию 0).
            </param>
            <param name="count"> Количество пользователей в создаваемом списке. </param>
            <param name="offset">
            Смещение относительно первого пользователя для выборки определенного
            подмножества.
            </param>
            <param name="fields">
            Список дополнительных полей профилей, которые необходимо вернуть. См. подробное
            описание.
            </param>
            <returns>
            После успешного выполнения возвращает список пользователей.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/apps.getFriendsList
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AppsCategory.GetLeaderboardAsync(VkNet.Enums.SafetyEnums.AppRatingType,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Возвращает рейтинг пользователей в игре.
            </summary>
            <param name="type">
            Level — рейтинг по уровням,
            points — рейтинг по очкам, начисленным за выполнение миссий.
            score — рейтинг по очкам, начисленным напрямую Async(apps.getScore). строка,
            обязательный параметр Async(Строка,
            обязательный параметр).
            </param>
            <param name="global">
            1 — глобальный рейтинг по всем игрокам,
            0 — рейтинг по друзьям пользователя флаг, может принимать значения 1 или 0, по
            умолчанию 1 Async(Флаг, может
            принимать значения 1 или 0, по умолчанию 1).
            </param>
            <param name="extended">
            1 — дополнительно возвращает информацию о пользователе. флаг, может принимать
            значения 1 или 0,
            по умолчанию 0 Async(Флаг, может принимать значения 1 или 0, по умолчанию 0).
            </param>
            <returns>
            После успешного выполнения возвращает список друзей с текущим уровнем и
            количеством очков в игре, отсортированный
            по убыванию текущего уровня или количества очков.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/apps.getLeaderboard
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AppsCategory.GetScoreAsync(System.Int64)">
            <summary>
            Метод возвращает количество очков пользователя в этой игре.
            </summary>
            <param name="userId">
            Идентификатор пользователя. положительное число, по умолчанию идентификатор
            текущего пользователя,
            обязательный параметр Async(Положительное число, по умолчанию идентификатор
            текущего пользователя, обязательный
            параметр).
            </param>
            <returns>
            После успешного выполнения возвращает число очков для пользователя.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/apps.getScore
            </remarks>
        </member>
        <member name="T:VkNet.Categories.AppWidgetsCategory">
            <inheritdoc/>
            <inheritdoc/>
        </member>
        <member name="F:VkNet.Categories.AppWidgetsCategory._vk">
            <summary>
            API.
            </summary>
        </member>
        <member name="M:VkNet.Categories.AppWidgetsCategory.#ctor(VkNet.Abstractions.IVkApiInvoke)">
            <inheritdoc/>
            <param name = "api">
            Api vk.com
            </param>
        </member>
        <member name="M:VkNet.Categories.AppWidgetsCategory.GetAppImageUploadServer(VkNet.Enums.SafetyEnums.AppWidgetImageType)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AppWidgetsCategory.GetAppImages(System.Int32,System.Int32,VkNet.Enums.SafetyEnums.AppWidgetImageType)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AppWidgetsCategory.GetGroupImageUploadServer(VkNet.Enums.SafetyEnums.AppWidgetImageType)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AppWidgetsCategory.GetGroupImages(System.Int32,System.Int32,VkNet.Enums.SafetyEnums.AppWidgetImageType)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AppWidgetsCategory.GetImagesById(System.String)">
            <param name="images"></param>
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AppWidgetsCategory.SaveAppImage(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AppWidgetsCategory.SaveGroupImage">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AppWidgetsCategory.Update">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AppWidgetsCategory.GetAppImageUploadServerAsync(VkNet.Enums.SafetyEnums.AppWidgetImageType)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AppWidgetsCategory.GetAppImagesAsync(System.Int32,System.Int32,VkNet.Enums.SafetyEnums.AppWidgetImageType)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AppWidgetsCategory.GetGroupImageUploadServerAsync(VkNet.Enums.SafetyEnums.AppWidgetImageType)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AppWidgetsCategory.GetGroupImagesAsync(System.Int32,System.Int32,VkNet.Enums.SafetyEnums.AppWidgetImageType)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AppWidgetsCategory.GetImagesByIdAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AppWidgetsCategory.SaveAppImageAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AppWidgetsCategory.SaveGroupImageAsync">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.AppWidgetsCategory.UpdateAsync">
            <inheritdoc/>
        </member>
        <member name="T:VkNet.Categories.AudioCategory">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.AddAsync(System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.CreatePlaylistAsync(System.Int64,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.DeleteAsync(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.DeletePlaylistAsync(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.EditAsync(VkNet.Model.RequestParams.AudioEditParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.EditPlaylistAsync(System.Int64,System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.GetAsync(VkNet.Model.RequestParams.AudioGetParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.GetPlaylistsAsync(System.Int64,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.GetPlaylistByIdAsync(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.GetBroadcastListAsync(VkNet.Enums.Filters.AudioBroadcastFilter,System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.GetByIdAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.GetCountAsync(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.GetLyricsAsync(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.GetPopularAsync(System.Boolean,System.Nullable{VkNet.Enums.AudioGenre},System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.GetRecommendationsAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.GetUploadServerAsync">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.AddToPlaylistAsync(System.Int64,System.Int64,System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.ReorderAsync(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.RestoreAsync(System.Int64,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.SaveAsync(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.SearchAsync(VkNet.Model.RequestParams.AudioSearchParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.SetBroadcastAsync(System.String,System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.#ctor(VkNet.Abstractions.IVkApiInvoke)">
            <summary>
            Методы для работы с аудиозаписями.
            </summary>
            <param name="vk"> Api vk.com </param>
        </member>
        <member name="M:VkNet.Categories.AudioCategory.Add(System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.CreatePlaylist(System.Int64,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.Delete(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.DeletePlaylist(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.Edit(VkNet.Model.RequestParams.AudioEditParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.EditPlaylist(System.Int64,System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.Get(VkNet.Model.RequestParams.AudioGetParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.GetPlaylists(System.Int64,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.GetBroadcastList(VkNet.Enums.Filters.AudioBroadcastFilter,System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.GetById(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.GetCount(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.GetLyrics(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.GetPopular(System.Boolean,System.Nullable{VkNet.Enums.AudioGenre},System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.GetRecommendations(System.String,System.Nullable{System.Int64},System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.GetUploadServer">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.AddToPlaylist(System.Int64,System.Int64,System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.Reorder(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.Restore(System.Int64,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.Save(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.Search(VkNet.Model.RequestParams.AudioSearchParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.AudioCategory.SetBroadcast(System.String,System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Categories.AuthCategory">
            <inheritdoc />
            <summary>
            Методы для работы с авторизацией.
            </summary>
        </member>
        <member name="M:VkNet.Categories.AuthCategory.CheckPhoneAsync(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <summary>
            Проверяет правильность введённого номера.
            </summary>
            <param name="phone">
            Номер телефона регистрируемого пользователя. строка, обязательный параметр
            (Строка, обязательный
            параметр).
            </param>
            <param name="clientId">
            Идентификатор Вашего приложения. целое число (Целое
            число).
            </param>
            <param name="clientSecret">
            Секретный ключ приложения, доступный в разделе редактирования приложения.
            строка,
            обязательный параметр (Строка, обязательный параметр).
            </param>
            <param name="authByPhone">
            Флаг, может принимать значения 1 или 0 (Флаг, может
            принимать значения 1 или 0).
            </param>
            <returns>
            В случае, если номер пользователя является правильным, будет возвращён
            <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/auth.checkPhone
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AuthCategory.SignupAsync(VkNet.Model.RequestParams.AuthSignupParams)">
            <summary>
            Регистрирует нового пользователя по номеру телефона.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            Возвращает результат выполнения метода.
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/auth.signup
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AuthCategory.ConfirmAsync(VkNet.Model.RequestParams.AuthConfirmParams)">
            <summary>
            Завершает регистрацию нового пользователя, начатую методом auth.signup, по
            коду, полученному через SMS.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            Возвращает результат выполнения метода.
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/auth.confirm
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AuthCategory.RestoreAsync(System.String,System.String)">
            <summary>
            Позволяет восстановить доступ к аккаунту, используя код, полученный через SMS.
            </summary>
            <param name="phone"> Номер телефона пользователя. </param>
            <param name="lastName"> Фамилия пользователя. </param>
            <returns>
            Возвращает результат выполнения метода.
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/auth.restore
            </remarks>
        </member>
        <member name="F:VkNet.Categories.AuthCategory._vk">
            <summary>
            API.
            </summary>
        </member>
        <member name="M:VkNet.Categories.AuthCategory.#ctor(VkNet.Abstractions.IVkApiInvoke)">
            <summary>
            Методы для работы с подарками.
            </summary>
            <param name="vk"> API. </param>
        </member>
        <member name="M:VkNet.Categories.AuthCategory.CheckPhone(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <summary>
            Проверяет правильность введённого номера.
            </summary>
            <param name="phone">
            Номер телефона регистрируемого пользователя. строка, обязательный параметр
            (Строка, обязательный
            параметр).
            </param>
            <param name="clientId">
            Идентификатор Вашего приложения. целое число (Целое
            число).
            </param>
            <param name="clientSecret">
            Секретный ключ приложения, доступный в разделе редактирования приложения.
            строка,
            обязательный параметр (Строка, обязательный параметр).
            </param>
            <param name="authByPhone">
            Флаг, может принимать значения 1 или 0 (Флаг, может
            принимать значения 1 или 0).
            </param>
            <returns>
            В случае, если номер пользователя является правильным, будет возвращён
            <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/auth.checkPhone
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AuthCategory.Signup(VkNet.Model.RequestParams.AuthSignupParams)">
            <summary>
            Регистрирует нового пользователя по номеру телефона.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            Возвращает результат выполнения метода.
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/auth.signup
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AuthCategory.Confirm(VkNet.Model.RequestParams.AuthConfirmParams)">
            <summary>
            Завершает регистрацию нового пользователя, начатую методом auth.signup, по
            коду, полученному через SMS.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            Возвращает результат выполнения метода.
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/auth.confirm
            </remarks>
        </member>
        <member name="M:VkNet.Categories.AuthCategory.Restore(System.String,System.String)">
            <summary>
            Позволяет восстановить доступ к аккаунту, используя код, полученный через SMS.
            </summary>
            <param name="phone"> Номер телефона пользователя. </param>
            <param name="lastName"> Фамилия пользователя. </param>
            <returns>
            Возвращает результат выполнения метода.
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/auth.restore
            </remarks>
        </member>
        <member name="T:VkNet.Categories.BoardCategory">
            <summary>
            Асинхронные методы для работы со темами группы.
            </summary>
            <summary>
            Методы для работы со темами группы.
            </summary>
        </member>
        <member name="M:VkNet.Categories.BoardCategory.GetTopicsAsync(VkNet.Model.RequestParams.BoardGetTopicsParams,System.Boolean)">
            <summary>
            Возвращает список тем в обсуждениях указанной группы.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <param name="skipAuthorization"> Если <c> true </c> то пропустить авторизацию. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте
            <see href="https://new.vk.com/dev/board.getTopics" />.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.BoardCategory.GetCommentsAsync(VkNet.Model.RequestParams.BoardGetCommentsParams,System.Boolean)">
            <summary>
            Возвращает список сообщений в указанной теме.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <param name="skipAuthorization"> Если <c> true </c> то пропустить авторизацию. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте
            <see href="https://new.vk.com/dev/board.getComments" />.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.BoardCategory.AddTopicAsync(VkNet.Model.RequestParams.BoardAddTopicParams)">
            <summary>
            Создает новую тему в списке обсуждений группы.
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/board.addTopic
            </remarks>
        </member>
        <member name="M:VkNet.Categories.BoardCategory.DeleteTopicAsync(VkNet.Model.RequestParams.BoardTopicParams)">
            <summary>
            Удаляет тему в обсуждениях группы.
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/board.deleteTopic
            </remarks>
        </member>
        <member name="M:VkNet.Categories.BoardCategory.CloseTopicAsync(VkNet.Model.RequestParams.BoardTopicParams)">
            <summary>
            Закрывает тему в списке обсуждений группы (в такой теме невозможно оставлять
            новые сообщения).
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/board.closeTopic
            </remarks>
        </member>
        <member name="M:VkNet.Categories.BoardCategory.OpenTopicAsync(VkNet.Model.RequestParams.BoardTopicParams)">
            <summary>
            Открывает ранее закрытую тему (в ней станет возможно оставлять новые
            сообщения).
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/board.openTopic
            </remarks>
        </member>
        <member name="M:VkNet.Categories.BoardCategory.FixTopicAsync(VkNet.Model.RequestParams.BoardTopicParams)">
            <summary>
            Закрепляет тему в списке обсуждений группы (такая тема при любой сортировке
            выводится выше остальных).
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/board.fixTopic
            </remarks>
        </member>
        <member name="M:VkNet.Categories.BoardCategory.UnFixTopicAsync(VkNet.Model.RequestParams.BoardTopicParams)">
            <summary>
            Отменяет прикрепление темы в списке обсуждений группы (тема будет выводиться
            согласно выбранной сортировке).
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/board.unfixTopic
            </remarks>
        </member>
        <member name="M:VkNet.Categories.BoardCategory.EditTopicAsync(VkNet.Model.RequestParams.BoardEditTopicParams)">
            <summary>
            Изменяет заголовок темы в списке обсуждений группы.
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/board.editTopic
            </remarks>
        </member>
        <member name="M:VkNet.Categories.BoardCategory.CreateCommentAsync(VkNet.Model.RequestParams.BoardCreateCommentParams)">
            <summary>
            Добавляет новый комментарий в обсуждении.
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте
            <see href="https://new.vk.com/dev/board.createComment" />.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.BoardCategory.DeleteCommentAsync(VkNet.Model.RequestParams.BoardCommentParams)">
            <summary>
            Удаляет сообщение в обсуждениях сообщества.
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте
            <see href="https://new.vk.com/dev/board.deleteComment" />.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.BoardCategory.EditCommentAsync(VkNet.Model.RequestParams.BoardEditCommentParams)">
            <summary>
            Редактирует одно из сообщений в обсуждении сообщества..
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/board.editComment
            </remarks>
        </member>
        <member name="M:VkNet.Categories.BoardCategory.RestoreCommentAsync(VkNet.Model.RequestParams.BoardCommentParams)">
            <summary>
            Восстанавливает удаленное сообщение темы в обсуждениях группы.
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/board.restoreComment
            </remarks>
        </member>
        <member name="M:VkNet.Categories.BoardCategory.#ctor(VkNet.Abstractions.IVkApiInvoke)">
            <summary>
            </summary>
            <param name="vk"> </param>
        </member>
        <member name="M:VkNet.Categories.BoardCategory.GetTopics(VkNet.Model.RequestParams.BoardGetTopicsParams,System.Boolean)">
            <summary>
            Возвращает список тем в обсуждениях указанной группы.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <param name="skipAuthorization"> Если <c> true </c> то пропустить авторизацию. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте
            <see href="https://new.vk.com/dev/board.getTopics" />.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.BoardCategory.GetComments(VkNet.Model.RequestParams.BoardGetCommentsParams,System.Boolean)">
            <summary>
            Возвращает список сообщений в указанной теме.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <param name="skipAuthorization"> Если <c> true </c> то пропустить авторизацию. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте
            <see href="https://new.vk.com/dev/board.getComments" />.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.BoardCategory.AddTopic(VkNet.Model.RequestParams.BoardAddTopicParams)">
            <summary>
            Создает новую тему в списке обсуждений группы.
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/board.addTopic
            </remarks>
        </member>
        <member name="M:VkNet.Categories.BoardCategory.DeleteTopic(VkNet.Model.RequestParams.BoardTopicParams)">
            <summary>
            Удаляет тему в обсуждениях группы.
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/board.deleteTopic
            </remarks>
        </member>
        <member name="M:VkNet.Categories.BoardCategory.CloseTopic(VkNet.Model.RequestParams.BoardTopicParams)">
            <summary>
            Закрывает тему в списке обсуждений группы (в такой теме невозможно оставлять
            новые сообщения).
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/board.closeTopic
            </remarks>
        </member>
        <member name="M:VkNet.Categories.BoardCategory.OpenTopic(VkNet.Model.RequestParams.BoardTopicParams)">
            <summary>
            Открывает ранее закрытую тему (в ней станет возможно оставлять новые
            сообщения).
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/board.openTopic
            </remarks>
        </member>
        <member name="M:VkNet.Categories.BoardCategory.FixTopic(VkNet.Model.RequestParams.BoardTopicParams)">
            <summary>
            Закрепляет тему в списке обсуждений группы (такая тема при любой сортировке
            выводится выше остальных).
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/board.fixTopic
            </remarks>
        </member>
        <member name="M:VkNet.Categories.BoardCategory.UnFixTopic(VkNet.Model.RequestParams.BoardTopicParams)">
            <summary>
            Отменяет прикрепление темы в списке обсуждений группы (тема будет выводиться
            согласно выбранной сортировке).
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/board.unfixTopic
            </remarks>
        </member>
        <member name="M:VkNet.Categories.BoardCategory.EditTopic(VkNet.Model.RequestParams.BoardEditTopicParams)">
            <summary>
            Изменяет заголовок темы в списке обсуждений группы.
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/board.editTopic
            </remarks>
        </member>
        <member name="M:VkNet.Categories.BoardCategory.CreateComment(VkNet.Model.RequestParams.BoardCreateCommentParams)">
            <summary>
            Добавляет новый комментарий в обсуждении.
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте
            <see href="https://new.vk.com/dev/board.createComment" />.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.BoardCategory.DeleteComment(VkNet.Model.RequestParams.BoardCommentParams)">
            <summary>
            Удаляет сообщение в обсуждениях сообщества.
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте
            <see href="https://new.vk.com/dev/board.deleteComment" />.
            </remarks>
        </member>
        <member name="M:VkNet.Categories.BoardCategory.EditComment(VkNet.Model.RequestParams.BoardEditCommentParams)">
            <summary>
            Редактирует одно из сообщений в обсуждении сообщества..
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/board.editComment
            </remarks>
        </member>
        <member name="M:VkNet.Categories.BoardCategory.RestoreComment(VkNet.Model.RequestParams.BoardCommentParams)">
            <summary>
            Восстанавливает удаленное сообщение темы в обсуждениях группы.
            </summary>
            <param name="params"> Входные параметры. </param>
            <returns>
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/board.restoreComment
            </remarks>
        </member>
        <member name="T:VkNet.Categories.DatabaseCategory">
            <summary>
            Методы для получения справочной информации (страны, города, школы, учебные
            заведения и т.п.).
            </summary>
        </member>
        <member name="M:VkNet.Categories.DatabaseCategory.GetCountriesAsync(System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{VkNet.Enums.Iso3166},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DatabaseCategory.GetRegionsAsync(System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DatabaseCategory.GetStreetsByIdAsync(System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DatabaseCategory.GetCountriesByIdAsync(System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DatabaseCategory.GetCitiesAsync(VkNet.Model.RequestParams.Database.GetCitiesParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DatabaseCategory.GetCitiesByIdAsync(System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DatabaseCategory.GetUniversitiesAsync(System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DatabaseCategory.GetSchoolsAsync(System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DatabaseCategory.GetFacultiesAsync(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DatabaseCategory.GetSchoolClassesAsync(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DatabaseCategory.GetChairsAsync(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DatabaseCategory.GetMetroStationsByIdAsync(System.Collections.Generic.IEnumerable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DatabaseCategory.GetMetroStationsAsync(System.UInt64,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DatabaseCategory.#ctor(VkNet.Abstractions.IVkApiInvoke)">
            <summary>
            </summary>
            <param name="vk"> </param>
        </member>
        <member name="M:VkNet.Categories.DatabaseCategory.GetCountries(System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{VkNet.Enums.Iso3166},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DatabaseCategory.GetRegions(System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DatabaseCategory.GetStreetsById(System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DatabaseCategory.GetCountriesById(System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DatabaseCategory.GetCities(VkNet.Model.RequestParams.Database.GetCitiesParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DatabaseCategory.GetCitiesById(System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DatabaseCategory.GetUniversities(System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DatabaseCategory.GetSchools(System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DatabaseCategory.GetFaculties(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DatabaseCategory.GetSchoolClasses(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DatabaseCategory.GetChairs(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DatabaseCategory.GetMetroStationsById(System.Collections.Generic.IEnumerable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DatabaseCategory.GetMetroStations(System.UInt64,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Categories.DocsCategory">
            <inheritdoc />
            <summary>
            Методы для работы с документами (получение списка, загрузка, удаление и т.д.)
            </summary>
        </member>
        <member name="M:VkNet.Categories.DocsCategory.GetAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{VkNet.Enums.DocFilter})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DocsCategory.GetByIdAsync(System.Collections.Generic.IEnumerable{VkNet.Model.Attachments.Document})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DocsCategory.GetUploadServerAsync(System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DocsCategory.GetWallUploadServerAsync(System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DocsCategory.SaveAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DocsCategory.DeleteAsync(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DocsCategory.AddAsync(System.Int64,System.Int64,System.String,System.Nullable{System.Int64},System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DocsCategory.GetTypesAsync(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DocsCategory.SearchAsync(System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DocsCategory.EditAsync(System.Int64,System.Int64,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DocsCategory.GetMessagesUploadServerAsync(System.Nullable{System.Int64},VkNet.Enums.SafetyEnums.DocMessageType)">
            <inheritdoc />
        </member>
        <member name="F:VkNet.Categories.DocsCategory._vk">
            <summary>
            API
            </summary>
        </member>
        <member name="M:VkNet.Categories.DocsCategory.#ctor(VkNet.Abstractions.IVkApiInvoke)">
            <summary>
            Методы для работы с документами (получение списка, загрузка, удаление и т.д.).
            </summary>
            <param name="vk"> API. </param>
        </member>
        <member name="M:VkNet.Categories.DocsCategory.Get(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{VkNet.Enums.DocFilter})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DocsCategory.GetById(System.Collections.Generic.IEnumerable{VkNet.Model.Attachments.Document})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DocsCategory.GetUploadServer(System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DocsCategory.GetWallUploadServer(System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DocsCategory.Save(System.String,System.String,System.String,System.Nullable{System.Int64},System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DocsCategory.Delete(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DocsCategory.Add(System.Int64,System.Int64,System.String,System.Nullable{System.Int64},System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DocsCategory.GetTypes(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DocsCategory.Search(System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DocsCategory.Edit(System.Int64,System.Int64,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.DocsCategory.GetMessagesUploadServer(System.Nullable{System.Int64},VkNet.Enums.SafetyEnums.DocMessageType)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Categories.ExecuteCategory">
            <summary>
            Методы для работы с универсальным методом.
            </summary>
            <summary>
            Методы этого класса позволяют производить действия с универсальным методом.
            </summary>
        </member>
        <member name="F:VkNet.Categories.ExecuteCategory._vk">
            <summary>
            API.
            </summary>
        </member>
        <member name="M:VkNet.Categories.ExecuteCategory.#ctor(VkNet.Abstractions.IVkApi)">
            <summary>
            Методы для работы с универсальным методом.
            </summary>
            <param name="vk"> API. </param>
        </member>
        <member name="M:VkNet.Categories.ExecuteCategory.ExecuteAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.ExecuteCategory.ExecuteAsync``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.ExecuteCategory.StoredProcedureAsync``1(System.String,VkNet.Utils.VkParameters)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.ExecuteCategory.Execute(System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.ExecuteCategory.Execute``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.ExecuteCategory.StoredProcedure``1(System.String,VkNet.Utils.VkParameters)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Categories.FaveCategory">
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FaveCategory.AddArticleAsync(System.Uri,System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.AddLinkAsync(System.Uri)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.AddPageAsync(System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.AddPostAsync(VkNet.Model.RequestParams.Fave.FaveAddPostParams)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.AddProductAsync(System.Int64,System.Int64,System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.AddTagAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.AddVideoAsync(System.Int64,System.Int64,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.EditTagAsync(System.Int64,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.GetAsync(VkNet.Model.RequestParams.Fave.FaveGetParams)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.GetPagesAsync(VkNet.Enums.SafetyEnums.FavePageType,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.GetTagsAsync">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.MarkSeenAsync">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.RemoveArticleAsync(System.Int64,System.UInt64,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.RemoveLinkAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.RemovePageAsync(System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.RemovePostAsync(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.RemoveProductAsync(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.RemoveTagAsync(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.RemoveVideoAsync(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.ReorderTagsAsync(System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.SetPageTagsAsync(System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.SetTagsAsync(VkNet.Model.RequestParams.Fave.FaveSetTagsParams)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.TrackPageInteractionAsync(System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.GetUsersAsync(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FaveCategory.GetPhotosAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FaveCategory.GetPostsAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FaveCategory.GetVideosAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FaveCategory.GetLinksAsync(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FaveCategory.AddUserAsync(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FaveCategory.RemoveUserAsync(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FaveCategory.AddGroupAsync(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FaveCategory.RemoveGroupAsync(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FaveCategory.AddLinkAsync(System.Uri,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FaveCategory.GetMarketItemsAsync(System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="F:VkNet.Categories.FaveCategory._vk">
            <summary>
            API
            </summary>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.#ctor(VkNet.Abstractions.IVkApiInvoke)">
            <summary>
            Методы для работы с закладками.
            </summary>
            <param name="vk"> API. </param>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.AddArticle(System.Uri,System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.AddLink(System.Uri)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.AddPage(System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.AddPost(VkNet.Model.RequestParams.Fave.FaveAddPostParams)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.AddProduct(System.Int64,System.Int64,System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.AddTag(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.AddVideo(System.Int64,System.Int64,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.EditTag(System.Int64,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.Get(VkNet.Model.RequestParams.Fave.FaveGetParams)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.GetPages(VkNet.Enums.SafetyEnums.FavePageType,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.GetTags">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.MarkSeen">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.RemoveArticle(System.Int64,System.UInt64,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.RemoveLink(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.RemovePage(System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.RemovePost(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.RemoveProduct(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.RemoveTag(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.RemoveVideo(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.ReorderTags(System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.SetPageTags(System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.SetTags(VkNet.Model.RequestParams.Fave.FaveSetTagsParams)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.TrackPageInteraction(System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.FaveCategory.GetUsers(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FaveCategory.GetPhotos(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FaveCategory.GetPosts(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FaveCategory.GetVideos(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FaveCategory.GetLinks(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FaveCategory.AddUser(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FaveCategory.RemoveUser(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FaveCategory.AddGroup(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FaveCategory.RemoveGroup(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FaveCategory.AddLink(System.Uri,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FaveCategory.GetMarketItems(System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Categories.FriendsCategory">
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.GetAsync(VkNet.Model.RequestParams.FriendsGetParams,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.GetAppUsersAsync">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.GetOnlineAsync(VkNet.Model.RequestParams.FriendsGetOnlineParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.GetMutualAsync(VkNet.Model.RequestParams.FriendsGetMutualParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.AreFriendsAsync(System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.AddListAsync(System.String,System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.DeleteListAsync(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.GetListsAsync(System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.EditListAsync(System.Int64,System.String,System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.DeleteAllRequestsAsync">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.AddAsync(System.Int64,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.DeleteAsync(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.EditAsync(System.Int64,System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.GetRecentAsync(System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.GetRequestsAsync(VkNet.Model.RequestParams.FriendsGetRequestsParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.GetRequestsExtendedAsync(VkNet.Model.RequestParams.FriendsGetRequestsParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.GetSuggestionsAsync(VkNet.Enums.SafetyEnums.FriendsFilter,System.Nullable{System.Int64},System.Nullable{System.Int64},VkNet.Enums.Filters.UsersFields,VkNet.Enums.SafetyEnums.NameCase)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.GetByPhonesAsync(System.Collections.Generic.IEnumerable{System.String},VkNet.Enums.Filters.ProfileFields)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.SearchAsync(VkNet.Model.RequestParams.FriendsSearchParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.#ctor(VkNet.Abstractions.IVkApiInvoke)">
            <summary>
            </summary>
            <param name="vk"> </param>
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.Get(VkNet.Model.RequestParams.FriendsGetParams,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.GetAppUsers">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.GetOnline(VkNet.Model.RequestParams.FriendsGetOnlineParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.GetMutual(VkNet.Model.RequestParams.FriendsGetMutualParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.AreFriends(System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.AddList(System.String,System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.DeleteList(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.GetLists(System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.EditList(System.Int64,System.String,System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.DeleteAllRequests">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.Add(System.Int64,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.Delete(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.Edit(System.Int64,System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.GetRecent(System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.GetRequests(VkNet.Model.RequestParams.FriendsGetRequestsParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.GetRequestsExtended(VkNet.Model.RequestParams.FriendsGetRequestsParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.GetSuggestions(VkNet.Enums.SafetyEnums.FriendsFilter,System.Nullable{System.Int64},System.Nullable{System.Int64},VkNet.Enums.Filters.UsersFields,VkNet.Enums.SafetyEnums.NameCase)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.GetByPhones(System.Collections.Generic.IEnumerable{System.String},VkNet.Enums.Filters.ProfileFields)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.Search(VkNet.Model.RequestParams.FriendsSearchParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.AddList(System.String)">
            <summary>
            Создает новый список друзей у текущего пользователя.
            </summary>
            <param name="name"> Название создаваемого списка друзей. </param>
            <returns>
            После успешного выполнения возвращает идентификатор созданного списка
            друзей.
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской,
            содержащей Settings.Friends
            Страница документации ВКонтакте http://vk.com/dev/friends.addList
            </remarks>
        </member>
        <member name="M:VkNet.Categories.FriendsCategory.GetAvailableForCall(VkNet.Enums.Filters.ProfileFields,VkNet.Enums.SafetyEnums.NameCase)">
            <summary>
            Позволяет получить список идентификаторов пользователей, доступных для вызова в
            приложении, используя метод JSAPI
            callUser.
            Подробнее о схеме вызова из приложений.
            </summary>
            <param name="fields">
            Список дополнительных полей, которые необходимо вернуть.
            Доступные значения: nickname, domain, sex, bdate, city, country, timezone,
            photo_50, photo_100, photo_200_orig,
            has_mobile, contacts, education, online, relation, last_seen, status,
            can_write_private_message, can_see_all_posts,
            can_post, universities список строк, разделенных через запятую (Список строк,
            разделенных через запятую).
            </param>
            <param name="nameCase">
            Падеж для склонения имени и фамилии пользователя. Возможные значения:
            именительный – nom,
            родительный – gen, дательный – dat, винительный – acc, творительный – ins,
            предложный – abl. По умолчанию nom.
            строка, по умолчанию Nom (Строка, по умолчанию Nom).
            </param>
            <returns>
            После успешного выполнения возвращает список идентификаторов (id) друзей
            пользователя, доступных для вызова, если
            параметр fields не использовался.
            При использовании параметра fields  возвращает список объектов пользователей.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/friends.getAvailableForCall
            </remarks>
        </member>
        <member name="T:VkNet.Categories.GiftsCategory">
            <inheritdoc />
            <summary>
            Методы для работы с подарками.
            </summary>
        </member>
        <member name="M:VkNet.Categories.GiftsCategory.GetAsync(System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="F:VkNet.Categories.GiftsCategory._vk">
            <summary>
            API.
            </summary>
        </member>
        <member name="M:VkNet.Categories.GiftsCategory.#ctor(VkNet.Abstractions.IVkApiInvoke)">
            <summary>
            Методы для работы с подарками.
            </summary>
            <param name="vk"> API. </param>
        </member>
        <member name="M:VkNet.Categories.GiftsCategory.Get(System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Categories.GroupsCategory">
            <inheritdoc />
            <inheritdoc />
            <summary>
            Методы для работы с сообществами (группами).
            </summary>
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.JoinAsync(System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.LeaveAsync(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetAsync(VkNet.Model.RequestParams.GroupsGetParams,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetByIdAsync(System.Collections.Generic.IEnumerable{System.String},System.String,VkNet.Enums.Filters.GroupsFields,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetMembersAsync(VkNet.Model.RequestParams.GroupsGetMembersParams,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.IsMemberAsync(System.String,System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Boolean},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.SearchAsync(VkNet.Model.RequestParams.GroupsSearchParams,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetInvitesAsync(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.BanUserAsync(VkNet.Model.RequestParams.GroupsBanUserParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetBannedAsync(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},VkNet.Enums.Filters.GroupsFields,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.UnbanUserAsync(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.EditManagerAsync(VkNet.Model.RequestParams.GroupsEditManagerParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetSettingsAsync(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.EditAsync(VkNet.Model.RequestParams.GroupsEditParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.EditPlaceAsync(System.Int64,VkNet.Model.Place)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetInvitedUsersAsync(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},VkNet.Enums.Filters.UsersFields,VkNet.Enums.SafetyEnums.NameCase)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.InviteAsync(System.Int64,System.Int64,System.Nullable{System.Int64},System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.AddLinkAsync(System.Int64,System.Uri,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.DeleteLinkAsync(System.Int64,System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.EditLinkAsync(System.Int64,System.UInt64,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.ReorderLinkAsync(System.Int64,System.Int64,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.RemoveUserAsync(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.ApproveRequestAsync(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.CreateAsync(System.String,System.String,VkNet.Enums.SafetyEnums.GroupType,System.Nullable{VkNet.Enums.Filters.GroupSubType},System.Nullable{System.UInt32})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetRequestsAsync(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},VkNet.Enums.Filters.UsersFields)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetCatalogAsync(System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetCatalogInfoAsync(System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.AddCallbackServerAsync(System.UInt64,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.DeleteCallbackServerAsync(System.UInt64,System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.EditCallbackServerAsync(System.UInt64,System.UInt64,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetCallbackConfirmationCodeAsync(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetCallbackServersAsync(System.UInt64,System.Collections.Generic.IEnumerable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetCallbackSettingsAsync(System.UInt64,System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.SetCallbackSettingsAsync(VkNet.Model.RequestParams.CallbackServerParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetLongPollServerAsync(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.DisableOnlineAsync(System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.EnableOnlineAsync(System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetBotsLongPollHistoryAsync(VkNet.Model.RequestParams.BotsLongPollHistoryParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.AddAddressAsync(VkNet.Model.RequestParams.Groups.AddAddressParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.EditAddressAsync(VkNet.Model.RequestParams.Groups.EditAddressParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.DeleteAddressAsync(System.UInt64,System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetAddressesAsync(VkNet.Model.RequestParams.Groups.GetAddressesParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetOnlineStatusAsync(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetTokenPermissionsAsync">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.SetLongPollSettingsAsync(VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetLongPollSettingsAsync(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.#ctor(VkNet.Abstractions.IVkInvoke)">
            <summary>
            </summary>
            <param name="vk"> </param>
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.AddAddress(VkNet.Model.RequestParams.Groups.AddAddressParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.EditAddress(VkNet.Model.RequestParams.Groups.EditAddressParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.DeleteAddress(System.UInt64,System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetAddresses(VkNet.Model.RequestParams.Groups.GetAddressesParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.Join(System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.Leave(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.Get(VkNet.Model.RequestParams.GroupsGetParams,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetById(System.Collections.Generic.IEnumerable{System.String},System.String,VkNet.Enums.Filters.GroupsFields,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetMembers(VkNet.Model.RequestParams.GroupsGetMembersParams,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.IsMember(System.String,System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Boolean},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.Search(VkNet.Model.RequestParams.GroupsSearchParams,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetInvites(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.BanUser(VkNet.Model.RequestParams.GroupsBanUserParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetBanned(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},VkNet.Enums.Filters.GroupsFields,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.UnbanUser(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.EditManager(VkNet.Model.RequestParams.GroupsEditManagerParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetSettings(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.Edit(VkNet.Model.RequestParams.GroupsEditParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.EditPlace(System.Int64,VkNet.Model.Place)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetInvitedUsers(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},VkNet.Enums.Filters.UsersFields,VkNet.Enums.SafetyEnums.NameCase)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.Invite(System.Int64,System.Int64,System.Nullable{System.Int64},System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.AddLink(System.Int64,System.Uri,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.DeleteLink(System.Int64,System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.EditLink(System.Int64,System.UInt64,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.ReorderLink(System.Int64,System.Int64,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.RemoveUser(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.ApproveRequest(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.Create(System.String,System.String,VkNet.Enums.SafetyEnums.GroupType,System.Nullable{VkNet.Enums.Filters.GroupSubType},System.Nullable{System.UInt32})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetRequests(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},VkNet.Enums.Filters.UsersFields)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetCatalog(System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetCatalogInfo(System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.AddCallbackServer(System.UInt64,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.DeleteCallbackServer(System.UInt64,System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.EditCallbackServer(System.UInt64,System.UInt64,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetCallbackConfirmationCode(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetCallbackServers(System.UInt64,System.Collections.Generic.IEnumerable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetCallbackSettings(System.UInt64,System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.SetCallbackSettings(VkNet.Model.RequestParams.CallbackServerParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetLongPollServer(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.DisableOnline(System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.EnableOnline(System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetBotsLongPollHistory(VkNet.Model.RequestParams.BotsLongPollHistoryParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetOnlineStatus(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetTokenPermissions">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.SetLongPollSettings(VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.GroupsCategory.GetLongPollSettings(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Categories.LeadFormsCategory">
            <inheritdoc/>
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.LeadFormsCategory.CreateAsync(VkNet.Model.LeadForms.LeadFormsCreateParams)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.LeadFormsCategory.DeleteAsync(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.LeadFormsCategory.GetAsync(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.LeadFormsCategory.GetLeadsAsync(System.Int64,System.Int64,System.String,System.Nullable{System.UInt64})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.LeadFormsCategory.GetUploadURLAsync">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.LeadFormsCategory.ListAsync(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.LeadFormsCategory.UpdateAsync(VkNet.Model.LeadForms.LeadFormsUpdateParams)">
            <inheritdoc/>
        </member>
        <member name="F:VkNet.Categories.LeadFormsCategory._vk">
            <summary>
            API.
            </summary>
        </member>
        <member name="M:VkNet.Categories.LeadFormsCategory.#ctor(VkNet.Abstractions.IVkApiInvoke)">
            <inheritdoc/>
            <param name = "api">
            Api vk.com
            </param>
        </member>
        <member name="M:VkNet.Categories.LeadFormsCategory.Create(VkNet.Model.LeadForms.LeadFormsCreateParams)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.LeadFormsCategory.Delete(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.LeadFormsCategory.Get(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.LeadFormsCategory.GetLeads(System.Int64,System.Int64,System.String,System.Nullable{System.UInt64})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.LeadFormsCategory.GetUploadURL">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.LeadFormsCategory.List(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.LeadFormsCategory.Update(VkNet.Model.LeadForms.LeadFormsUpdateParams)">
            <inheritdoc/>
        </member>
        <member name="T:VkNet.Categories.LeadsCategory">
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.LeadsCategory.CheckUserAsync(VkNet.Model.RequestParams.Leads.CheckUserParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.LeadsCategory.CompleteAsync(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.LeadsCategory.GetStatsAsync(System.UInt64,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.LeadsCategory.GetUsersAsync(VkNet.Model.RequestParams.Leads.GetUsersParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.LeadsCategory.MetricHitAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.LeadsCategory.StartAsync(VkNet.Model.RequestParams.Leads.StartParams)">
            <inheritdoc />
        </member>
        <member name="F:VkNet.Categories.LeadsCategory._vk">
            <summary>
            API.
            </summary>
        </member>
        <member name="M:VkNet.Categories.LeadsCategory.#ctor(VkNet.VkApi)">
            <inheritdoc />
            <param name="api">
            Api vk.com
            </param>
        </member>
        <member name="M:VkNet.Categories.LeadsCategory.CheckUser(VkNet.Model.RequestParams.Leads.CheckUserParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.LeadsCategory.Complete(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.LeadsCategory.GetStats(System.UInt64,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.LeadsCategory.GetUsers(VkNet.Model.RequestParams.Leads.GetUsersParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.LeadsCategory.MetricHit(System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.LeadsCategory.Start(VkNet.Model.RequestParams.Leads.StartParams)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Categories.LikesCategory">
            <inheritdoc />
            <summary>
            API для работы с лайками.
            </summary>
        </member>
        <member name="M:VkNet.Categories.LikesCategory.GetListAsync(VkNet.Model.RequestParams.LikesGetListParams,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.LikesCategory.GetListExAsync(VkNet.Model.RequestParams.LikesGetListParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.LikesCategory.AddAsync(VkNet.Model.RequestParams.LikesAddParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.LikesCategory.DeleteAsync(VkNet.Enums.SafetyEnums.LikeObjectType,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.LikesCategory.IsLikedAsync(VkNet.Enums.SafetyEnums.LikeObjectType,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="F:VkNet.Categories.LikesCategory._vk">
            <summary>
            API
            </summary>
        </member>
        <member name="M:VkNet.Categories.LikesCategory.#ctor(VkNet.Abstractions.IVkApiInvoke)">
            <summary>
            API для работы с лайками.
            </summary>
            <param name="vk"> The vk. </param>
        </member>
        <member name="M:VkNet.Categories.LikesCategory.GetList(VkNet.Model.RequestParams.LikesGetListParams,System.Boolean)">
            <summary>
            Получает список идентификаторов пользователей или сообществ, которые добавили
            заданный объект в свой список Мне
            нравится.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            Возвращает список идентификаторов пользователей или сообществ, которые добавили
            заданный объект в свой список Мне
            нравится.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/likes.getList
            </remarks>
        </member>
        <member name="M:VkNet.Categories.LikesCategory.GetListEx(VkNet.Model.RequestParams.LikesGetListParams)">
            <summary>
            Получает список идентификаторов пользователей или сообществ, которые добавили
            заданный объект в свой список Мне
            нравится.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            Возвращает список пользователей и сообществ, которые добавили заданный объект в
            свой список Мне нравится.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/likes.getList
            </remarks>
        </member>
        <member name="M:VkNet.Categories.LikesCategory.Add(VkNet.Model.RequestParams.LikesAddParams)">
            <summary>
            Добавляет указанный объект в список Мне нравится текущего пользователя.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            В случае успеха возвращает объект с полем likes, в котором находится текущее
            количество пользователей, которые
            добавили данный объект в свой список Мне нравится.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/likes.add
            </remarks>
        </member>
        <member name="M:VkNet.Categories.LikesCategory.Delete(VkNet.Enums.SafetyEnums.LikeObjectType,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String)">
            <summary>
            Удаляет указанный объект из списка Мне нравится текущего пользователя
            </summary>
            <param name="type"> Тип объекта LikeObjectType </param>
            <param name="itemId">
            Идентификатор объекта. положительное число, обязательный
            параметр
            </param>
            <param name="ownerId">
            Идентификатор владельца объекта. целое число, по умолчанию идентификатор
            текущего пользователя
            </param>
            <param name="captchaSid"> Идентификатор капчи </param>
            <param name="captchaKey"> Текст, который ввел пользователь </param>
            <returns>
            В случае успеха возвращает объект с полем likes, в котором находится текущее
            количество пользователей, которые
            добавили данный объект в свой список Мне нравится.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/likes.delete
            </remarks>
        </member>
        <member name="M:VkNet.Categories.LikesCategory.IsLiked(System.Boolean@,VkNet.Enums.SafetyEnums.LikeObjectType,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Проверяет, находится ли объект в списке Мне нравится заданного пользователя.
            </summary>
            <param name="copied"> Сделан ли репост текущим пользователем. </param>
            <param name="type"> Тип объекта LikeObjectType </param>
            <param name="itemId">
            Идентификатор объекта. положительное число, обязательный
            параметр
            </param>
            <param name="userId">
            Идентификатор пользователя, у которого необходимо проверить наличие объекта в
            списке «Мне
            нравится». Если параметр не задан, то считается, что он равен идентификатору
            текущего пользователя. положительное
            число, по умолчанию идентификатор текущего пользователя
            </param>
            <param name="ownerId">
            Идентификатор владельца Like-объекта. Если параметр не задан, то считается, что
            он равен
            идентификатору текущего пользователя. целое число, по умолчанию идентификатор
            текущего пользователя
            </param>
            <returns>
            В случае успеха возвращает одно из следующих числовых значений:
            false — указанный Like-объект не входит в список Мне нравится пользователя с
            идентификатором user_id.
            true — указанный Like-объект находится в списке Мне нравится пользователя с
            идентификатором user_id.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/likes.isLiked
            </remarks>
        </member>
        <member name="T:VkNet.Categories.MarketsCategory">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.GetAsync(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.GetByIdAsync(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.SearchAsync(VkNet.Model.RequestParams.Market.MarketSearchParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.GetAlbumsAsync(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.GetAlbumByIdAsync(System.Int64,System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.CreateCommentAsync(VkNet.Model.RequestParams.Market.MarketCreateCommentParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.GetCommentsAsync(VkNet.Model.RequestParams.Market.MarketGetCommentsParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.DeleteCommentAsync(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.RestoreCommentAsync(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.EditCommentAsync(System.Int64,System.Int64,System.String,System.Collections.Generic.IEnumerable{VkNet.Model.Attachments.MediaAttachment})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.ReportCommentAsync(System.Int64,System.Int64,VkNet.Enums.ReportReason)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.ReportAsync(System.Int64,System.Int64,VkNet.Enums.ReportReason)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.AddAsync(VkNet.Model.RequestParams.Market.MarketProductParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.EditAsync(VkNet.Model.RequestParams.Market.MarketProductParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.DeleteAsync(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.RestoreAsync(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.ReorderItemsAsync(System.Int64,System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.ReorderAlbumsAsync(System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.AddAlbumAsync(System.Int64,System.String,System.Nullable{System.Int64},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.EditAlbumAsync(System.Int64,System.Int64,System.String,System.Nullable{System.Int64},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.DeleteAlbumAsync(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.RemoveFromAlbumAsync(System.Int64,System.Int64,System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.AddToAlbumAsync(System.Int64,System.Int64,System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.GetCategoriesAsync(System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="F:VkNet.Categories.MarketsCategory._vk">
            <summary>
            API.
            </summary>
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.#ctor(VkNet.Abstractions.IVkApiInvoke)">
            <summary>
            Методы для работы с приложениями.
            </summary>
            <param name="vk"> API. </param>
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.Get(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.GetById(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.Search(VkNet.Model.RequestParams.Market.MarketSearchParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.GetAlbums(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.GetAlbumById(System.Int64,System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.CreateComment(VkNet.Model.RequestParams.Market.MarketCreateCommentParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.GetComments(VkNet.Model.RequestParams.Market.MarketGetCommentsParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.DeleteComment(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.RestoreComment(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.EditComment(System.Int64,System.Int64,System.String,System.Collections.Generic.IEnumerable{VkNet.Model.Attachments.MediaAttachment})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.ReportComment(System.Int64,System.Int64,VkNet.Enums.ReportReason)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.Report(System.Int64,System.Int64,VkNet.Enums.ReportReason)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.Add(VkNet.Model.RequestParams.Market.MarketProductParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.Edit(VkNet.Model.RequestParams.Market.MarketProductParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.Delete(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.Restore(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.ReorderItems(System.Int64,System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.ReorderAlbums(System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.AddAlbum(System.Int64,System.String,System.Nullable{System.Int64},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.EditAlbum(System.Int64,System.Int64,System.String,System.Nullable{System.Int64},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.DeleteAlbum(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.RemoveFromAlbum(System.Int64,System.Int64,System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.AddToAlbum(System.Int64,System.Int64,System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MarketsCategory.GetCategories(System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Categories.MessagesCategory">
            <inheritdoc />
            <summary>
            Методы для работы с сообщениями.
            </summary>
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.UnpinAsync(System.Int64,System.Nullable{System.UInt64})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetImportantMessagesAsync(VkNet.Model.RequestParams.GetImportantMessagesParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetRecentCallsAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.AddChatUserAsync(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.AllowMessagesFromGroupAsync(System.Int64,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.CreateChatAsync(System.Collections.Generic.IEnumerable{System.UInt64},System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.DeleteAsync(System.Collections.Generic.IEnumerable{System.UInt64},System.Nullable{System.Boolean},System.Nullable{System.UInt64},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.DeleteChatPhotoAsync(System.UInt64,System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.DeleteConversationAsync(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetConversationsByIdAsync(System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetConversationsAsync(VkNet.Model.RequestParams.GetConversationsParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetConversationMembersAsync(System.Int64,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetByConversationMessageIdAsync(System.Int64,System.Collections.Generic.IEnumerable{System.UInt64},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.SearchConversationsAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.UInt64},System.Nullable{System.Boolean},System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.PinAsync(System.Int64,System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.DeleteDialogAsync(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.DenyMessagesFromGroupAsync(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.EditChatAsync(System.Int64,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetAsync(VkNet.Model.RequestParams.MessagesGetParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetByIdAsync(System.Collections.Generic.IEnumerable{System.UInt64},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.UInt64},System.Nullable{System.Boolean},System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.SearchDialogsAsync(System.String,VkNet.Enums.Filters.ProfileFields,System.Nullable{System.UInt32})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.SearchAsync(VkNet.Model.RequestParams.MessagesSearchParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.SendAsync(VkNet.Model.RequestParams.MessagesSendParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.SendToUserIdsAsync(VkNet.Model.RequestParams.MessagesSendParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.RestoreAsync(System.UInt64,System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.MarkAsReadAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.SetActivityAsync(System.String,VkNet.Enums.SafetyEnums.MessageActivityType,System.Nullable{System.Int64},System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetLastActivityAsync(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetChatAsync(System.Int64,VkNet.Enums.Filters.ProfileFields,VkNet.Enums.SafetyEnums.NameCase)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetChatAsync(System.Collections.Generic.IEnumerable{System.Int64},VkNet.Enums.Filters.ProfileFields,VkNet.Enums.SafetyEnums.NameCase)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetChatPreviewAsync(System.String,VkNet.Enums.Filters.ProfileFields)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetChatUsersAsync(System.Collections.Generic.IEnumerable{System.Int64},VkNet.Enums.Filters.UsersFields,VkNet.Enums.SafetyEnums.NameCase)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetDialogsAsync(VkNet.Model.RequestParams.MessagesDialogsGetParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetHistoryAsync(VkNet.Model.RequestParams.MessagesGetHistoryParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.RemoveChatUserAsync(System.UInt64,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetLongPollServerAsync(System.Boolean,System.UInt32,System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetLongPollHistoryAsync(VkNet.Model.RequestParams.MessagesGetLongPollHistoryParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.SetChatPhotoAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.MarkAsImportantAsync(System.Collections.Generic.IEnumerable{System.Int64},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.SendStickerAsync(VkNet.Model.RequestParams.MessagesSendStickerParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetHistoryAttachmentsAsync(VkNet.Model.RequestParams.MessagesGetHistoryAttachmentsParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetInviteLinkAsync(System.UInt64,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.IsMessagesFromGroupAllowedAsync(System.UInt64,System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.JoinChatByInviteLinkAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.MarkAsAnsweredConversationAsync(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.MarkAsAnsweredDialogAsync(System.Int64,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.MarkAsImportantConversationAsync(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.MarkAsImportantDialogAsync(System.Int64,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.EditAsync(VkNet.Model.RequestParams.MessageEditParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.#ctor(VkNet.Abstractions.IVkApi)">
            <summary>
            Методы для работы с сообщениями.
            </summary>
            <param name="vk"> API </param>
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.AddChatUser(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.AllowMessagesFromGroup(System.Int64,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.DenyMessagesFromGroup(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.Get(VkNet.Model.RequestParams.MessagesGetParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetHistory(VkNet.Model.RequestParams.MessagesGetHistoryParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetById(System.Collections.Generic.IEnumerable{System.UInt64},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.UInt64},System.Nullable{System.Boolean},System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetDialogs(VkNet.Model.RequestParams.MessagesDialogsGetParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.SearchDialogs(System.String,VkNet.Enums.Filters.ProfileFields,System.Nullable{System.UInt32})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.Search(VkNet.Model.RequestParams.MessagesSearchParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.Send(VkNet.Model.RequestParams.MessagesSendParams)">
            <exception cref="T:System.ArgumentNullException"> </exception>
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.SendToUserIds(VkNet.Model.RequestParams.MessagesSendParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.DeleteConversation(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetConversationsById(System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetConversations(VkNet.Model.RequestParams.GetConversationsParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetConversationMembers(System.Int64,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetByConversationMessageId(System.Int64,System.Collections.Generic.IEnumerable{System.UInt64},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.SearchConversations(System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.UInt64},System.Nullable{System.Boolean},System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.Pin(System.Int64,System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetImportantMessages(VkNet.Model.RequestParams.GetImportantMessagesParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.DeleteDialog(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.Delete(System.Collections.Generic.IEnumerable{System.UInt64},System.Nullable{System.Boolean},System.Nullable{System.UInt64},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.Restore(System.UInt64,System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.MarkAsRead(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.SetActivity(System.String,VkNet.Enums.SafetyEnums.MessageActivityType,System.Nullable{System.Int64},System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetLastActivity(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetChat(System.Int64,VkNet.Enums.Filters.ProfileFields,VkNet.Enums.SafetyEnums.NameCase)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetChatPreview(System.String,VkNet.Enums.Filters.ProfileFields)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetChat(System.Collections.Generic.IEnumerable{System.Int64},VkNet.Enums.Filters.ProfileFields,VkNet.Enums.SafetyEnums.NameCase)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.CreateChat(System.Collections.Generic.IEnumerable{System.UInt64},System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.EditChat(System.Int64,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetChatUsers(System.Collections.Generic.IEnumerable{System.Int64},VkNet.Enums.Filters.UsersFields,VkNet.Enums.SafetyEnums.NameCase)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.RemoveChatUser(System.UInt64,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetLongPollServer(System.Boolean,System.UInt32,System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetLongPollHistory(VkNet.Model.RequestParams.MessagesGetLongPollHistoryParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.DeleteChatPhoto(System.UInt64@,System.UInt64,System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.SetChatPhoto(System.Int64@,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.MarkAsImportant(System.Collections.Generic.IEnumerable{System.Int64},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.SendSticker(VkNet.Model.RequestParams.MessagesSendStickerParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetHistoryAttachments(VkNet.Model.RequestParams.MessagesGetHistoryAttachmentsParams,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetInviteLink(System.UInt64,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.IsMessagesFromGroupAllowed(System.UInt64,System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.JoinChatByInviteLink(System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.MarkAsAnsweredConversation(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.MarkAsAnsweredDialog(System.Int64,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.MarkAsImportantConversation(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.MarkAsImportantDialog(System.Int64,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.Edit(VkNet.Model.RequestParams.MessageEditParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.Unpin(System.Int64,System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetRecentCalls(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.MessagesCategory.GetById(System.UInt64,System.Nullable{System.UInt32})">
            <summary>
            Ворзвращает указанное сообщение по его идентификатору.
            </summary>
            <param name="messageId"> Идентификатор запрошенного сообщения. </param>
            <param name="previewLength">
            Количество символов, по которому нужно обрезать сообщение.
            Укажите 0, если Вы не хотите обрезать сообщение. (по умолчанию сообщения не
            обрезаются).
            </param>
            <returns>
            Запрошенное сообщение, null если сообщение с заданным идентификатором не
            найдено.
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской,
            содержащей Settings.Messages
            Страница документации ВКонтакте http://vk.com/dev/messages.getById
            </remarks>
        </member>
        <member name="T:VkNet.Categories.NewsFeedCategory">
            <inheritdoc />
            <summary>
            Методы для работы с новостной лентой пользователя.
            </summary>
        </member>
        <member name="M:VkNet.Categories.NewsFeedCategory.GetAsync(VkNet.Model.RequestParams.NewsFeedGetParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NewsFeedCategory.GetRecommendedAsync(VkNet.Model.RequestParams.NewsFeedGetRecommendedParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NewsFeedCategory.GetCommentsAsync(VkNet.Model.RequestParams.NewsFeedGetCommentsParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NewsFeedCategory.GetMentionsAsync(System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NewsFeedCategory.GetBannedAsync">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NewsFeedCategory.GetBannedExAsync(VkNet.Enums.Filters.UsersFields,VkNet.Enums.SafetyEnums.NameCase)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NewsFeedCategory.AddBanAsync(System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NewsFeedCategory.DeleteBanAsync(System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NewsFeedCategory.IgnoreItemAsync(VkNet.Enums.SafetyEnums.NewsObjectTypes,System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NewsFeedCategory.UnignoreItemAsync(VkNet.Enums.SafetyEnums.NewsObjectTypes,System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NewsFeedCategory.SearchAsync(VkNet.Model.RequestParams.NewsFeedSearchParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NewsFeedCategory.GetListsAsync(System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NewsFeedCategory.SaveListAsync(System.String,System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NewsFeedCategory.DeleteListAsync(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NewsFeedCategory.UnsubscribeAsync(VkNet.Enums.SafetyEnums.CommentObjectType,System.Int64,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NewsFeedCategory.GetSuggestedSourcesAsync(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean},VkNet.Enums.Filters.UsersFields)">
            <inheritdoc />
        </member>
        <member name="F:VkNet.Categories.NewsFeedCategory._vk">
            <summary>
            API.
            </summary>
        </member>
        <member name="M:VkNet.Categories.NewsFeedCategory.#ctor(VkNet.Abstractions.IVkApiInvoke)">
            <summary>
            Методы для работы с новостной лентой пользователя.
            </summary>
            <param name="vk"> API. </param>
        </member>
        <member name="M:VkNet.Categories.NewsFeedCategory.Get(VkNet.Model.RequestParams.NewsFeedGetParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NewsFeedCategory.GetRecommended(VkNet.Model.RequestParams.NewsFeedGetRecommendedParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NewsFeedCategory.GetComments(VkNet.Model.RequestParams.NewsFeedGetCommentsParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NewsFeedCategory.GetMentions(System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NewsFeedCategory.GetBanned">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NewsFeedCategory.GetBannedEx(VkNet.Enums.Filters.UsersFields,VkNet.Enums.SafetyEnums.NameCase)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NewsFeedCategory.AddBan(System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NewsFeedCategory.DeleteBan(System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NewsFeedCategory.IgnoreItem(VkNet.Enums.SafetyEnums.NewsObjectTypes,System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NewsFeedCategory.UnignoreItem(VkNet.Enums.SafetyEnums.NewsObjectTypes,System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NewsFeedCategory.Search(VkNet.Model.RequestParams.NewsFeedSearchParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NewsFeedCategory.GetLists(System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NewsFeedCategory.SaveList(System.String,System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NewsFeedCategory.DeleteList(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NewsFeedCategory.Unsubscribe(VkNet.Enums.SafetyEnums.CommentObjectType,System.Int64,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NewsFeedCategory.GetSuggestedSources(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean},VkNet.Enums.Filters.UsersFields)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Categories.NotesCategory">
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NotesCategory.AddAsync(VkNet.Model.RequestParams.Notes.NotesAddParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NotesCategory.CreateCommentAsync(VkNet.Model.RequestParams.Notes.NotesCreateCommentParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NotesCategory.DeleteCommentAsync(VkNet.Model.RequestParams.Notes.NotesDeleteCommentParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NotesCategory.DeleteAsync(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NotesCategory.EditCommentAsync(VkNet.Model.RequestParams.Notes.NotesEditCommentParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NotesCategory.EditAsync(VkNet.Model.RequestParams.Notes.NotesEditParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NotesCategory.GetCommentsAsync(VkNet.Model.RequestParams.Notes.NotesGetCommentParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NotesCategory.GetByIdAsync(VkNet.Model.RequestParams.Notes.NotesGetByIdParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NotesCategory.GetAsync(VkNet.Model.RequestParams.Notes.NotesGetParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NotesCategory.RestoreCommentAsync(VkNet.Model.RequestParams.Notes.NotesRestoreCommentParams)">
            <inheritdoc />
        </member>
        <member name="F:VkNet.Categories.NotesCategory._vk">
            <summary>
            API.
            </summary>
        </member>
        <member name="M:VkNet.Categories.NotesCategory.#ctor(VkNet.VkApi)">
            <inheritdoc />
            <param name="api">
            Api vk.com
            </param>
        </member>
        <member name="M:VkNet.Categories.NotesCategory.Add(VkNet.Model.RequestParams.Notes.NotesAddParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NotesCategory.CreateComment(VkNet.Model.RequestParams.Notes.NotesCreateCommentParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NotesCategory.Delete(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NotesCategory.DeleteComment(VkNet.Model.RequestParams.Notes.NotesDeleteCommentParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NotesCategory.Edit(VkNet.Model.RequestParams.Notes.NotesEditParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NotesCategory.EditComment(VkNet.Model.RequestParams.Notes.NotesEditCommentParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NotesCategory.Get(VkNet.Model.RequestParams.Notes.NotesGetParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NotesCategory.GetById(VkNet.Model.RequestParams.Notes.NotesGetByIdParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NotesCategory.GetComments(VkNet.Model.RequestParams.Notes.NotesGetCommentParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NotesCategory.RestoreComment(VkNet.Model.RequestParams.Notes.NotesRestoreCommentParams)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Categories.NotificationsCategory">
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NotificationsCategory.GetAsync(System.Nullable{System.UInt64},System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NotificationsCategory.MarkAsViewedAsync">
            <inheritdoc />
        </member>
        <member name="F:VkNet.Categories.NotificationsCategory._vk">
            <summary>
            API.
            </summary>
        </member>
        <member name="M:VkNet.Categories.NotificationsCategory.#ctor(VkNet.VkApi)">
            <inheritdoc />
            <param name="api">
            Api vk.com
            </param>
        </member>
        <member name="M:VkNet.Categories.NotificationsCategory.Get(System.Nullable{System.UInt64},System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.NotificationsCategory.MarkAsViewed">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Categories.OrdersCategory">
            <inheritdoc/>
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.OrdersCategory.CancelSubscriptionAsync(System.UInt64,System.UInt64,System.Nullable{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.OrdersCategory.ChangeStateAsync(System.UInt64,VkNet.Enums.SafetyEnums.OrderStateAction,System.Nullable{System.UInt64},System.Nullable{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.OrdersCategory.GetAsync(System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.OrdersCategory.GetAmountAsync(System.UInt64,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.OrdersCategory.GetByIdAsync(System.Collections.Generic.IEnumerable{System.UInt64},System.Nullable{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.OrdersCategory.GetUserSubscriptionByIdAsync(System.UInt64,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.OrdersCategory.GetUserSubscriptionsAsync(System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.OrdersCategory.UpdateSubscriptionAsync(System.UInt64,System.UInt64,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="F:VkNet.Categories.OrdersCategory._vk">
            <summary>
            API.
            </summary>
        </member>
        <member name="M:VkNet.Categories.OrdersCategory.#ctor(VkNet.Abstractions.IVkApiInvoke)">
            <inheritdoc/>
            <param name = "api">
            Api vk.com
            </param>
        </member>
        <member name="M:VkNet.Categories.OrdersCategory.CancelSubscription(System.UInt64,System.UInt64,System.Nullable{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.OrdersCategory.ChangeState(System.UInt64,VkNet.Enums.SafetyEnums.OrderStateAction,System.Nullable{System.UInt64},System.Nullable{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.OrdersCategory.Get(System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.OrdersCategory.GetAmount(System.UInt64,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.OrdersCategory.GetById(System.Collections.Generic.IEnumerable{System.UInt64},System.Nullable{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.OrdersCategory.GetUserSubscriptionById(System.UInt64,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.OrdersCategory.GetUserSubscriptions(System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.OrdersCategory.UpdateSubscription(System.UInt64,System.UInt64,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="T:VkNet.Categories.PagesCategory">
            <inheritdoc />
            <summary>
            Методы для работы с wiki.
            </summary>
        </member>
        <member name="M:VkNet.Categories.PagesCategory.GetAsync(VkNet.Model.RequestParams.PagesGetParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PagesCategory.SaveAsync(System.String,System.Int64,System.Int64,System.String,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PagesCategory.SaveAccessAsync(System.Int64,System.Int64,System.Nullable{System.Int64},VkNet.Enums.AccessPages,VkNet.Enums.AccessPages)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PagesCategory.GetHistoryAsync(System.Int64,System.Int64,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PagesCategory.GetTitlesAsync(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PagesCategory.GetVersionAsync(System.Int64,System.Int64,System.Boolean,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PagesCategory.ParseWikiAsync(System.String,System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PagesCategory.ClearCacheAsync(System.Uri)">
            <inheritdoc />
        </member>
        <member name="F:VkNet.Categories.PagesCategory._vk">
            <summary>
            API
            </summary>
        </member>
        <member name="M:VkNet.Categories.PagesCategory.#ctor(VkNet.Abstractions.IVkApiInvoke)">
            <summary>
            Методы для работы с wiki.
            </summary>
            <param name="vk"> API. </param>
        </member>
        <member name="M:VkNet.Categories.PagesCategory.Get(VkNet.Model.RequestParams.PagesGetParams)">
            <summary>
            Возвращает информацию о вики-странице..
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            Возвращает информацию о вики-странице в виде объекта page.
            Если был задан параметр need_source равный 1, дополнительно будет возвращено
            поле source.
            Если был задан параметр need_html равный 1, дополнительно будет возвращено поле
            html..
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/pages.get
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PagesCategory.Save(System.String,System.Int64,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Сохраняет текст вики-страницы..
            </summary>
            <param name="text"> Новый текст страницы в вики-формате. строка (Строка). </param>
            <param name="pageId">
            Идентификатор вики-страницы. Вместо page_id может быть передан параметр title.
            целое число (Целое
            число).
            </param>
            <param name="groupId">
            Идентификатор сообщества, которому принадлежит вики-страница. целое число
            (Целое число).
            </param>
            <param name="userId">
            Идентификатор пользователя, создавшего вики-страницу.
            целое число (Целое число).
            </param>
            <param name="title"> Название вики-страницы. строка (Строка). </param>
            <returns>
            В случае успеха возвращает id созданной страницы..
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/pages.save
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PagesCategory.SaveAccess(System.Int64,System.Int64,System.Nullable{System.Int64},VkNet.Enums.AccessPages,VkNet.Enums.AccessPages)">
            <summary>
            Сохраняет новые настройки доступа на чтение и редактирование вики-страницы.
            </summary>
            <param name="pageId"> Идентификатор вики-страницы. </param>
            <param name="groupId">
            Идентификатор сообщества, которому принадлежит
            вики-страница.
            </param>
            <param name="userId"> Идентификатор пользователя, создавшего вики-страницу. </param>
            <param name="view"> Значение настройки доступа на чтение. </param>
            <param name="edit"> Значение настройки доступа на редактирование. </param>
            <returns>
            В случае успеха возвращает id страницы, доступ к которой был отредактирован.
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/pages.saveAccess
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PagesCategory.GetHistory(System.Int64,System.Int64,System.Nullable{System.Int64})">
            <summary>
            Возвращает список всех старых версий вики-страницы.
            </summary>
            <param name="pageId"> Идентификатор вики-страницы. </param>
            <param name="groupId">
            Идентификатор сообщества, которому принадлежит
            вики-страница.
            </param>
            <param name="userId"> Идентификатор пользователя, создавшего вики-страницу. </param>
            <returns>
            Возвращает массив объектов page_version, имеющих следующую структуру.
            id — идентификатор версии страницы;
            length длина версии страницы в байтах;
            edited — дата редактирования страницы;
            editor_id — идентификатор редактора;
            editor_name — имя редактора.
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/pages.getHistory
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PagesCategory.GetTitles(System.Int64)">
            <summary>
            Возвращает список вики-страниц в группе.
            </summary>
            <param name="groupId">
            Идентификатор сообщества, которому принадлежит
            вики-страница.
            </param>
            <returns>
            Возвращает массив объектов вики-страниц.
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/pages.getTitles
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PagesCategory.GetVersion(System.Int64,System.Int64,System.Boolean,System.Nullable{System.Int64})">
            <summary>
            Возвращает текст одной из старых версий страницы.
            </summary>
            <param name="versionId"> Идентификатор версии. </param>
            <param name="groupId">
            Идентификатор сообщества, которому принадлежит
            вики-страница.
            </param>
            <param name="needHtml">
            Определяет, требуется ли в ответе html-представление
            вики-страницы.
            </param>
            <param name="userId"> Идентификатор пользователя, который создал страницу. </param>
            <returns>
            Возвращает объект вики-страницы.
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/pages.getVersion
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PagesCategory.ParseWiki(System.String,System.UInt64)">
            <summary>
            Возвращает html-представление вики-разметки.
            </summary>
            <param name="text"> Текст в вики-формате. </param>
            <param name="groupId">
            Идентификатор группы, в контексте которой
            интерпретируется данная страница.
            </param>
            <returns>
            В случае успеха возвращает экранированный html, соответствующий вики-разметке.
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/pages.parseWiki
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PagesCategory.ClearCache(System.Uri)">
            <summary>
            Позволяет очистить кеш отдельных внешних страниц, которые могут быть
            прикреплены к записям ВКонтакте.
            После очистки кеша при последующем прикреплении ссылки к записи, данные о
            странице будут обновлены.
            Внешние страницы – страницы которые прикрепляются к записям вместе с ссылкой и
            доступные по кнопке "Предпросмотр".
            </summary>
            <param name="url"> URL. </param>
            <returns>
            При удачной очистке кеша – метод возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте https://vk.com/dev/pages.clearCache
            </remarks>
        </member>
        <member name="T:VkNet.Categories.PhotoCategory">
            <inheritdoc />
            <summary>
            Методы для работы с фотографиями.
            </summary>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.CreateAlbumAsync(VkNet.Model.RequestParams.PhotoCreateAlbumParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.EditAlbumAsync(VkNet.Model.RequestParams.PhotoEditAlbumParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetAlbumsAsync(VkNet.Model.RequestParams.PhotoGetAlbumsParams,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetAsync(VkNet.Model.RequestParams.PhotoGetParams,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetAlbumsCountAsync(System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetByIdAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetUploadServerAsync(System.Int64,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetOwnerPhotoUploadServerAsync(System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetChatUploadServerAsync(System.UInt64,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.SaveOwnerPhotoAsync(System.String,System.Nullable{System.Int64},System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.SaveWallPhotoAsync(System.String,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetWallUploadServerAsync(System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetMessagesUploadServerAsync(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.SaveMessagesPhotoAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetOwnerCoverPhotoUploadServerAsync(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.SaveOwnerCoverPhotoAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.ReportAsync(System.Int64,System.UInt64,VkNet.Enums.ReportReason)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.ReportCommentAsync(System.Int64,System.UInt64,VkNet.Enums.ReportReason)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.SearchAsync(VkNet.Model.RequestParams.PhotoSearchParams,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.SaveAsync(VkNet.Model.RequestParams.PhotoSaveParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.CopyAsync(System.Int64,System.UInt64,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.EditAsync(VkNet.Model.RequestParams.PhotoEditParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.MoveAsync(System.Int64,System.UInt64,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.MakeCoverAsync(System.UInt64,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.ReorderAlbumsAsync(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.ReorderPhotosAsync(System.UInt64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetAllAsync(VkNet.Model.RequestParams.PhotoGetAllParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetUserPhotosAsync(VkNet.Model.RequestParams.PhotoGetUserPhotosParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.DeleteAlbumAsync(System.Int64,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.DeleteAsync(System.UInt64,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.RestoreAsync(System.UInt64,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.ConfirmTagAsync(System.UInt64,System.UInt64,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetCommentsAsync(VkNet.Model.RequestParams.PhotoGetCommentsParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetAllCommentsAsync(VkNet.Model.RequestParams.PhotoGetAllCommentsParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.CreateCommentAsync(VkNet.Model.RequestParams.PhotoCreateCommentParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.DeleteCommentAsync(System.UInt64,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.RestoreCommentAsync(System.UInt64,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.EditCommentAsync(System.UInt64,System.String,System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{VkNet.Model.Attachments.MediaAttachment})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetTagsAsync(System.UInt64,System.Nullable{System.Int64},System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.PutTagAsync(VkNet.Model.RequestParams.PhotoPutTagParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.RemoveTagAsync(System.UInt64,System.UInt64,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetNewTagsAsync(System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetMarketUploadServerAsync(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetMarketAlbumUploadServerAsync(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.SaveMarketPhotoAsync(System.Int64,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.SaveMarketAlbumPhotoAsync(System.Int64,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.#ctor(VkNet.Abstractions.IVkApiInvoke)">
            <summary>
            </summary>
            <param name="vk"> </param>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.CreateAlbum(VkNet.Model.RequestParams.PhotoCreateAlbumParams)">
            <summary>
            Создает пустой альбом для фотографий.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает объект PhotoAlbum
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.createAlbum
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.EditAlbum(VkNet.Model.RequestParams.PhotoEditAlbumParams)">
            <summary>
            Редактирует данные альбома для фотографий пользователя.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.editAlbum
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetAlbums(VkNet.Model.RequestParams.PhotoGetAlbumsParams,System.Boolean)">
            <summary>
            Возвращает список альбомов пользователя или сообщества.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            Возвращает список объектов PhotoAlbum
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.getAlbums
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.Get(VkNet.Model.RequestParams.PhotoGetParams,System.Boolean)">
            <summary>
            Возвращает список фотографий в альбоме.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            После успешного выполнения возвращает список объектов Photo
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.get
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetAlbumsCount(System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Возвращает количество доступных альбомов пользователя или сообщества.
            </summary>
            <param name="userId">
            Идентификатор пользователя, количество альбомов которого необходимо получить.
            целое число, по
            умолчанию идентификатор текущего пользователя (Целое число, по умолчанию
            идентификатор текущего пользователя).
            </param>
            <param name="groupId">
            Идентификатор сообщества, количество альбомов которого необходимо получить.
            целое число (Целое
            число).
            </param>
            <returns>
            После успешного выполнения возвращает количество альбомов с учетом настроек
            приватности.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.getAlbumsCount
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetById(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Возвращает информацию о фотографиях по их идентификаторам.
            </summary>
            <param name="photos">
            Перечисленные через запятую идентификаторы, которые представляют собой идущие
            через знак подчеркивания id
            пользователей, разместивших фотографии, и id самих фотографий. Чтобы получить
            информацию о фотографии в альбоме
            группы, вместо id пользователя следует указать -id группы.
            Пример значения photos: 1_129207899,6492_135055734,
            -20629724_271945303
            Некоторые фотографии, идентификаторы которых могут быть получены через API,
            закрыты приватностью, и не будут
            получены. В этом случае следует использовать ключ доступа фотографии
            (access_key) в её идентификаторе. Пример
            значения photos: 1_129207899_220df2876123d3542f,
            6492_135055734_e0a9bcc31144f67fbd
            Поле access_key будет возвращено вместе с остальными данными фотографии в
            методах, которые возвращают фотографии,
            закрытые приватностью но доступные в данном контексте. Например данное поле
            имеют фотографии, возвращаемые методом
            newsfeed.get. список строк, разделенных через запятую, обязательный параметр
            (Список строк, разделенных через
            запятую, обязательный параметр).
            </param>
            <param name="extended">
            1 — будут возвращены дополнительные поля likes, comments, tags, can_comment,
            can_repost. Поля
            comments и tags содержат только количество объектов. По умолчанию данные поля
            не возвращается. флаг, может
            принимать значения 1 или 0 (Флаг, может принимать значения 1 или 0).
            </param>
            <param name="photoSizes">
            Возвращать ли доступные размеры фотографии в специальном формате. флаг, может
            принимать
            значения 1 или 0 (Флаг, может принимать значения 1 или 0).
            </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            После успешного выполнения возвращает массив объектов photo.
            Если к фотографии прикреплено местоположение, также возвращаются поля lat и
            long, содержащие географические
            координаты отметки.
            Если был задан параметр extended=1, возвращаются дополнительные поля:
            likes — количество отметок Мне нравится и информация о том, поставил ли лайк
            текущий пользователь;
            comments — количество комментариев к фотографии;
            tags — количество отметок на фотографии;
            can_comment — может ли текущий пользователь комментировать фото (1 — может, 0 —
            не может);
            can_repost — может ли текущий пользователь сделать репост фотографии (1 —
            может, 0 — не может).
            Если был задан параметр photo_sizes, вместо полей width и height возвращаются
            размеры копий фотографии в
            специальном формате.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.getById
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetUploadServer(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Возвращает адрес сервера для загрузки фотографий.
            </summary>
            <param name="albumId"> Идентификатор альбома. целое число (Целое число). </param>
            <param name="groupId">
            Идентификатор сообщества, которому принадлежит альбом (если необходимо
            загрузить фотографию в
            альбом сообщества). целое число (Целое число).
            </param>
            <returns> После успешного выполнения возвращает объект UploadServerInfo </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.getUploadServer
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetOwnerPhotoUploadServer(System.Nullable{System.Int64})">
            <summary>
            Возвращает адрес сервера для загрузки главной фотографии на страницу
            пользователя или сообщества.
            </summary>
            <param name="ownerId">
            Идентификатор сообщества или текущего пользователя. Обратите внимание,
            идентификатор сообщества в
            параметре owner_id необходимо указывать со знаком "-" — например, owner_id=-1
            соответствует идентификатору
            сообщества ВКонтакте API (club1)  целое число, по умолчанию идентификатор
            текущего пользователя (Целое число, по
            умолчанию идентификатор текущего пользователя).
            </param>
            <returns>
            После успешного выполнения возвращает объект с единственным полем upload_url.
            </returns>
            <remarks>
            Страница документации ВКонтакте
            http://vk.com/dev/photos.getOwnerPhotoUploadServer
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetChatUploadServer(System.UInt64,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <summary>
            Позволяет получить адрес для загрузки фотографий мультидиалогов.
            </summary>
            <param name="chatId">
            Идентификатор беседы, для которой нужно загрузить фотографию. положительное
            число, обязательный
            параметр (Положительное число, обязательный параметр).
            </param>
            <param name="cropX">
            Координата x для обрезки фотографии. положительное число
            (Положительное число).
            </param>
            <param name="cropY">
            Координата y для обрезки фотографии. положительное число
            (Положительное число).
            </param>
            <param name="cropWidth">
            Ширина фотографии после обрезки в px. положительное число, минимальное значение
            200
            (Положительное число, минимальное значение 200).
            </param>
            <returns>
            После успешного выполнения возвращает объект с единственным полем upload_url.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.getChatUploadServer
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.SaveOwnerPhoto(System.String,System.Nullable{System.Int64},System.String)">
            <summary>
            Позволяет сохранить главную фотографию пользователя или сообщества.
            </summary>
            <param name="response">
            Параметр, возвращаемый в результате загрузки фотографии
            на сервер.
            </param>
            <param name="captchaSid"> Идентификатор капчи </param>
            <param name="captchaKey"> текст, который ввел пользователь </param>
            <returns>
            После успешного выполнения возвращает объект, содержащий поля photo_hash и
            photo_src (при работе через VK.api метод
            вернёт поля photo_src, photo_src_big, photo_src_small). Параметр photo_hash
            необходим для подтверждения
            пользователем изменения его фотографии через вызов метода saveProfilePhoto
            Javascript API. Поле photo_src содержит
            путь к загруженной фотографии.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.saveOwnerPhoto
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.SaveWallPhoto(System.String,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.String)">
            <summary>
            Сохраняет фотографии после успешной загрузки на URI, полученный методом
            photos.getWallUploadServer.
            </summary>
            <param name="userId">
            Идентификатор пользователя, на стену которого нужно
            сохранить фотографию
            </param>
            <param name="groupId">
            Идентификатор сообщества, на стену которого нужно
            сохранить фотографию
            </param>
            <param name="response">
            Параметр, возвращаемый в результате загрузки фотографии
            на сервер
            </param>
            <param name="caption"> Описание загружаемой фотографии </param>
            <returns>
            После успешного выполнения возвращает массив, содержащий объект с загруженной
            фотографией.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.saveWallPhoto
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetWallUploadServer(System.Nullable{System.Int64})">
            <summary>
            Возвращает адрес сервера для загрузки фотографии на стену пользователя или
            сообщества.
            </summary>
            <param name="groupId">
            Идентификатор сообщества, на стену которого нужно загрузить фото (без знака
            «минус»). целое число
            (Целое число).
            </param>
            <returns>
            После успешного выполнения возвращает объект с полями upload_url, album_id,
            user_id.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.getWallUploadServer
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetMessagesUploadServer(System.Int64)">
            <summary>
            Возвращает адрес сервера для загрузки фотографии в личное сообщение
            пользователю.
            </summary>
            <returns> После успешного выполнения возвращает объект UploadServerInfo </returns>
            <remarks>
            Страница документации ВКонтакте
            http://vk.com/dev/photos.getMessagesUploadServer
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.SaveMessagesPhoto(System.String)">
            <summary>
            Сохраняет фотографию после успешной загрузки на URI, полученный методом
            GetMessagesUploadServer
            </summary>
            <param name="response">
            Параметр, возвращаемый в результате загрузки фотографии
            на сервер
            </param>
            <returns>
            После успешного выполнения возвращает массив с загруженной фотографией,
            возвращённый объект имеет поля id,
            pid, aid, owner_id, src, src_big, src_small, created. В случае наличия
            фотографий в высоком разрешении также будут
            возвращены адреса с названиями src_xbig и src_xxbig.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.saveMessagesPhoto
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetOwnerCoverPhotoUploadServer(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Возвращает адрес сервера для загрузки обложки сообщества.
            </summary>
            <param name="groupId">
            Идентификатор сообщества, для которого необходимо загрузить обложку.
            положительное число,
            обязательный параметр (Положительное число, обязательный параметр).
            </param>
            <param name="cropX">
            Координата X верхнего левого угла для обрезки изображения. Положительное число
            (Положительное
            число).
            </param>
            <param name="cropY">
            Координата Y верхнего левого угла для обрезки изображения. Положительное число
            (Положительное
            число).
            </param>
            <param name="cropX2">
            Координата X нижнего правого угла для обрезки изображения. Положительное число
            (Положительное
            число).
            </param>
            <param name="cropY2">
            Координата Y нижнего правого угла для обрезки изображения. Положительное число
            (Положительное
            число).
            </param>
            <returns> После успешного выполнения возвращает объект UploadServerInfo </returns>
            <remarks>
            Страница документации ВКонтакте
            http://vk.com/dev/photos.getOwnerCoverPhotoUploadServer
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.SaveOwnerCoverPhoto(System.String)">
            <summary>
            Сохраняет фотографию после успешной загрузки на URI, полученный методом
            GetOwnerCoverPhotoUploadServer
            </summary>
            <param name="response">
            Параметр, возвращаемый в результате загрузки фотографии
            на сервер
            </param>
            <returns>
            После успешного выполнения возвращает массив, содержащий объект с загруженной
            фотографией.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.saveOwnerCoverPhoto
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.Report(System.Int64,System.UInt64,VkNet.Enums.ReportReason)">
            <summary>
            Позволяет пожаловаться на фотографию.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит фотография.
            целое число,
            обязательный параметр (Целое число, обязательный параметр).
            </param>
            <param name="photoId">
            Идентификатор фотографии. положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <param name="reason">
            Причина жалобы:
            0 — спам;
            1 — детская порнография;
            2 — экстремизм;
            3 — насилие;
            4 — пропаганда наркотиков;
            5 — материал для взрослых;
            6 — оскорбление.
            положительное число (Положительное число).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.report
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.ReportComment(System.Int64,System.UInt64,VkNet.Enums.ReportReason)">
            <summary>
            Позволяет пожаловаться на комментарий к фотографии.
            </summary>
            <param name="ownerId">
            Идентификатор владельца фотографии к которой оставлен комментарий. целое число,
            обязательный
            параметр (Целое число, обязательный параметр).
            </param>
            <param name="commentId">
            Идентификатор комментария. положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <param name="reason">
            Причина жалобы:
            0 — спам;
            1 — детская порнография;
            2 — экстремизм;
            3 — насилие;
            4 — пропаганда наркотиков;
            5 — материал для взрослых;
            6 — оскорбление.
            положительное число (Положительное число).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.reportComment
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.Search(VkNet.Model.RequestParams.PhotoSearchParams,System.Boolean)">
            <summary>
            Осуществляет поиск изображений по местоположению или описанию.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            После успешного выполнения возвращает список объектов фотографий.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.search
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.Save(VkNet.Model.RequestParams.PhotoSaveParams)">
            <summary>
            Сохраняет фотографии после успешной загрузки.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает список объектов Photo
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.save
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.Copy(System.Int64,System.UInt64,System.String)">
            <summary>
            Позволяет скопировать фотографию в альбом "Сохраненные фотографии".
            </summary>
            <param name="ownerId">
            Идентификатор владельца фотографии целое число, обязательный параметр (Целое
            число, обязательный
            параметр).
            </param>
            <param name="photoId">
            Индентификатор фотографии положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <param name="accessKey">
            Специальный код доступа для приватных фотографий
            строка (Строка).
            </param>
            <returns>
            Возвращает идентификатор созданной фотографии.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.copy
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.Edit(VkNet.Model.RequestParams.PhotoEditParams)">
            <summary>
            Изменяет описание у выбранной фотографии.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.edit
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.Move(System.Int64,System.UInt64,System.Nullable{System.Int64})">
            <summary>
            Переносит фотографию из одного альбома в другой.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит фотография.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="targetAlbumId">
            Идентификатор альбома, в который нужно переместить фотографию. целое число,
            обязательный
            параметр (Целое число, обязательный параметр).
            </param>
            <param name="photoId">
            Идентификатор фотографии, которую нужно перенести. целое число, обязательный
            параметр (Целое
            число, обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.move
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.MakeCover(System.UInt64,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Делает фотографию обложкой альбома.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит фотография.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="photoId">
            Идентификатор фотографии. Фотография должна находиться в альбоме album_id.
            целое число,
            обязательный параметр (Целое число, обязательный параметр).
            </param>
            <param name="albumId"> Идентификатор альбома. целое число (Целое число). </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.makeCover
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.ReorderAlbums(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Меняет порядок альбома в списке альбомов пользователя.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит альбом.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="albumId">
            Идентификатор альбома. целое число, обязательный параметр (Целое число,
            обязательный параметр).
            </param>
            <param name="before">
            Идентификатор альбома, перед которым следует поместить альбом. целое число
            (Целое число).
            </param>
            <param name="after">
            Идентификатор альбома, после которого следует поместить альбом. целое число
            (Целое число).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.reorderAlbums
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.ReorderPhotos(System.UInt64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Меняет порядок фотографии в списке фотографий альбома пользователя.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит фотография.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="photoId">
            Идентификатор фотографии. целое число, обязательный параметр (Целое число,
            обязательный
            параметр).
            </param>
            <param name="before">
            Идентификатор фотографии, перед которой следует поместить фотографию. Если
            параметр не указан,
            фотография будет помещена последней. целое число (Целое число).
            </param>
            <param name="after">
            Идентификатор фотографии, после которой следует поместить фотографию. Если
            параметр не указан,
            фотография будет помещена первой. целое число (Целое число).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.reorderPhotos
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetAll(VkNet.Model.RequestParams.PhotoGetAllParams)">
            <summary>
            Возвращает все фотографии пользователя или сообщества в антихронологическом
            порядке.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает список объектов Photo
            <remarks>
            Если был задан параметр extended — будет возвращено поле likes:
            user_likes: 1 — текущему пользователю нравится данная фотография, 0 - не
            указано.
            count — количество пользователей, которым нравится текущая фотография.
            Если был задан параметр photo_sizes=1, вместо полей width и height возвращаются
            размеры копий фотографии в
            специальном формате.
            </remarks>
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.getAll
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetUserPhotos(VkNet.Model.RequestParams.PhotoGetUserPhotosParams)">
            <summary>
            Возвращает список фотографий, на которых отмечен пользователь.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает список объектов photo.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.getUserPhotos
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.DeleteAlbum(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Удаляет указанный альбом для фотографий у текущего пользователя.
            </summary>
            <param name="albumId">
            Идентификатор альбома. целое число, положительное число, обязательный параметр
            (Целое число,
            положительное число, обязательный параметр).
            </param>
            <param name="groupId">
            Идентификатор сообщества, в котором размещен альбом. целое число, положительное
            число (Целое
            число, положительное число).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.deleteAlbum
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.Delete(System.UInt64,System.Nullable{System.Int64})">
            <summary>
            Удаление фотографии на сайте.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит фотография.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="photoId">
            Идентификатор фотографии. положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.delete
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.Restore(System.UInt64,System.Nullable{System.Int64})">
            <summary>
            Восстанавливает удаленную фотографию.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит фотография.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="photoId">
            Идентификатор фотографии. положительное число, обязательный параметр
            (Положительное число,
            обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.restore
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.ConfirmTag(System.UInt64,System.UInt64,System.Nullable{System.Int64})">
            <summary>
            Подтверждает отметку на фотографии.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит фотография.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="photoId">
            Идентификатор фотографии. обязательный параметр
            (Обязательный параметр).
            </param>
            <param name="tagId">
            Идентификатор отметки на фотографии. целое число, обязательный параметр (Целое
            число, обязательный
            параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.confirmTag
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetComments(VkNet.Model.RequestParams.PhotoGetCommentsParams)">
            <summary>
            Возвращает список комментариев к фотографии.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает список объектов Comment
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.getComments
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetAllComments(VkNet.Model.RequestParams.PhotoGetAllCommentsParams)">
            <summary>
            Возвращает отсортированный в антихронологическом порядке список всех
            комментариев к конкретному альбому или ко всем
            альбомам пользователя.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает список объектов Comment
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.getAllComments
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.CreateComment(VkNet.Model.RequestParams.PhotoCreateCommentParams)">
            <summary>
            Создает новый комментарий к фотографии.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <returns>
            После успешного выполнения возвращает идентификатор созданного комментария.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.createComment
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.DeleteComment(System.UInt64,System.Nullable{System.Int64})">
            <summary>
            Удаляет комментарий к фотографии.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит фотография.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="commentId">
            Идентификатор комментария. целое число, обязательный параметр (Целое число,
            обязательный
            параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c> (0, если комментарий не
            найден).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.deleteComment
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.RestoreComment(System.UInt64,System.Nullable{System.Int64})">
            <summary>
            Восстанавливает удаленный комментарий к фотографии.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит фотография.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="commentId">
            Идентификатор удаленного комментария. целое число, обязательный параметр (Целое
            число,
            обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c> (0, если комментарий с
            таким идентификатором не является
            удаленным).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.restoreComment
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.EditComment(System.UInt64,System.String,System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{VkNet.Model.Attachments.MediaAttachment})">
            <summary>
            Изменяет текст комментария к фотографии.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит фотография.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)
            </param>
            <param name="commentId"> Идентификатор комментария </param>
            <param name="message">
            Новый текст комментария (является обязательным, если не задан параметр
            attachments)
            </param>
            <param name="attachments">
            Новый список объектов, приложенных к комментарию и разделённых символом ",".
            Поле attachments представляется в
            формате: &lt;type&gt;&lt;owner_id&gt;_&lt;media_id&gt;,&lt;type&gt;&lt;owner_id
            &gt;_&lt;media_id&gt; &lt;type&gt; —
            тип медиа-вложения:
            photo — фотография
            video — видеозапись
            audio — аудиозапись
            doc — документ
            &lt;owner_id&gt; — идентификатор владельца медиа-вложения
            &lt;media_id&gt; — идентификатор медиа-вложения.
            <example>
            Например:
            photo100172_166443618,photo66748_265827614
            </example>
            Параметр является обязательным, если не задан параметр message. список строк,
            разделенных через запятую
            </param>
            <returns> После успешного выполнения возвращает true. </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.editComment
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetTags(System.UInt64,System.Nullable{System.Int64},System.String)">
            <summary>
            Возвращает список отметок на фотографии.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит фотография.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="photoId">
            Идентификатор фотографии. целое число, обязательный параметр (Целое число,
            обязательный
            параметр).
            </param>
            <param name="accessKey">
            Строковой ключ доступа, который може быть получен при получении объекта
            фотографии. строка
            (Строка).
            </param>
            <returns>
            После успешного выполнения возвращает массив объектов tag, каждый из которых
            содержит следующие поля:
            user_id — идентификатор пользователя, которому соответствует отметка;
            id — идентификатор отметки;
            placer_id — идентификатор пользователя, сделавшего отметку;
            tagged_name — название отметки;
            date — дата добавления отметки в формате unixtime;
            x, y, x2, y2 — координаты прямоугольной области, на которой сделана отметка
            (верхний левый угол и нижний правый
            угол) в процентах;
            viewed — статус отметки (1 — подтвержденная, 0 — неподтвержденная).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.getTags
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.PutTag(VkNet.Model.RequestParams.PhotoPutTagParams)">
            <summary>
            Добавляет отметку на фотографию.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает идентификатор созданной отметки (tag id).
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.putTag
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.RemoveTag(System.UInt64,System.UInt64,System.Nullable{System.Int64})">
            <summary>
            Удаляет отметку с фотографии.
            </summary>
            <param name="ownerId">
            Идентификатор пользователя или сообщества, которому принадлежит фотография.
            Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя (Целое число, по умолчанию идентификатор текущего пользователя).
            </param>
            <param name="photoId">
            Идентификатор фотографии. целое число, обязательный параметр (Целое число,
            обязательный
            параметр).
            </param>
            <param name="tagId">
            Идентификатор отметки. целое число, обязательный параметр (Целое число,
            обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает <c> true </c>.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.removeTag
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetNewTags(System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>
            Возвращает список фотографий, на которых есть непросмотренные отметки.
            </summary>
            <param name="offset">
            Смещение, необходимое для получения определённого подмножества фотографий.
            целое число (Целое
            число).
            </param>
            <param name="count">
            Количество фотографий, которые необходимо вернуть. положительное число,
            максимальное значение 100,
            по умолчанию 20 (Положительное число, максимальное значение 100, по умолчанию
            20).
            </param>
            <returns>
            После успешного выполнения возвращает список объектов Photo
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.getNewTags
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetMarketUploadServer(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Возвращает адрес сервера для загрузки фотографии товаров сообщества.
            </summary>
            <param name="groupId">
            Идентификатор сообщества, для которого необходимо загрузить фотографию товара.
            положительное
            число, обязательный параметр (Положительное число, обязательный параметр).
            </param>
            <param name="mainPhoto">
            Является ли фотография обложкой товара  (1 — фотография для обложки, 0 —
            дополнительная
            фотография) флаг, может принимать значения 1 или 0 (Флаг, может принимать
            значения 1 или 0).
            </param>
            <param name="cropX">
            Координата x для обрезки фотографии. положительное число
            (Положительное число).
            </param>
            <param name="cropY">
            Координата y для обрезки фотографии. положительное число
            (Положительное число).
            </param>
            <param name="cropWidth">
            Ширина фотографии после обрезки в px. положительное число, минимальное значение
            200
            (Положительное число, минимальное значение 200).
            </param>
            <returns>
            После успешного выполнения возвращает объект с единственным полем upload_url.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.getMarketUploadServer
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.GetMarketAlbumUploadServer(System.Int64)">
            <summary>
            Возвращает адрес сервера для загрузки фотографии подборки товаров в сообществе.
            </summary>
            <param name="groupId">
            Идентификатор сообщества, для которого необходимо загрузить фотографию подборки
            товаров. целое
            число (Целое число).
            </param>
            <returns>
            .
            </returns>
            <remarks>
            Страница документации ВКонтакте
            http://vk.com/dev/photos.getMarketAlbumUploadServer
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.SaveMarketPhoto(System.Int64,System.String)">
            <summary>
            Сохраняет фотографии после успешной загрузки на URI, полученный методом
            photos.getMarketUploadServer.
            </summary>
            <param name="groupId">
            Идентификатор группы, для которой нужно загрузить фотографию. положительное
            число (положительное
            число).
            </param>
            <param name="response">
            Параметр, возвращаемый в результате загрузки фотографии на сервер. строка,
            обязательный параметр
            (строка, обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает массив, содержащий объект с загруженной
            фотографией.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.saveMarketPhoto
            </remarks>
        </member>
        <member name="M:VkNet.Categories.PhotoCategory.SaveMarketAlbumPhoto(System.Int64,System.String)">
            <summary>
            Сохраняет фотографии после успешной загрузки на URI, полученный методом
            photos.getMarketAlbumUploadServer.
            </summary>
            <param name="groupId">
            Идентификатор группы, для которой нужно загрузить фотографию. положительное
            число, обязательный
            параметр (положительное число, обязательный параметр).
            </param>
            <param name="response">
            Параметр, возвращаемый в результате загрузки фотографии на сервер. строка,
            обязательный параметр
            (строка, обязательный параметр).
            </param>
            <returns>
            После успешного выполнения возвращает массив, содержащий объект с загруженной
            фотографией.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/photos.saveMarketAlbumPhoto
            </remarks>
        </member>
        <member name="T:VkNet.Categories.PlacesCategory">
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PlacesCategory.AddAsync(VkNet.Model.RequestParams.PlacesAddParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PlacesCategory.CheckinAsync(VkNet.Model.RequestParams.PlacesCheckinParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PlacesCategory.GetByIdAsync(System.Collections.Generic.IEnumerable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PlacesCategory.GetCheckinsAsync(VkNet.Model.RequestParams.PlacesGetCheckinsParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PlacesCategory.GetTypesAsync">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PlacesCategory.SearchAsync(VkNet.Model.RequestParams.PlacesSearchParams)">
            <inheritdoc />
        </member>
        <member name="F:VkNet.Categories.PlacesCategory._vk">
            <summary>
            API.
            </summary>
        </member>
        <member name="M:VkNet.Categories.PlacesCategory.#ctor(VkNet.VkApi)">
            <inheritdoc />
            <param name="api">
            Api vk.com
            </param>
        </member>
        <member name="M:VkNet.Categories.PlacesCategory.Add(VkNet.Model.RequestParams.PlacesAddParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PlacesCategory.Checkin(VkNet.Model.RequestParams.PlacesCheckinParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PlacesCategory.GetById(System.Collections.Generic.IEnumerable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PlacesCategory.GetCheckins(VkNet.Model.RequestParams.PlacesGetCheckinsParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PlacesCategory.GetTypes">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PlacesCategory.Search(VkNet.Model.RequestParams.PlacesSearchParams)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Categories.PollsCategory">
            <inheritdoc />
            <summary>
            Методы этого класса позволяют производить действия с опросами.
            </summary>
        </member>
        <member name="M:VkNet.Categories.PollsCategory.GetByIdAsync(VkNet.Model.RequestParams.PollsGetByIdParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PollsCategory.EditAsync(VkNet.Model.RequestParams.PollsEditParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PollsCategory.AddVoteAsync(VkNet.Model.RequestParams.PollsAddVoteParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PollsCategory.DeleteVoteAsync(VkNet.Model.RequestParams.PollsDeleteVoteParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PollsCategory.GetVotersAsync(VkNet.Model.RequestParams.PollsGetVotersParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.PollsCategory.CreateAsync(VkNet.Model.RequestParams.Polls.PollsCreateParams)">
            <inheritdoc />
        </member>
        <member name="F:VkNet.Categories.PollsCategory._vk">
            <summary>
            API.
            </summary>
        </member>
        <member name="M:VkNet.Categories.PollsCategory.#ctor(VkNet.Abstractions.IVkApiInvoke)">
            <summary>
            Методы для работы с опросами.
            </summary>
            <param name="vk"> API. </param>
        </member>
        <member name="M:VkNet.Categories.PollsCategory.GetById(VkNet.Model.RequestParams.PollsGetByIdParams)">
            <summary>
            Возвращает детальную информацию об опросе по его идентификатору.
            </summary>
            <param name="params"> Параметры </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Categories.PollsCategory.Edit(VkNet.Model.RequestParams.PollsEditParams)">
            <summary>
            Позволяет редактировать созданные опросы.
            </summary>
            <param name="params"> Параметры </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Categories.PollsCategory.AddVote(VkNet.Model.RequestParams.PollsAddVoteParams)">
            <summary>
            Отдает голос текущего пользователя за выбранный вариант ответа в указанном
            опросе.
            </summary>
            <param name="params"> Параметры </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Categories.PollsCategory.DeleteVote(VkNet.Model.RequestParams.PollsDeleteVoteParams)">
            <summary>
            Снимает голос текущего пользователя с выбранного варианта ответа в указанном
            опросе.
            </summary>
            <param name="params"> Параметры </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Categories.PollsCategory.GetVoters(VkNet.Model.RequestParams.PollsGetVotersParams)">
            <summary>
            Получает список идентификаторов пользователей, которые выбрали определенные
            варианты ответа в опросе.
            </summary>
            <param name="params"> Параметры </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Categories.PollsCategory.Create(VkNet.Model.RequestParams.Polls.PollsCreateParams)">
            <summary>
            Позволяет создавать опросы, которые впоследствии можно прикреплять к записям на
            странице пользователя или
            сообщества.
            </summary>
            <param name="params"> Параметры </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Categories.SearchCategory">
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.SearchCategory.GetHintsAsync(VkNet.Model.RequestParams.SearchGetHintsParams)">
            <inheritdoc />
        </member>
        <member name="F:VkNet.Categories.SearchCategory._vk">
            <summary>
            API.
            </summary>
        </member>
        <member name="M:VkNet.Categories.SearchCategory.#ctor(VkNet.Abstractions.IVkApiInvoke)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.SearchCategory.GetHints(VkNet.Model.RequestParams.SearchGetHintsParams)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Categories.SecureCategory">
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.SecureCategory.AddAppEventAsync(System.UInt64,System.UInt64,System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.SecureCategory.CheckTokenAsync(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.SecureCategory.GetAppBalanceAsync">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.SecureCategory.GetSmsHistoryAsync(System.Nullable{System.UInt64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.SecureCategory.GetTransactionsHistoryAsync">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.SecureCategory.GetUserLevelAsync(System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.SecureCategory.GiveEventStickerAsync(System.Collections.Generic.IEnumerable{System.UInt64},System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.SecureCategory.SendNotificationAsync(System.String,System.Collections.Generic.IEnumerable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.SecureCategory.SendSmsNotificationAsync(System.UInt64,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.SecureCategory.SetCounterAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.UInt64},System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="F:VkNet.Categories.SecureCategory._vk">
            <summary>
            API.
            </summary>
        </member>
        <member name="M:VkNet.Categories.SecureCategory.#ctor(VkNet.Abstractions.IVkApiInvoke)">
            <inheritdoc />
            <param name="api">
            Api vk.com
            </param>
        </member>
        <member name="M:VkNet.Categories.SecureCategory.AddAppEvent(System.UInt64,System.UInt64,System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.SecureCategory.CheckToken(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.SecureCategory.GetAppBalance">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.SecureCategory.GetSmsHistory(System.Nullable{System.UInt64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.SecureCategory.GetTransactionsHistory">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.SecureCategory.GetUserLevel(System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.SecureCategory.SendNotification(System.String,System.Collections.Generic.IEnumerable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.SecureCategory.SendSmsNotification(System.UInt64,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.SecureCategory.SetCounter(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.UInt64},System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Categories.StatsCategory">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.StatsCategory.GetAsync(VkNet.Model.StatsGetParams)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.StatsCategory.TrackVisitorAsync">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.StatsCategory.GetPostReachAsync(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="F:VkNet.Categories.StatsCategory._vk">
            <summary>
            API.
            </summary>
        </member>
        <member name="M:VkNet.Categories.StatsCategory.#ctor(VkNet.Abstractions.IVkApiInvoke)">
            <summary>
            Методы для работы со статистикой.
            </summary>
            <param name="vk"> API. </param>
        </member>
        <member name="M:VkNet.Categories.StatsCategory.Get(VkNet.Model.StatsGetParams)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.StatsCategory.TrackVisitor">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.StatsCategory.GetPostReach(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Categories.StatusCategory">
            <inheritdoc />
            <summary>
            Методы для работы со статусом пользователя или сообщества.
            </summary>
        </member>
        <member name="M:VkNet.Categories.StatusCategory.GetAsync(System.Int64,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.StatusCategory.SetAsync(System.String,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.StatusCategory.#ctor(VkNet.Abstractions.IVkApiInvoke)">
            <summary>
            </summary>
            <param name="vk"> </param>
        </member>
        <member name="M:VkNet.Categories.StatusCategory.Get(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Получает статус пользователя или сообщества.
            </summary>
            <param name="userId">
            Идентификатор пользователя или сообщества, информацию о статусе которого нужно
            получить.
            </param>
            <param name="groupId">
            Идентификатор сообщества, статус которого необходимо получить. положительное
            число (Положительное
            число).
            </param>
            <returns>
            В случае успеха возвращается статус пользователдя или сообщества.
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской,
            содержащей Settings.Status
            Страница документации ВКонтакте http://vk.com/dev/status.get
            </remarks>
        </member>
        <member name="M:VkNet.Categories.StatusCategory.Set(System.String,System.Nullable{System.Int64})">
            <summary>
            Устанавливает новый статус текущему пользователю.
            </summary>
            <param name="text">
            Текст статуса, который необходимо установить текущему пользователю. Если
            параметр
            равен пустой строке, то статус текущего пользователя будет очищен.
            </param>
            <param name="groupId">
            Идентификатор сообщества, в котором будет установлен статус. По умолчанию
            статус устанавливается
            текущему пользователю.
            </param>
            <returns>
            Возвращает true, если статус был успешно установлен, false в
            противном случае.
            </returns>
            <remarks>
            Для вызова этого метода Ваше приложение должно иметь права с битовой маской,
            содержащей Settings.Status
            Страница документации ВКонтакте http://vk.com/dev/status.set
            </remarks>
        </member>
        <member name="T:VkNet.Categories.StorageCategory">
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.StorageCategory.GetAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.UInt64},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.StorageCategory.GetKeysAsync(System.Nullable{System.UInt64},System.Nullable{System.Boolean},System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.StorageCategory.SetAsync(System.String,System.String,System.Nullable{System.UInt64},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="F:VkNet.Categories.StorageCategory._vk">
            <summary>
            API.
            </summary>
        </member>
        <member name="M:VkNet.Categories.StorageCategory.#ctor(VkNet.VkApi)">
            <inheritdoc />
            <param name="api">
            Api vk.com
            </param>
        </member>
        <member name="M:VkNet.Categories.StorageCategory.Get(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.UInt64},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.StorageCategory.GetKeys(System.Nullable{System.UInt64},System.Nullable{System.Boolean},System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.StorageCategory.Set(System.String,System.String,System.Nullable{System.UInt64},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Categories.StoriesCategory">
            <inheritdoc/>
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.StoriesCategory.BanOwnerAsync(System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.StoriesCategory.DeleteAsync(System.Int64,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.StoriesCategory.GetAsync(System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.StoriesCategory.GetBannedAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.StoriesCategory.GetByIdAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.StoriesCategory.GetPhotoUploadServerAsync(VkNet.Model.RequestParams.Stories.GetPhotoUploadServerParams)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.StoriesCategory.GetRepliesAsync(System.Int64,System.UInt64,System.String,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.StoriesCategory.GetStatsAsync(System.Int64,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.StoriesCategory.GetVideoUploadServerAsync(VkNet.Model.RequestParams.Stories.GetVideoUploadServerParams)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.StoriesCategory.GetViewersAsync(System.Int64,System.UInt64,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.StoriesCategory.HideAllRepliesAsync(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.StoriesCategory.HideReplyAsync(System.Int64,System.UInt64,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.StoriesCategory.UnbanOwnerAsync(System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="F:VkNet.Categories.StoriesCategory._vk">
            <summary>
            API.
            </summary>
        </member>
        <member name="M:VkNet.Categories.StoriesCategory.#ctor(VkNet.Abstractions.IVkApiInvoke)">
            <inheritdoc/>
            <param name = "api">
            Api vk.com
            </param>
        </member>
        <member name="M:VkNet.Categories.StoriesCategory.BanOwner(System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.StoriesCategory.Delete(System.Int64,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.StoriesCategory.Get(System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.StoriesCategory.GetBanned(System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.StoriesCategory.GetById(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.StoriesCategory.GetPhotoUploadServer(VkNet.Model.RequestParams.Stories.GetPhotoUploadServerParams)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.StoriesCategory.GetReplies(System.Int64,System.UInt64,System.String,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.StoriesCategory.GetStats(System.Int64,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.StoriesCategory.GetVideoUploadServer(VkNet.Model.RequestParams.Stories.GetVideoUploadServerParams)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.StoriesCategory.GetViewers(System.Int64,System.UInt64,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.StoriesCategory.HideAllReplies(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.StoriesCategory.HideReply(System.Int64,System.UInt64,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VkNet.Categories.StoriesCategory.UnbanOwner(System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="T:VkNet.Categories.StreamingCategory">
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.StreamingCategory.GetServerUrlAsync">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.StreamingCategory.GetSettingsAsync">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.StreamingCategory.GetStatsAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.StreamingCategory.SetSettingsAsync(VkNet.Enums.SafetyEnums.MonthlyLimit)">
            <inheritdoc />
        </member>
        <member name="F:VkNet.Categories.StreamingCategory._vk">
            <summary>
            API.
            </summary>
        </member>
        <member name="M:VkNet.Categories.StreamingCategory.#ctor(VkNet.VkApi)">
            <inheritdoc />
            <param name="api">
            Api vk.com
            </param>
        </member>
        <member name="M:VkNet.Categories.StreamingCategory.GetServerUrl">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.StreamingCategory.GetSettings">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.StreamingCategory.GetStats(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.StreamingCategory.SetSettings(VkNet.Enums.SafetyEnums.MonthlyLimit)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Categories.UsersCategory">
            <inheritdoc />
            <summary>
            Методы для работы с информацией о пользователях.
            </summary>
        </member>
        <member name="M:VkNet.Categories.UsersCategory.SearchAsync(VkNet.Model.RequestParams.UserSearchParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.UsersCategory.IsAppUserAsync(System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.UsersCategory.GetAsync(System.Collections.Generic.IEnumerable{System.Int64},VkNet.Enums.Filters.ProfileFields,VkNet.Enums.SafetyEnums.NameCase,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.UsersCategory.GetAsync(System.Collections.Generic.IEnumerable{System.String},VkNet.Enums.Filters.ProfileFields,VkNet.Enums.SafetyEnums.NameCase,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.UsersCategory.GetSubscriptionsAsync(System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},VkNet.Enums.Filters.GroupsFields,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.UsersCategory.GetFollowersAsync(System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},VkNet.Enums.Filters.ProfileFields,VkNet.Enums.SafetyEnums.NameCase,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.UsersCategory.ReportAsync(System.Int64,VkNet.Enums.SafetyEnums.ReportType,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.UsersCategory.GetNearbyAsync(VkNet.Model.RequestParams.UsersGetNearbyParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.UsersCategory.#ctor(VkNet.Abstractions.IVkApiInvoke)">
            <summary>
            </summary>
            <param name="vk"> </param>
        </member>
        <member name="M:VkNet.Categories.UsersCategory.Search(VkNet.Model.RequestParams.UserSearchParams)">
            <summary>
            Возвращает список пользователей в соответствии с заданным критерием поиска.
            </summary>
            <param name="params"> Параметры запроса. </param>
            <returns>
            После успешного выполнения возвращает список объектов пользователей, найденных
            в соответствии с заданными
            критериями.
            </returns>
            <exception cref="T:System.ArgumentException"> Query can not be <c> null </c> or empty. </exception>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/users.search
            </remarks>
        </member>
        <member name="M:VkNet.Categories.UsersCategory.IsAppUser(System.Nullable{System.Int64})">
            <summary>
            Возвращает информацию о том, установил ли пользователь приложение.
            </summary>
            <param name="userId">
            Идентификатор пользователя. целое число, по умолчанию идентификатор текущего
            пользователя (Целое
            число, по умолчанию идентификатор текущего пользователя).
            </param>
            <returns>
            После успешного выполнения возвращает 1 в случае, если пользователь установил у
            себя данное приложение, иначе 0.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/users.isAppUser
            </remarks>
        </member>
        <member name="M:VkNet.Categories.UsersCategory.Get(System.Collections.Generic.IEnumerable{System.Int64},VkNet.Enums.Filters.ProfileFields,VkNet.Enums.SafetyEnums.NameCase,System.Boolean)">
            <summary>
            Возвращает расширенную информацию о пользователях. Метод не требует авторизацию
            </summary>
            <param name="userIds">
            Идентификаторы пользователей, о которых необходимо
            получить информацию.
            </param>
            <param name="fields"> Поля профилей, которые необходимо возвратить. </param>
            <param name="nameCase"> Падеж для склонения имени и фамилии пользователя </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns> Список объектов с запрошенной информацией о пользователях. </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/users.get
            </remarks>
        </member>
        <member name="M:VkNet.Categories.UsersCategory.Get(System.Collections.Generic.IEnumerable{System.String},VkNet.Enums.Filters.ProfileFields,VkNet.Enums.SafetyEnums.NameCase,System.Boolean)">
            <summary>
            Возвращает расширенную информацию о пользователях.
            </summary>
            <param name="screenNames">
            Короткие имена пользователей, о которых необходимо
            получить информацию.
            </param>
            <param name="fields"> Поля профилей, которые необходимо возвратить. </param>
            <param name="nameCase"> Падеж для склонения имени и фамилии пользователя </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns> Список объектов с запрошенной информацией о пользователях. </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/users.get
            </remarks>
        </member>
        <member name="M:VkNet.Categories.UsersCategory.GetSubscriptions(System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},VkNet.Enums.Filters.GroupsFields,System.Boolean)">
            <summary>
            Возвращает список идентификаторов пользователей и групп, которые входят в
            список подписок пользователя.
            </summary>
            <param name="userId">
            Идентификатор пользователя, подписки которого необходимо
            получить
            </param>
            <param name="count"> Количество подписок, которые необходимо вернуть </param>
            <param name="offset">
            Смещение необходимое для выборки определенного
            подмножества подписок
            </param>
            <param name="fields">
            Список дополнительных полей для объектов user и group, которые необходимо
            вернуть.
            </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns>
            Пока возвращается только список групп.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/users.getSubscriptions
            </remarks>
        </member>
        <member name="M:VkNet.Categories.UsersCategory.GetFollowers(System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},VkNet.Enums.Filters.ProfileFields,VkNet.Enums.SafetyEnums.NameCase,System.Boolean)">
            <summary>
            Возвращает список идентификаторов пользователей, которые являются подписчиками
            пользователя.
            </summary>
            <param name="userId"> Идентификатор пользователя </param>
            <param name="count">
            Количество подписчиков, информацию о которых нужно
            получить
            </param>
            <param name="offset">
            Смещение, необходимое для выборки определенного
            подмножества подписчиков
            </param>
            <param name="fields"> Список дополнительных полей, которые необходимо вернуть </param>
            <param name="nameCase"> Падеж для склонения имени и фамилии пользователя </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns> Список подписчиков </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/users.getFollowers
            </remarks>
        </member>
        <member name="M:VkNet.Categories.UsersCategory.Report(System.Int64,VkNet.Enums.SafetyEnums.ReportType,System.String)">
            <summary>
            Позволяет пожаловаться на пользователя.
            </summary>
            <param name="userId">
            Идентификатор пользователя, на которого осуществляется
            жалоба
            </param>
            <param name="type"> Тип жалобы </param>
            <param name="comment"> Комментарий к жалобе на пользователя </param>
            <returns> В случае успешной жалобы метод вернет true. </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/users.report
            </remarks>
        </member>
        <member name="M:VkNet.Categories.UsersCategory.GetNearby(VkNet.Model.RequestParams.UsersGetNearbyParams)">
            <summary>
            Индексирует текущее местоположение пользователя и возвращает список
            пользователей, которые находятся вблизи.
            </summary>
            <param name="params"> Входные параметры выборки. </param>
            <returns>
            После успешного выполнения возвращает список объектов user.
            </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/users.getNearby
            </remarks>
        </member>
        <member name="M:VkNet.Categories.UsersCategory.Get(System.Int64,VkNet.Enums.Filters.ProfileFields,VkNet.Enums.SafetyEnums.NameCase,System.Boolean)">
            <summary>
            Возвращает расширенную информацию о пользователе.
            </summary>
            <param name="userId"> Идентификатор пользователя. </param>
            <param name="fields"> Поля профиля, которые необходимо возвратить. </param>
            <param name="nameCase"> Падеж для склонения имени и фамилии пользователя </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns> Объект, содержащий запрошенную информацию о пользователе. </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/getProfiles
            </remarks>
        </member>
        <member name="M:VkNet.Categories.UsersCategory.Get(System.String,VkNet.Enums.Filters.ProfileFields,VkNet.Enums.SafetyEnums.NameCase,System.Boolean)">
            <summary>
            Возвращает расширенную информацию о пользователе.
            </summary>
            <param name="screenName"> Короткое имя пользователя </param>
            <param name="fields"> Поля профилей, которые необходимо возвратить. </param>
            <param name="nameCase"> Падеж для склонения имени и фамилии пользователя </param>
            <param name="skipAuthorization"> Если <c> true </c>, то пропустить авторизацию </param>
            <returns> Объект User </returns>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/users.get
            </remarks>
        </member>
        <member name="T:VkNet.Categories.UtilsCategory">
            <inheritdoc />
            <summary>
            Служебные методы.
            </summary>
        </member>
        <member name="M:VkNet.Categories.UtilsCategory.CheckLinkAsync(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.UtilsCategory.CheckLinkAsync(System.Uri,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.UtilsCategory.ResolveScreenNameAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.UtilsCategory.GetServerTimeAsync">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.UtilsCategory.GetShortLinkAsync(System.Uri,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.UtilsCategory.DeleteFromLastShortenedAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.UtilsCategory.GetLastShortenedLinksAsync(System.UInt64,System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.UtilsCategory.GetLinkStatsAsync(VkNet.Model.RequestParams.LinkStatsParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.UtilsCategory.#ctor(VkNet.Abstractions.IVkApiInvoke)">
            <summary>
            </summary>
            <param name="vk"> </param>
        </member>
        <member name="M:VkNet.Categories.UtilsCategory.CheckLink(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.UtilsCategory.CheckLink(System.Uri,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.UtilsCategory.ResolveScreenName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.UtilsCategory.GetServerTime">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.UtilsCategory.GetShortLink(System.Uri,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.UtilsCategory.DeleteFromLastShortened(System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.UtilsCategory.GetLastShortenedLinks(System.UInt64,System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.UtilsCategory.GetLinkStats(VkNet.Model.RequestParams.LinkStatsParams)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Categories.VideoCategory">
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.GetAsync(VkNet.Model.RequestParams.VideoGetParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.EditAsync(VkNet.Model.RequestParams.VideoEditParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.AddAsync(System.Int64,System.Int64,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.SaveAsync(VkNet.Model.RequestParams.VideoSaveParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.DeleteAsync(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.RestoreAsync(System.Int64,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.SearchAsync(VkNet.Model.RequestParams.VideoSearchParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.GetAlbumsAsync(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.AddAlbumAsync(System.String,System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{VkNet.Enums.SafetyEnums.Privacy})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.EditAlbumAsync(System.Int64,System.String,System.Nullable{System.Int64},VkNet.Enums.SafetyEnums.Privacy)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.DeleteAlbumAsync(System.Int64,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.GetCommentsAsync(VkNet.Model.RequestParams.VideoGetCommentsParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.CreateCommentAsync(VkNet.Model.RequestParams.VideoCreateCommentParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.DeleteCommentAsync(System.Int64,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.RestoreCommentAsync(System.Int64,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.EditCommentAsync(System.Int64,System.String,System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{VkNet.Model.Attachments.MediaAttachment})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.ReportAsync(System.Int64,VkNet.Enums.ReportReason,System.Nullable{System.Int64},System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.ReportCommentAsync(System.Int64,System.Int64,VkNet.Enums.ReportReason)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.GetAlbumByIdAsync(System.Int64,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.ReorderAlbumsAsync(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.ReorderVideosAsync(VkNet.Model.RequestParams.VideoReorderVideosParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.AddToAlbumAsync(System.Int64,System.Int64,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.RemoveFromAlbumAsync(System.Int64,System.Int64,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.GetAlbumsByVideoAsync(System.Nullable{System.Int64},System.Int64,System.Int64,System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.GetCatalogAsync(VkNet.Model.RequestParams.VideoGetCatalogParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.GetCatalogSectionAsync(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.HideCatalogSectionAsync(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.#ctor(VkNet.Abstractions.IVkApiInvoke)">
            <summary>
            </summary>
            <param name="vk"> </param>
        </member>
        <member name="M:VkNet.Categories.VideoCategory.Get(VkNet.Model.RequestParams.VideoGetParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.Edit(VkNet.Model.RequestParams.VideoEditParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.Add(System.Int64,System.Int64,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.Save(VkNet.Model.RequestParams.VideoSaveParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.Delete(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.Restore(System.Int64,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.Search(VkNet.Model.RequestParams.VideoSearchParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.GetAlbums(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.AddAlbum(System.String,System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{VkNet.Enums.SafetyEnums.Privacy})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.EditAlbum(System.Int64,System.String,System.Nullable{System.Int64},VkNet.Enums.SafetyEnums.Privacy)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.DeleteAlbum(System.Int64,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.GetComments(VkNet.Model.RequestParams.VideoGetCommentsParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.CreateComment(VkNet.Model.RequestParams.VideoCreateCommentParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.DeleteComment(System.Int64,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.RestoreComment(System.Int64,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.EditComment(System.Int64,System.String,System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{VkNet.Model.Attachments.MediaAttachment})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.Report(System.Int64,VkNet.Enums.ReportReason,System.Nullable{System.Int64},System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.ReportComment(System.Int64,System.Int64,VkNet.Enums.ReportReason)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.GetAlbumById(System.Int64,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.ReorderAlbums(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.ReorderVideos(VkNet.Model.RequestParams.VideoReorderVideosParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.AddToAlbum(System.Int64,System.Int64,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.RemoveFromAlbum(System.Int64,System.Int64,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.GetAlbumsByVideo(System.Nullable{System.Int64},System.Int64,System.Int64,System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.GetCatalog(VkNet.Model.RequestParams.VideoGetCatalogParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.GetCatalogSection(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.VideoCategory.HideCatalogSection(System.Int64)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Categories.WallCategory">
            <inheritdoc />
            <summary>
            Методы для работы со стеной пользователя.
            </summary>
        </member>
        <member name="M:VkNet.Categories.WallCategory.GetAsync(VkNet.Model.RequestParams.WallGetParams,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.GetCommentsAsync(VkNet.Model.RequestParams.WallGetCommentsParams,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.GetByIdAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Nullable{System.Int64},VkNet.Enums.Filters.ProfileFields,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.PostAsync(VkNet.Model.RequestParams.WallPostParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.RepostAsync(System.String,System.String,System.Nullable{System.Int64},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.EditAsync(VkNet.Model.RequestParams.WallEditParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.DeleteAsync(System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.RestoreAsync(System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.CreateCommentAsync(VkNet.Model.RequestParams.WallCreateCommentParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.DeleteCommentAsync(System.Nullable{System.Int64},System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.RestoreCommentAsync(System.Int64,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.SearchAsync(VkNet.Model.RequestParams.WallSearchParams,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.GetRepostsAsync(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.PinAsync(System.Int64,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.UnpinAsync(System.Int64,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.EditCommentAsync(System.Int64,System.String,System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{VkNet.Model.Attachments.MediaAttachment})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.ReportPostAsync(System.Int64,System.Int64,System.Nullable{VkNet.Enums.ReportReason})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.ReportCommentAsync(System.Int64,System.Int64,System.Nullable{VkNet.Enums.ReportReason})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.EditAdsStealthAsync(VkNet.Model.RequestParams.EditAdsStealthParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.PostAdsStealthAsync(VkNet.Model.RequestParams.PostAdsStealthParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.OpenCommentsAsync(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.CloseCommentsAsync(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.#ctor(VkNet.Abstractions.IVkApiInvoke)">
            <summary>
            </summary>
            <param name="vk"> </param>
        </member>
        <member name="M:VkNet.Categories.WallCategory.Get(VkNet.Model.RequestParams.WallGetParams,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.GetComments(VkNet.Model.RequestParams.WallGetCommentsParams,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.GetById(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Nullable{System.Int64},VkNet.Enums.Filters.ProfileFields,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.Post(VkNet.Model.RequestParams.WallPostParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.Repost(System.String,System.String,System.Nullable{System.Int64},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.Repost(System.String,System.String,System.Nullable{System.Int64},System.Boolean,System.Int64,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.Edit(VkNet.Model.RequestParams.WallEditParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.Delete(System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.Restore(System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.CreateComment(VkNet.Model.RequestParams.WallCreateCommentParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.DeleteComment(System.Nullable{System.Int64},System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.RestoreComment(System.Int64,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.Search(VkNet.Model.RequestParams.WallSearchParams,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.GetReposts(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.Pin(System.Int64,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.Unpin(System.Int64,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.EditComment(System.Int64,System.String,System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{VkNet.Model.Attachments.MediaAttachment})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.ReportPost(System.Int64,System.Int64,System.Nullable{VkNet.Enums.ReportReason})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.ReportComment(System.Int64,System.Int64,System.Nullable{VkNet.Enums.ReportReason})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.EditAdsStealth(VkNet.Model.RequestParams.EditAdsStealthParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.PostAdsStealth(VkNet.Model.RequestParams.PostAdsStealthParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.OpenComments(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WallCategory.CloseComments(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Categories.WidgetsCategory">
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WidgetsCategory.GetCommentsAsync(VkNet.Model.RequestParams.GetCommentsParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WidgetsCategory.GetPagesAsync(System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="F:VkNet.Categories.WidgetsCategory._vk">
            <summary>
            API.
            </summary>
        </member>
        <member name="M:VkNet.Categories.WidgetsCategory.#ctor(VkNet.VkApi)">
            <inheritdoc />
            <param name="api">
            Api vk.com
            </param>
        </member>
        <member name="M:VkNet.Categories.WidgetsCategory.GetComments(VkNet.Model.RequestParams.GetCommentsParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Categories.WidgetsCategory.GetPages(System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Enums.AccessPages">
            <summary>
            Уровень доступа для взаимодействия со страницей.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AccessPages.Leaders">
            <summary>
            Только руководители сообщества.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AccessPages.Participants">
            <summary>
            Только участники сообщества.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AccessPages.All">
            <summary>
            Все пользователи.
            </summary>
        </member>
        <member name="T:VkNet.Enums.AccountStatus">
            <summary>
            Статус рекламного кабинета.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AccountStatus.Active">
            <summary>
            Активен
            </summary>
        </member>
        <member name="F:VkNet.Enums.AccountStatus.Inactive">
            <summary>
            Неактивен
            </summary>
        </member>
        <member name="T:VkNet.Enums.AdAgeRestriction">
            <summary>
            Возрастное ограничение
            </summary>
        </member>
        <member name="F:VkNet.Enums.AdAgeRestriction.NoRestriction">
            <summary>
            0+
            </summary>
        </member>
        <member name="F:VkNet.Enums.AdAgeRestriction.ZeroPlus">
            <summary>
            0+
            </summary>
        </member>
        <member name="F:VkNet.Enums.AdAgeRestriction.SixPlus">
            <summary>
            6+
            </summary>
        </member>
        <member name="F:VkNet.Enums.AdAgeRestriction.TwelvePlus">
            <summary>
            12+
            </summary>
        </member>
        <member name="F:VkNet.Enums.AdAgeRestriction.SixteenPlus">
            <summary>
            16+
            </summary>
        </member>
        <member name="F:VkNet.Enums.AdAgeRestriction.EighteeenPlus">
            <summary>
            18+
            </summary>
        </member>
        <member name="T:VkNet.Enums.AddFriendStatus">
            <summary>
            Статус, возвращаемый после отправки запроса на добавления в друзья
            </summary>
        </member>
        <member name="F:VkNet.Enums.AddFriendStatus.Unknown">
            <summary>
            Статус в случае ошибки ответа
            </summary>
        </member>
        <member name="F:VkNet.Enums.AddFriendStatus.Sended">
            <summary>
            Заявка на добавление данного пользователя в друзья отправлена
            </summary>
        </member>
        <member name="F:VkNet.Enums.AddFriendStatus.Accepted">
            <summary>
            Заявка на добавление в друзья от данного пользователя одобрена
            </summary>
        </member>
        <member name="F:VkNet.Enums.AddFriendStatus.Resubmit">
            <summary>
            Повторная отправка заявки
            </summary>
        </member>
        <member name="T:VkNet.Enums.AdFormat">
            <summary>
            Формат объявления.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AdFormat.ImageAndText">
            <summary>
            Изображение и текст
            </summary>
        </member>
        <member name="F:VkNet.Enums.AdFormat.BigImage">
            <summary>
            Большое изображение
            </summary>
        </member>
        <member name="F:VkNet.Enums.AdFormat.ExclusiveFormat">
            <summary>
            Эксклюзивный формат
            </summary>
        </member>
        <member name="F:VkNet.Enums.AdFormat.SquareImage">
            <summary>
            Продвижение сообществ или приложений, квадратное изображение
            </summary>
        </member>
        <member name="F:VkNet.Enums.AdFormat.NewsfeedApp">
            <summary>
            Приложение в новостной ленте (устаревший)
            </summary>
        </member>
        <member name="F:VkNet.Enums.AdFormat.MobileApp">
            <summary>
            мобильное приложение;
            </summary>
        </member>
        <member name="F:VkNet.Enums.AdFormat.Public">
            <summary>
            запись в сообществе.
            </summary>
        </member>
        <member name="T:VkNet.Enums.AdminLevel">
            <summary>
            Административные полномочия пользователя в сообществе.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AdminLevel.Moderator">
            <summary>
            Пользователь является модератором собщества.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AdminLevel.Editor">
            <summary>
            Пользователь является редактором сообщества.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AdminLevel.Administrator">
            <summary>
            Пользователь является администратором сообщества.
            </summary>
        </member>
        <member name="T:VkNet.Enums.AdStatus">
            <summary>
            Cтатус объявления.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AdStatus.Stopped">
            <summary>
            Объявление остановлено
            </summary>
        </member>
        <member name="F:VkNet.Enums.AdStatus.Active">
            <summary>
            Объявление запущено
            </summary>
        </member>
        <member name="F:VkNet.Enums.AdStatus.Deleted">
            <summary>
            Объявление удалено
            </summary>
        </member>
        <member name="T:VkNet.Enums.AgeLimit">
            <summary>
            Возрастные ограничения
            </summary>
        </member>
        <member name="F:VkNet.Enums.AgeLimit.Withoutlimit">
            <summary>
            Нет ограничений
            </summary>
        </member>
        <member name="F:VkNet.Enums.AgeLimit.Sixteen">
            <summary>
            16+
            </summary>
        </member>
        <member name="F:VkNet.Enums.AgeLimit.Eighteen">
            <summary>
            18+
            </summary>
        </member>
        <member name="T:VkNet.Enums.Attitude">
            <summary>
            Отношение к чему-либо (алкоголю, курению и т.п.).
            </summary>
        </member>
        <member name="F:VkNet.Enums.Attitude.Unknown">
            <summary>
            Не указано.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Attitude.VeryNegative">
            <summary>
            Резко негативное.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Attitude.Negative">
            <summary>
            Негативное.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Attitude.Compromise">
            <summary>
            Компромиссное.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Attitude.Neutral">
            <summary>
            Нейтральное.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Attitude.Positive">
            <summary>
            Положительное.
            </summary>
        </member>
        <member name="T:VkNet.Enums.AudioGenre">
            <summary>
            Идентификаторы жанров музыки.
            </summary>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/audio_object
            </remarks>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.Rock">
            <summary>
            Рок музыка.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.Pop">
            <summary>
            Популярная музыка.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.RapAndHipHop">
            <summary>
            Реп и хип-хоп.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.EasyListening">
            <summary>
            Легкая музыка.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.DanceAndHouse">
            <summary>
            Танцевальная и хаус музыка.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.Instrumental">
            <summary>
            Инструментальная музыка.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.Metal">
            <summary>
            Метал.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.Alternative">
            <summary>
            Альтернативная музыка.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.Dubstep">
            <summary>
            Дабстеп.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.JazzAndBlues">
            <summary>
            Джаз и блюз.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.DrumAndBass">
            <summary>
            Драм-н-бэйс.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.Trance">
            <summary>
            Транс.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.Chanson">
            <summary>
            Шансон.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.Ethnic">
            <summary>
            Этническая музыка.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.AcousticAndVocal">
            <summary>
            Акустическая музыка и вокал.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.Reggae">
            <summary>
            Регги.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.Classical">
            <summary>
            Классическая музыка.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.IndiePop">
            <summary>
            Инди-поп.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.Speech">
            <summary>
            Спич.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.ElectropopAndDisco">
            <summary>
            Электро-поп и диско.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioGenre.Other">
            <summary>
            Другая музыка.
            </summary>
        </member>
        <member name="T:VkNet.Enums.AudioSort">
            <summary>
            Способ сортировки аудиозаписей.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioSort.AddedDate">
            <summary>
            Сортировать по дате добавления.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioSort.Duration">
            <summary>
            Сортировать подлительности.
            </summary>
        </member>
        <member name="F:VkNet.Enums.AudioSort.Popularity">
            <summary>
            Сортировать по популярности.
            </summary>
        </member>
        <member name="T:VkNet.Enums.BanReason">
            <summary>
            Причина бана
            </summary>
        </member>
        <member name="F:VkNet.Enums.BanReason.Other">
            <summary>
            Другое.
            </summary>
        </member>
        <member name="F:VkNet.Enums.BanReason.Spam">
            <summary>
            Спам.
            </summary>
        </member>
        <member name="F:VkNet.Enums.BanReason.VerbalAbuse">
            <summary>
            Оскорбление участников.
            </summary>
        </member>
        <member name="F:VkNet.Enums.BanReason.StrongLanguage">
            <summary>
            Нецензурные выражения.
            </summary>
        </member>
        <member name="F:VkNet.Enums.BanReason.IrrelevantMessages">
            <summary>
            Сообщения не по теме.
            </summary>
        </member>
        <member name="T:VkNet.Enums.BirthdayVisibility">
            <summary>
            Видимость даты рождения
            </summary>
        </member>
        <member name="F:VkNet.Enums.BirthdayVisibility.Invisible">
            <summary>
            Не показывать дату рождения.
            </summary>
        </member>
        <member name="F:VkNet.Enums.BirthdayVisibility.Full">
            <summary>
            Показывать дату рождения.
            </summary>
        </member>
        <member name="F:VkNet.Enums.BirthdayVisibility.OnlyDayAndMonth">
            <summary>
            Показывать только месяц и день.
            </summary>
        </member>
        <member name="T:VkNet.Enums.CampaignStatus">
            <summary>
            Статус кампании.
            </summary>
        </member>
        <member name="F:VkNet.Enums.CampaignStatus.Stopped">
            <summary>
            Кампания остановлена
            </summary>
        </member>
        <member name="F:VkNet.Enums.CampaignStatus.Started">
            <summary>
            Кампания запущена
            </summary>
        </member>
        <member name="F:VkNet.Enums.CampaignStatus.Deleted">
            <summary>
            Кампания удалена
            </summary>
        </member>
        <member name="T:VkNet.Enums.CancelSubscriptionReason">
            <summary>
            Причина отказа
            </summary>
        </member>
        <member name="F:VkNet.Enums.CancelSubscriptionReason.UserDecision">
            <summary>
            По решению пользователя
            </summary>
        </member>
        <member name="F:VkNet.Enums.CancelSubscriptionReason.AppDecision">
            <summary>
            По решению приложения
            </summary>
        </member>
        <member name="F:VkNet.Enums.CancelSubscriptionReason.PaymentFail">
            <summary>
            Ошибка оплаты
            </summary>
        </member>
        <member name="F:VkNet.Enums.CancelSubscriptionReason.Unknown">
            <summary>
            Неизвестная причина
            </summary>
        </member>
        <member name="T:VkNet.Enums.CanWriteReason">
            <summary>
            Код ошибки для allowed = false.
            </summary>
        </member>
        <member name="F:VkNet.Enums.CanWriteReason.UserBannedOrDeleted">
            <summary>
            Пользователь заблокирован или удален
            </summary>
        </member>
        <member name="F:VkNet.Enums.CanWriteReason.BlackListedUser">
            <summary>
            Нельзя отправить сообщение пользователю, который в чёрном списке;
            </summary>
        </member>
        <member name="F:VkNet.Enums.CanWriteReason.LockMessagesFromGroup">
            <summary>
            Пользователь запретил сообщения от сообщества;
            </summary>
        </member>
        <member name="F:VkNet.Enums.CanWriteReason.LockMessagesFromUser">
            <summary>
            Пользователь запретил присылать ему сообщения с помощью настроек приватности;
            </summary>
        </member>
        <member name="F:VkNet.Enums.CanWriteReason.GroupMessagesOff">
            <summary>
            В сообществе отключены сообщения;
            </summary>
        </member>
        <member name="F:VkNet.Enums.CanWriteReason.GroupMessagesLocked">
            <summary>
            В сообществе заблокированы сообщения;
            </summary>
        </member>
        <member name="F:VkNet.Enums.CanWriteReason.ChatAccessDenied">
            <summary>
            Нет доступа к чату;
            </summary>
        </member>
        <member name="F:VkNet.Enums.CanWriteReason.MailAccessDenied">
            <summary>
            Нет доступа к e-mail;
            </summary>
        </member>
        <member name="F:VkNet.Enums.CanWriteReason.GroupAccessDenied">
            <summary>
            Нет доступа к сообществу.
            </summary>
        </member>
        <member name="T:VkNet.Enums.ContentAccess">
            <summary>
            Уровень доступа к содержимому.
            </summary>
        </member>
        <member name="F:VkNet.Enums.ContentAccess.Off">
            <summary>
            Выключены
            </summary>
        </member>
        <member name="F:VkNet.Enums.ContentAccess.Opened">
            <summary>
            Открытые
            </summary>
        </member>
        <member name="F:VkNet.Enums.ContentAccess.Restricted">
            <summary>
            Ограниченные
            </summary>
        </member>
        <member name="T:VkNet.Enums.CostType">
            <summary>
            Тип оплаты
            </summary>
        </member>
        <member name="F:VkNet.Enums.CostType.Cpc">
            <summary>
            Оплата за переходы
            </summary>
        </member>
        <member name="F:VkNet.Enums.CostType.Cpm">
            <summary>
            Оплата за показы
            </summary>
        </member>
        <member name="T:VkNet.Enums.DeleteFriendStatus">
            <summary>
            Возвращаемый статус после удаления пользователя из списка друзей
            </summary>
        </member>
        <member name="F:VkNet.Enums.DeleteFriendStatus.Unknown">
            <summary>
            Неопределенный статус ответа
            </summary>
        </member>
        <member name="F:VkNet.Enums.DeleteFriendStatus.UserIsDeleted">
            <summary>
            Пользователь удален из списка друзей
            </summary>
        </member>
        <member name="F:VkNet.Enums.DeleteFriendStatus.RequestRejected">
            <summary>
            Заявка на добавление в друзья от данного пользователя отклонена
            </summary>
        </member>
        <member name="F:VkNet.Enums.DeleteFriendStatus.RecommendationDeleted">
            <summary>
            Рекомендация добавить в друзья данного пользователя удалена
            </summary>
        </member>
        <member name="T:VkNet.Enums.DocFilter">
            <summary>
            Фильтр по типу документа.
            </summary>
        </member>
        <member name="F:VkNet.Enums.DocFilter.Text">
            <summary>
            1 - текстовые документы
            </summary>
        </member>
        <member name="F:VkNet.Enums.DocFilter.Archive">
            <summary>
            2 - архивы
            </summary>
        </member>
        <member name="F:VkNet.Enums.DocFilter.Gif">
            <summary>
            3 - gif
            </summary>
        </member>
        <member name="F:VkNet.Enums.DocFilter.Image">
            <summary>
            4 - изображения
            </summary>
        </member>
        <member name="F:VkNet.Enums.DocFilter.Audio">
            <summary>
            5 - аудио
            </summary>
        </member>
        <member name="F:VkNet.Enums.DocFilter.Video">
            <summary>
            6 - видео
            </summary>
        </member>
        <member name="F:VkNet.Enums.DocFilter.EBook">
            <summary>
            7 - электронные книги
            </summary>
        </member>
        <member name="F:VkNet.Enums.DocFilter.Unknown">
            <summary>
            8 - неизвестно
            </summary>
        </member>
        <member name="F:VkNet.Enums.DocumentTypeEnum.Text">
            <summary>
            Текстовые документы
            </summary>
        </member>
        <member name="F:VkNet.Enums.DocumentTypeEnum.Archive">
            <summary>
            Архивы
            </summary>
        </member>
        <member name="F:VkNet.Enums.DocumentTypeEnum.Gif">
            <summary>
            gif
            </summary>
        </member>
        <member name="F:VkNet.Enums.DocumentTypeEnum.Image">
            <summary>
            Изображения
            </summary>
        </member>
        <member name="F:VkNet.Enums.DocumentTypeEnum.Audio">
            <summary>
            Аудио
            </summary>
        </member>
        <member name="F:VkNet.Enums.DocumentTypeEnum.Video">
            <summary>
            Видео
            </summary>
        </member>
        <member name="F:VkNet.Enums.DocumentTypeEnum.EBook">
            <summary>
            Электронные книги
            </summary>
        </member>
        <member name="F:VkNet.Enums.DocumentTypeEnum.Unknown">
            <summary>
            Неизвестно
            </summary>
        </member>
        <member name="T:VkNet.Enums.DocumentTypes">
            <summary>
            тип документа
            </summary>
        </member>
        <member name="F:VkNet.Enums.DocumentTypes.Text">
            <summary>
            текстовые документы
            </summary>
        </member>
        <member name="F:VkNet.Enums.DocumentTypes.Archive">
            <summary>
            архивы
            </summary>
        </member>
        <member name="F:VkNet.Enums.DocumentTypes.Gif">
            <summary>
            gif
            </summary>
        </member>
        <member name="F:VkNet.Enums.DocumentTypes.Image">
            <summary>
            изображения
            </summary>
        </member>
        <member name="F:VkNet.Enums.DocumentTypes.Audio">
            <summary>
            аудио
            </summary>
        </member>
        <member name="F:VkNet.Enums.DocumentTypes.Video">
            <summary>
            видео
            </summary>
        </member>
        <member name="F:VkNet.Enums.DocumentTypes.EBook">
            <summary>
            электронные книги
            </summary>
        </member>
        <member name="F:VkNet.Enums.DocumentTypes.Undefined">
            <summary>
            неизвестно
            </summary>
        </member>
        <member name="T:VkNet.Enums.EventMemberStatus">
            <summary>
            Идёт ли текущий пользователь на встречу.
            </summary>
        </member>
        <member name="F:VkNet.Enums.EventMemberStatus.Exactly">
            <summary>
            Точно идёт
            </summary>
        </member>
        <member name="F:VkNet.Enums.EventMemberStatus.Possible">
            <summary>
            Возможно пойдёт
            </summary>
        </member>
        <member name="F:VkNet.Enums.EventMemberStatus.NotGoing">
            <summary>
            Не идёт
            </summary>
        </member>
        <member name="T:VkNet.Enums.EventsRetargetingGroup">
            <summary>
            Только для ad_format = 9. Описание событий, собираемых в группы ретаргетинга. Массив объектов, где ключом является id группы ретаргетинга, а значением - массив событий.
            </summary>
        </member>
        <member name="F:VkNet.Enums.EventsRetargetingGroup.ViewOfPromoPost">
            <summary>
            Просмотр промопоста
            </summary>
        </member>
        <member name="F:VkNet.Enums.EventsRetargetingGroup.Click">
            <summary>
            Переход по ссылке или переход в сообщество
            </summary>
        </member>
        <member name="F:VkNet.Enums.EventsRetargetingGroup.PublicClick">
            <summary>
            Переход в сообщество
            </summary>
        </member>
        <member name="F:VkNet.Enums.EventsRetargetingGroup.Subscription">
            <summary>
            Подписка на сообщество
            </summary>
        </member>
        <member name="F:VkNet.Enums.EventsRetargetingGroup.PublicNewsUnsubscription">
            <summary>
            Отписка от новостей сообщества
            </summary>
        </member>
        <member name="F:VkNet.Enums.EventsRetargetingGroup.HidingOrComplaint">
            <summary>
            Cкрытие или жалоба
            </summary>
        </member>
        <member name="F:VkNet.Enums.EventsRetargetingGroup.VideoStarting">
            <summary>
            Запуск видео;
            </summary>
        </member>
        <member name="F:VkNet.Enums.EventsRetargetingGroup.Watching3S">
            <summary>
            досмотр видео до 3с
            </summary>
        </member>
        <member name="F:VkNet.Enums.EventsRetargetingGroup.Watching25Perc">
            <summary>
            Досмотр видео до 25%
            </summary>
        </member>
        <member name="F:VkNet.Enums.EventsRetargetingGroup.Watching50Perc">
            <summary>
            Досмотр видео до 50%
            </summary>
        </member>
        <member name="F:VkNet.Enums.EventsRetargetingGroup.Watching75Perc">
            <summary>
            Досмотр видео до 75%
            </summary>
        </member>
        <member name="F:VkNet.Enums.EventsRetargetingGroup.Watching100Perc">
            <summary>
            Досмотр видео до 100%
            </summary>
        </member>
        <member name="F:VkNet.Enums.EventsRetargetingGroup.Like">
            <summary>
            Лайк продвигаемой записи
            </summary>
        </member>
        <member name="F:VkNet.Enums.EventsRetargetingGroup.Repost">
            <summary>
            Репост продвигаемой записи
            </summary>
        </member>
        <member name="T:VkNet.Enums.Filters.AccountFields">
            <summary>
            Поля информации о аккаунте.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.AccountFields.Country">
            <summary>
            Страна.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.AccountFields.HttpsRequired">
            <summary>
            Обязательно HTTPS.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.AccountFields.OwnPostsDefault">
            <summary>
            По умолчанию посты только владелец.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.AccountFields.NoWallReplies">
            <summary>
            Не комментировать стену.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.AccountFields.Intro">
            <summary>
            Вступление.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.AccountFields.Language">
            <summary>
            Язык.
            </summary>
        </member>
        <member name="T:VkNet.Enums.Filters.AppFilter">
            <summary>
            Тип фильтрации для приложений.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.AppFilter.Installed">
            <summary>
            Возвращает список установленных приложений (только для мобильных приложений),
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.AppFilter.Featured">
            <summary>
            Возвращает список приложений, установленных в "Выбор редакции" (только для
            мобильных приложений)
            </summary>
        </member>
        <member name="T:VkNet.Enums.Filters.AudioBroadcastFilter">
            <summary>
            Определяет, какие типы объектов необходимо получить.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.AudioBroadcastFilter.Friends">
            <summary>
            Только друзья.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.AudioBroadcastFilter.Groups">
            <summary>
            Только сообщества.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.AudioBroadcastFilter.All">
            <summary>
            Друзья и сообщества.
            </summary>
        </member>
        <member name="T:VkNet.Enums.Filters.CountersFilter">
            <summary>
            Фильтры счетчиков
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.CountersFilter.Friends">
            <summary>
            Количество заявок в друзья
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.CountersFilter.FriendsSuggestions">
            <summary>
            Предлагаемые друзья
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.CountersFilter.Messages">
            <summary>
            Количество непрочитанных сообщений
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.CountersFilter.Photos">
            <summary>
            Количество фото
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.CountersFilter.Videos">
            <summary>
            Количество видео
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.CountersFilter.Gifts">
            <summary>
            Количество подарков
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.CountersFilter.Events">
            <summary>
            Количество событий
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.CountersFilter.Groups">
            <summary>
            Количество групп
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.CountersFilter.Notifications">
            <summary>
            Количество уведомлений
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.CountersFilter.Sdk">
            <summary>
            Количество уведомлений
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.CountersFilter.AppRequests">
            <summary>
            Количество уведомлений
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.CountersFilter.All">
            <summary>
            Все фильтры
            </summary>
        </member>
        <member name="T:VkNet.Enums.Filters.GroupsFields">
            <summary>
            Описание дополнительных полей сообщества, используемых в параметре fields
            (например, в методе GroupsCategory.Get
            См. описание http://vk.com/dev/groups.get
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.CityId">
            <summary>
            Для получения дополнительного поля Group.CityId
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.CountryId">
            <summary>
            Для получения дополнительного поля Group.CountryId
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.Place">
            <summary>
            Для получения дополнительного поля Group.Place
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.Description">
            <summary>
            Для получения дополнительного поля Group.Description
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.WikiPage">
            <summary>
            Для получения дополнительного поля Group.WikiPage
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.MembersCount">
            <summary>
            Для получения дополнительного поля Group.MembersCount
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.Counters">
            <summary>
            Для получения дополнительного поля Group.Counters
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.StartDate">
            <summary>
            Для получения дополнительного поля Group.StartDate
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.EndDate">
            <summary>
            Для получения дополнительного поля Group.EndDate
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.CanPost">
            <summary>
            Для получения дополнительного поля Group.CanPost
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.CanSeelAllPosts">
            <summary>
            Для получения дополнительного поля Group.CanSeelAllPosts
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.CanUploadDocuments">
            <summary>
            Для получения дополнительного поля Group.CanUploadDocuments
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.CanCreateTopic">
            <summary>
            Для получения дополнительного поля Group.CanCreateTopic
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.Activity">
            <summary>
            Для получения дополнительного поля Group.Activity
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.Status">
            <summary>
            Для получения дополнительного поля Group.Status
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.Contacts">
            <summary>
            Для получения дополнительного поля Group.Contacts
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.Links">
            <summary>
            Для получения дополнительного поля Group.Links
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.FixedPostId">
            <summary>
            Для получения дополнительного поля Group.FixedPostId
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.IsVerified">
            <summary>
            Для получения дополнительного поля Group.IsVerified
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.Site">
            <summary>
            Для получения дополнительного поля Group.Site
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.BanInfo">
            <summary>
            Для получения дополнительного поля Group.BanInfo
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.All">
            <summary>
            Для получения всех дополнительных полей.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFields.AllUndocumented">
            <summary>
            Для получения всех дополнительных полей (оказалаось, что некоторые поля
            пропущены в документации).
            </summary>
        </member>
        <member name="T:VkNet.Enums.Filters.GroupsFilters">
            <summary>
            Фильтры сообществ пользователя.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFilters.Administrator">
            <summary>
            Вернуть все сообщества, в которых пользователь является администратором.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFilters.Editor">
            <summary>
            Вернуть все сообщества, в которых пользователь является администратором или
            редактором.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFilters.Moderator">
            <summary>
            Вернуть все сообщества, в которых пользователь является администратором,
            редактором или модератором.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFilters.Groups">
            <summary>
            Вернуть все группы, в которые входит пользователь.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFilters.Publics">
            <summary>
            Вернуть все публичные страницы пользователя ???
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFilters.Events">
            <summary>
            Вернуть все события, в которых участвует пользователь.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupsFilters.All">
            <summary>
            Вернуть все сообщества, в которых задействован пользователь.
            </summary>
        </member>
        <member name="T:VkNet.Enums.Filters.GroupSort">
            <summary>
            Сортировка результатов поиска.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupSort.Normal">
            <summary>
            Сортировать по умолчанию
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupSort.Growth">
            <summary>
            Сортировать по скорости роста
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupSort.Relation">
            <summary>
            Сортировать по отношению дневной посещаемости к количеству пользователей
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupSort.Likes">
            <summary>
            Сортировать по отношению количества лайков к количеству пользователей
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupSort.Comments">
            <summary>
            Сортировать по отношению количества комментариев к количеству пользователей
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupSort.Records">
            <summary>
            Сортировать по отношению количества записей в обсуждениях к количеству
            пользователей
            </summary>
        </member>
        <member name="T:VkNet.Enums.Filters.GroupSubType">
            <summary>
            Вид публичной страницы: (учитывается только при создании публичных страниц)
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupSubType.PlaceOrSmallCompany">
            <summary>
            1 – Место или небольшая компания
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupSubType.OrganizationOrWebsite">
            <summary>
            2 – Компания, организация или веб-сайт
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupSubType.PersonOrTeam">
            <summary>
            3 – Известная личность или коллектив
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.GroupSubType.ProductOrProducts">
            <summary>
            4 – Произведение или продукция
            </summary>
        </member>
        <member name="T:VkNet.Enums.Filters.MultivaluedFilter`1">
            <summary>
            Фильтр, хранящий несколько значений и представляющий их в виде набора строковых
            представлений каждого возможного
            значения фильтра.
            Аналог enum с атрибутом [Flags].
            </summary>
            <typeparam name="TFilter"> Непосредственно наследник </typeparam>
        </member>
        <member name="M:VkNet.Enums.Filters.MultivaluedFilter`1.#ctor">
            <summary>
            Аналог enum, типобезопасен.
            </summary>
        </member>
        <member name="P:VkNet.Enums.Filters.MultivaluedFilter`1.Selected">
            <summary>
            Выбранные элементы
            </summary>
        </member>
        <member name="M:VkNet.Enums.Filters.MultivaluedFilter`1.Equals(VkNet.Enums.Filters.MultivaluedFilter{`0},VkNet.Enums.Filters.MultivaluedFilter{`0})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Enums.Filters.MultivaluedFilter`1.GetHashCode(VkNet.Enums.Filters.MultivaluedFilter{`0})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Enums.Filters.MultivaluedFilter`1.Equals(VkNet.Enums.Filters.MultivaluedFilter{`0})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Enums.Filters.MultivaluedFilter`1.RegisterPossibleValue(System.UInt64,System.String)">
            <summary>
            Регистрирует возможное значение.
            </summary>
            <param name="mask"> Маска. </param>
            <param name="value"> Значение. </param>
            <returns> </returns>
            <exception cref="T:System.ArgumentException">
            Mask must be left power of 2 (i.e.
            only one bit must be equal to 1);mask
            </exception>
        </member>
        <member name="M:VkNet.Enums.Filters.MultivaluedFilter`1.RegisterPossibleValue(System.String)">
            <summary>
            Регистрирует возможное значение.
            </summary>
            <param name="value"> Значение. </param>
            <returns> </returns>
            <exception cref="T:System.ArgumentException">
            Mask must be left power of 2 (i.e.
            only one bit must be equal to 1);mask
            </exception>
        </member>
        <member name="M:VkNet.Enums.Filters.MultivaluedFilter`1.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> Объект перечисления типа TFilter Непосредственно наследник </returns>
        </member>
        <member name="M:VkNet.Enums.Filters.MultivaluedFilter`1.FromJsonString(System.String)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="val"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Enums.Filters.MultivaluedFilter`1.ToString">
            <summary>
            Преобразовать в строку.
            </summary>
        </member>
        <member name="M:VkNet.Enums.Filters.MultivaluedFilter`1.op_BitwiseOr(VkNet.Enums.Filters.MultivaluedFilter{`0},VkNet.Enums.Filters.MultivaluedFilter{`0})">
            <summary>
            Объединяет наборы фильтров
            </summary>
            <param name="a"> Первый набор фильтров </param>
            <param name="b"> Второй набор фильтров </param>
            <returns> Объединенный набор фильтров </returns>
        </member>
        <member name="M:VkNet.Enums.Filters.MultivaluedFilter`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Enums.Filters.MultivaluedFilter`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Enums.Filters.NewsTypes">
            <summary>
            Названия списков новостей, которые необходимо получить.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.NewsTypes.Post">
            <summary>
            Новые записи со стен.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.NewsTypes.Photo">
            <summary>
            Новые фотографии.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.NewsTypes.PhotoTag">
            <summary>
            Новые отметки на фотографиях.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.NewsTypes.WallPhoto">
            <summary>
            Новые фотографии на стенах.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.NewsTypes.Friend">
            <summary>
            Новые друзья.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.NewsTypes.Note">
            <summary>
            Новые заметки.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.NewsTypes.Audio">
            <summary>
            Новые аудиозаписи.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.NewsTypes.Video">
            <summary>
            Новые видеозаписи.
            </summary>
        </member>
        <member name="T:VkNet.Enums.Filters.ProfileFields">
            <summary>
            Требуемые для получения поля профиля.
            См. описание
            <see href="http://vk.com/pages?oid=-1&amp;p=Описание_полей_параметра_fields" />
            .
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Uid">
            <summary>
            Для получения поля User.Id
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.FirstName">
            <summary>
            Для получения поля User.FirstName
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.LastName">
            <summary>
            Для получения поля User.LastName
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Sex">
            <summary>
            Для получения поля User.Sex
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.BirthDate">
            <summary>
            Для получения поля User.BirthDate
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.City">
            <summary>
            Для получения поля User.City
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Country">
            <summary>
            Для получения поля User.Country
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Photo50">
            <summary>
            Для получения поля Previews.Photo50
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Photo100">
            <summary>
            Для получения поля Previews.Photo100
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Photo200">
            <summary>
            Для получения поля Previews.Photo200
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Photo200Orig">
            <summary>
            Для получения поля Previews.Photo200
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Photo400Orig">
            <summary>
            Для получения поля Previews.Photo400
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.PhotoMax">
            <summary>
            Для получения поля Previews.PhotoMax
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.PhotoMaxOrig">
            <summary>
            Для получения поля Previews.PhotoMax
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Online">
            <summary>
            Для получения поля User.Online
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.FriendLists">
            <summary>
            Для получения поля User.FriendLists
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Domain">
            <summary>
            Для получения поля User.Domain
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.HasMobile">
            <summary>
            Для получения поля User.HasMobile
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Contacts">
            <summary>
            Для получения полей User.MobilePhone
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Connections">
            <summary>
            Для получения поля User.Connections
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Site">
            <summary>
            Для получения поля User.Site
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Education">
            <summary>
            Для получения поля User.Education
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Universities">
            <summary>
            Для получения поля User.Universities
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Schools">
            <summary>
            Для получения поля User.Schools
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.CanPost">
            <summary>
            Для получения поля User.CanPost
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.CanSeeAllPosts">
            <summary>
            Для получения поля User.CanSeeAllPosts
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.CanSeeAudio">
            <summary>
            Для получения поля User.CanSeeAudio
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.CanWritePrivateMessage">
            <summary>
            Для получения поля User.CanWritePrivateMessage
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Status">
            <summary>
            Для получения поля User.Status
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.LastSeen">
            <summary>
            Для получения поля User.LastSeen
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.CommonCount">
            <summary>
            Для получения поля User.CommonCount
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Relation">
            <summary>
            Для получения поля User.Relation
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Relatives">
            <summary>
            Для получения поля User.Relatives
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Counters">
            <summary>
            Для получения поля User.Counters
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Nickname">
            <summary>
            Для получения поля User.Nickname
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Timezone">
            <summary>
            Для получения поля User.Timezone
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Language">
            <summary>
            Для получения поля User.Language
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.OnlineMobile">
            <summary>
            Для получения поля User.OnlineMobile
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.OnlineApp">
            <summary>
            Для получения поля User.OnlineApp
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.RelationPartner">
            <summary>
            Для получения поля User.RelationPartner
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.StandInLife">
            <summary>
            Для получения поля User.StandInLife
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Interests">
            <summary>
            Для получения поля User.Interests
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Music">
            <summary>
            Для получения поля User.Music
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Activities">
            <summary>
            Для получения поля User.Activities
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Movies">
            <summary>
            Для получения поля User.Movies
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Tv">
            <summary>
            Для получения поля User.Tv
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Books">
            <summary>
            Для получения поля User.Books
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Games">
            <summary>
            Для получения поля User.Games
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.About">
            <summary>
            Для получения поля User.About
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Quotes">
            <summary>
            Для получения поля User.Quotes
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.InvitedBy">
            <summary>
            Для получения поля User.InvitedBy
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.BlacklistedByMe">
            <summary>
            Для получения поля User.BlacklistedByMe
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Blacklisted">
            <summary>
            Для получения поля User.Blacklisted
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Military">
            <summary>
            Для получения поля User.Military
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Career">
            <summary>
            Для получения поля User.Career
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.FriendStatus">
            <summary>
            Для получения поля User.FriendStatus
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.IsFriend">
            <summary>
            Для получения поля User.IsFriend
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.ScreenName">
            <summary>
            Для получения поля User.ScreenName
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.IsHiddenFromFeed">
            <summary>
            Для получения поля User.IsHiddenFromFeed
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.IsFavorite">
            <summary>
            Для получения поля User.IsFavorite
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.CanSendFriendRequest">
            <summary>
            Для получения поля User.CanSendFriendRequest
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.WallComments">
            <summary>
            Для получения поля User.WallComments
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Verified">
            <summary>
            Для получения поля User.Verified
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.FollowersCount">
            <summary>
            Для получения поля User.FollowersCount
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.CropPhoto">
            <summary>
            Для получения поля User.CropPhoto
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.Exports">
            <summary>
            Для получения поля User.Exports
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.MaidenName">
            <summary>
            Для получения поля User.MaidenName
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.PhotoId">
            <summary>
            Для получения поля User.PhotoId
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.HomeTown">
            <summary>
            Для получения поля User.PhotoId
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.ProfileFields.All">
            <summary>
            Для получения всех документированных полей.
            </summary>
        </member>
        <member name="T:VkNet.Enums.Filters.SearchFilter">
            <summary>
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.SearchFilter.Friends">
            <summary>
            друзья пользователя
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.SearchFilter.Idols">
            <summary>
            подписки пользователя
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.SearchFilter.Publics">
            <summary>
            публичные страницы, на которые подписан пользователь
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.SearchFilter.Groups">
            <summary>
            группы пользователя
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.SearchFilter.Events">
            <summary>
            встречи пользователя
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.SearchFilter.MutualFriends">
            <summary>
            люди, у которых есть общие друзья с текущим пользователем (этот фильтр
            позволяет получить не всех пользователей,
            имеющих общих друзей).
            </summary>
        </member>
        <member name="T:VkNet.Enums.Filters.Settings">
            <summary>
            Права доступа приложений.
            См. описание <see href="https://vk.com/dev/permissions" />.
            </summary>
        </member>
        <member name="P:VkNet.Enums.Filters.Settings.Mask">
            <summary>
            Числовая маска выбранных прав доступа
            </summary>
        </member>
        <member name="P:VkNet.Enums.Filters.Settings.Selected">
            <summary>
            Список выбранных прав
            </summary>
        </member>
        <member name="P:VkNet.Enums.Filters.Settings.Notify">
            <summary>
            Пользователь разрешил отправлять ему уведомления.
            </summary>
        </member>
        <member name="P:VkNet.Enums.Filters.Settings.Friends">
            <summary>
            Доступ к друзьям.
            </summary>
        </member>
        <member name="P:VkNet.Enums.Filters.Settings.Photos">
            <summary>
            Доступ к фотографиям.
            </summary>
        </member>
        <member name="P:VkNet.Enums.Filters.Settings.Audio">
            <summary>
            Доступ к аудио записям.
            </summary>
        </member>
        <member name="P:VkNet.Enums.Filters.Settings.Video">
            <summary>
            Доступ к видеозаписям.
            </summary>
        </member>
        <member name="P:VkNet.Enums.Filters.Settings.Pages">
            <summary>
            Доступ к wiki-страницам.
            </summary>
        </member>
        <member name="P:VkNet.Enums.Filters.Settings.AddLinkToLeftMenu">
            <summary>
            Добавление ссылки на приложение в меню слева.
            </summary>
        </member>
        <member name="P:VkNet.Enums.Filters.Settings.Status">
            <summary>
            Доступ к статусу пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Enums.Filters.Settings.Notes">
            <summary>
            Доступ заметкам пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Enums.Filters.Settings.Messages">
            <summary>
            Доступ к расширенным методам работы с сообщениями.
            </summary>
        </member>
        <member name="P:VkNet.Enums.Filters.Settings.Wall">
            <summary>
            Доступ к обычным и расширенным методам работы со стеной.
            </summary>
        </member>
        <member name="P:VkNet.Enums.Filters.Settings.Ads">
            <summary>
            Доступ к расширенным методам работы с рекламным API.
            </summary>
        </member>
        <member name="P:VkNet.Enums.Filters.Settings.Offline">
            <summary>
            Доступ к API в любое время со стороннего сервера.
            </summary>
        </member>
        <member name="P:VkNet.Enums.Filters.Settings.Documents">
            <summary>
            Доступ к документам.
            </summary>
        </member>
        <member name="P:VkNet.Enums.Filters.Settings.Groups">
            <summary>
            Доступ к группам пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Enums.Filters.Settings.Notifications">
            <summary>
            Доступ к оповещениям об ответах пользователю.
            </summary>
        </member>
        <member name="P:VkNet.Enums.Filters.Settings.Statistic">
            <summary>
            Доступ к статистике групп и приложений пользователя, администратором которых он
            является.
            </summary>
        </member>
        <member name="P:VkNet.Enums.Filters.Settings.Email">
            <summary>
            Доступ к email пользователя. Доступно только для сайтов.
            </summary>
        </member>
        <member name="P:VkNet.Enums.Filters.Settings.Market">
            <summary>
            Доступ к товарам. Доступно только для сайтов.
            </summary>
        </member>
        <member name="P:VkNet.Enums.Filters.Settings.Stats">
            <summary>
            Доступ к статистике групп и приложений пользователя, администратором которых он
            является.
            </summary>
        </member>
        <member name="P:VkNet.Enums.Filters.Settings.AppWidget">
            <summary>
            Доступ к статистике групп и приложений пользователя, администратором которых он
            является.
            </summary>
        </member>
        <member name="P:VkNet.Enums.Filters.Settings.All">
            <summary>
            Доступ ко всем возможным операциям (без Off line и NoHttps).
            </summary>
        </member>
        <member name="M:VkNet.Enums.Filters.Settings.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Получить из json
            </summary>
            <param name="response"> Ответ Vk </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Enums.Filters.Settings.FromJsonString(System.String)">
            <summary>
            Получить из json
            </summary>
            <param name="val"> Json строка </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Enums.Filters.Settings.ToString">
            <summary>
            Преобразовать в строку
            </summary>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Enums.Filters.Settings.ToUInt64">
            <summary>
            Преобразовать в числовую маску выбранные права доступа
            </summary>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Enums.Filters.Settings.Equals(System.Object)">
            <summary>
            Сравнение с другим набором прав
            </summary>
            <param name="obj"> </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Enums.Filters.Settings.GetHashCode">
            <summary>
            Get Hash
            </summary>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Enums.Filters.Settings.op_BitwiseOr(VkNet.Enums.Filters.Settings,VkNet.Enums.Filters.Settings)">
            <summary>
            Объединяет наборы настройки
            </summary>
            <param name="a"> Первый набор </param>
            <param name="b"> Второй набор </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Enums.Filters.SubscribeFilter">
            <summary>
            Список типов уведомлений.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.SubscribeFilter.Message">
            <summary>
            Сообщение.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.SubscribeFilter.Friend">
            <summary>
            Друг.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.SubscribeFilter.Call">
            <summary>
            Вызов.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.SubscribeFilter.Reply">
            <summary>
            Ответ.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.SubscribeFilter.Mention">
            <summary>
            Упоминание.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.SubscribeFilter.Group">
            <summary>
            Группа.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.SubscribeFilter.Like">
            <summary>
            Лайк.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.SubscribeFilter.All">
            <summary>
            Все.
            </summary>
        </member>
        <member name="T:VkNet.Enums.Filters.UsersFields">
            <summary>
            Описание дополнительных полей сообщества, используемых в параметре fields
            (например, в методе GroupsCategory.Get
            См. описание http://vk.com/dev/groups.get
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.UsersFields.Nickname">
            <summary>
            Для получения дополнительного поля User.Nickname
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.UsersFields.Domain">
            <summary>
            Для получения дополнительного поля User.Domain
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.UsersFields.Sex">
            <summary>
            Для получения дополнительного поля User.Sex
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.UsersFields.BirthDate">
            <summary>
            Для получения дополнительного поля User.BirthDate
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.UsersFields.City">
            <summary>
            Для получения дополнительного поля User.City
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.UsersFields.Country">
            <summary>
            Для получения дополнительного поля User.Country
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.UsersFields.Timezone">
            <summary>
            Для получения дополнительного поля User.Timezone
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.UsersFields.Photo50">
            <summary>
            Для получения дополнительного поля User.Photo50
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.UsersFields.Photo100">
            <summary>
            Для получения дополнительного поля User.Photo100
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.UsersFields.Photo200Orig">
            <summary>
            Для получения дополнительного поля User.Photo200Orig
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.UsersFields.Photo200">
            <summary>
            Для получения дополнительного поля User.Photo200
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.UsersFields.Photo400Orig">
            <summary>
            Для получения дополнительного поля User.Photo400Orig
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.UsersFields.PhotoMax">
            <summary>
            Для получения дополнительного поля User.PhotoMax
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.UsersFields.PhotoMaxOrig">
            <summary>
            Для получения дополнительного поля User.PhotoMaxOrig
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.UsersFields.HasMobile">
            <summary>
            Для получения дополнительного поля User.HasMobile
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.UsersFields.Contacts">
            <summary>
            Для получения дополнительного поля User.contacts
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.UsersFields.Education">
            <summary>
            Для получения дополнительного поля User.Education
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.UsersFields.Online">
            <summary>
            Для получения дополнительного поля User.Online
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.UsersFields.OnlineMobile">
            <summary>
            Для получения дополнительного поля User.OnlineMobile
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.UsersFields.FriendLists">
            <summary>
            Для получения дополнительного поля User.FriendLists
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.UsersFields.Relation">
            <summary>
            Для получения дополнительного поля User.Relation
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.UsersFields.LastSeen">
            <summary>
            Для получения дополнительного поля User.LastSeen
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.UsersFields.Status">
            <summary>
            Для получения дополнительного поля User.Status
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.UsersFields.CanWritePrivateMessage">
            <summary>
            Для получения дополнительного поля User.CanWritePrivateMessage
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.UsersFields.CanSeeAllPosts">
            <summary>
            Для получения дополнительного поля User.CanSeeAllPosts
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.UsersFields.CanPost">
            <summary>
            Для получения дополнительного поля User.CanPost
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.UsersFields.Universities">
            <summary>
            Для получения дополнительного поля User.Universities
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.UsersFields.Connections">
            <summary>
            Для получения дополнительного поля User.Connections
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.UsersFields.Site">
            <summary>
            Для получения дополнительного поля User.Site
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.UsersFields.Schools">
            <summary>
            Для получения дополнительного поля User.Schools
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.UsersFields.CanSeeAudio">
            <summary>
            Для получения дополнительного поля User.CanSeeAudio
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.UsersFields.CommonCount">
            <summary>
            Для получения дополнительного поля User.CommonCount
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.UsersFields.Relatives">
            <summary>
            Для получения дополнительного поля User.Relatives
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.UsersFields.Counters">
            <summary>
            Для получения дополнительного поля User.Counters
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.UsersFields.All">
            <summary>
            Для получения всех дополнительных полей.
            </summary>
        </member>
        <member name="T:VkNet.Enums.Filters.VideoFilters">
            <summary>
            Cписок критериев, по которым требуется отфильтровать видео.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.VideoFilters.Mp4">
            <summary>
            Возвращать видео в формате mp4 (воспроиводимое на iOS).
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.VideoFilters.Youtube">
            <summary>
            Возвращать youtube видео.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.VideoFilters.Vimeo">
            <summary>
            Возвращать vimeo видео.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.VideoFilters.Short">
            <summary>
            Возвращать короткие видеозаписи.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.VideoFilters.Long">
            <summary>
            Возвращать длинные видеозаписи
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.VideoFilters.All">
            <summary>
            Возвращать все доступные виды видео.
            </summary>
        </member>
        <member name="T:VkNet.Enums.Filters.FaveType">
            <summary>
            Тип объекта, добавленного в закладки.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.FaveType.Post">
            <summary>
            Запись на стене.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.FaveType.Video">
            <summary>
            Видеозапись.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.FaveType.Product">
            <summary>
            Товар.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.FaveType.Article">
            <summary>
            Статья.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.FaveType.Link">
            <summary>
            Ссылки.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Filters.FaveType.Podcast">
            <summary>
            Подкаст.
            </summary>
        </member>
        <member name="T:VkNet.Enums.FriendStatus">
            <summary>
            Состояние дружбы с пользователями.
            </summary>
        </member>
        <member name="F:VkNet.Enums.FriendStatus.NotFriend">
            <summary>
            Пользователь не является другом.
            </summary>
        </member>
        <member name="F:VkNet.Enums.FriendStatus.OutputRequest">
            <summary>
            Пользователю отправлена заявка/подписка.
            </summary>
        </member>
        <member name="F:VkNet.Enums.FriendStatus.InputRequest">
            <summary>
            Имеется входящая заявка/подписка от пользователя.
            </summary>
        </member>
        <member name="F:VkNet.Enums.FriendStatus.Friend">
            <summary>
            Пользователь является другом.
            </summary>
        </member>
        <member name="T:VkNet.Enums.GetUsersStatus">
            <summary>
            Тип действия
            </summary>
        </member>
        <member name="F:VkNet.Enums.GetUsersStatus.Start">
            <summary>
            Начало действия;
            </summary>
        </member>
        <member name="F:VkNet.Enums.GetUsersStatus.End">
            <summary>
            Завершения действия;
            </summary>
        </member>
        <member name="F:VkNet.Enums.GetUsersStatus.Lock">
            <summary>
            Действия по блокированию пользователей;
            </summary>
        </member>
        <member name="F:VkNet.Enums.GetUsersStatus.StartTest">
            <summary>
            Начало действия в тестовом режиме;
            </summary>
        </member>
        <member name="F:VkNet.Enums.GetUsersStatus.EndTest">
            <summary>
            Завершения действия в тестовом режиме.
            </summary>
        </member>
        <member name="T:VkNet.Enums.GiftPrivacy">
            <summary>
            Значение приватности подарка (только для текущего пользователя).
            </summary>
        </member>
        <member name="F:VkNet.Enums.GiftPrivacy.All">
            <summary>
            0 — имя отправителя и сообщение видно всем
            </summary>
        </member>
        <member name="F:VkNet.Enums.GiftPrivacy.NameAllMessageUser">
            <summary>
            1 — имя отправителя видно всем, сообщение видно только получателю
            </summary>
        </member>
        <member name="F:VkNet.Enums.GiftPrivacy.NameHideMessageUser">
            <summary>
            2 — имя отправителя скрыто, сообщение видно только получателю
            </summary>
        </member>
        <member name="T:VkNet.Enums.GroupAccess">
            <summary>
            Уровень доступа к сообществу.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupAccess.Open">
            <summary>
            0 — открытая;
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupAccess.Closed">
            <summary>
            Закрытая
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupAccess.Private">
            <summary>
            Частная
            </summary>
        </member>
        <member name="T:VkNet.Enums.GroupJoinType">
            <summary>
            Тип вступления в группу
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupJoinType.Join">
            <summary>
            Пользователь вступил в группу или мероприятие (подписался на публичную страницу)
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupJoinType.Unsure">
            <summary>
             Для мероприятий: пользователь выбрал вариант «Возможно, пойду»
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupJoinType.Accepted">
            <summary>
            Пользователь принял приглашение в группу или на мероприятие
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupJoinType.Approved">
            <summary>
            Заявка на вступление в группу/мероприятие была одобрена руководителем сообщества
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupJoinType.Request">
            <summary>
            Пользователь подал заявку на вступление в сообщество
            </summary>
        </member>
        <member name="T:VkNet.Enums.GroupOfficerLevel">
            <summary>
            Полномочия пользователя
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupOfficerLevel.None">
            <summary>
            Нет полномочий
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupOfficerLevel.Moderator">
            <summary>
            Модератор
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupOfficerLevel.Editor">
            <summary>
            Редактор
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupOfficerLevel.Admin">
            <summary>
            Администратор
            </summary>
        </member>
        <member name="T:VkNet.Enums.GroupPublicity">
            <summary>
            Информация о публичности сообщества.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupPublicity.Public">
            <summary>
            Сообщество является публичным.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupPublicity.Closed">
            <summary>
            Сообщество является закрытым.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupPublicity.Private">
            <summary>
            Сообщество является частным.
            </summary>
        </member>
        <member name="T:VkNet.Enums.GroupSubjects">
            <summary>
            Тематика сообщества.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.AutoMoto">
            <summary>
            Авто/мото.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.Leisure">
            <summary>
            Активный отдых.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.Business">
            <summary>
            Бизнес.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.DomesticAnimals">
            <summary>
            Домашние животные.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.Health">
            <summary>
            Здоровье.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.MeetAndChat">
            <summary>
            Знакомство и общение.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.Games">
            <summary>
            Игры.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.It">
            <summary>
            ИТ.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.Cinema">
            <summary>
            Кино.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.BeautyAndFashion">
            <summary>
            Красота и мода.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.Cookery">
            <summary>
            Кулинария.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.CultureAndArt">
            <summary>
            Культура и искусство.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.References">
            <summary>
            Литература.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.MobileTelephonyAndInternet">
            <summary>
            Мобильная связь и интернет.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.Music">
            <summary>
            Музыка.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.ScienceAndTechnology">
            <summary>
            Наука и техника.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.RealEstate">
            <summary>
            Недвижимость.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.NewsAndMedia">
            <summary>
            Новости и СМИ.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.Security">
            <summary>
            Безопасность.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.Forming">
            <summary>
            Образование.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.ConstructionAndRepair">
            <summary>
            Обустройство и ремонт.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.Policy">
            <summary>
            Политика.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.FoodItems">
            <summary>
            Продукты питания.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.Industry">
            <summary>
            Промышленность.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.Travels">
            <summary>
            Путешествия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.Job">
            <summary>
            Работа.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.Entertainment">
            <summary>
            Развлечения.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.Religion">
            <summary>
            Религия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.HomeAndFamily">
            <summary>
            Дом и семья.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.Sports">
            <summary>
            Спорт.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.Coverage">
            <summary>
            Страхование.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.Tv">
            <summary>
            Телевидение.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.GoodsAndServices">
            <summary>
            Товары и услуги.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.InterestsAndHobbies">
            <summary>
            Увлечения и хобби.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.Finances">
            <summary>
            Финансы.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.Photography">
            <summary>
            Фото.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.Esoterics">
            <summary>
            Эзотерика.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.ElectronicsAndAppliances">
            <summary>
            Электроника и бытовая техника.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.Erotica">
            <summary>
            Эротика.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.Humor">
            <summary>
            Юмор.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.SocietyHumanities">
            <summary>
            Общество, гуманитарные науки.
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupSubjects.DesignAndGraphics">
            <summary>
            Дизайн и графика.
            </summary>
        </member>
        <member name="T:VkNet.Enums.GroupUserBlockReason">
            <summary>
            Причина блокировки пользователя
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupUserBlockReason.Other">
            <summary>
            Другое
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupUserBlockReason.Spam">
            <summary>
            Спам
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupUserBlockReason.InsultingParticipants">
            <summary>
            Оскорбление участников
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupUserBlockReason.ObsceneExpressions">
            <summary>
            Нецензурные выражения
            </summary>
        </member>
        <member name="F:VkNet.Enums.GroupUserBlockReason.MessagesOffTopic">
            <summary>
            Сообщения не по теме
            </summary>
        </member>
        <member name="T:VkNet.Enums.ImplicitFlowPageType">
            <summary>
            Тип страницы для авторизации Implicit Flow
            </summary>
        </member>
        <member name="F:VkNet.Enums.ImplicitFlowPageType.LoginPassword">
            <summary>
            Страница с логином и паролем
            </summary>
        </member>
        <member name="F:VkNet.Enums.ImplicitFlowPageType.Captcha">
            <summary>
            Страница с капчей
            </summary>
        </member>
        <member name="F:VkNet.Enums.ImplicitFlowPageType.TwoFactor">
            <summary>
            Страница ввода кода двухфакторной авторизации
            </summary>
        </member>
        <member name="F:VkNet.Enums.ImplicitFlowPageType.Consent">
            <summary>
            Страница подтверждения доступа к скоупу
            </summary>
        </member>
        <member name="F:VkNet.Enums.ImplicitFlowPageType.Result">
            <summary>
            Резудьтирующая страница
            </summary>
        </member>
        <member name="F:VkNet.Enums.ImplicitFlowPageType.Error">
            <summary>
            Страница с ошибкой при отвержении доступа к скоупу
            </summary>
        </member>
        <member name="T:VkNet.Enums.Iso3166">
            <summary>
            ISO 3166-1 alpha-2 — часть международного стандарта ISO 3166-1, определяющая
            двухсимвольные кодовые обозначения
            государств и зависимых территорий.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.AU">
            <summary>
            Австралия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.AT">
            <summary>
            Австрия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.AZ">
            <summary>
            Азербайджан.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.AX">
            <summary>
            Аландские острова.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.AL">
            <summary>
            Албания.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.DZ">
            <summary>
            Алжир.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.UM">
            <summary>
            Внешние малые острова (США).
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.VI">
            <summary>
            Американские Виргинские острова.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.AS">
            <summary>
            Американское Самоа.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.AI">
            <summary>
            Ангилья.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.AO">
            <summary>
            Ангола.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.AD">
            <summary>
            Андорра.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.AQ">
            <summary>
            Антарктида.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.AG">
            <summary>
            Антигуа и Барбуда.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.AR">
            <summary>
            Аргентина.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.AM">
            <summary>
            Армения.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.AW">
            <summary>
            Аруба.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.AF">
            <summary>
            Афганистан.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.BS">
            <summary>
            Багамы.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.BD">
            <summary>
            Бангладеш.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.BB">
            <summary>
            Барбадос.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.BH">
            <summary>
            Бахрейн.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.BZ">
            <summary>
            Белиз.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.BY">
            <summary>
            Белоруссия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.BE">
            <summary>
            Бельгия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.BJ">
            <summary>
            Бенин.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.BM">
            <summary>
            Бермуды.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.BG">
            <summary>
            Болгария.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.BO">
            <summary>
            Боливия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.BA">
            <summary>
            Босния и Герцеговина.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.BW">
            <summary>
            Ботсвана.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.BR">
            <summary>
            Бразилия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.IO">
            <summary>
            Британская территория в Индийском океане.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.VG">
            <summary>
            Британские Виргинские острова.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.BN">
            <summary>
            Бруней.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.BF">
            <summary>
            Буркина Фасо.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.BI">
            <summary>
            Бурунди.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.BT">
            <summary>
            Бутан.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.VU">
            <summary>
            Вануату.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.VA">
            <summary>
            Ватикан.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.GB">
            <summary>
            Великобритания.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.HU">
            <summary>
            Венгрия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.VE">
            <summary>
            Венесуэла.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.TL">
            <summary>
            Восточный Тимор.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.VN">
            <summary>
            Вьетнам.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.GA">
            <summary>
            Габон.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.HT">
            <summary>
            Гаити.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.GY">
            <summary>
            Гайана.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.GM">
            <summary>
            Гамбия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.GH">
            <summary>
            Гана.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.GP">
            <summary>
            Гваделупа.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.GT">
            <summary>
            Гватемала.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.GN">
            <summary>
            Гвинея.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.GW">
            <summary>
            Гвинея-Бисау.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.DE">
            <summary>
            Германия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.GI">
            <summary>
            Гибралтар.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.HN">
            <summary>
            Гондурас.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.HK">
            <summary>
            Гонконг.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.GD">
            <summary>
            Гренада.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.GL">
            <summary>
            Гренландия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.GR">
            <summary>
            Греция.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.GE">
            <summary>
            Грузия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.GU">
            <summary>
            Гуам.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.DK">
            <summary>
            Дания.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.CD">
            <summary>
            ДР Конго.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.DJ">
            <summary>
            Джибути.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.DM">
            <summary>
            Доминика.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.DO">
            <summary>
            Доминиканская Республика.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.EU">
            <summary>
            Европейский союз.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.EG">
            <summary>
            Египет.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.ZM">
            <summary>
            Замбия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.EH">
            <summary>
            Западная Сахара.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.ZW">
            <summary>
            Зимбабве.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.IL">
            <summary>
            Израиль.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.IN">
            <summary>
            Индия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.ID">
            <summary>
            Индонезия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.JO">
            <summary>
            Иордания.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.IQ">
            <summary>
            Ирак.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.IR">
            <summary>
            Иран.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.IE">
            <summary>
            Ирландия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.IS">
            <summary>
            Исландия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.ES">
            <summary>
            Испания.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.IT">
            <summary>
            Италия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.YE">
            <summary>
            Йемен.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.KP">
            <summary>
            КНДР.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.CV">
            <summary>
            Кабо-Верде.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.KZ">
            <summary>
            Казахстан.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.KY">
            <summary>
            Каймановы острова.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.KH">
            <summary>
            Камбоджа.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.CM">
            <summary>
            Камерун.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.CA">
            <summary>
            Канада.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.QA">
            <summary>
            Катар.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.KE">
            <summary>
            Кения.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.CY">
            <summary>
            Кипр.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.KG">
            <summary>
            Киргизия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.KI">
            <summary>
            Кирибати.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.CN">
            <summary>
            КНР.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.CC">
            <summary>
            Кокосовые острова.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.CO">
            <summary>
            Колумбия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.KM">
            <summary>
            Коморы.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.CR">
            <summary>
            Коста-Рика.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.CI">
            <summary>
            Кот-д’Ивуар.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.CU">
            <summary>
            Куба.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.KW">
            <summary>
            Кувейт.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.LA">
            <summary>
            Лаос.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.LV">
            <summary>
            Латвия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.LS">
            <summary>
            Лесото.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.LR">
            <summary>
            Либерия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.LB">
            <summary>
            Ливан.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.LY">
            <summary>
            Ливия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.LT">
            <summary>
            Литва.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.LI">
            <summary>
            Лихтенштейн.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.LU">
            <summary>
            Люксембург.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.MU">
            <summary>
            Маврикий.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.MR">
            <summary>
            Мавритания.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.MG">
            <summary>
            Мадагаскар.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.YT">
            <summary>
            Майотта.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.MO">
            <summary>
            Макао.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.MK">
            <summary>
            Республика Македония.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.MW">
            <summary>
            Малави.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.MY">
            <summary>
            Малайзия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.ML">
            <summary>
            Мали.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.MV">
            <summary>
            Мальдивы.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.MT">
            <summary>
            Мальта.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.MA">
            <summary>
            Марокко.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.MQ">
            <summary>
            Мартиника.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.MH">
            <summary>
            Маршалловы Острова.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.MX">
            <summary>
            Мексика.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.MZ">
            <summary>
            Мозамбик.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.MD">
            <summary>
            Молдавия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.MC">
            <summary>
            Монако.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.MN">
            <summary>
            Монголия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.MS">
            <summary>
            Монтсеррат.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.MM">
            <summary>
            Мьянма.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.NA">
            <summary>
            Намибия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.NR">
            <summary>
            Науру.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.NP">
            <summary>
            Непал.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.NE">
            <summary>
            Нигер.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.NG">
            <summary>
            Нигерия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.AN">
            <summary>
            Нидерландские Антильские острова.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.NL">
            <summary>
            Нидерланды.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.NI">
            <summary>
            Никарагуа.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.NU">
            <summary>
            Ниуэ.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.NC">
            <summary>
            Новая Каледония.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.NZ">
            <summary>
            Новая Зеландия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.NO">
            <summary>
            Норвегия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.AE">
            <summary>
            ОАЭ.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.OM">
            <summary>
            Оман.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.CX">
            <summary>
            Остров Рождества.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.CK">
            <summary>
            Острова Кука.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.HM">
            <summary>
            Херд и Макдональд.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.PK">
            <summary>
            Пакистан.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.PW">
            <summary>
            Палау.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.PS">
            <summary>
            Палестина.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.PA">
            <summary>
            Панама.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.PG">
            <summary>
            Папуа — Новая Гвинея.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.PY">
            <summary>
            Парагвай.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.PE">
            <summary>
            Перу.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.PN">
            <summary>
            Острова Питкэрн.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.PL">
            <summary>
            Польша.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.PT">
            <summary>
            Португалия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.PR">
            <summary>
            Пуэрто-Рико.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.CG">
            <summary>
            Республика Конго.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.RE">
            <summary>
            Реюньон.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.RU">
            <summary>
            Россия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.RW">
            <summary>
            Руанда.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.RO">
            <summary>
            Румыния.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.US">
            <summary>
            США.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.SV">
            <summary>
            Сальвадор.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.WS">
            <summary>
            Самоа.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.SM">
            <summary>
            Сан-Марино.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.ST">
            <summary>
            Сан-Томе и Принсипи.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.SA">
            <summary>
            Саудовская Аравия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.SZ">
            <summary>
            Свазиленд.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.SJ">
            <summary>
            Шпицберген и Ян-Майен.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.MP">
            <summary>
            Северные Марианские острова.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.SC">
            <summary>
            Сейшельские Острова.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.SN">
            <summary>
            Сенегал.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.VC">
            <summary>
            Сент-Винсент и Гренадины.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.KN">
            <summary>
            Сент-Китс и Невис.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.LC">
            <summary>
            Сент-Люсия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.PM">
            <summary>
            Сен-Пьер и Микелон.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.RS">
            <summary>
            Сербия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.CS">
            <summary>
            Сербия и Черногория (действовал до сентября 2006 года).
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.SG">
            <summary>
            Сингапур.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.SY">
            <summary>
            Сирия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.SK">
            <summary>
            Словакия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.SI">
            <summary>
            Словения.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.SB">
            <summary>
            Соломоновы Острова.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.SO">
            <summary>
            Сомали.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.SD">
            <summary>
            Судан.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.SR">
            <summary>
            Суринам.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.SL">
            <summary>
            Сьерра-Леоне.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.SU">
            <summary>
            СССР (действовал до сентября 1992 года).
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.TJ">
            <summary>
            Таджикистан.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.TH">
            <summary>
            Таиланд.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.TW">
            <summary>
            Китайская Республика.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.TZ">
            <summary>
            Танзания.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.TG">
            <summary>
            Того.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.TK">
            <summary>
            Токелау.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.TO">
            <summary>
            Тонга.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.TT">
            <summary>
            Тринидад и Тобаго.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.TV">
            <summary>
            Тувалу.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.TN">
            <summary>
            Тунис.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.TM">
            <summary>
            Туркмения.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.TR">
            <summary>
            Турция.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.UG">
            <summary>
            Уганда.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.UZ">
            <summary>
            Узбекистан.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.UA">
            <summary>
            Украина.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.UY">
            <summary>
            Уругвай.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.FO">
            <summary>
            Фарерские острова.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.FM">
            <summary>
            Микронезия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.FJ">
            <summary>
            Фиджи.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.PH">
            <summary>
            Филиппины.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.FI">
            <summary>
            Финляндия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.FK">
            <summary>
            Фолклендские острова.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.FR">
            <summary>
            Франция.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.GF">
            <summary>
            Французская Гвиана.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.PF">
            <summary>
            Французская Полинезия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.TF">
            <summary>
            Французские Южные и Антарктические Территории.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.HR">
            <summary>
            Хорватия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.CF">
            <summary>
            ЦАР.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.TD">
            <summary>
            Чад.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.ME">
            <summary>
            Черногория.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.CZ">
            <summary>
            Чехия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.CL">
            <summary>
            Чили.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.CH">
            <summary>
            Швейцария.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.SE">
            <summary>
            Швеция.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.LK">
            <summary>
            Шри-Ланка.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.EC">
            <summary>
            Эквадор.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.GQ">
            <summary>
            Экваториальная Гвинея.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.ER">
            <summary>
            Эритрея.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.EE">
            <summary>
            Эстония.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.ET">
            <summary>
            Эфиопия.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.ZA">
            <summary>
            ЮАР.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.KR">
            <summary>
            Республика Корея.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.GS">
            <summary>
            Южная Георгия и Южные Сандвичевы острова.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.JM">
            <summary>
            Ямайка.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.JP">
            <summary>
            Япония.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.BV">
            <summary>
            Остров Буве.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.NF">
            <summary>
            Остров Норфолк.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.SH">
            <summary>
            Остров Святой Елены.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.TC">
            <summary>
            Тёркс и Кайкос.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Iso3166.WF">
            <summary>
            Уоллис и Футуна.
            </summary>
        </member>
        <member name="T:VkNet.Enums.Language">
            <summary>
            Язык
            </summary>
        </member>
        <member name="F:VkNet.Enums.Language.Ru">
            <summary>
            Русский
            </summary>
        </member>
        <member name="F:VkNet.Enums.Language.Ua">
            <summary>
            Украинский
            </summary>
        </member>
        <member name="F:VkNet.Enums.Language.Be">
            <summary>
            Белорусский
            </summary>
        </member>
        <member name="F:VkNet.Enums.Language.En">
            <summary>
            Английский
            </summary>
        </member>
        <member name="F:VkNet.Enums.Language.Es">
            <summary>
            Испанский
            </summary>
        </member>
        <member name="F:VkNet.Enums.Language.Fi">
            <summary>
            Финский
            </summary>
        </member>
        <member name="F:VkNet.Enums.Language.De">
            <summary>
            Немецкий
            </summary>
        </member>
        <member name="F:VkNet.Enums.Language.It">
            <summary>
            Итальянский
            </summary>
        </member>
        <member name="T:VkNet.Enums.LeaderboardTypes">
            <summary>
            Тип турнирной таблицы
            </summary>
        </member>
        <member name="F:VkNet.Enums.LeaderboardTypes.NotSupported">
            <summary>
            Не поддерживается
            </summary>
        </member>
        <member name="F:VkNet.Enums.LeaderboardTypes.ByLevel">
            <summary>
            По уровню
            </summary>
        </member>
        <member name="F:VkNet.Enums.LeaderboardTypes.ByPoints">
            <summary>
            По очкам
            </summary>
        </member>
        <member name="T:VkNet.Enums.LifeMain">
            <summary>
            Главное в жизни.
            </summary>
        </member>
        <member name="F:VkNet.Enums.LifeMain.Unknown">
            <summary>
            Не указано.
            </summary>
        </member>
        <member name="F:VkNet.Enums.LifeMain.FamilyAndChildren">
            <summary>
            Семья и дети.
            </summary>
        </member>
        <member name="F:VkNet.Enums.LifeMain.CareerAndMoney">
            <summary>
            Карьера и деньги.
            </summary>
        </member>
        <member name="F:VkNet.Enums.LifeMain.Activities">
            <summary>
            Развлечения и отдых.
            </summary>
        </member>
        <member name="F:VkNet.Enums.LifeMain.ScienceAndResearch">
            <summary>
            Наука и исследования.
            </summary>
        </member>
        <member name="F:VkNet.Enums.LifeMain.ImprovingTheWorld">
            <summary>
            Совершенствование мира.
            </summary>
        </member>
        <member name="F:VkNet.Enums.LifeMain.SelfDevelopment">
            <summary>
            Саморазвитие.
            </summary>
        </member>
        <member name="F:VkNet.Enums.LifeMain.BeautyAndArt">
            <summary>
            Красота и искусство.
            </summary>
        </member>
        <member name="F:VkNet.Enums.LifeMain.FameAndInfluence">
            <summary>
            Слава и влияние.
            </summary>
        </member>
        <member name="T:VkNet.Enums.MainSection">
            <summary>
            Информация о главной секции в сообществе
            </summary>
        </member>
        <member name="F:VkNet.Enums.MainSection.NoSection">
            <summary>
            Главная секция отсутствует
            </summary>
        </member>
        <member name="F:VkNet.Enums.MainSection.Photo">
            <summary>
            Фотографии
            </summary>
        </member>
        <member name="F:VkNet.Enums.MainSection.Post">
            <summary>
            Обсуждения
            </summary>
        </member>
        <member name="F:VkNet.Enums.MainSection.Audio">
            <summary>
            Аудиозаписи
            </summary>
        </member>
        <member name="F:VkNet.Enums.MainSection.Video">
            <summary>
            Видеозаписи
            </summary>
        </member>
        <member name="F:VkNet.Enums.MainSection.Goods">
            <summary>
            Товары
            </summary>
        </member>
        <member name="T:VkNet.Enums.MaritalStatus">
            <summary>
            Семейное положение: 1 — Не женат, 2 — Встречается, 3 — Помолвлен, 4 — Женат, 7
            — Влюблён, 5 — Всё сложно, 6 — В
            активном поиске.
            </summary>
        </member>
        <member name="F:VkNet.Enums.MaritalStatus.Single">
            <summary>
            Не женат
            </summary>
        </member>
        <member name="F:VkNet.Enums.MaritalStatus.Meets">
            <summary>
            Встречается
            </summary>
        </member>
        <member name="F:VkNet.Enums.MaritalStatus.Engaged">
            <summary>
            Помолвлен
            </summary>
        </member>
        <member name="F:VkNet.Enums.MaritalStatus.Married">
            <summary>
            Женат
            </summary>
        </member>
        <member name="F:VkNet.Enums.MaritalStatus.ItsComplicated">
            <summary>
            Всё сложно
            </summary>
        </member>
        <member name="F:VkNet.Enums.MaritalStatus.TheActiveSearch">
            <summary>
            В активном поиске
            </summary>
        </member>
        <member name="F:VkNet.Enums.MaritalStatus.InLove">
            <summary>
            Влюблён
            </summary>
        </member>
        <member name="T:VkNet.Enums.MarketCurrencyId">
            <summary>
            Идентификатор валюты магазина.
            </summary>
        </member>
        <member name="F:VkNet.Enums.MarketCurrencyId.Rub">
            <summary>
            643 — российский рубль;
            </summary>
        </member>
        <member name="F:VkNet.Enums.MarketCurrencyId.Uah">
            <summary>
            980 — украинская гривна;
            </summary>
        </member>
        <member name="F:VkNet.Enums.MarketCurrencyId.Kzt">
            <summary>
            398 — казахстанский тенге;
            </summary>
        </member>
        <member name="F:VkNet.Enums.MarketCurrencyId.Eur">
            <summary>
            978 — евро;
            </summary>
        </member>
        <member name="F:VkNet.Enums.MarketCurrencyId.Usd">
            <summary>
            840 — доллар США.
            </summary>
        </member>
        <member name="T:VkNet.Enums.MemberStatus">
            <summary>
            </summary>
        </member>
        <member name="F:VkNet.Enums.MemberStatus.NotParticipiant">
            <summary>
            не является участником
            </summary>
        </member>
        <member name="F:VkNet.Enums.MemberStatus.Participiant">
            <summary>
            является участником
            </summary>
        </member>
        <member name="F:VkNet.Enums.MemberStatus.NotShureThatVisist">
            <summary>
            не уверен, что посетит мероприятие
            </summary>
        </member>
        <member name="F:VkNet.Enums.MemberStatus.Rejected">
            <summary>
            отклонил приглашение
            </summary>
        </member>
        <member name="F:VkNet.Enums.MemberStatus.SendRequest">
            <summary>
            подал заявку на вступление
            </summary>
        </member>
        <member name="F:VkNet.Enums.MemberStatus.Invited">
            <summary>
            приглашен
            </summary>
        </member>
        <member name="T:VkNet.Enums.MessageReadState">
            <summary>
            Информация о том прочитано ли сообщение.
            </summary>
        </member>
        <member name="F:VkNet.Enums.MessageReadState.Unreaded">
            <summary>
            Сообщение не прочитано.
            </summary>
        </member>
        <member name="F:VkNet.Enums.MessageReadState.Readed">
            <summary>
            Сообщение прочитано.
            </summary>
        </member>
        <member name="T:VkNet.Enums.MessagesFilter">
            <summary>
            Фильтр для отбора сообщений.
            </summary>
        </member>
        <member name="F:VkNet.Enums.MessagesFilter.All">
            <summary>
            Все сообщения
            </summary>
        </member>
        <member name="F:VkNet.Enums.MessagesFilter.Important">
            <summary>
            Важные сообщения
            </summary>
        </member>
        <member name="T:VkNet.Enums.MessageType">
            <summary>
            Тип сообщения.
            </summary>
        </member>
        <member name="F:VkNet.Enums.MessageType.Received">
            <summary>
            Полученное сообщение.
            </summary>
        </member>
        <member name="F:VkNet.Enums.MessageType.Sended">
            <summary>
            Отправленное сообщение.
            </summary>
        </member>
        <member name="T:VkNet.Enums.ModerationStatus">
            <summary>
            Cтатус модерации объявления.
            </summary>
        </member>
        <member name="F:VkNet.Enums.ModerationStatus.NotModerated">
            <summary>
            Объявление не проходило модерацию
            </summary>
        </member>
        <member name="F:VkNet.Enums.ModerationStatus.Waiting">
            <summary>
            Объявление ожидает модерации
            </summary>
        </member>
        <member name="F:VkNet.Enums.ModerationStatus.Approved">
            <summary>
            Объявление одобрено
            </summary>
        </member>
        <member name="F:VkNet.Enums.ModerationStatus.Rejected">
            <summary>
            Объявление отклонено
            </summary>
        </member>
        <member name="T:VkNet.Enums.PageAccessKind">
            <summary>
            Режим доступа к странице
            </summary>
        </member>
        <member name="F:VkNet.Enums.PageAccessKind.OnlyAdministrators">
            <summary>
            Доступ только руководителям сообщества.
            </summary>
        </member>
        <member name="F:VkNet.Enums.PageAccessKind.OnlyMembers">
            <summary>
            Доступ только членам сообщества.
            </summary>
        </member>
        <member name="F:VkNet.Enums.PageAccessKind.Unrestricted">
            <summary>
            Неограниченный доступ.
            </summary>
        </member>
        <member name="T:VkNet.Enums.PeopleMain">
            <summary>
            Главное в людях.
            </summary>
        </member>
        <member name="F:VkNet.Enums.PeopleMain.Unknown">
            <summary>
            Не указано.
            </summary>
        </member>
        <member name="F:VkNet.Enums.PeopleMain.MindAndCreativity">
            <summary>
            Ум и креативность.
            </summary>
        </member>
        <member name="F:VkNet.Enums.PeopleMain.KindnessAndHonesty">
            <summary>
            Доброта и честность.
            </summary>
        </member>
        <member name="F:VkNet.Enums.PeopleMain.HealthAndBeauty">
            <summary>
            Красота и здоровье.
            </summary>
        </member>
        <member name="F:VkNet.Enums.PeopleMain.PowerAndWealth">
            <summary>
            Власть и богатство.
            </summary>
        </member>
        <member name="F:VkNet.Enums.PeopleMain.CourageAndPersistence">
            <summary>
            Смелость и упорство.
            </summary>
        </member>
        <member name="F:VkNet.Enums.PeopleMain.HumorAndLoveForLife">
            <summary>
            Юмор и жизнелюбие.
            </summary>
        </member>
        <member name="T:VkNet.Enums.PoliticalPreferences">
            <summary>
            Политические предпочтения.
            </summary>
        </member>
        <member name="F:VkNet.Enums.PoliticalPreferences.Unknown">
            <summary>
            Не указаны.
            </summary>
        </member>
        <member name="F:VkNet.Enums.PoliticalPreferences.Communist">
            <summary>
            Коммунистические.
            </summary>
        </member>
        <member name="F:VkNet.Enums.PoliticalPreferences.Socialist">
            <summary>
            Социалистические.
            </summary>
        </member>
        <member name="F:VkNet.Enums.PoliticalPreferences.Moderate">
            <summary>
            Умеренные.
            </summary>
        </member>
        <member name="F:VkNet.Enums.PoliticalPreferences.Liberal">
            <summary>
            Либеральные.
            </summary>
        </member>
        <member name="F:VkNet.Enums.PoliticalPreferences.Conservative">
            <summary>
            Консервативные.
            </summary>
        </member>
        <member name="F:VkNet.Enums.PoliticalPreferences.Monarchist">
            <summary>
            Монархические.
            </summary>
        </member>
        <member name="F:VkNet.Enums.PoliticalPreferences.Ultraconservative">
            <summary>
            Ультраконсервативные.
            </summary>
        </member>
        <member name="F:VkNet.Enums.PoliticalPreferences.Apathetic">
            <summary>
            Индифферентные.
            </summary>
        </member>
        <member name="F:VkNet.Enums.PoliticalPreferences.Libertarian">
            <summary>
            Либертантские.
            </summary>
        </member>
        <member name="T:VkNet.Enums.ProductAvailability">
            <summary>
            Статус доступности товара
            </summary>
        </member>
        <member name="F:VkNet.Enums.ProductAvailability.Available">
            <summary>
            Товар доступен
            </summary>
        </member>
        <member name="F:VkNet.Enums.ProductAvailability.Removed">
            <summary>
            Товар удален
            </summary>
        </member>
        <member name="F:VkNet.Enums.ProductAvailability.Unavailable">
            <summary>
            Товар недоступен
            </summary>
        </member>
        <member name="T:VkNet.Enums.ProductSort">
            <summary>
            Вид сортировки товаров.
            </summary>
        </member>
        <member name="F:VkNet.Enums.ProductSort.UserSort">
            <summary>
            0 — пользовательская расстановка
            </summary>
        </member>
        <member name="F:VkNet.Enums.ProductSort.ByAdd">
            <summary>
            1 — по дате добавления товара
            </summary>
        </member>
        <member name="F:VkNet.Enums.ProductSort.ByCost">
            <summary>
            2 — по цене
            </summary>
        </member>
        <member name="F:VkNet.Enums.ProductSort.ByPopularity">
            <summary>
            3 — по популярности
            </summary>
        </member>
        <member name="T:VkNet.Enums.Radius">
            <summary>
            тип радиуса зоны поиска
            </summary>
        </member>
        <member name="F:VkNet.Enums.Radius.ThreeHundredMeters">
            <summary>
            300 метров;
            </summary>
        </member>
        <member name="F:VkNet.Enums.Radius.TwoThousandFourHundred">
            <summary>
            2400 метров;
            </summary>
        </member>
        <member name="F:VkNet.Enums.Radius.EighteenKilometers">
            <summary>
            18 километров;
            </summary>
        </member>
        <member name="F:VkNet.Enums.Radius.OneHendredFiftyKilometers">
            <summary>
            150 километров.
            </summary>
        </member>
        <member name="T:VkNet.Enums.RelationType">
            <summary>
            Семейное положение.
            </summary>
        </member>
        <member name="F:VkNet.Enums.RelationType.Unknown">
            <summary>
            Не указано.
            </summary>
        </member>
        <member name="F:VkNet.Enums.RelationType.NotMarried">
            <summary>
            Не женат/не замужем.
            </summary>
        </member>
        <member name="F:VkNet.Enums.RelationType.HasFriend">
            <summary>
            Встречаюсь.
            </summary>
        </member>
        <member name="F:VkNet.Enums.RelationType.Engaged">
            <summary>
            Помолвлен/помолвлена.
            </summary>
        </member>
        <member name="F:VkNet.Enums.RelationType.Married">
            <summary>
            Женат/замужем.
            </summary>
        </member>
        <member name="F:VkNet.Enums.RelationType.ItsComplex">
            <summary>
            Всё сложно.
            </summary>
        </member>
        <member name="F:VkNet.Enums.RelationType.InActiveSearch">
            <summary>
            В активном поиске.
            </summary>
        </member>
        <member name="F:VkNet.Enums.RelationType.Amorous">
            <summary>
            Влюблен/влюблена.
            </summary>
        </member>
        <member name="F:VkNet.Enums.RelationType.CivilMarriage">
            <summary>
            В гражданском браке
            </summary>
        </member>
        <member name="T:VkNet.Enums.ReportReason">
            <summary>
            Причина жалобы.
            </summary>
        </member>
        <member name="F:VkNet.Enums.ReportReason.Spam">
            <summary>
            Это спам.
            </summary>
        </member>
        <member name="F:VkNet.Enums.ReportReason.ChildPornography">
            <summary>
            Детская порнография.
            </summary>
        </member>
        <member name="F:VkNet.Enums.ReportReason.Extremism">
            <summary>
            Экстремизм.
            </summary>
        </member>
        <member name="F:VkNet.Enums.ReportReason.Violence">
            <summary>
            Насилие.
            </summary>
        </member>
        <member name="F:VkNet.Enums.ReportReason.DrugPropaganda">
            <summary>
            Пропаганда наркотиков.
            </summary>
        </member>
        <member name="F:VkNet.Enums.ReportReason.AdultMaterial">
            <summary>
            Материал для взрослых.
            </summary>
        </member>
        <member name="F:VkNet.Enums.ReportReason.Abuse">
            <summary>
            Оскорбление.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.AccessRole">
            <summary>
            Права пользователя в рекламном кабинете.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AccessRole.Admin">
            <summary>
            Главный администратор
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AccessRole.Manager">
            <summary>
            Администратор
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AccessRole.Reports">
            <summary>
            Наблюдатель
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.AccountType">
            <summary>
            Тип рекламного кабинета.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AccountType.General">
            <summary>
            Обычный
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AccountType.Agency">
            <summary>
            Обычный
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.AdPlatform">
            <summary>
            Рекламные площадки, на которых будет показываться объявление. (если значение применимо к данному формату объявления)
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AdPlatform.VkAndPartners">
            <summary>
            (если ad_format равен 1) ВКонтакте и сайты-партнёры.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AdPlatform.VkOnly">
            <summary>
            (если ad_format равен 1) Только ВКонтакте.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AdPlatform.All">
            <summary>
            (если ad_format равен 9) Все площадки.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AdPlatform.Desktop">
            <summary>
            (если ad_format равен 9) Полная версия сайта.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AdPlatform.Mobile">
            <summary>
            (если ad_format равен 9) Мобильный сайт и приложения.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.AdsLinkType">
            <inheritdoc />
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AdsLinkType.Community">
            <summary>
            Сообщество
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AdsLinkType.Post">
            <summary>
            Запись в сообществе;
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AdsLinkType.Application">
            <summary>
            Приложение ВКонтакте;
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AdsLinkType.Video">
            <summary>
            Видеозапись;
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AdsLinkType.Site">
            <summary>
            Внешний сайт.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.AppPlatforms">
            <summary>
            Платформа для которой необходимо вернуть приложения.
            </summary>
            <remarks>
            По умолчанию используется web.
            </remarks>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AppPlatforms.Ios">
            <summary>
            Популярные за день (по умолчанию);
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AppPlatforms.Android">
            <summary>
            По посещаемости
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AppPlatforms.WinPhone">
            <summary>
            По дате создания приложения
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AppPlatforms.Web">
            <summary>
            По скорости роста
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.AppRatingType">
            <summary>
            Рейтинг приложений
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AppRatingType.Level">
            <summary>
            Рейтинг по уровням
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AppRatingType.Points">
            <summary>
            Рейтинг по очкам
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.AppRequestType">
            <summary>
            Тип запроса для приложений
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AppRequestType.Invite">
            <summary>
            В случае если запрос отправляется пользователю, не установившему приложение
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AppRequestType.Request">
            <summary>
            В случае если пользователь уже установил приложение
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.AppSort">
            <summary>
            Способ сортировки приложений
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AppSort.PopularToday">
            <summary>
            Популярные за день (по умолчанию);
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AppSort.Visitors">
            <summary>
            По посещаемости
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AppSort.CreateDate">
            <summary>
            По дате создания приложения
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AppSort.GrowthRate">
            <summary>
            По скорости роста
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AppSort.PopularWeek">
            <summary>
            Популярные за неделю.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.AppType">
            <summary>
            Тип приложения.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AppType.App">
            <summary>
            Социальное приложение;
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AppType.Game">
            <summary>
            Игра;
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AppType.Site">
            <summary>
            Подключаемый сайт;
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AppType.Standalone">
            <summary>
            Отдельное приложение (для мобильного устройства).
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AppType.VkApp">
            <summary>
            VK App приложение
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AppType.CommunityApp">
            <summary>
            VK App приложение
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AppType.Html5Game">
            <summary>
            HTML5 игра
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.AppWidgetImageType">
            <summary>
            Тип изображения для виджета приложения
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AppWidgetImageType.TwentyFourOnTwentyFour">
            <summary>
            24x24
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AppWidgetImageType.FiftyOnFifty">
            <summary>
            50x50
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AppWidgetImageType.OneHundredAndSixtyOnOneHundredAndSixty">
            <summary>
            160x160
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AppWidgetImageType.OneHundredAndSixtyOnTwoHundredAndForty">
            <summary>
            160x240
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.AppWidgetImageType.FiveHundredAndTenOnOneHundredAndTwentyEight">
            <summary>
            510x128
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.CallbackServerStatus">
            <summary>
            Статус сервера
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.CallbackServerStatus.Unconfigured">
            <summary>
            Адрес не задан;
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.CallbackServerStatus.Fail">
            <summary>
            Подтвердить адрес не удалось
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.CallbackServerStatus.Wait">
            <summary>
            Адрес ожидает подтверждения
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.CallbackServerStatus.Ok">
            <summary>
            Сервер подключен
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.CampaignType">
            <summary>
            Тип рекламного кабинета.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.CampaignType.Normal">
            <summary>
            Обычная кампания, в которой можно создавать любые объявления, кроме мобильной
            рекламы и записей в сообществе
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.CampaignType.VkAppsManaged">
            <summary>
            Кампания, в которой можно рекламировать только администрируемые Вами приложения
            и у которой есть отдельный бюджет
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.CampaignType.MobileApps">
            <summary>
            Кампания, в которой можно рекламировать только мобильные приложения
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.CampaignType.PromotedPosts">
            <summary>
            Кампания, в которой можно рекламировать только записи в сообществе
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.ChangeNameStatus">
            <summary>
            Статус заявки на изменение имени
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.ChangeNameStatus.Processing">
            <summary>
            Заявка рассматривается
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.ChangeNameStatus.Declined">
            <summary>
            Заявка отклонена
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.ChangeNameStatus.Success">
            <summary>
            Имя было успешно изменено
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.ChangeNameStatus.WasAccepted">
            <summary>
            Недавно уже была одобрена заявка, повторную заявку можно подать не раньше даты,
            указанной в поле
            ChangeNameRequest.RepeatDate
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.ChangeNameStatus.WasDeclined">
            <summary>
            Предыдущая заявка была отклонена, повторную заявку можно подать не раньше даты,
            указанной в поле
            ChangeNameRequest.RepeatDate
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.CommentObjectType">
            <summary>
            Тип комментариев.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.CommentObjectType.Post">
            <summary>
            Запись на стене пользователя или группы.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.CommentObjectType.Photo">
            <summary>
            Фотография.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.CommentObjectType.Video">
            <summary>
            Видеозапись.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.CommentObjectType.Topic">
            <summary>
            Обсуждение.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.CommentObjectType.Note">
            <summary>
            Заметка.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.CommentsSort">
            <summary>
            Порядок сортировки комментариев к записи.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.CommentsSort.Asc">
            <summary>
            В хронологическом порядке (от старых к новым).
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.CommentsSort.Desc">
            <summary>
            В порядке, обратном хронологическому (от новых к старым).
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.ConversationChatSettingsState">
            <summary>
            Настройки беседы
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.ConversationChatSettingsState.In">
            <summary>
            Состоит в чате.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.ConversationChatSettingsState.Kicked">
            <summary>
            Исключён из чата.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.ConversationChatSettingsState.Left">
            <summary>
            Покинул чат.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.ConversationPeerType">
            <summary>
            Тип пира беседы
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.ConversationPeerType.User">
            <summary>
            Пользователь.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.ConversationPeerType.Chat">
            <summary>
            Чат.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.ConversationPeerType.Group">
            <summary>
            Группа.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.ConversationPeerType.Email">
            <summary>
            E-mail.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.Deactivated">
            <summary>
            Возможные значения параметра display, задающего внешний вид окна авторизации.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.Deactivated.Deleted">
            <summary>
            Удалено.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.Deactivated.Banned">
            <summary>
            Заблокировано.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.Deactivated.Activated">
            <summary>
            Активно.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.Display">
            <summary>
            Возможные значения параметра display, задающего внешний вид окна авторизации.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.Display.Page">
            <summary>
            Форма авторизации в отдельном окне;
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.Display.Popup">
            <summary>
            Всплывающее окно.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.Display.Mobile">
            <summary>
            Для мобильных устройств.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.DocMessageType">
            <summary>
            тип документа
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.DocMessageType.Doc">
            <summary>
            DocMessageType
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.DocMessageType.AudioMessage">
            <summary>
            голосовое сообщение
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.FavePageType">
            <summary>
            Тип страницы.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.FavePageType.Users">
            <summary>
            Пользователи.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.FavePageType.Videos">
            <summary>
            Сообщества.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.FavePageType.Hints">
            <summary>
            Топ сообществ и пользователей.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.FeedType">
            <summary>
            Порядок сортировки членов группы.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.FeedType.Photo">
            <summary>
            По возрастанию численных значений идентификаторов.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.FeedType.PhotoTag">
            <summary>
            По убыванию численных значений идентификаторов.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.FriendsFilter">
            <summary>
            Типы предлагаемых друзей, которые нужно вернуть, перечисленные через запятую.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.FriendsFilter.Mutual">
            <summary>
            Пользователи, с которыми много общих друзей;
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.FriendsFilter.Contacts">
            <summary>
            Пользователи, найденные с помощью метода account.importContacts;
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.FriendsFilter.MutualContacts">
            <summary>
            Пользователи, которые импортировали те же контакты, что и текущий пользователь,
            используя метод
            account.importContacts;
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.FriendsOrder">
            <summary>
            Порядок, в котором необходимо вернуть список друзей.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.FriendsOrder.Name">
            <summary>
            Сортировать по имени (работает только при переданном параметре fields).
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.FriendsOrder.Hints">
            <summary>
            Сортировать по рейтингу, аналогично тому, как друзья сортируются в разделе "Мои
            друзья".
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.FriendsOrder.Random">
            <summary>
            Возвращает друзей в случайном порядке.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.GetConversationFilter">
            <summary>
            Фильтр беседы
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GetConversationFilter.All">
            <summary>
            Все беседы.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GetConversationFilter.Unread">
            <summary>
            Беседы с непрочитанными сообщениями;
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GetConversationFilter.Important">
            <summary>
            Беседы, помеченные как важные (только для сообщений сообществ);
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GetConversationFilter.Unanswered">
            <summary>
            Беседы, помеченные как неотвеченные (только для сообщений сообществ).
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.GrantType">
            <summary>
            Тип авторизации.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GrantType.ClientCredentials">
            <summary>
            Client Credentials Flow.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GrantType.Password">
            <summary>
            Direct Auth Flow.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.GroupsMemberFilters">
            <summary>
            Порядок сортировки членов группы.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupsMemberFilters.Friends">
            <summary>
            Friends — будут возвращены только друзья в этом сообществе.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupsMemberFilters.Unsure">
            <summary>
            unsure — будут возвращены пользователи, которые выбрали «Возможно пойду» (если
            сообщество относится к
            мероприятиям).
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupsMemberFilters.Managers">
            <summary>
            managers — будут возвращены только руководители сообщества (доступно при
            запросе с передачей access_token от имени
            администратора сообщества).
            строка.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.GroupsSort">
            <summary>
            Порядок сортировки членов группы.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupsSort.IdAsc">
            <summary>
            По возрастанию численных значений идентификаторов.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupsSort.IdDesc">
            <summary>
            По убыванию численных значений идентификаторов.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupsSort.TimeAsc">
            <summary>
            По возрастанию времени присоединения к группе.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupsSort.TimeDesc">
            <summary>
            По убыванию времени присоединения к группе.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.GroupType">
            <summary>
            Тип сообщества
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupType.Page">
            <summary>
            Публичная страница.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupType.Group">
            <summary>
            Группа.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupType.Event">
            <summary>
            Мероприятие.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupType.Undefined">
            <summary>
            Не определено.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.GroupUpdateType">
            <summary>
            Тип обновления
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupUpdateType.MessageNew">
            <summary>
            Новое сообщение
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupUpdateType.MessageReply">
            <summary>
            Новое исходящее сообщение
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupUpdateType.MessageEdit">
            <summary>
            Редактирование сообщения
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupUpdateType.MessageAllow">
            <summary>
            Подписка на сообщения от сообщества
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupUpdateType.MessageDeny">
            <summary>
            Новый запрет сообщений от сообщества
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupUpdateType.PhotoNew">
            <summary>
            Добавление фотографии
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupUpdateType.PhotoCommentNew">
            <summary>
            Добавление комментария к фотографии
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupUpdateType.PhotoCommentEdit">
            <summary>
            Редактирование комментария к фотографии
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupUpdateType.PhotoCommentRestore">
            <summary>
            Восстановление комментария к фотографии
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupUpdateType.PhotoCommentDelete">
            <summary>
            Удаление комментария к фотографии
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupUpdateType.AudioNew">
            <summary>
            Добавление аудио
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupUpdateType.VideoNew">
            <summary>
            Добавление видео
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupUpdateType.VideoCommentNew">
            <summary>
            Добавление комментария к видео
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupUpdateType.VideoCommentEdit">
            <summary>
            Редактирование комментария к видео
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupUpdateType.VideoCommentRestore">
            <summary>
            Восстановление комментария к видео
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupUpdateType.VideoCommentDelete">
            <summary>
            Удаление комментария к видео
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupUpdateType.WallPostNew">
            <summary>
            Добавление записи на стене
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupUpdateType.WallRepost">
            <summary>
            Репост записи на стене
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupUpdateType.WallReplyNew">
            <summary>
            Добавление комментария на стене
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupUpdateType.WallReplyEdit">
            <summary>
            Редактирование комментария на стене
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupUpdateType.WallReplyRestore">
            <summary>
            Восстановление комментария на стене
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupUpdateType.WallReplyDelete">
            <summary>
            Удаление комментария на стене
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupUpdateType.BoardPostNew">
            <summary>
            Добавление комментария в обсуждении
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupUpdateType.BoardPostEdit">
            <summary>
            Редактирование комментария в обсуждении
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupUpdateType.BoardPostRestore">
            <summary>
            Восстановление комментария в обсуждении
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupUpdateType.BoardPostDelete">
            <summary>
            Удаление комментария в обсуждении
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupUpdateType.MarketCommentNew">
            <summary>
            Добавление комментария к товару
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupUpdateType.MarketCommentEdit">
            <summary>
            Редактирование комментария к товару
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupUpdateType.MarketCommentRestore">
            <summary>
            Восстановление комментария к товару
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupUpdateType.MarketCommentDelete">
            <summary>
            Удаление комментария к товару
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupUpdateType.GroupLeave">
            <summary>
            Удаление участника из группы
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupUpdateType.GroupJoin">
            <summary>
            Добавление участника или заявки на вступление в сообщество
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupUpdateType.UserBlock">
            <summary>
            Добавление пользователя в черный список
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupUpdateType.UserUnblock">
            <summary>
            Удаление пользователя из черного списка
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupUpdateType.PollVoteNew">
            <summary>
            Добавление голоса в публичном опросе
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupUpdateType.GroupOfficersEdit">
            <summary>
            Редактирование списка руководителей
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupUpdateType.GroupChangePhoto">
            <summary>
            Изменение главного фото
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.GroupUpdateType.Confirmation">
            <summary>
            Подтверждение адреса сервера
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.Intent">
            <summary>
            Метка, которая обозначает приблизительное содержание сообщения от сообщества
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.Intent.PromoNewsletter">
            <summary>
            Интент, который должен сопровождать рекламную рассылку для ботов.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.KeyboardButtonActionType">
            <summary>
            Тип кнопки сообщений.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.KeyboardButtonActionType.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.KeyboardButtonActionType.Location">
            <summary>
            Location
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.KeyboardButtonActionType.VkPay">
            <summary>
            VkPay
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.KeyboardButtonActionType.VkApp">
            <summary>
            Vk Apps
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.KeyboardButtonColor">
            <summary>
            Цвет кнопки клавиатуры отправляемой ботом.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.KeyboardButtonColor.Default">
            <summary>
            обычная белая кнопка. #FFFFFF
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.KeyboardButtonColor.Primary">
            <summary>
            синяя кнопка, обозначает основное действие. #5181B8
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.KeyboardButtonColor.Negative">
            <summary>
            опасное действие, или отрицательное действие (отклонить, удалить и тд). #E64646
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.KeyboardButtonColor.Positive">
            <summary>
            согласиться, подтвердить. #4BB34B
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.LikeObjectType">
            <summary>
            Тип объекта (исп. в категории Likes)
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.LikeObjectType.Post">
            <summary>
            Запись на стене пользователя или группы
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.LikeObjectType.Comment">
            <summary>
            Комментарий к записи на стене
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.LikeObjectType.Photo">
            <summary>
            Фотография
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.LikeObjectType.Audio">
            <summary>
            Аудиозапись
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.LikeObjectType.Video">
            <summary>
            Видеозапись
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.LikeObjectType.Note">
            <summary>
            Заметка
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.LikeObjectType.PhotoComment">
            <summary>
            Комментарий к фотографии
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.LikeObjectType.VideoComment">
            <summary>
            Комментарий к видеозаписи
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.LikeObjectType.TopicComment">
            <summary>
            Комментарий в обсуждении
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.LikeObjectType.SitePage">
            <summary>
            Страница сайта, на котором установлен виджет «Мне нравится»
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.LikeObjectType.Market">
            <summary>
            Товар
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.LikeObjectType.MarketComment">
            <summary>
            Комментарий к товару.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.LikesFilter">
            <summary>
            Указывает, следует ли вернуть всех пользователей, добавивших объект в список
            "Мне нравится" или только тех, которые
            рассказали о нем друзьям
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.LikesFilter.Likes">
            <summary>
            Возвращать информацию обо всех пользователях
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.LikesFilter.Copies">
            <summary>
            Возвращать информацию только о пользователях, рассказавших об объекте друзьям.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.LinkAccessType">
            <summary>
            Возвращает информацию о том, является ли внешняя ссылка заблокированной на
            сайте ВКонтакте.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.LinkAccessType.NotBanned">
            <summary>
            Cсылка не заблокирована
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.LinkAccessType.Banned">
            <summary>
            Cсылка заблокирована
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.LinkAccessType.Processing">
            <summary>
            Cсылка проверяется; необходимо выполнить повторный запрос через несколько
            секунд
            </summary>
        </member>
        <member name="M:VkNet.Enums.SafetyEnums.LinkAccessType.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.LinkStatInterval">
            <summary>
            Единица времени для подсчета статистики.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.LinkStatInterval.Hour">
            <summary>
            Час
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.LinkStatInterval.Day">
            <summary>
            День
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.LinkStatInterval.Week">
            <summary>
            Неделя
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.LinkStatInterval.Month">
            <summary>
            Месяц
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.LinkStatInterval.Forever">
            <summary>
            Все время с момента создания ссылки
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.LinkStatusType">
            <summary>
            Тип статуса ссылки
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.LinkStatusType.Allowed">
            <summary>
            Ссылку допустимо использовать в рекламных объявлениях;
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.LinkStatusType.Disallowed">
            <summary>
            Ссылку допустимо использовать в рекламных объявлениях;
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.LinkStatusType.InProgress">
            <summary>
            Ссылку допустимо использовать в рекламных объявлениях;
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.ManagerRole">
            <summary>
            Уровень полномочий пользователя в сообществе (Используется для задания
            полномочий пользователя в методе
            EditManager).
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.ManagerRole.Moderator">
            <summary>
            Пользователь является модератором собщества.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.ManagerRole.Editor">
            <summary>
            Пользователь является редактором сообщества.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.ManagerRole.Administrator">
            <summary>
            Пользователь является администратором сообщества.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.MarketItemButtonTitle">
            <summary>
            Текст на кнопке товара.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.MarketItemButtonTitle.Buy">
            <summary>
            Купить
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.MarketItemButtonTitle.GoToTheStore">
            <summary>
            Перейти в магазин
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.MarketItemButtonTitle.BuyATicket">
            <summary>
            Купить билет
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.MediaType">
            <summary>
            Тип медиавложения.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.MediaType.Photo">
            <summary>
            Фотографии.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.MediaType.Video">
            <summary>
            Видеозаписи.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.MediaType.Audio">
            <summary>
            Аудиозаписи.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.MediaType.Doc">
            <summary>
            Документы.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.MediaType.Link">
            <summary>
            Ссылки.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.MediaType.Market">
            <summary>
            Товары.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.MediaType.Wall">
            <summary>
            Записи.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.MediaType.Share">
            <summary>
            Ссылки, товары и записи.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.MessageAction">
            <summary>
            Действия для сообщений
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.MessageAction.ChatPhotoUpdate">
            <summary>
            обновлена фотография беседы;
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.MessageAction.ChatPhotoRemove">
            <summary>
            удалена фотография беседы;
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.MessageAction.ChatCreate">
            <summary>
            создана беседа;
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.MessageAction.ChatTitleUpdate">
            <summary>
            обновлено название беседы;
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.MessageAction.ChatInviteUser">
            <summary>
            приглашен пользователь;
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.MessageAction.ChatKickUser">
            <summary>
            исключен пользователь.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.MessageAction.ChatPinMessage">
            <summary>
            закреплено сообщение;
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.MessageAction.ChatUnpinMessage">
            <summary>
            откреплено сообщение.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.MessageAction.ChatInviteUserByLink">
            <summary>
            пользователь присоединился к беседе по ссылке.
            </summary>
        </member>
        <member name="M:VkNet.Enums.SafetyEnums.MessageAction.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.MessageAction">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.MessageActivityType.Typing">
            <summary>
            Пользователь начал набирать текст.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.MessageActivityType.AudioMessage">
            <summary>
            Пользователь записывает голосовое сообщение.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.MonthlyLimit">
            <inheritdoc />
            <summary>
            Месячные ограничения
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.MonthlyLimit.Tier1">
            <summary>
            1 месяц.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.MonthlyLimit.Tier2">
            <summary>
            2 месяца.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.MonthlyLimit.Tier3">
            <summary>
            3 месяца.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.MonthlyLimit.Tier4">
            <summary>
            4 месяца.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.MonthlyLimit.Tier5">
            <summary>
            5 месяцев.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.MonthlyLimit.Tier6">
            <summary>
            6 месяцев.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.MonthlyLimit.Unlimited">
            <summary>
            Безлимитный доступ.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.NameCase">
            <summary>
            Падеж.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.NameCase.Nom">
            <summary>
            Именительный.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.NameCase.Gen">
            <summary>
            Родительный.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.NameCase.Dat">
            <summary>
            Дательный.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.NameCase.Acc">
            <summary>
            Винительный.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.NameCase.Ins">
            <summary>
            Творительный.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.NameCase.Abl">
            <summary>
            Предложный.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.NewsObjectTypes">
            <summary>
            Названия списков новостей, которые необходимо получить.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.NewsObjectTypes.Wall">
            <summary>
            Запись на стене.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.NewsObjectTypes.Tag">
            <summary>
            Отметка на фотографии.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.NewsObjectTypes.ProfilePhoto">
            <summary>
            Фотография профиля.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.NewsObjectTypes.Video">
            <summary>
            Видеозапись.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.NewsObjectTypes.Photo">
            <summary>
            Фотография.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.NewsObjectTypes.Audio">
            <summary>
            Аудиозапись.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.NonStandardQuestion">
            <summary>
            Типы нестандартных вопросов
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.NonStandardQuestion.Input">
            <summary>
            Простое текстовое поле (строка)
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.NonStandardQuestion.Textarea">
            <summary>
            Большое текстовое поле (абзац)
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.NonStandardQuestion.Radio">
            <summary>
            Выбор одного из нескольких вариантов
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.NonStandardQuestion.Checkbox">
            <summary>
            Выбор нескольких вариантов
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.NonStandardQuestion.Select">
            <summary>
            Выбор одного варианта из выпадающего списка
            </summary>
            <remarks>
            options должен быть массивом структур, описывающих варианты ответа
            </remarks>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.NonStandardQuestion.Label">
            <summary>
            Текст ответа
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.NonStandardQuestion.Key">
            <summary>
            Ключ ответа (необязательно)
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.OccupationType">
            <summary>
            Информация о текущем роде занятия пользователя.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.OccupationType.Work">
            <summary>
            Работа.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.OccupationType.School">
            <summary>
            Школа.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.OccupationType.University">
            <summary>
            ВУЗ.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.OnlineStatusType">
            <summary>
            Информация о текущем роде занятия пользователя.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.OnlineStatusType.None">
            <summary>
            Сообщество не онлайн
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.OnlineStatusType.Online">
            <summary>
            Сообщество онлайн (отвечает мгновенно)
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.OnlineStatusType.AnswerMark">
            <summary>
            Сообщество отвечает быстро.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.OrderState.Chargeable">
            <summary>
            chargeable — неподтверждённый заказ. В это состояние заказы попадают в случае, если магазин не обрабатывает уведомления.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.OrderState.Declined">
            <summary>
            Отменённый заказ на этапе получения информации о товаре, например, была получена ошибка 20, "Товара не существует".
            В это состояние заказ может попасть из состояния chargeable.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.OrderState.Cancelled">
            <summary>
            cancelled — отменённый заказ. В это состояние заказ может попасть из состояния chargeable.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.OrderState.Charged">
            <summary>
            charged — оплаченный заказ. В это состояние заказ может попасть из состояния chargeable, либо сразу после оплаты, если приложение обрабатывает уведомления.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.OrderState.Refunded">
            <summary>
            refunded — отменённый после оплаты заказ, голоса возвращены пользователю.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.OrderStateAction.Cancel">
            <summary>
            cancel — отменить неподтверждённый заказ.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.OrderStateAction.Charge">
            <summary>
            charge — подтвердить неподтверждённый заказ.
            Применяется только если не удалось обработать уведомление order_change_state.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.OrderStateAction.Refund">
            <summary>
            cancel — отменить неподтверждённый заказ.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.PhotoAlbumType">
            <summary>
            Тип служебного альбома с фотографиями
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.PhotoAlbumType.Wall">
            <summary>
            Фотографии со стены
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.PhotoAlbumType.Profile">
            <summary>
            Аватары
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.PhotoAlbumType.Saved">
            <summary>
            Сохраненные фотографии
            </summary>
        </member>
        <member name="M:VkNet.Enums.SafetyEnums.PhotoAlbumType.Id(System.Int64)">
            <summary>
            Идентификатор альбома
            </summary>
            <param name="number"> Номер списка. </param>
            <returns> Номер списка. </returns>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.PhotoFeedType">
            <summary>
            Тип канала новостей.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.PhotoFeedType.Photo">
            <summary>
            Фото.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.PhotoFeedType.PhotoTag">
            <summary>
            Тег фото.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.PhotoSearchRadius">
            <summary>
            Радиус поиска в метрах.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.PhotoSearchRadius.Ten">
            <summary>
            10.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.PhotoSearchRadius.OneHundred">
            <summary>
            100.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.PhotoSearchRadius.Eighty">
            <summary>
            800.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.PhotoSearchRadius.SixThousand">
            <summary>
            6000.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.PhotoSearchRadius.FiftyThousand">
            <summary>
            50000.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.PhotoSizeType">
            <summary>
            Порядок сортировки членов группы.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.PhotoSizeType.S">
            <summary>
            Пропорциональная копия изображения с максимальной шириной 75px.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.PhotoSizeType.M">
            <summary>
            Пропорциональная копия изображения с максимальной шириной 130px.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.PhotoSizeType.X">
            <summary>
            Пропорциональная копия изображения с максимальной шириной 604px.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.PhotoSizeType.O">
            <summary>
            Если соотношение "ширина/высота" исходного изображения меньше или равно 3:2, то
            пропорциональная копия с
            максимальной шириной 130px. Если соотношение "ширина/высота" больше 3:2, то
            копия обрезанного слева изображения с
            максимальной шириной 130px и соотношением сторон 3:2.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.PhotoSizeType.P">
            <summary>
            Если соотношение "ширина/высота" исходного изображения меньше или равно 3:2, то
            пропорциональная копия с
            максимальной шириной 200px. Если соотношение "ширина/высота" больше 3:2, то
            копия обрезанного слева и справа
            изображения с максимальной шириной 200px и соотношением сторон 3:2.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.PhotoSizeType.Q">
            <summary>
            Если соотношение "ширина/высота" исходного изображения меньше или равно 3:2, то
            пропорциональная копия с
            максимальной шириной 320px. Если соотношение "ширина/высота" больше 3:2, то
            копия обрезанного слева и справа
            изображения с максимальной шириной 320px и соотношением сторон 3:2.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.PhotoSizeType.R">
            <summary>
            Если соотношение "ширина/высота" исходного изображения меньше или равно 3:2, то
            пропорциональная копия с
            максимальной шириной 510px. Если соотношение "ширина/высота" больше 3:2, то
            копия обрезанного слева и справа
            изображения с максимальной шириной 510px и соотношением сторон 3:2.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.PhotoSizeType.Y">
            <summary>
            Пропорциональная копия изображения с максимальной стороной 807px.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.PhotoSizeType.Z">
            <summary>
            Пропорциональная копия изображения с максимальным размером 1280x1024.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.PhotoSizeType.W">
            <summary>
            Пропорциональная копия изображения с максимальным размером 2560x2048px.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.Platform">
            <summary>
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.Platform.Android">
            <summary>
            Android.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.Platform.IPhone">
            <summary>
            iPhone.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.Platform.WindowsPhone">
            <summary>
            wphone.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.PollBackgroundType">
            <summary>
            Тип фона опроса.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.PollBackgroundType.Gradient">
            <summary>
            Gradient.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.PollBackgroundType.Tile">
            <summary>
            tile.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.PostSourceType">
            <summary>
            На данный момент поддерживаются следующие типы источников записи на стене,
            значение которых указываются в поле
            type:
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.PostSourceType.Vk">
            <summary>
            Запись создана через основной интерфейс сайта (http://vk.com/).
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.PostSourceType.Widget">
            <summary>
            Запись создана через виджет на стороннем сайте.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.PostSourceType.Api">
            <summary>
            Запись создана приложением через API.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.PostSourceType.Rss">
            <summary>
            Запись создана посредством импорта RSS-ленты со стороннего сайта.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.PostSourceType.Sms">
            <summary>
            Запись создана посредством отправки SMS-сообщения на специальный номер.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.PostType">
            <summary>
            Тип записи post, copy, reply, postpone, suggest
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.PostType.Post">
            <summary>
            Запись на стене (по умолчанию);
            v5.6+ - репосты имею тип "post"
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.PostType.Copy">
            <summary>
            Репост до версии 5.6 (сейчас не описано)
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.PostType.Reply">
            <summary>
            Ответ на запись с закрытыми комментариями (м.б. еще что-то)
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.PostType.Postpone">
            <summary>
            Закрепленная запись
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.PostType.Suggest">
            <summary>
            Предложенная запись
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.PostTypeOrder">
            <summary>
            Способ сортировки приложений
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.PostTypeOrder.Post">
            <summary>
            Популярные за день (по умолчанию);
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.PostTypeOrder.Copy">
            <summary>
            По посещаемости
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.Privacy">
            <summary>
            Уровень доступа к комментированию альбома
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.Privacy.All">
            <summary>
            Доступно всем пользователям.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.Privacy.Friends">
            <summary>
            Доступно друзьям текущего пользователя.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.Privacy.FriendsOfFriends">
            <summary>
            Доступно друзьям и друзьям друзей.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.Privacy.FriendsOfFriendsOnly">
            <summary>
            Доступно друзьям друзей текущего пользователя.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.Privacy.Nobody">
            <summary>
            Недоступно никому.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.Privacy.OnlyMe">
            <summary>
            Доступно только мне.
            </summary>
        </member>
        <member name="M:VkNet.Enums.SafetyEnums.Privacy.AvailableForList(System.Int64)">
            <summary>
            Доступно для списка
            </summary>
            <param name="number"> Номер списка. </param>
            <returns> Номер списка. </returns>
        </member>
        <member name="M:VkNet.Enums.SafetyEnums.Privacy.UnAvailableForList(System.Int64)">
            <summary>
            Недоступно для списка
            </summary>
            <param name="number"> Номер списка. </param>
            <returns> Номер списка. </returns>
        </member>
        <member name="M:VkNet.Enums.SafetyEnums.Privacy.AvailableForUser(System.Int64)">
            <summary>
            Доступно для пользователя
            </summary>
            <param name="number"> Номер списка. </param>
            <returns> Номер списка. </returns>
        </member>
        <member name="M:VkNet.Enums.SafetyEnums.Privacy.UnAvailableForUser(System.Int64)">
            <summary>
            Недоступно для пользователя
            </summary>
            <param name="number"> Номер списка. </param>
            <returns> Номер списка. </returns>
        </member>
        <member name="M:VkNet.Enums.SafetyEnums.Privacy.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.RelativeType">
            <summary>
            Тип родственных связей.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.RelativeType.Sibling">
            <summary>
            Брат/Сестра.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.RelativeType.Parent">
            <summary>
            Родитель.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.RelativeType.Child">
            <summary>
            Ребенок.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.RelativeType.Grandparent">
            <summary>
            Дедушка/Бабушка.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.RelativeType.Grandchild">
            <summary>
            Внук.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.ReportType">
            <summary>
            Тип жалобы.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.ReportType.Porn">
            <summary>
            Порнография.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.ReportType.Spam">
            <summary>
            Рассылка спама.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.ReportType.Insult">
            <summary>
            Оскорбительное поведение.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.ReportType.Advertisment">
            <summary>
            Рекламная страница, засоряющая поиск.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.ResponseType">
            <summary>
            Тип ответа, который необходимо получить.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.ResponseType.Token">
            <summary>
            Токен.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.ResponseType.Сode">
            <summary>
            Код.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.SafetyEnum`1">
            <summary>
            Аналог enum, типобезопасен.
            </summary>
            <typeparam name="TFilter"> Непосредственно наследник </typeparam>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.SafetyEnum`1._value">
            <summary>
            Значение
            </summary>
        </member>
        <member name="M:VkNet.Enums.SafetyEnums.SafetyEnum`1.Equals(VkNet.Enums.SafetyEnums.SafetyEnum{`0},VkNet.Enums.SafetyEnums.SafetyEnum{`0})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Enums.SafetyEnums.SafetyEnum`1.GetHashCode(VkNet.Enums.SafetyEnums.SafetyEnum{`0})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Enums.SafetyEnums.SafetyEnum`1.Equals(VkNet.Enums.SafetyEnums.SafetyEnum{`0})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Enums.SafetyEnums.SafetyEnum`1.RegisterPossibleValue(System.String)">
            <summary>
            Регистрирует возможное значение.
            </summary>
            <param name="value"> Значение. </param>
            <returns> </returns>
            <exception cref="T:System.ArgumentException">
            Mask must be a power of 2 (i.e.
            only one bit must be equal to 1);mask
            </exception>
        </member>
        <member name="M:VkNet.Enums.SafetyEnums.SafetyEnum`1.ToString">
            <summary>
            Преобразовать в строку.
            </summary>
        </member>
        <member name="M:VkNet.Enums.SafetyEnums.SafetyEnum`1.op_Equality(VkNet.Enums.SafetyEnums.SafetyEnum{`0},VkNet.Enums.SafetyEnums.SafetyEnum{`0})">
            <summary>
            Реализация оператора ==.
            </summary>
            <param name="left"> Левая часть. </param>
            <param name="right"> Правая часть. </param>
            <returns>
            Результат.
            </returns>
        </member>
        <member name="M:VkNet.Enums.SafetyEnums.SafetyEnum`1.op_Inequality(VkNet.Enums.SafetyEnums.SafetyEnum{`0},VkNet.Enums.SafetyEnums.SafetyEnum{`0})">
            <summary>
            Реализация оператора !=.
            </summary>
            <param name="left"> Левая часть. </param>
            <param name="right"> Правая часть. </param>
            <returns>
            Результат.
            </returns>
        </member>
        <member name="M:VkNet.Enums.SafetyEnums.SafetyEnum`1.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> Объект перечисления типа TFilter - Непосредственно наследник </returns>
        </member>
        <member name="M:VkNet.Enums.SafetyEnums.SafetyEnum`1.FromJsonString(System.String)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> Объект перечисления типа TFilter - Непосредственно наследник </returns>
        </member>
        <member name="M:VkNet.Enums.SafetyEnums.SafetyEnum`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Enums.SafetyEnums.SafetyEnum`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.ScheduleWorkInfoStatus">
            <summary>
            Тип расписания.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.ScheduleWorkInfoStatus.NoInformation">
            <summary>
            Нет информации о расписании
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.ScheduleWorkInfoStatus.AlwaysOpened">
            <summary>
            Открыто круглосуточно
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.ScheduleWorkInfoStatus.ForeverClosed">
            <summary>
            закрыто навсегда
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.ScheduleWorkInfoStatus.Timetable">
            <summary>
            Открыто в указанные часы работы.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.SearchResultType">
            <summary>
            Тип объекта поиска
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.SearchResultType.Group">
            <summary>
            Сообщество
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.SearchResultType.Profile">
            <summary>
            Профиль
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.Services">
            <summary>
            Сервисы
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.Services.Email">
            <summary>
            The email
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.Services.Phone">
            <summary>
            The phone
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.Services.Twitter">
            <summary>
            The twitter
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.Services.Facebook">
            <summary>
            The facebook
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.Services.Odnoklassniki">
            <summary>
            The odnoklassniki
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.Services.Instagram">
            <summary>
            The instagram
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.Services.Google">
            <summary>
            The google
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.StandardQuestion">
            <inheritdoc />
            <summary>
            Типы стандартных вопросов
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StandardQuestion.FirstName">
            <summary>
            Имя
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StandardQuestion.PatronymicName">
            <summary>
            Отчество
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StandardQuestion.LastName">
            <summary>
            Фамилия
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StandardQuestion.Email">
            <summary>
            Адрес электронной почты
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StandardQuestion.PhoneNumber">
            <summary>
            Номер телефона
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StandardQuestion.Age">
            <summary>
            Возраст
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StandardQuestion.Birthday">
            <summary>
            День рождения
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StandardQuestion.Location">
            <summary>
            Город и страна
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.StateInterval">
            <summary>
            Единица времени для подсчета статистики.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StateInterval.Day">
            <summary>
            День
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StateInterval.Week">
            <summary>
            Неделя
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StateInterval.Month">
            <summary>
            Месяц
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StateInterval.Year">
            <summary>
            Все время с момента создания ссылки
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StateInterval.All">
            <summary>
            Все время с момента создания ссылки
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.StatsGroups">
            <summary>
            Группы статистики
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StatsGroups.Visitors">
            <summary>
            Посетители
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StatsGroups.Reach">
            <summary>
            Посетители
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StatsGroups.Activity">
            <summary>
            Посетители
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.StoryLinkText">
            <summary>
            Текст ссылки для перехода из истории (только для историй сообществ). 
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StoryLinkText.ToStore">
            <summary>
            В магазин
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StoryLinkText.Vote">
            <summary>
            Голосовать
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StoryLinkText.More">
            <summary>
            Ещё
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StoryLinkText.Book">
            <summary>
            Забронировать
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StoryLinkText.Order">
            <summary>
            Заказать
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StoryLinkText.Enroll">
            <summary>
            Записаться
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StoryLinkText.Fill">
            <summary>
            Заполнить
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StoryLinkText.Signup">
            <summary>
            Зарегистрироваться
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StoryLinkText.Buy">
            <summary>
            Купить
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StoryLinkText.Ticket">
            <summary>
            Купить билет
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StoryLinkText.Write">
            <summary>
            Написать
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StoryLinkText.Open">
            <summary>
            Открыть
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StoryLinkText.LearnMore">
            <summary>
            Подробнее
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StoryLinkText.View">
            <summary>
            Посмотреть
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StoryLinkText.GoTo">
            <summary>
            Перейти
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StoryLinkText.Contact">
            <summary>
            Связаться
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StoryLinkText.Watch">
            <summary>
            Смотреть
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StoryLinkText.Play">
            <summary>
            Слушать
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StoryLinkText.Install">
            <summary>
            Установить
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StoryLinkText.Read">
            <summary>
            Читать
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.StoryObjectState">
            <summary>
            Доступность значения.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StoryObjectState.On">
            <summary>
            Доступно.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StoryObjectState.Off">
            <summary>
            Недоступно.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StoryObjectState.Hidden">
            <summary>
            Недоступно.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.StoryType">
            <inheritdoc />
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StoryType.Photo">
            <summary>
            Фотография
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StoryType.Video">
            <summary>
            Видеозапись
            </summary>
        </member>
        <member name="M:VkNet.Enums.SafetyEnums.StoryType.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Enums.SafetyEnums.StoryType">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.StreamingEventType">
            <summary>
            Тип событий
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StreamingEventType.Post">
            <summary>
            Записи на стене;
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StreamingEventType.Comment">
            <summary>
            Комментарии;
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.StreamingEventType.Share">
            <summary>
            Репосты;
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.UserOrGroupType">
            <summary>
            Пользователь или сообщество.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.UserOrGroupType.User">
            <summary>
            Пользователь.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.UserOrGroupType.Video">
            <summary>
            Сообщество.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.UserSection">
            <summary>
            Разделы среди которых нужно осуществить поиск, перечисленные через запятую:
            friends – искать среди друзей
            subscriptions – искать среди друзей и подписок пользователя список строк,
            разделенных через запятую.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.UserSection.Friends">
            <summary>
            Искать среди друзей.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.UserSection.Subscriptions">
            <summary>
            Искать среди друзей и подписок пользователя список строк, разделенных через
            запятую.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.VideoCatalogFilters">
            <summary>
            Фильтры для видео каталога
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.VideoCatalogFilters.Feed">
            <summary>
            Видео из ленты новостей пользователя
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.VideoCatalogFilters.Ugc">
            <summary>
            популярное
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.VideoCatalogFilters.Top">
            <summary>
            выбор редакции
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.VideoCatalogFilters.Series">
            <summary>
            сериалы и телешоу
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.VideoCatalogFilters.Other">
            <summary>
            прочие блоки
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.VideoCatalogItemType">
            <summary>
            Тип элемента каталога.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.VideoCatalogItemType.Video">
            <summary>
            Видеоролик.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.VideoCatalogItemType.Album">
            <summary>
            Альбом.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.VideoCatalogType">
            <summary>
            Возможные значения параметра VideoCatalogType, задающего внешний вид окна
            авторизации.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.VideoCatalogType.Channel">
            <summary>
            Видеозаписи сообщества.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.VideoCatalogType.Category">
            <summary>
            Подборки видеозаписей.
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.VideoView">
            <summary>
            предпочтительный способ отображения контента
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.VideoView.Horizontal">
            <summary>
            горизонтально с дополнительной информацией
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.VideoView.HorizontalCompact">
            <summary>
            оризонтально без дополнительной информации
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.VideoView.Vertical">
            <summary>
            вертикально с дополнительной информацией
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.VideoView.VerticalCompact">
            <summary>
            вертикально с дополнительной информацией
            </summary>
        </member>
        <member name="T:VkNet.Enums.SafetyEnums.WallFilter">
            <summary>
            Фильтр для задания типов сообщений, которые необходимо получить со стены.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.WallFilter.Owner">
            <summary>
            Необходимо получить сообщения на стене только от ее владельца.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.WallFilter.Others">
            <summary>
            Необходимо получить сообщения на стене не от владельца стены.
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.WallFilter.All">
            <summary>
            Необходимо получить все сообщения на стене (Owner + Others).
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.WallFilter.Suggests">
            <summary>
            Отложенные записи
            </summary>
        </member>
        <member name="F:VkNet.Enums.SafetyEnums.WallFilter.Postponed">
            <summary>
            Предложенные записи на стене сообщества
            </summary>
        </member>
        <member name="T:VkNet.Enums.ScreenOrientation">
            <summary>
            Поддерживаемая ориентация экрана.
            </summary>
        </member>
        <member name="F:VkNet.Enums.ScreenOrientation.AlbumAndPortrait">
            <summary>
            альбомная и портретная
            </summary>
        </member>
        <member name="F:VkNet.Enums.ScreenOrientation.OnlyAlbum">
            <summary>
            Только альбомная
            </summary>
        </member>
        <member name="F:VkNet.Enums.ScreenOrientation.OnlyPortrait">
            <summary>
            Только портретная
            </summary>
        </member>
        <member name="T:VkNet.Enums.Sex">
            <summary>
            Пол.
            </summary>
        </member>
        <member name="F:VkNet.Enums.Sex.Deactivated">
            <summary>
            Деактивированный аккаунт
            </summary>
        </member>
        <member name="F:VkNet.Enums.Sex.Unknown">
            <summary>
            Не указан
            </summary>
        </member>
        <member name="F:VkNet.Enums.Sex.Female">
            <summary>
            Женский
            </summary>
        </member>
        <member name="F:VkNet.Enums.Sex.Male">
            <summary>
            Мужской
            </summary>
        </member>
        <member name="T:VkNet.Enums.SortOrderBy">
            <summary>
            Порядок сортировки
            </summary>
        </member>
        <member name="F:VkNet.Enums.SortOrderBy.Desc">
            <summary>
            По убыванию
            </summary>
        </member>
        <member name="F:VkNet.Enums.SortOrderBy.Asc">
            <summary>
            По возрастанию
            </summary>
        </member>
        <member name="T:VkNet.Enums.SubscriptionStatus">
            <summary>
            Статус подписки
            </summary>
        </member>
        <member name="F:VkNet.Enums.SubscriptionStatus.Chargeable">
            <summary>
            Платная
            </summary>
        </member>
        <member name="F:VkNet.Enums.SubscriptionStatus.Active">
            <summary>
            Активная
            </summary>
        </member>
        <member name="F:VkNet.Enums.SubscriptionStatus.Cancelled">
            <summary>
            Отмененная
            </summary>
        </member>
        <member name="T:VkNet.Enums.UserSort">
            <summary>
            Сортировка результатов: 1 - по дате регистрации, 0 - по популярности целое
            число.
            </summary>
        </member>
        <member name="F:VkNet.Enums.UserSort.ByPopularity">
            <summary>
            По популярности
            </summary>
        </member>
        <member name="F:VkNet.Enums.UserSort.ByRegDate">
            <summary>
            По дате регистрации
            </summary>
        </member>
        <member name="T:VkNet.Enums.VideoSort">
            <summary>
            Способ сортировки видеозаписей.
            </summary>
        </member>
        <member name="F:VkNet.Enums.VideoSort.AddedDate">
            <summary>
            По дате добавления видеозаписи.
            </summary>
        </member>
        <member name="F:VkNet.Enums.VideoSort.Duration">
            <summary>
            По длительности видеозаписи.
            </summary>
        </member>
        <member name="F:VkNet.Enums.VideoSort.Relevance">
            <summary>
            По релевантности видеозаписи запросу.
            </summary>
        </member>
        <member name="T:VkNet.Enums.VideoWidth">
            <summary>
            Информация о ширине видео в пикселах.
            </summary>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/video.get
            </remarks>
        </member>
        <member name="F:VkNet.Enums.VideoWidth.Small130">
            <summary>
            130 пикселов.
            </summary>
        </member>
        <member name="F:VkNet.Enums.VideoWidth.Medium160">
            <summary>
            160 пикселов.
            </summary>
        </member>
        <member name="F:VkNet.Enums.VideoWidth.Large320">
            <summary>
            320 пикселов.
            </summary>
        </member>
        <member name="T:VkNet.Enums.VkObjectType">
            <summary>
            Определяет тип объекта
            </summary>
        </member>
        <member name="F:VkNet.Enums.VkObjectType.User">
            <summary>
            Пользователь
            </summary>
        </member>
        <member name="F:VkNet.Enums.VkObjectType.Group">
            <summary>
            Группа
            </summary>
        </member>
        <member name="F:VkNet.Enums.VkObjectType.Application">
            <summary>
            Приложение
            </summary>
        </member>
        <member name="T:VkNet.Enums.WallContentAccess">
            <summary>
            Уровень доступа к содержимому.
            </summary>
        </member>
        <member name="F:VkNet.Enums.WallContentAccess.Off">
            <summary>
            Выключены
            </summary>
        </member>
        <member name="F:VkNet.Enums.WallContentAccess.Opened">
            <summary>
            Открытые
            </summary>
        </member>
        <member name="F:VkNet.Enums.WallContentAccess.Restricted">
            <summary>
            Ограниченные
            </summary>
        </member>
        <member name="F:VkNet.Enums.WallContentAccess.Closed">
            <summary>
            Закрытая
            </summary>
        </member>
        <member name="T:VkNet.Enums.WallType">
            <summary>
            Тип стены
            </summary>
        </member>
        <member name="F:VkNet.Enums.WallType.Off">
            <summary>
            Выключена
            </summary>
        </member>
        <member name="F:VkNet.Enums.WallType.Open">
            <summary>
            Открытая
            </summary>
        </member>
        <member name="F:VkNet.Enums.WallType.Limited">
            <summary>
            Ограниченная
            </summary>
        </member>
        <member name="F:VkNet.Enums.WallType.Closed">
            <summary>
            Закрытая
            </summary>
        </member>
        <member name="T:VkNet.Exception.AccessDeniedException">
            <summary>
            Исключение, которое выбрасывается при отказе в доступе на выполнение операции
            сервером ВКонтакте.
            Код ошибки - 500
            </summary>
        </member>
        <member name="M:VkNet.Exception.AccessDeniedException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.AccessToCommentDeniedException">
            <summary>
            Исключение, которое выбрасывается, если доступ к комментированию записи
            запрещен.
            Код ошибки - 213
            </summary>
        </member>
        <member name="M:VkNet.Exception.AccessToCommentDeniedException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.AccessTokenInvalidException">
            <summary>
            Исключение, которое выбрасывается, в случае, если предоставленный маркер
            доступа является недействительным.
            </summary>
        </member>
        <member name="M:VkNet.Exception.AccessTokenInvalidException.#ctor">
            <summary>
            Инициализирует новый экземпляр класса AccessTokenInvalidException
            </summary>
        </member>
        <member name="M:VkNet.Exception.AccessTokenInvalidException.#ctor(System.String)">
            <summary>
            Инициализирует новый экземпляр класса AccessTokenInvalidException
            </summary>
            <param name="message"> Описание исключения. </param>
        </member>
        <member name="M:VkNet.Exception.AccessTokenInvalidException.#ctor(System.String,System.Exception)">
            <summary>
            Инициализирует новый экземпляр класса AccessTokenInvalidException
            </summary>
            <param name="message"> Описание исключения. </param>
            <param name="innerException"> Внутреннее исключение. </param>
        </member>
        <member name="M:VkNet.Exception.AccessTokenInvalidException.#ctor(VkNet.Utils.VkResponse)">
            <summary>
            Инициализирует новый экземпляр класса VkApiException
            </summary>
            <param name="response"> Ответ от сервера vk </param>
        </member>
        <member name="T:VkNet.Exception.AccessToMenuDeniedException">
            <summary>
            Исключение, которое выбрасывается, если доступ к меню запрещен.
            Код ошибки - 148
            </summary>
        </member>
        <member name="M:VkNet.Exception.AccessToMenuDeniedException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.AdsAccessDeniedException">
            <summary>
            Исключение, которое выбрасывается, если нет прав на выполнение операций с
            рекламным кабинетом.
            Код ошибки - 600
            </summary>
        </member>
        <member name="M:VkNet.Exception.AdsAccessDeniedException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.AdsRecentlyPostedException">
            <summary>
            Исключение, которое выбрасывается, если рекламный пост уже недавно
            публиковался.
            Код ошибки - 219
            </summary>
        </member>
        <member name="M:VkNet.Exception.AdsRecentlyPostedException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.AlbumAccessDeniedException">
            <summary>
            Исключение, которое выбрасывается при отсутствии доступа к альбому.
            Доступ к альбому запрещён.
            Убедитесь, что Вы используете верные идентификаторы (для пользователей owner_id
            положительный, для сообществ —
            отрицательный), и доступ к запрашиваемому контенту для текущего пользователя
            есть в полной версии сайта.
            </summary>
        </member>
        <member name="M:VkNet.Exception.AlbumAccessDeniedException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.AlbumIsFullException">
            <summary>
            Исключение, которое выбрасывается, если альбом переполнен.
            Перед продолжением работы нужно удалить лишние объекты из альбома или
            использовать другой альбом.
            Код ошибки - 300
            </summary>
        </member>
        <member name="M:VkNet.Exception.AlbumIsFullException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.AppKeyInvalidException">
            <inheritdoc />
            <summary>
            Ключ доступа приложения недействителен.
            Код ошибки - 28
            </summary>
        </member>
        <member name="M:VkNet.Exception.AppKeyInvalidException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.AppOffException">
            <summary>
            Исключение, которое выбрасывается при попытке запроса, когда приложение
            выключено (appid)
            Необходимо включить приложение в настройках https://vk.com/editapp?id={Ваш
            API_ID} или использовать тестовый режим
            (test_mode=1)
            Код ошибки - 2
            </summary>
        </member>
        <member name="M:VkNet.Exception.AppOffException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.AudioAccessDeniedException">
            <summary>
            Исключение, которое выбрасывается, если доступ к аудио запрещен.
            Убедитесь, что Вы используете верные идентификаторы (для пользователей owner_id
            положительный, для сообществ —
            отрицательный), и доступ к запрашиваемому контенту для текущего пользователя
            есть в полной версии сайта.
            Код ошибки - 201
            </summary>
        </member>
        <member name="M:VkNet.Exception.AudioAccessDeniedException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.CannotAddUserBlacklistedException">
            <summary>
            Исключение, которые выбрасывается при попытке добавить в друзья пользователя,
            который занесен в Ваш черный список.
            Код ошибки - 176
            </summary>
        </member>
        <member name="M:VkNet.Exception.CannotAddUserBlacklistedException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.CannotAddUserNotFoundException">
            <summary>
            Исключение, которые выбрасывается при попытке добавить в друзья пользователя,
            который не найден.
            Код ошибки - 177
            </summary>
        </member>
        <member name="M:VkNet.Exception.CannotAddUserNotFoundException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.CannotAddYouBlacklistedException">
            <summary>
            Исключение, которые выбрасывается при попытке добавить в друзья пользователя,
            который занес Вас в свой черный
            список.
            Код ошибки - 175
            </summary>
        </member>
        <member name="M:VkNet.Exception.CannotAddYouBlacklistedException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.CannotAddYourselfException">
            <summary>
            Исключение, которые выбрасывается при попытке добавить себя в друзья.
            Код ошибки - 174
            </summary>
        </member>
        <member name="M:VkNet.Exception.CannotAddYourselfException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.CannotBlacklistYourselfException">
            <summary>
            Исключение, которое выбрасывается при попытке добавить себя в черный список и
            других типичных запросах.
            Убедитесь, что Вы используете верные идентификаторы, и доступ к контенту для
            текущего пользователя есть в полной
            версии сайта.
            Код ошибки - 15
            </summary>
        </member>
        <member name="M:VkNet.Exception.CannotBlacklistYourselfException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.CannotSendBlacklistedException">
            <summary>
            Исключение, которое выбрасывается при попытке отправить сообщение пользователю,
            находясь в его черном списке.
            Код ошибки - 900
            </summary>
        </member>
        <member name="M:VkNet.Exception.CannotSendBlacklistedException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.CannotSendDuePrivacyException">
            <summary>
            Исключение, которое выбрасывается при попытке отправить сообщение пользователю,
            в связи с настройками приватности.
            Код ошибки - 902
            </summary>
        </member>
        <member name="M:VkNet.Exception.CannotSendDuePrivacyException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.CannotSendToUserFirstlyException">
            <summary>
            Исключение, которое выбрасывается при попытке первым написать пользователю от
            имени группы.
            Код ошибки - 901
            </summary>
        </member>
        <member name="M:VkNet.Exception.CannotSendToUserFirstlyException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.CaptchaNeededException">
            <summary>
            Исключение, выбрасываемое при необходимости ввода капчи для вызова метода
            Код ошибки - 14
            </summary>
        </member>
        <member name="M:VkNet.Exception.CaptchaNeededException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Exception.CaptchaNeededException.Sid">
            <summary>
            Идентификатор капчи
            </summary>
        </member>
        <member name="P:VkNet.Exception.CaptchaNeededException.Img">
            <summary>
            Uri-адрес изображения с капчей
            </summary>
        </member>
        <member name="T:VkNet.Exception.CommentsLimitReachedException">
            <summary>
            Исключение, которое выбрасывается при превышении лимита комментариев на стене.
            Код ошибки - 223
            </summary>
        </member>
        <member name="M:VkNet.Exception.CommentsLimitReachedException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.CommentsPostAccessDeniedException">
            <summary>
            Исключение, которое выбрасывается, если доступ к комментариям записи запрещен.
            Код ошибки - 212
            </summary>
        </member>
        <member name="M:VkNet.Exception.CommentsPostAccessDeniedException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.CommentsWallAccessDeniedException">
            <summary>
            Исключение, которое выбрасывается, если доступ к комментариям на стене
            запрещен.
            Код ошибки - 211
            </summary>
        </member>
        <member name="M:VkNet.Exception.CommentsWallAccessDeniedException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.ConfirmationUserException">
            <summary>
            Исключение, которое выбрасывается, если требуется подтверждение со стороны
            пользователя.
            Код ошибки - 24
            </summary>
        </member>
        <member name="M:VkNet.Exception.ConfirmationUserException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.ContentDeniedException">
            <summary>
            Исключение, которое выбрасывается, если контент недоступен
            Код ошибки - 19
            </summary>
        </member>
        <member name="M:VkNet.Exception.ContentDeniedException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.ConversationAccessDeniedException">
            <summary>
            Нет доступа к беседе
            Код ошибки - 917
            </summary>
        </member>
        <member name="M:VkNet.Exception.ConversationAccessDeniedException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.ErrorExecutingCodeException">
            <summary>
            Исключение, которое выбрасывается, если произошла ошибка выполнения кода.
            Код ошибки - 13
            </summary>
        </member>
        <member name="M:VkNet.Exception.ErrorExecutingCodeException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.ErrorWorkWithAdsException">
            <summary>
            Исключение, которое выбрасывается при ошибке работы с рекламным кабинетом.
            Код ошибки - 603
            </summary>
        </member>
        <member name="M:VkNet.Exception.ErrorWorkWithAdsException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.GroupAccessDeniedException">
            <summary>
            Исключение, которое выбрасывается, если доступ к группе запрещен.
            Убедитесь, что текущий пользователь является участником или руководителем
            сообщества (для закрытых и частных групп
            и встреч).
            Код ошибки - 203
            </summary>
        </member>
        <member name="M:VkNet.Exception.GroupAccessDeniedException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.GroupKeyInvalidException">
            <inheritdoc />
            <summary>
            Ключ доступа сообщества недействителен.
            Код ошибки - 27
            </summary>
        </member>
        <member name="M:VkNet.Exception.GroupKeyInvalidException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.GroupsListAccessDeniedException">
            <summary>
            Исключение, которое выбрасывается, если доступ к списку групп запрещен из-за
            настроек конфиденциальности
            пользователя.
            Код ошибки - 260
            </summary>
        </member>
        <member name="M:VkNet.Exception.GroupsListAccessDeniedException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.ImpossibleToCompileCodeException">
            <summary>
            Исключение, которое выбрасывается, если невозможно скомпилировать код.
            Код ошибки - 12
            </summary>
        </member>
        <member name="M:VkNet.Exception.ImpossibleToCompileCodeException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.InvalidAppIdException">
            <summary>
            Исключение, которое выбрасывается при неверном API ID приложения.
            Найдите приложение в списке администрируемых на странице
            http://vk.com/apps?act=settings и укажите в запросе верный
            API_ID (идентификатор приложения).
            Либо используйте стандартный APP_ID для Android: 2890984
            Код ошибки - 101
            </summary>
        </member>
        <member name="M:VkNet.Exception.InvalidAppIdException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.InvalidGroupIdException">
            <summary>
            Исключение, которое выбрасывается, если идентификатор сообщества неверен.
            Код ошибки - 125
            </summary>
        </member>
        <member name="M:VkNet.Exception.InvalidGroupIdException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.InvalidHashException">
            <summary>
            Исключение, которое выбрасывается при неверном хэше.
            Код ошибки - 121
            </summary>
        </member>
        <member name="M:VkNet.Exception.InvalidHashException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.InvalidParameterException">
            <summary>
            Исключение, которое выбрасывается в случае, если параметр принимал
            недействительное значение.
            Код ошибки - 120
            </summary>
        </member>
        <member name="M:VkNet.Exception.InvalidParameterException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.InvalidRequestException">
            <summary>
            Исключение, которое выбрасывается при неверном запросе.
            Проверьте синтаксис запроса и список используемых параметров (его можно найти
            на странице с описанием метода).
            Код ошибки - 8
            </summary>
        </member>
        <member name="M:VkNet.Exception.InvalidRequestException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.InvalidServerException">
            <summary>
            Исключение, которое выбрасывается, если сервер загрузки неверен.
            Код ошибки - 118
            </summary>
        </member>
        <member name="M:VkNet.Exception.InvalidServerException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.InvalidSignatureException">
            <summary>
            Исключение, которое выбрасывается, если подпись неверна.
            Проверьте правильность формирования подписи запроса:
            https://vk.com/dev/api_nohttps
            Код ошибки - 4
            </summary>
        </member>
        <member name="M:VkNet.Exception.InvalidSignatureException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.InvalidTimestampException">
            <summary>
            Исключение, которое выбрасывается при неверном timestamp
            Получить актуальное значение Вы можете методом utils.getServerTime.
            Код ошибки - 150
            </summary>
        </member>
        <member name="M:VkNet.Exception.InvalidTimestampException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.InvalidUserIdException">
            <summary>
            Исключение, которые выбрасывается при работе с неверным ID.
            Убедитесь, что Вы используете верный идентификатор. Получить ID по короткому
            имени можно методом
            utils.resolveScreenName.
            Код ошибки - 113
            </summary>
        </member>
        <member name="M:VkNet.Exception.InvalidUserIdException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.ListAmountMaximumException">
            <summary>
            Исключение, которое выбрасывается, если количество списков максимально.
            Код ошибки - 173
            </summary>
        </member>
        <member name="M:VkNet.Exception.ListAmountMaximumException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.ListIdInvalidException">
            <summary>
            Исключение, которое выбрасывается, если идентификатор списка неверен.
            Код ошибки - 171
            </summary>
        </member>
        <member name="M:VkNet.Exception.ListIdInvalidException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.LoadingErrorException">
            <summary>
            Исключение, которое выбрасывается при ошибке загрузки документа.
            Код ошибки - 22
            </summary>
        </member>
        <member name="M:VkNet.Exception.LoadingErrorException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.LongPollException">
            <summary>
            Ошибка при получении истории обновлений
            </summary>
        </member>
        <member name="F:VkNet.Exception.LongPollException.OutdateException">
            <summary>
            История событий устарела или была частично утеряна, приложение может получать события далее, используя новое значение ts из ответа.
            </summary>
        </member>
        <member name="F:VkNet.Exception.LongPollException.KeyExpiredException">
            <summary>
            Истекло время действия ключа, нужно заново получить key
            </summary>
        </member>
        <member name="F:VkNet.Exception.LongPollException.InfoLostException">
            <summary>
            Информация утрачена, нужно запросить новые key и ts
            </summary>
        </member>
        <member name="P:VkNet.Exception.LongPollException.Code">
            <summary>
            Код ошибки
            </summary>
        </member>
        <member name="M:VkNet.Exception.LongPollException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Exception.LongPollException.#ctor(System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.LongPollInfoLostException">
            <summary>
            Информация утрачена, нужно запросить новые key и ts методом groups.getLongPollServer.
            </summary>
        </member>
        <member name="M:VkNet.Exception.LongPollInfoLostException.#ctor">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.LongPollKeyExpiredException">
            <summary>
            Истекло время действия ключа, нужно заново получить key методом groups.getLongPollServer.
            </summary>
        </member>
        <member name="M:VkNet.Exception.LongPollKeyExpiredException.#ctor">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.LongPollOutdateException">
            <summary>
            История событий устарела или была частично утеряна, приложение может получать события далее, используя новое значение ts из ответа.
            </summary>
        </member>
        <member name="P:VkNet.Exception.LongPollOutdateException.Ts">
            <summary>
            Значение для кода ошибки - 1
            </summary>
        </member>
        <member name="M:VkNet.Exception.LongPollOutdateException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.MessageIsTooLongException">
            <summary>
            </summary>
        </member>
        <member name="M:VkNet.Exception.MessageIsTooLongException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.MethodHasBeenSwitchedOffException">
            <summary>
            Исключение, которое выбрасывается, если метод был выключен.
            Все актуальные методы ВК API, которые доступны в настоящий момент, перечислены
            здесь: http://vk.com/dev/methods.
            Код ошибки - 23
            </summary>
        </member>
        <member name="M:VkNet.Exception.MethodHasBeenSwitchedOffException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.NeedHttpsException">
            <summary>
            Исключение, которое выбрасывается, если требуется выполнение запросов по HTTPS
            Требуется выполнение запросов по протоколу HTTPS, т.к. пользователь включил
            настройку, требующую работу через
            безопасное соединение.
            Чтобы избежать появления такой ошибки, в Standalone-приложении Вы можете
            предварительно проверять состояние этой
            настройки у пользователя методом account.getInfo.
            Код ошибки - 16
            </summary>
        </member>
        <member name="M:VkNet.Exception.NeedHttpsException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.NeedValidationException">
            <summary>
            Исключение, которое выбрасывается в случаях,
            когда требуется дополнительная проверка пользователя,
            например при авторизации из подозрительного места
            В этом случае необходимо открыть браузер со страницей, указанной в поле
            redirect_uri и ждать,
            пока пользователь будет направлен на страницу blank.html с параметром success=1
            в случае успеха и fail=1
            в случае, если пользователь отменил проверку своего аккаунта.
            Для тестового вызова проверки добавьте параметр test_redirect_uri=1.
            Код ошибки - 17
            </summary>
        </member>
        <member name="M:VkNet.Exception.NeedValidationException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Exception.NeedValidationException.RedirectUri">
            <summary>
            Адрес который необходимо открыть в браузере.
            </summary>
        </member>
        <member name="T:VkNet.Exception.NonStandaloneApplicationsException">
            <summary>
            Исключение, которое выбрасывается, если действие запрещено для не Standalone
            приложений.
            Если ошибка возникает несмотря на то, что Ваше приложение имеет тип Standalone,
            убедитесь, что при авторизации Вы
            используете redirect_uri=https://oauth.vk.com/blank.html. Подробнее см.
            http://vk.com/dev/auth_mobile.
            Код ошибки - 20
            </summary>
        </member>
        <member name="M:VkNet.Exception.NonStandaloneApplicationsException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.OffAppOrLoginException">
            <summary>
            Исключение, которое выбрасывается при включенном ТЕСТОВОМ приложении, либо если
            пользователь не вошел в систему.
            Выключите приложение в настройках https://vk.com/editapp?id={Ваш API_ID}
            Код ошибки - 11
            </summary>
        </member>
        <member name="M:VkNet.Exception.OffAppOrLoginException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.OnlyStandaloneOrOpenApiException">
            <summary>
            Исключение, которое выбрасывается, если действие разрешено только для
            Standalone и Open API приложений.
            Код ошибки - 21
            </summary>
        </member>
        <member name="M:VkNet.Exception.OnlyStandaloneOrOpenApiException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.OutOfLimitsException">
            <summary>
            Выход за пределы
            Код ошибки - 103
            </summary>
            <seealso cref="T:VkNet.Exception.VkApiException" />
        </member>
        <member name="M:VkNet.Exception.OutOfLimitsException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.ParameterMissingOrInvalidException">
            <summary>
            Исключение, которое выбрасывается, если один из необходимых параметров был не
            передан или неверен.
            Проверьте список требуемых параметров и их формат на странице с описанием
            метода.
            Код ошибки - 100
            </summary>
        </member>
        <member name="M:VkNet.Exception.ParameterMissingOrInvalidException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.PermissionToPerformThisActionException">
            <summary>
            Исключение, которое выбрасывается при отсутствии прав выполнения этого действия
            Проверьте, получены ли нужные права доступа при авторизации. Это можно сделать
            с помощью метода
            account.getAppPermissions.
            Код ошибки - 7
            </summary>
        </member>
        <member name="M:VkNet.Exception.PermissionToPerformThisActionException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.PostAccessDeniedException">
            <summary>
            Исключение, которое выбрасывается, если доступ к посту запрещен.
            Код ошибки - 210
            </summary>
        </member>
        <member name="M:VkNet.Exception.PostAccessDeniedException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.PostLimitException">
            <summary>
            Исключение, выбрасываемое при исчерпании лимита публикации постов в день (не
            более 50 в день)
            Код ошибки - 214
            </summary>
        </member>
        <member name="M:VkNet.Exception.PostLimitException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.PostLinksDeniedException">
            <summary>
            Исключение, которое выбрасывается при попытке разместить ссылку.
            Код ошибки - 222
            </summary>
        </member>
        <member name="M:VkNet.Exception.PostLinksDeniedException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.PublicServerErrorException">
            <summary>
            Исключение, которое выбрасывается при внутренней ошибке сервера.
            Попробуйте повторить запрос позже.
            Код ошибки - 10
            </summary>
        </member>
        <member name="M:VkNet.Exception.PublicServerErrorException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.RateLimitReachedException">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Exception.RateLimitReachedException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.StatusAccessDeniedException">
            <summary>
            Исключение, которое выбрасывается, если доступ к статусу запрещен.
            Код ошибки - 220
            </summary>
        </member>
        <member name="M:VkNet.Exception.StatusAccessDeniedException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.TooManyAdsPostsException">
            <summary>
            Исключение, которое выбрасывается при превышении лимита комментариев на стене.
            Код ошибки - 224
            </summary>
        </member>
        <member name="M:VkNet.Exception.TooManyAdsPostsException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.TooManyRequestsException">
            <summary>
            Исключение, которые выбрасывается при попытке выполнить запрос с частотой,
            превышающей максимально допустимую
            ВКонтакте.
            В настоящее время действует ограничение (один раз в три секунды) на количество
            однотипных запросов (вызовов методов
            с одним и тем же именем). Если это ограничение превышается, то сервер ВКонтакте
            возвращает ошибку с кодом 6 -
            Too many requests per second.
            Код ошибки - 6
            </summary>
        </member>
        <member name="M:VkNet.Exception.TooManyRequestsException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.TooMuchOfTheSameTypeOfActionException">
            <summary>
            Исключение, которое выбрасывается при превышении лимита однотипных действий
            Нужно сократить число однотипных обращений. Для более эффективной работы Вы
            можете использовать execute или JSONP.
            Код ошибки - 9
            </summary>
        </member>
        <member name="M:VkNet.Exception.TooMuchOfTheSameTypeOfActionException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.TooMuchSentMessagesException">
            <summary>
            </summary>
        </member>
        <member name="M:VkNet.Exception.TooMuchSentMessagesException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.UnknownException">
            <summary>
            Исключение, которое выбрасывается при неизвестной ошибке
            Попробуйте повторить запрос позже.
            Код ошибки - 1
            </summary>
        </member>
        <member name="M:VkNet.Exception.UnknownException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.UnknownMethodException">
            <summary>
            Исключение, которое выбрасывается при передаче неизвестного метода
            Проверьте, правильно ли указано название вызываемого метода:
            http://vk.com/dev/methods.
            Код ошибки - 3
            </summary>
        </member>
        <member name="M:VkNet.Exception.UnknownMethodException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.UserAccessDeniedException">
            <summary>
            Исключение, которое выбрасывается при остутствии доступа к пользователю.
            Доступ к пользователю запрещен.
            Код ошибки - 170
            </summary>
        </member>
        <member name="M:VkNet.Exception.UserAccessDeniedException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.UserAuthorizationFailException">
            <summary>
            Исключение, которое выбрасывается при отсутствии авторизации на выполнение
            запрошенной операции.
            Код ошибки - 5
            </summary>
        </member>
        <member name="M:VkNet.Exception.UserAuthorizationFailException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.UserDeletedOrBannedException">
            <summary>
            Исключение, которое выбрасывается, если пользователь не найден, удален, либо
            заблокирован.
            Код ошибки - 18
            </summary>
        </member>
        <member name="M:VkNet.Exception.UserDeletedOrBannedException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.UserDisabledTrackNameBroadcastException">
            <summary>
            Исключение, которое выбрасывается, если пользователь отключил вещание названия
            трека.
            Код ошибки - 221
            </summary>
        </member>
        <member name="M:VkNet.Exception.UserDisabledTrackNameBroadcastException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.UserNotFoundInChatException">
            <summary>
            Исключение, которое выбрасывается при отсутствии пользователя в чате.
            </summary>
            <remarks>
            Код ошибки - 935
            </remarks>
        </member>
        <member name="M:VkNet.Exception.UserNotFoundInChatException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.VideoAccessDeniedException">
            <summary>
            Исключение, которое выбрасывается, если доступ к видео запрещен.
            Код ошибки - 204
            </summary>
        </member>
        <member name="M:VkNet.Exception.VideoAccessDeniedException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.VideoAlbumIsFullException">
            <summary>
            Исключение, которое выбрасывается, если видеоальбом переполнен.
            Перед продолжением работы нужно удалить лишние объекты из альбома или
            использовать другой альбом.
            Код ошибки - 302
            </summary>
        </member>
        <member name="M:VkNet.Exception.VideoAlbumIsFullException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.VideoAlreadyAddedException">
            <summary>
            Исключение, которое выбрасывается при попытке добавить уже добавленное видео.
            Код ошибки - 800
            </summary>
        </member>
        <member name="M:VkNet.Exception.VideoAlreadyAddedException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.VideoCommentsClosedException">
            <summary>
            Исключение, которое выбрасывается, если комментарии к запрашиваемому видео
            закрыты.
            Код ошибки - 801
            </summary>
        </member>
        <member name="M:VkNet.Exception.VideoCommentsClosedException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.VkApiAuthorizationException">
            <summary>
            Исключение, которое выбрасывается при попытке неудачной авторизации, когда
            указан неправильный логин или пароль
            при вызове метода VkApi.Authorize
            </summary>
        </member>
        <member name="M:VkNet.Exception.VkApiAuthorizationException.#ctor(System.String,System.String,System.String)">
            <summary>
            Инициализирует новый экземпляр класса VkApiAuthorizationException
            </summary>
            <param name="message"> Описание исключения. </param>
            <param name="email"> Логин, который был указан при попытке авторизации. </param>
            <param name="password"> Пароль, который был указан при попытке авторизации. </param>
        </member>
        <member name="P:VkNet.Exception.VkApiAuthorizationException.Email">
            <summary>
            Логин, который был указан при попытке авторизации.
            </summary>
        </member>
        <member name="P:VkNet.Exception.VkApiAuthorizationException.Password">
            <summary>
            Пароль, который был указан при попытке авторизации.
            </summary>
        </member>
        <member name="T:VkNet.Exception.VkApiException">
            <summary>
            Базовый класс для всех исключений, выбрасываемых библиотекой.
            </summary>
        </member>
        <member name="M:VkNet.Exception.VkApiException.#ctor">
            <summary>
            Инициализирует новый экземпляр класса VkApiException
            </summary>
        </member>
        <member name="M:VkNet.Exception.VkApiException.#ctor(System.String)">
            <summary>
            Инициализирует новый экземпляр класса VkApiException
            </summary>
            <param name="message"> Описание исключения. </param>
        </member>
        <member name="M:VkNet.Exception.VkApiException.#ctor(VkNet.Model.VkError)">
            <summary>
            Инициализирует новый экземпляр класса VkApiException
            </summary>
            <param name="message"> Описание исключения. </param>
        </member>
        <member name="M:VkNet.Exception.VkApiException.#ctor(VkNet.Utils.VkResponse)">
            <summary>
            Инициализирует новый экземпляр класса VkApiException
            </summary>
            <param name="response"> Ответ от сервера vk </param>
        </member>
        <member name="M:VkNet.Exception.VkApiException.#ctor(System.String,System.Exception)">
            <summary>
            Инициализирует новый экземпляр класса InvalidParameterException
            </summary>
            <param name="message"> Описание исключения. </param>
            <param name="innerException"> Внутреннее исключение. </param>
        </member>
        <member name="P:VkNet.Exception.VkApiException.ErrorCode">
            <summary>
            Код ошибки
            </summary>
        </member>
        <member name="P:VkNet.Exception.VkApiException.RequestParams">
            <summary>
            Параметры запроса
            </summary>
        </member>
        <member name="T:VkNet.Exception.VkApiMethodInvokeException">
            <summary>
            Базовый класс, для всех исключений, которые могут произойти при вызове методов
            API ВКонтакте.
            </summary>
        </member>
        <member name="M:VkNet.Exception.VkApiMethodInvokeException.#ctor(VkNet.Model.VkError)">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Exception.VkApiMethodInvokeException.ErrorCode">
            <summary>
            Код ошибки
            </summary>
        </member>
        <member name="P:VkNet.Exception.VkApiMethodInvokeException.RequestParams">
            <summary>
            Параметры запроса
            </summary>
        </member>
        <member name="P:VkNet.Exception.VkApiMethodInvokeException.Message">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Exception.VkAuthorizationException">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Exception.VkAuthorizationException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Exception.VkAuthorizationException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Infrastructure.Authorization.AuthorizationFormResult">
            <summary>
            Результат формы авторизации
            </summary>
        </member>
        <member name="P:VkNet.Infrastructure.Authorization.AuthorizationFormResult.RequestUrl">
            <summary>
            URL запроса
            </summary>
        </member>
        <member name="P:VkNet.Infrastructure.Authorization.AuthorizationFormResult.ResponseUrl">
            <summary>
            URL ответа
            </summary>
        </member>
        <member name="P:VkNet.Infrastructure.Authorization.AuthorizationFormResult.Cookies">
            <summary>
            Куки.
            </summary>
        </member>
        <member name="T:VkNet.Infrastructure.Authorization.ImplicitFlow.AbstractAuthorizationForm">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Infrastructure.Authorization.ImplicitFlow.AbstractAuthorizationForm.#ctor(VkNet.Infrastructure.Authorization.ImplicitFlow.IAuthorizationFormHtmlParser)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Infrastructure.Authorization.ImplicitFlow.AbstractAuthorizationForm.GetPageType">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Infrastructure.Authorization.ImplicitFlow.AbstractAuthorizationForm.ExecuteAsync(Flurl.Url)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Infrastructure.Authorization.ImplicitFlow.AbstractAuthorizationForm.FillFormFields(VkNet.Infrastructure.Authorization.ImplicitFlow.VkHtmlFormResult)">
            <summary>
            Заполнение полей формы
            </summary>
            <param name="form"> Форма </param>
        </member>
        <member name="T:VkNet.Infrastructure.Authorization.ImplicitFlow.AuthorizationFormFactory">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Infrastructure.Authorization.ImplicitFlow.AuthorizationFormFactory.#ctor(System.Collections.Generic.IEnumerable{VkNet.Infrastructure.Authorization.ImplicitFlow.IAuthorizationForm})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Infrastructure.Authorization.ImplicitFlow.AuthorizationFormFactory.Create(VkNet.Enums.ImplicitFlowPageType)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Infrastructure.Authorization.ImplicitFlow.AuthorizationFormFields">
            <summary>
            Поля формы авторизации
            </summary>
        </member>
        <member name="F:VkNet.Infrastructure.Authorization.ImplicitFlow.AuthorizationFormFields.Email">
            <summary>
            E-mail
            </summary>
        </member>
        <member name="F:VkNet.Infrastructure.Authorization.ImplicitFlow.AuthorizationFormFields.Password">
            <summary>
            Password
            </summary>
        </member>
        <member name="F:VkNet.Infrastructure.Authorization.ImplicitFlow.AuthorizationFormFields.CaptchaSid">
            <summary>
            Captcha sid
            </summary>
        </member>
        <member name="F:VkNet.Infrastructure.Authorization.ImplicitFlow.AuthorizationFormFields.CaptchaKey">
            <summary>
            Captcha key
            </summary>
        </member>
        <member name="F:VkNet.Infrastructure.Authorization.ImplicitFlow.AuthorizationFormFields.Code">
            <summary>
            Captcha key
            </summary>
        </member>
        <member name="T:VkNet.Infrastructure.Authorization.ImplicitFlow.AuthorizationFormHtmlParser">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Infrastructure.Authorization.ImplicitFlow.AuthorizationFormHtmlParser.GetFormAsync(Flurl.Url)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Infrastructure.Authorization.ImplicitFlow.AuthorizationFormHtmlParser.GetFormNode(HtmlAgilityPack.HtmlDocument)">
            <summary>
            Получить из HTML элемента.
            </summary>
            <returns> HTML элемент </returns>
            <exception cref="T:VkNet.Exception.VkApiException"> Элемент не найден на форме. </exception>
        </member>
        <member name="M:VkNet.Infrastructure.Authorization.ImplicitFlow.AuthorizationFormHtmlParser.ParseInputs(HtmlAgilityPack.HtmlNode)">
            <summary>
            Разобрать поля ввода.
            </summary>
            <returns> Коллекция полей ввода </returns>
        </member>
        <member name="M:VkNet.Infrastructure.Authorization.ImplicitFlow.AuthorizationFormHtmlParser.GetActionUrl(HtmlAgilityPack.HtmlNode,Flurl.Url)">
            <summary>
            URL действия.
            </summary>
        </member>
        <member name="M:VkNet.Infrastructure.Authorization.ImplicitFlow.AuthorizationFormHtmlParser.GetMethod(HtmlAgilityPack.HtmlNode)">
            <summary>
            URL действия.
            </summary>
        </member>
        <member name="T:VkNet.Infrastructure.Authorization.ImplicitFlow.ConsentForm">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Infrastructure.Authorization.ImplicitFlow.ConsentForm.#ctor(VkNet.Infrastructure.Authorization.ImplicitFlow.IAuthorizationFormHtmlParser)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Infrastructure.Authorization.ImplicitFlow.ConsentForm.GetPageType">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Infrastructure.Authorization.ImplicitFlow.ConsentForm.FillFormFields(VkNet.Infrastructure.Authorization.ImplicitFlow.VkHtmlFormResult)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Infrastructure.Authorization.ImplicitFlow.IAuthorizationForm">
            <summary>
            Страница авторизации
            </summary>
        </member>
        <member name="M:VkNet.Infrastructure.Authorization.ImplicitFlow.IAuthorizationForm.GetPageType">
            <summary>
            Получить тип страницы автризации
            </summary>
            <returns>
            Тип страницы автризации
            </returns>
        </member>
        <member name="M:VkNet.Infrastructure.Authorization.ImplicitFlow.IAuthorizationForm.ExecuteAsync(Flurl.Url)">
            <summary>
            Выполнить авторизацию
            </summary>
            <param name="url">Url запроса</param>
            <returns>Содержимое ответа от vk</returns>
        </member>
        <member name="T:VkNet.Infrastructure.Authorization.ImplicitFlow.IAuthorizationFormFactory">
            <summary>
            Фабрика для создания форм авторизации
            </summary>
        </member>
        <member name="M:VkNet.Infrastructure.Authorization.ImplicitFlow.IAuthorizationFormFactory.Create(VkNet.Enums.ImplicitFlowPageType)">
            <summary>
            Создать форму авторизации
            </summary>
            <param name="type">Тип страницы авторизации</param>
            <returns>Страница авторизации</returns>
        </member>
        <member name="T:VkNet.Infrastructure.Authorization.ImplicitFlow.IAuthorizationFormHtmlParser">
            <summary>
            Authorization Form Html Parser
            </summary>
        </member>
        <member name="M:VkNet.Infrastructure.Authorization.ImplicitFlow.IAuthorizationFormHtmlParser.GetFormAsync(Flurl.Url)">
            <summary>
            Get form data
            </summary>
            <param name="url">URL</param>
            <returns>Результат с данными формы</returns>
        </member>
        <member name="T:VkNet.Infrastructure.Authorization.ImplicitFlow.ImplicitFlowCaptchaLoginForm">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Infrastructure.Authorization.ImplicitFlow.ImplicitFlowCaptchaLoginForm.#ctor(VkNet.Infrastructure.Authorization.ImplicitFlow.IAuthorizationFormHtmlParser,VkNet.Model.IApiAuthParams,VkNet.Utils.AntiCaptcha.ICaptchaSolver)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Infrastructure.Authorization.ImplicitFlow.ImplicitFlowCaptchaLoginForm.GetPageType">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Infrastructure.Authorization.ImplicitFlow.ImplicitFlowCaptchaLoginForm.FillFormFields(VkNet.Infrastructure.Authorization.ImplicitFlow.VkHtmlFormResult)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Infrastructure.Authorization.ImplicitFlow.ImplicitFlowLoginForm">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Infrastructure.Authorization.ImplicitFlow.ImplicitFlowLoginForm.#ctor(VkNet.Infrastructure.Authorization.ImplicitFlow.IAuthorizationFormHtmlParser,VkNet.Model.IApiAuthParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Infrastructure.Authorization.ImplicitFlow.ImplicitFlowLoginForm.GetPageType">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Infrastructure.Authorization.ImplicitFlow.ImplicitFlowLoginForm.FillFormFields(VkNet.Infrastructure.Authorization.ImplicitFlow.VkHtmlFormResult)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Infrastructure.Authorization.ImplicitFlow.TwoFactorForm">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Infrastructure.Authorization.ImplicitFlow.TwoFactorForm.#ctor(VkNet.Model.IApiAuthParams,VkNet.Infrastructure.Authorization.ImplicitFlow.IAuthorizationFormHtmlParser)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Infrastructure.Authorization.ImplicitFlow.TwoFactorForm.GetPageType">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Infrastructure.Authorization.ImplicitFlow.TwoFactorForm.FillFormFields(VkNet.Infrastructure.Authorization.ImplicitFlow.VkHtmlFormResult)">
            <inheritdoc />
            <summary>
            Заполнить форму двухфакторной авторизации
            </summary>
            <param name="form"> Форма </param>
        </member>
        <member name="T:VkNet.Infrastructure.Authorization.ImplicitFlow.VkHtmlFormResult">
            <summary>
            Результат отправки формы
            </summary>
        </member>
        <member name="P:VkNet.Infrastructure.Authorization.ImplicitFlow.VkHtmlFormResult.Method">
            <summary>
            Метод для отправки формы
            </summary>
        </member>
        <member name="P:VkNet.Infrastructure.Authorization.ImplicitFlow.VkHtmlFormResult.Action">
            <summary>
            URL для отправки формы
            </summary>
        </member>
        <member name="P:VkNet.Infrastructure.Authorization.ImplicitFlow.VkHtmlFormResult.Fields">
            <summary>
            Поля формы
            </summary>
        </member>
        <member name="T:VkNet.Infrastructure.Constants">
            <summary>
            Константы проекта
            </summary>
        </member>
        <member name="F:VkNet.Infrastructure.Constants.AccessToken">
            <summary>
            Токен
            </summary>
        </member>
        <member name="F:VkNet.Infrastructure.Constants.DefaultRedirectUri">
            <summary>
            redirect_uri по умолчанию.
            </summary>
        </member>
        <member name="T:VkNet.Infrastructure.NeedValidationHandler">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Infrastructure.NeedValidationHandler.Validate(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Infrastructure.NeedValidationHandler.Validate(System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Infrastructure.NeedValidationHandler.ValidateAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Infrastructure.TokenManager">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Infrastructure.TokenManager.Token">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Infrastructure.TokenManager.ExpireTime">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Infrastructure.TokenManager.IsExpired">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Infrastructure.TokenManager.RefreshToken">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Infrastructure.TokenManager.SetToken(System.String)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Infrastructure.VkApiVersionManager">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Infrastructure.VkApiVersionManager.Version">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Infrastructure.VkApiVersionManager.SetVersion(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Infrastructure.VkApiVersionManager.IsGreaterThanOrEqual(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Infrastructure.VkApiVersionManager.IsLessThanOrEqual(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Model.AccountChangePasswordResult">
            <summary>
            Результат метода account.changePassword
            </summary>
        </member>
        <member name="P:VkNet.Model.AccountChangePasswordResult.Token">
            <summary>
            Токен.
            </summary>
        </member>
        <member name="P:VkNet.Model.AccountChangePasswordResult.Secret">
            <summary>
            secret в случае, если токен был nohttps.
            </summary>
        </member>
        <member name="M:VkNet.Model.AccountChangePasswordResult.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.AccountGetBannedResult">
            <summary>
            Результат вызова метода <see cref="M:VkNet.Abstractions.IAccountCategory.GetBanned(System.Nullable{System.Int32},System.Nullable{System.Int32})"/>
            </summary>
        </member>
        <member name="P:VkNet.Model.AccountGetBannedResult.Count">
            <summary>
            Общее количество записей на стене.
            </summary>.
        </member>
        <member name="P:VkNet.Model.AccountGetBannedResult.Items">
            <summary>
            Посты.
            </summary>
        </member>
        <member name="P:VkNet.Model.AccountGetBannedResult.Profiles">
            <summary>
            Профили.
            </summary>
        </member>
        <member name="P:VkNet.Model.AccountGetBannedResult.Groups">
            <summary>
            Группы.
            </summary>
        </member>
        <member name="T:VkNet.Model.AccountInfo">
            <summary>
            Хранит информацию о текущем аккаунте. Подробнее:
            https://vk.com/dev/account.getInfo
            </summary>
        </member>
        <member name="P:VkNet.Model.AccountInfo.Country">
            <summary>
            Строковой код страны, определенный по IP адресу, с которого сделан запрос.
            </summary>
        </member>
        <member name="P:VkNet.Model.AccountInfo.HttpsRequired">
            <summary>
            Пользователь установил в настройках аккаунта "Всегда использовать безопасное
            соединение"
            </summary>
        </member>
        <member name="P:VkNet.Model.AccountInfo.Intro">
            <summary>
            Битовая маска, отвечающая за прохождение обучения использованию приложения.
            </summary>
        </member>
        <member name="P:VkNet.Model.AccountInfo.Language">
            <summary>
            Числовой идентификатор текущего языка пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.AccountInfo.OwnPostsDefault">
            <summary>
            1 - на стене пользователя по-умолчанию должны отображаться только собственные
            записи.
            Соответствует настройке на сайте "Показывать только мои записи", 0 - на стене
            пользователя должны отображаться все
            записи.
            </summary>
        </member>
        <member name="P:VkNet.Model.AccountInfo.NoWallReplies">
            <summary>
            1 - пользователь отключил комментирование записей на стене, 0 - комментирование
            записей разрешено.
            </summary>
        </member>
        <member name="P:VkNet.Model.AccountInfo.TwoFactorRequired">
            <summary>
            Информация о том, включена ли двухфакторная аутентификация для аккаунта. 1 —
            включена, 0 — не включена.
            </summary>
        </member>
        <member name="M:VkNet.Model.AccountInfo.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.AccountPushSettings">
            <summary>
            </summary>
        </member>
        <member name="P:VkNet.Model.AccountPushSettings.Disabled">
            <summary>
            Отключены ли уведомления.
            </summary>
        </member>
        <member name="P:VkNet.Model.AccountPushSettings.DisabledUntil">
            <summary>
            Unixtime-значение времени, до которого временно отключены уведомления.
            </summary>
        </member>
        <member name="P:VkNet.Model.AccountPushSettings.Conversations">
            <summary>
            Список, содержащий настройки конкретных диалогов, и их количество первым
            элементом.
            </summary>
        </member>
        <member name="P:VkNet.Model.AccountPushSettings.Settings">
            <summary>
            Объект с настройками Push-уведомлений в специальном формате.
            </summary>
        </member>
        <member name="M:VkNet.Model.AccountPushSettings.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.Acl">
             <summary>
            
             </summary>
        </member>
        <member name="P:VkNet.Model.Acl.CanInvite">
             <summary>
            
             </summary>
        </member>
        <member name="P:VkNet.Model.Acl.CanChangeInfo">
             <summary>
            
             </summary>
        </member>
        <member name="P:VkNet.Model.Acl.CanChangePin">
             <summary>
            
             </summary>
        </member>
        <member name="P:VkNet.Model.Acl.CanPromoteUsers">
             <summary>
            
             </summary>
        </member>
        <member name="P:VkNet.Model.Acl.CanSeeInviteLink">
             <summary>
            
             </summary>
        </member>
        <member name="P:VkNet.Model.Acl.CanChangeInviteLink">
             <summary>
            
             </summary>
        </member>
        <member name="T:VkNet.Model.Activity">
            <summary>
            Activity
            </summary>
        </member>
        <member name="P:VkNet.Model.Activity.Likes">
            <summary>
            Количество лайков
            </summary>
        </member>
        <member name="P:VkNet.Model.Activity.Subscribed">
            <summary>
            Количество подписчиков
            </summary>
        </member>
        <member name="P:VkNet.Model.Activity.Unsubscribed">
            <summary>
            Количество неподписавшихся.
            </summary>
        </member>
        <member name="T:VkNet.Model.Ad">
            <summary>
            Описание рекламного аккаунта.
            </summary>
            <remarks>
            См. описание https://vk.com/dev/ads.getAccounts
            </remarks>
        </member>
        <member name="P:VkNet.Model.Ad.Id">
            <summary>
            Идентификатор рекламного объявления.
            </summary>
        </member>
        <member name="P:VkNet.Model.Ad.CampaignId">
            <summary>
            Идентификатор кампании.
            </summary>
        </member>
        <member name="P:VkNet.Model.Ad.AdFormat">
            <summary>
            Формат объявления
            </summary>
        </member>
        <member name="P:VkNet.Model.Ad.CostType">
            <summary>
            Тип оплаты
            </summary>
        </member>
        <member name="P:VkNet.Model.Ad.Cpc">
            <summary>
            Цена за переход в копейках. (если cost_type = 0)
            </summary>
        </member>
        <member name="P:VkNet.Model.Ad.Cpm">
            <summary>
            Цена за 1000 показов в копейках. (если cost_type = 1)
            </summary>
        </member>
        <member name="P:VkNet.Model.Ad.ImpressionsLimit">
            <summary>
            (если задано) Ограничение количества показов данного объявления на одного пользователя.
            Может присутствовать для некоторых форматов объявлений, для которых разрешена установка точного значения.
            </summary>
        </member>
        <member name="P:VkNet.Model.Ad.ImpressionsLimited">
            <summary>
            (если задано) Признак того, что количество показов объявления на одного пользователя ограничено.
            Может присутствовать для некоторых объявлений, для которых разрешена установка ограничения, но не разрешена установка точного значения.
            1 — не более 100 показов на одного пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.Ad.AdPlatform">
            <summary>
            Рекламные площадки, на которых будет показываться объявление. (если значение применимо к данному формату объявления)
            </summary>
        </member>
        <member name="P:VkNet.Model.Ad.AdPPlatformNoWall">
            <summary>
            1 — для объявления задано ограничение «Не показывать на стенах сообществ».
            </summary>
        </member>
        <member name="P:VkNet.Model.Ad.AdPlatformNoAdNetwork">
            <summary>
            1 — для объявления задано ограничение «Показывать в рекламной сети».
            </summary>
        </member>
        <member name="P:VkNet.Model.Ad.AllLimit">
            <summary>
            Общий лимит объявления в рублях. 0 — лимит не задан.
            </summary>
        </member>
        <member name="P:VkNet.Model.Ad.DayLimit">
            <summary>
            Дневной лимит объявления в рублях. 0 — лимит не задан.
            </summary>
        </member>
        <member name="P:VkNet.Model.Ad.AgeRestriction">
            <summary>
            Ограничение по возрасту
            </summary>
        </member>
        <member name="P:VkNet.Model.Ad.CreateTime">
            <summary>
            Время создания объявления
            </summary>
        </member>
        <member name="P:VkNet.Model.Ad.UpdateTime">
            <summary>
            Время последнего изменения объявления
            </summary>
        </member>
        <member name="P:VkNet.Model.Ad.Category1Id">
            <summary>
            ID тематики или подраздела тематики объявления.
            </summary>
        </member>
        <member name="P:VkNet.Model.Ad.Category2Id">
            <summary>
            ID тематики или подраздела тематики объявления. Дополнительная тематика.
            </summary>
        </member>
        <member name="P:VkNet.Model.Ad.Status">
            <summary>
            Cтатус объявления.
            </summary>
        </member>
        <member name="P:VkNet.Model.Ad.Name">
            <summary>
            Название объявления.
            </summary>
        </member>
        <member name="P:VkNet.Model.Ad.ModerationStatus">
            <summary>
            Cтатус модерации объявления
            </summary>
        </member>
        <member name="P:VkNet.Model.Ad.Video">
            <summary>
            Объявление является видеорекламой
            </summary>
        </member>
        <member name="P:VkNet.Model.Ad.DisclaimerMedical">
            <summary>
            Включено отображение предупреждения: «Есть противопоказания.Требуется консультация специалиста.»
            </summary>
        </member>
        <member name="P:VkNet.Model.Ad.DisclaimerSpecialist">
            <summary>
            Включено отображение предупреждения: «Необходима консультация специалистов.»
            </summary>
        </member>
        <member name="P:VkNet.Model.Ad.DisclaimerSupplements">
            <summary>
            Включено отображение предупреждения: «БАД.Не является лекарственным препаратом.»
            </summary>
        </member>
        <member name="P:VkNet.Model.Ad.EventsRetargetingGroups">
            <summary>
            Только для ad_format = 9 (Public). Описание событий, собираемых в группы ретаргетинга. Массив объектов, где ключом является id группы ретаргетинга, а значением - массив событий.
            </summary>
            <remarks>
            TODO: выпилить ToNullIfArrayConverter
            </remarks>
        </member>
        <member name="T:VkNet.Model.AddressResult">
             <summary>
            
             </summary>
        </member>
        <member name="T:VkNet.Model.AdsAccount">
            <summary>
            Описание рекламного аккаунта.
            </summary>
            <remarks>
            См. описание https://vk.com/dev/ads.getAccounts
            </remarks>
        </member>
        <member name="P:VkNet.Model.AdsAccount.AccountId">
            <summary>
            Идентификатор рекламного кабинета.
            </summary>
        </member>
        <member name="P:VkNet.Model.AdsAccount.AccountType">
            <summary>
            Тип рекламного кабинета.
            </summary>
        </member>
        <member name="P:VkNet.Model.AdsAccount.AccountStatus">
            <summary>
            Cтатус рекламного кабинета.
            </summary>
        </member>
        <member name="P:VkNet.Model.AdsAccount.AccountName">
            <summary>
            Название аккаунта
            </summary>
        </member>
        <member name="P:VkNet.Model.AdsAccount.AccessRole">
            <summary>
            Права пользователя в рекламном кабинете.
            </summary>
        </member>
        <member name="M:VkNet.Model.AdsAccount.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Информация о рекламном аккаунте
            </summary>
            <param name="response"> </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.AdsCampaign">
            <summary>
            Возвращает список кампаний рекламного кабинета.
            </summary>
            <remarks>
            См. описание https://vk.com/dev/ads.getCampaigns
            </remarks>
        </member>
        <member name="P:VkNet.Model.AdsCampaign.Id">
            <summary>
            Идентификатор рекламного кабинета.
            </summary>
        </member>
        <member name="P:VkNet.Model.AdsCampaign.Type">
            <summary>
            Тип кампании
            </summary>
        </member>
        <member name="P:VkNet.Model.AdsCampaign.Name">
            <summary>
            Название кампании
            </summary>
        </member>
        <member name="P:VkNet.Model.AdsCampaign.Status">
            <summary>
            Статус кампании
            </summary>
        </member>
        <member name="P:VkNet.Model.AdsCampaign.DayLimit">
            <summary>
            Дневной лимит кампании в рублях
            </summary>
        </member>
        <member name="P:VkNet.Model.AdsCampaign.AllLimit">
            <summary>
            Общий лимит кампании в рублях
            </summary>
        </member>
        <member name="P:VkNet.Model.AdsCampaign.StartTime">
            <summary>
            Время запуска кампании в формате unixtime
            </summary>
        </member>
        <member name="P:VkNet.Model.AdsCampaign.StopTime">
            <summary>
            Время запуска кампании в формате unixtime
            </summary>
        </member>
        <member name="P:VkNet.Model.AdsCampaign.CreateTime">
            <summary>
            Время создания кампании в формате unixtime
            </summary>
        </member>
        <member name="P:VkNet.Model.AdsCampaign.UpdateTime">
            <summary>
            Время последнего изменения кампании в формате unixtime
            </summary>
        </member>
        <member name="M:VkNet.Model.AdsCampaign.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Информация о рекламном аккаунте
            </summary>
            <param name="response"> </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.AmountObject">
            <summary>
            Количество
            </summary>
        </member>
        <member name="P:VkNet.Model.AmountObject.Amount">
            <summary>
            Количество
            </summary>
        </member>
        <member name="P:VkNet.Model.AmountObject.Currency">
            <summary>
            Валюта
            </summary>
        </member>
        <member name="P:VkNet.Model.AmountObject.Text">
            <summary>
            Текст
            </summary>
        </member>
        <member name="M:VkNet.Model.AmountObject.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.AmountObject.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.AmountObject">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.AmountObject" /> в <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns>Результат преобразования в <see cref="T:VkNet.Model.AmountObject" /></returns>
        </member>
        <member name="T:VkNet.Model.ApiAuthParams">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.ApiAuthParams.ApplicationId">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.ApiAuthParams.Login">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.ApiAuthParams.Password">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.ApiAuthParams.Settings">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.ApiAuthParams.TwoFactorAuthorization">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.ApiAuthParams.AccessToken">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.ApiAuthParams.TokenExpireTime">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.ApiAuthParams.UserId">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.ApiAuthParams.CaptchaSid">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.ApiAuthParams.CaptchaKey">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.ApiAuthParams.Host">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.ApiAuthParams.Port">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.ApiAuthParams.ProxyLogin">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.ApiAuthParams.ProxyPassword">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.ApiAuthParams.Phone">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.ApiAuthParams.ClientSecret">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.ApiAuthParams.ForceSms">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.ApiAuthParams.Display">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.ApiAuthParams.RedirectUri">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.ApiAuthParams.State">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.ApiAuthParams.TwoFactorSupported">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.ApiAuthParams.GrantType">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.ApiAuthParams.ResponseType">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.ApiAuthParams.Revoke">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.ApiAuthParams.Code">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Model.ApiAuthParams.Format(System.UInt64,System.String,System.String,VkNet.Enums.Filters.Settings)">
            <summary>
            Формирует параметры авторизации по минимальному набору необходимых полей
            </summary>
            <param name="appId"> </param>
            <param name="login"> </param>
            <param name="password"> </param>
            <param name="settings"> </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.App">
            <summary>
            Приложение.
            </summary>
        </member>
        <member name="P:VkNet.Model.App.Id">
            <summary>
            Идентификатор приложения.
            </summary>
        </member>
        <member name="P:VkNet.Model.App.Title">
            <summary>
            Название приложения.
            </summary>
        </member>
        <member name="P:VkNet.Model.App.Icon278">
            <summary>
            Uri-адрес обложки приложения шириной 278px.
            </summary>
        </member>
        <member name="P:VkNet.Model.App.Icon139">
            <summary>
            Uri-адрес обложки приложения шириной 139px.
            </summary>
        </member>
        <member name="P:VkNet.Model.App.Icon150">
            <summary>
            Uri-адрес обложки приложения шириной 150px.
            </summary>
        </member>
        <member name="P:VkNet.Model.App.Icon75">
            <summary>
            Uri-адрес обложки приложения шириной 75px.
            </summary>
        </member>
        <member name="P:VkNet.Model.App.Banner560">
            <summary>
            Uri-адрес баннера шириной 560px.
            </summary>
        </member>
        <member name="P:VkNet.Model.App.Banner1120">
            <summary>
            Uri-адрес баннера шириной 1120px.
            </summary>
        </member>
        <member name="P:VkNet.Model.App.Type">
            <summary>
            Тип приложения:.
            </summary>
        </member>
        <member name="P:VkNet.Model.App.Section">
            <summary>
            Категория приложения.
            </summary>
        </member>
        <member name="P:VkNet.Model.App.AuthorUrl">
            <summary>
            Адрес страницы автора приложения.
            </summary>
        </member>
        <member name="P:VkNet.Model.App.AuthorId">
            <summary>
            Идентификатор автора приложения.
            </summary>
        </member>
        <member name="P:VkNet.Model.App.AuthorGroup">
            <summary>
            Идентификатор официальной группы приложения.
            </summary>
        </member>
        <member name="P:VkNet.Model.App.MembersCount">
            <summary>
            Количество участников приложения.
            </summary>
        </member>
        <member name="P:VkNet.Model.App.PublishedDate">
            <summary>
            Дата размещения.
            </summary>
        </member>
        <member name="P:VkNet.Model.App.CatalogPosition">
            <summary>
            Позиция в каталоге.
            </summary>
        </member>
        <member name="P:VkNet.Model.App.International">
            <summary>
            Является ли приложение мультиязычным (<c> true </c>).
            </summary>
        </member>
        <member name="P:VkNet.Model.App.LeaderBoardType">
            <summary>
            Тип турнирной таблицы (0 - не поддерживается, 1 - по уровню, 2 - по очкам).
            </summary>
        </member>
        <member name="P:VkNet.Model.App.GenreId">
            <summary>
            Идентификатор жанра.
            </summary>
        </member>
        <member name="P:VkNet.Model.App.Genre">
            <summary>
            Название жанра.
            </summary>
        </member>
        <member name="P:VkNet.Model.App.PlatformId">
            <summary>
            Идентификатор приложения в магазине приложений.
            </summary>
        </member>
        <member name="P:VkNet.Model.App.IsInCatalog">
            <summary>
            Доступно ли приложение в мобильном каталоге.
            </summary>
        </member>
        <member name="P:VkNet.Model.App.Friends">
            <summary>
            список идентификаторов друзей текущего пользователя, которые установили
            приложение
            (если был передан параметр return_friends = 1.
            </summary>
        </member>
        <member name="P:VkNet.Model.App.Installed">
            <summary>
            1, если приложение установлено у текущего пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.App.IsHtml5App">
            <summary>
            1, если приложение — html5 игра.
            </summary>
        </member>
        <member name="P:VkNet.Model.App.ScreenOrientation">
            <summary>
            Поддерживаемая ориентация экрана.
            </summary>
        </member>
        <member name="M:VkNet.Model.App.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="P:VkNet.Model.App.Description">
            <summary>
            Описание.
            </summary>
        </member>
        <member name="P:VkNet.Model.App.ScreenName">
            <summary>
            Поддомен приложения (или строка idXXXXXXX, если поддомен не задан).
            </summary>
        </member>
        <member name="P:VkNet.Model.App.Icon16">
            <summary>
            Uri-адрес обложки приложения шириной 16px.
            </summary>
        </member>
        <member name="P:VkNet.Model.App.Screenshots">
            <summary>
            Uri-адреса изображений-скриншотов из приложения.
            </summary>
        </member>
        <member name="P:VkNet.Model.App.PushEnabled">
            <summary>
            1, если у пользователя включены уведомления из этого приложения.
            </summary>
        </member>
        <member name="T:VkNet.Model.AppGetObject">
            <summary>
            Результат выполнения запроса получения приложений
            </summary>
        </member>
        <member name="P:VkNet.Model.AppGetObject.TotalCount">
            <summary>
            Общее количество записей на стене.
            </summary>
        </member>
        <member name="P:VkNet.Model.AppGetObject.Apps">
            <summary>
            Приложения.
            </summary>
        </member>
        <member name="P:VkNet.Model.AppGetObject.Friends">
            <summary>
            Друзья.
            </summary>
        </member>
        <member name="M:VkNet.Model.AppGetObject.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.Application">
            <summary>
            Приложение.
            </summary>
        </member>
        <member name="P:VkNet.Model.Application.Store">
            <summary>
            Магазин.
            </summary>
        </member>
        <member name="P:VkNet.Model.Application.AppId">
            <summary>
            Идентификатор приложения в магазине;.
            </summary>
        </member>
        <member name="M:VkNet.Model.Application.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.AreFriendsResult">
            <summary>
            Результат запроса Friends.AreFriends
            </summary>
        </member>
        <member name="P:VkNet.Model.AreFriendsResult.UserId">
            <summary>
            Идентификатор пользователя (из числа переданных в параметре user_ids);
            </summary>
        </member>
        <member name="P:VkNet.Model.AreFriendsResult.FriendStatus">
            <summary>
            Статус дружбы с пользователем
            </summary>
            <remarks>
            0 – пользователь не является другом,
            1 – отправлена заявка/подписка пользователю,
            2 – имеется входящая заявка/подписка от пользователя,
            3 – пользователь является другом;
            </remarks>
        </member>
        <member name="P:VkNet.Model.AreFriendsResult.RequestMessage">
            <summary>
            Текст сообщения, прикрепленного к заявке в друзья (если есть)
            </summary>
        </member>
        <member name="P:VkNet.Model.AreFriendsResult.ReadState">
            <summary>
            Статус заявки (0 — не просмотрена, 1 — просмотрена), возвращается только если
            friend_status = 2;
            </summary>
        </member>
        <member name="M:VkNet.Model.AreFriendsResult.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.Attachments.Album">
            <summary>
            Альбом с фотографиями пользователя.
            См. описание http://vk.com/dev/attachments_w
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Album.Alias">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.Attachments.Album.Thumb">
            <summary>
            Обложка альбома.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Album.Title">
            <summary>
            Название альбома.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Album.Description">
            <summary>
            Описание альбома.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Album.CreateTime">
            <summary>
            Дата и время создания альбома.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Album.UpdateTime">
            <summary>
            Дата и время последнего обновления альбома.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Album.Size">
            <summary>
            Количество фотографий в альбоме.
            </summary>
        </member>
        <member name="M:VkNet.Model.Attachments.Album.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            </summary>
            <param name="response"> </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.Attachments.Album.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Attachments.Album">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.Attachments.Album" /> в <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns>Результат преобразования в <see cref="T:VkNet.Model.Attachments.Album" /></returns>
        </member>
        <member name="T:VkNet.Model.Attachments.ApplicationContent">
            <summary>
            Контент приложения.
            </summary>
            <remarks>
            Это устаревший тип вложений. Он может быть возвращен лишь для записей, созданных раньше 2013 года.
            <a href="http://vk.com/dev/attachments_w" > Документация </a>
            </remarks>
        </member>
        <member name="P:VkNet.Model.Attachments.ApplicationContent.Alias">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.Attachments.ApplicationContent.Name">
            <summary>
            Название приложения.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.ApplicationContent.Photo130">
            <summary>
            URL изображения для предпросмотра.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.ApplicationContent.Photo604">
            <summary>
            URL полноразмерного изображения.
            </summary>
        </member>
        <member name="M:VkNet.Model.Attachments.ApplicationContent.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            ��������� �� json.
            </summary>
            <param name="response"> ����� �������. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.Attachments.ApplicationContent.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Attachments.ApplicationContent">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.Attachments.ApplicationContent" /> в <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns>Результат преобразования в <see cref="T:VkNet.Model.Attachments.ApplicationContent" /></returns>
        </member>
        <member name="T:VkNet.Model.Attachments.Article">
            <summary>
            Статья
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Article.Alias">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.Attachments.Article.OwnerName">
            <summary>
            Имя владельца
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Article.OwnerPhoto">
            <summary>
            URI к фотографии владельца
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Article.State">
            <summary>
            Состояние
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Article.CanReport">
            <summary>
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Article.Title">
            <summary>
            Заголовок
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Article.Subtitle">
            <summary>
            Подзаголовок
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Article.Views">
            <summary>
            Количество показов
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Article.Shares">
            <summary>
            Количество поделившихся
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Article.IsFavorite">
            <summary>
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Article.Url">
            <summary>
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Article.ViewUrl">
            <summary>
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Article.PublishedDate">
            <summary>
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Article.Photo">
            <summary>
            </summary>
        </member>
        <member name="M:VkNet.Model.Attachments.Article.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.Attachments.Article.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Attachments.Article">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.Attachments.Article" /> в <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns>Результат преобразования в <see cref="T:VkNet.Model.Attachments.Article" /></returns>
        </member>
        <member name="T:VkNet.Model.Attachments.Attachment">
            <summary>
            Информация о медиавложении в записи.
            См. описание http://vk.com/dev/attachments_w
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.Instance">
            <summary>
            Экземпляр самого прикрепления.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.Type">
            <summary>
            Информация о типе вложения.
            </summary>
        </member>
        <member name="M:VkNet.Model.Attachments.Attachment.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.Photo">
            <summary>
            Фотография из альбома или фотография, загруженная напрямую с компьютера
            пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.Video">
            <summary>
            Видеозапись.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.Audio">
            <summary>
            Аудиозапись.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.Document">
            <summary>
            Документ.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.Podcast">
            <summary>
            Подкаст.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.Graffiti">
            <summary>
            Граффити.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.Link">
            <summary>
            Ссылка на Web-страницу.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.Note">
            <summary>
            Заметка.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.ApplicationContent">
            <summary>
            Контент приложения.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.Poll">
            <summary>
            Опрос.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.Page">
            <summary>
            Wiki страница.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.Album">
            <summary>
            Альбом с фотографиями.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.PhotosList">
            <summary>
            Список фотографий
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.WallPost">
            <summary>
            Запись на стене.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.Wall">
            <summary>
            Запись на стене.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.Sticker">
            <summary>
            Стикер.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.Gift">
            <summary>
            Подарок.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.WallReply">
            <summary>
            Комментарии к записи на стене.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.MarketAlbum">
            <summary>
            Каталог товаров.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.Market">
            <summary>
            Товар.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.PrettyCards">
            <summary>
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.AudioMessage">
            <summary>
            Аудио сообщение
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.Article">
            <summary>
            Статья
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.Call">
            <summary>
            Звонок.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.Story">
            <summary>
            История.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.AudioPlaylist">
            <summary>
            Плейлист.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.UnknownAttachment">
            <summary>
            Неизвестное вложение.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.MoneyTransfer">
            <summary>
            Перевод денег.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.MoneyRequest">
            <summary>
            Выставление счета
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Attachment.Event">
            <summary>
            Встреча
            </summary>
        </member>
        <member name="T:VkNet.Model.Attachments.Audio">
            <summary>
            Аудиозапись пользователя или группы.
            См. описание http://vk.com/dev/audio_object
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Audio.Alias">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.Attachments.Audio.Artist">
            <summary>
            Исполнитель аудиозаписи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Audio.Title">
            <summary>
            Название композиции.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Audio.Duration">
            <summary>
            Длительность аудиозаписи в секундах.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Audio.Date">
            <summary>
            Дата добавления.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Audio.Url">
            <summary>
            Ссылка на аудиозапись (привязана к ip-адресу клиентского приложения).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Audio.Album">
            <summary>
            Альбом аудиозаписи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Audio.IsLicensed">
            <summary>
            true, если аудиозапись лицензируется.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Audio.IsHq">
            <summary>
            true, если аудиозапись в высоком качестве.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Audio.TrackGenre">
            <summary>
            Жанр аудиозаписи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Audio.Genre">
            <summary>
            Жанр аудиозаписи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Audio.LyricsId">
            <summary>
            Идентификатор текста аудиозаписи (если доступно).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Audio.ContentRestricted">
            <summary>
            Неизвестно.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Audio.MainArtists">
            <summary>
            Список исполнителей.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Audio.FeaturedArtists">
            <summary>
            Список исполнителей.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Audio.Subtitle">
            <summary>
            Подзаголовок(?)  композиции.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Audio.TrackCode">
            <summary>
            Неизвестно (получено экспериментально).
            </summary>
        </member>
        <member name="M:VkNet.Model.Attachments.Audio.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.Attachments.Audio.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Attachments.Audio">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.Attachments.Audio" /> в <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns>Результат преобразования в <see cref="T:VkNet.Model.Attachments.Audio" /></returns>
        </member>
        <member name="T:VkNet.Model.Attachments.AudioMessage">
            <summary>
            Аудио сообщение
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.AudioMessage.Alias">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.Attachments.AudioMessage.Duration">
            <summary>
            Продолжительность
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.AudioMessage.Waveform">
            <summary>
            Форма волны
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.AudioMessage.LinkOgg">
            <summary>
            Ссылка на файл в ogg
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.AudioMessage.LinkMp3">
            <summary>
            Ссылка на файл в mp3
            </summary>
        </member>
        <member name="M:VkNet.Model.Attachments.AudioMessage.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.Attachments.AudioMessage.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Attachments.AudioMessage">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.Attachments.AudioMessage" /> в <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns>Результат преобразования в <see cref="T:VkNet.Model.Attachments.AudioMessage" /></returns>
        </member>
        <member name="T:VkNet.Model.Attachments.AudioPlaylist">
            <summary>
            Плейлист.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.AudioPlaylist.Alias">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.Attachments.AudioPlaylist.AlbumType">
            <summary>
            Тип плейлиста.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.AudioPlaylist.Type">
            <summary>
            Тип плейлиста.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.AudioPlaylist.Title">
            <summary>
            Название плейлиста.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.AudioPlaylist.Description">
            <summary>
            Описание плейлиста.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.AudioPlaylist.Genres">
            <summary>
            Список жанров плейлиста.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.AudioPlaylist.Count">
            <summary>
            Количество аудиозаписей в плейлисте.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.AudioPlaylist.IsFollowing">
            <summary>
            true, если плейлист добавлен в аудиозаписи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.AudioPlaylist.Followers">
            <summary>
            Количество добавлений плейлиста.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.AudioPlaylist.Plays">
            <summary>
            Общее количество проигрываний плейлиста.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.AudioPlaylist.CreateTime">
            <summary>
            Дата создания плейлиста.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.AudioPlaylist.UpdateTime">
            <summary>
            Дата обновления плейлиста.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.AudioPlaylist.Year">
            <summary>
            Год выпуска альбома.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.AudioPlaylist.Original">
            <summary>
            Неизвестно.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.AudioPlaylist.Follower">
            <summary>
            Информация о подписчике плейлиста.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.AudioPlaylist.Cover">
            <summary>
            Обложка плейлиста.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.AudioPlaylist.Covers">
            <summary>
            Миниатюры плейлиста.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.AudioPlaylist.OwnerIds">
            <summary>
            Неизвестно.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.AudioPlaylist.MainArtist">
            <summary>
            Главный исполнитель.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.AudioPlaylist.Artists">
            <summary>
            Список исполнителей.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.AudioPlaylist.MainArtists">
            <summary>
            Список исполнителей.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.AudioPlaylist.FeaturedArtists">
            <summary>
            Список исполнителей.
            </summary>
        </member>
        <member name="M:VkNet.Model.Attachments.AudioPlaylist.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.Attachments.AudioPlaylist.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Attachments.AudioPlaylist">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.Attachments.AudioPlaylist" /> в
            <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> Результат преобразования в <see cref="T:VkNet.Model.Attachments.AudioPlaylist" /> </returns>
        </member>
        <member name="T:VkNet.Model.Attachments.Call">
            <summary>
            Звонок.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Call.Alias">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.Attachments.Call.InitiatorId">
            <summary>
            Идентификатор инициатора звонка.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Call.ReceiverId">
            <summary>
            Идентификатор получателя звонка.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Call.State">
            <summary>
            Тип вызова.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Call.Duration">
            <summary>
            Тип вызова.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Call.Time">
            <summary>
            Время вызова.
            </summary>
        </member>
        <member name="M:VkNet.Model.Attachments.Call.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            </summary>
            <param name="response"> </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.Attachments.Call.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Attachments.Call">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.Attachments.Call" /> в <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns>Результат преобразования в <see cref="T:VkNet.Model.Attachments.Call" /></returns>
        </member>
        <member name="T:VkNet.Model.Attachments.Document">
            <summary>
            Информация о документе.
            См. описание http://vk.com/dev/doc
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Document.Alias">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.Attachments.Document.Title">
            <summary>
            Название документа.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Document.Size">
            <summary>
            Размер документа в байтах.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Document.Ext">
            <summary>
            Расширение документа.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Document.Uri">
            <summary>
            Адрес документа, по которому его можно загрузить.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Document.Date">
            <summary>
            Дата добавления в формате unixtime.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Document.Type">
            <summary>
            тип документа
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Document.Preview">
            <summary>
            Gets or sets the preview.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Document.Photo100">
            <summary>
            Адрес изображения с размером 100x75px (если файл графический).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Document.Photo130">
            <summary>
            Адрес изображения с размером 130x100px (если файл графический).
            </summary>
        </member>
        <member name="M:VkNet.Model.Attachments.Document.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.Attachments.Document.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Attachments.Document">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.Attachments.Document" /> в <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns>Результат преобразования в <see cref="T:VkNet.Model.Attachments.Document" /></returns>
        </member>
        <member name="T:VkNet.Model.Attachments.Event">
            <summary>
            Встреча
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Event.Alias">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.Attachments.Event.Time">
            <summary>
            Время начала встречи в Unixtime
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Event.MemberStatus">
            <summary>
            Идёт ли текущий пользователь на встречу.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Event.IsFavorite">
            <summary>
            Добавлена ли встреча в закладки.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Event.Address">
            <summary>
            Место проведения встречи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Event.Text">
            <summary>
            Текст для отображения сниппета.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Event.ButtonText">
            <summary>
            Текст на кнопке сниппета.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Event.Friends">
            <summary>
            Список идентификаторов друзей, которые также идут на мероприятие.
            </summary>
        </member>
        <member name="M:VkNet.Model.Attachments.Event.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.Attachments.Event.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Attachments.Event">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.Attachments.Event" /> в <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns>Результат преобразования в <see cref="T:VkNet.Model.Attachments.Event" /></returns>
        </member>
        <member name="T:VkNet.Model.Attachments.Gift">
            <summary>
            Подарок.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Gift.Alias">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.Attachments.Gift.Thumb48">
            <summary>
            Изображение 48х48.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Gift.Thumb96">
            <summary>
            Изображение 96х96.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Gift.Thumb256">
            <summary>
            Изображение 256х256.
            </summary>
        </member>
        <member name="M:VkNet.Model.Attachments.Gift.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.Attachments.Gift.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Attachments.Gift">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.Attachments.Gift" /> в <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns>Результат преобразования в <see cref="T:VkNet.Model.Attachments.Gift" /></returns>
        </member>
        <member name="T:VkNet.Model.Attachments.Graffiti">
            <summary>
            Граффити.
            См. описание http://vk.com/dev/attachments_w
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Graffiti.Alias">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.Attachments.Graffiti.Photo200">
            <summary>
            Адрес изображения для предпросмотра.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Graffiti.Photo586">
            <summary>
            Адрес полноразмерного изображения.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Graffiti.Url">
            <summary>
            Адрес граффити, по которому его можно загрузить.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Graffiti.Width">
            <summary>
            Ширина изображения в px.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Graffiti.Height">
            <summary>
            Высота изображения в px.
            </summary>
        </member>
        <member name="M:VkNet.Model.Attachments.Graffiti.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.Attachments.Graffiti.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Attachments.Graffiti">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.Attachments.Graffiti" /> в <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns>Результат преобразования в <see cref="T:VkNet.Model.Attachments.Graffiti" /></returns>
        </member>
        <member name="T:VkNet.Model.Attachments.Link">
            <summary>
            Ссылка на Web-страницу.
            См. описание http://vk.com/dev/attachments_w
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Link.Alias">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.Attachments.Link.Uri">
            <summary>
            Адрес ссылки.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Link.Title">
            <summary>
            Заголовок ссылки.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Link.Caption">
            <summary>
            Подпись ссылки (если имеется).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Link.Description">
            <summary>
            Описание ссылки.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Link.Photo">
            <summary>
            Фото (если имеется).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Link.Product">
            <summary>
            Продукт.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Link.Button">
            <summary>
            Кнопка.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Link.PreviewPage">
            <summary>
            Идентификатр wiki страницы с контентом для предпросмотра содержимого страницы.
            Идентификатор возвращается в формате
            "owner_id_page_id".
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Link.PreviewUrl">
            <summary>
            Адрес страницы для предпросмотра содержимого страницы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Link.Image">
            <summary>
            Адрес превью изображения к ссылке (если имеется).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Link.IsExternal">
            <summary>
            Является ли ссылкой на внешний ресурс (если имеется).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Link.Rating">
            <summary>
            Рейтинг.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Link.Application">
            <summary>
            Приложение.
            </summary>
        </member>
        <member name="M:VkNet.Model.Attachments.Link.ToString">
            <summary>
            Преобразовать к строке.
            </summary>
            <returns>
            Адрес ссылки.
            </returns>
        </member>
        <member name="M:VkNet.Model.Attachments.Link.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.Attachments.Link.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Attachments.Link">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.Attachments.Link" /> в <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns>Результат преобразования в <see cref="T:VkNet.Model.Attachments.Link" /></returns>
        </member>
        <member name="T:VkNet.Model.Attachments.MarketAlbum">
            <summary>
            Подборка товаров
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.MarketAlbum.Alias">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.Attachments.MarketAlbum.Title">
            <summary>
            Название подборки
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.MarketAlbum.Photo">
            <summary>
            Обложка подборки, объект, описывающий фотографию.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.MarketAlbum.Count">
            <summary>
            Число товаров в подборке.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.MarketAlbum.UpdatedTime">
            <summary>
            Дата обновления подборки в формате Unixtime.
            </summary>
        </member>
        <member name="M:VkNet.Model.Attachments.MarketAlbum.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.Attachments.MarketAlbum.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Attachments.MarketAlbum">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.Attachments.MarketAlbum" /> в <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns>Результат преобразования в <see cref="T:VkNet.Model.Attachments.MarketAlbum" /></returns>
        </member>
        <member name="T:VkNet.Model.Attachments.MediaAttachment">
            <summary>
            Медиа вложение.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.MediaAttachment.Alias">
            <summary>
            Наименование типа которое приходит от vk.com
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.MediaAttachment.Id">
            <summary>
            Идентификатор вложенеия.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.MediaAttachment.OwnerId">
            <summary>
            Идентификатор владельца вложения.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.MediaAttachment.AccessKey">
            <summary>
            Ключ доступа
            </summary>
        </member>
        <member name="M:VkNet.Model.Attachments.MediaAttachment.ToString">
            <summary>
            Преобразовать вложение в строку.
            </summary>
        </member>
        <member name="T:VkNet.Model.Attachments.MoneyRequest">
            <summary>
            Выставление счета
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.MoneyRequest.Alias">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.Attachments.MoneyRequest.FromId">
            <summary>
            Идентификатор инициатора
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.MoneyRequest.ToId">
            <summary>
            Идентификатор получателя
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.MoneyRequest.Processed">
            <summary>
            Статус обработанности
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.MoneyRequest.Amount">
            <summary>
            Количество
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.MoneyRequest.InitUrl">
            <summary>
            Ссылка на выставленный счет
            </summary>
        </member>
        <member name="M:VkNet.Model.Attachments.MoneyRequest.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.Attachments.MoneyRequest.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Attachments.MoneyRequest">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.Attachments.MoneyTransfer" /> в <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns>Результат преобразования в <see cref="T:VkNet.Model.Attachments.MoneyTransfer" /></returns>
        </member>
        <member name="T:VkNet.Model.Attachments.MoneyTransfer">
            <summary>
            Перевод денег
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.MoneyTransfer.Alias">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.Attachments.MoneyTransfer.FromId">
            <summary>
            Идентификатор отправителя
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.MoneyTransfer.ToId">
            <summary>
            Идентификатор получателя
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.MoneyTransfer.Status">
            <summary>
            Состояние
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.MoneyTransfer.Date">
            <summary>
            Дата
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.MoneyTransfer.Amount">
            <summary>
            Количество
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.MoneyTransfer.Comment">
            <summary>
            Комментарий
            </summary>
        </member>
        <member name="M:VkNet.Model.Attachments.MoneyTransfer.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.Attachments.MoneyTransfer.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Attachments.MoneyTransfer">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.Attachments.MoneyTransfer" /> в <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns>Результат преобразования в <see cref="T:VkNet.Model.Attachments.MoneyTransfer" /></returns>
        </member>
        <member name="T:VkNet.Model.Attachments.Note">
            <summary>
            Заметка пользователя.
            </summary>
            <remarks>
            <a href="http://vk.com/dev/note">См. описание</a>
            </remarks>
        </member>
        <member name="P:VkNet.Model.Attachments.Note.Alias">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.Attachments.Note.Title">
            <summary>
            Заголовок заметки.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Note.Text">
            <summary>
            Текст заметки.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Note.Date">
            <summary>
            Дата создания заметки.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Note.CommentsCount">
            <summary>
            Количество комментариев к заметке.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Note.ReadCommentsCount">
            <summary>
            Количество прочитанных комментариев (только при запросе информации о заметке
            текущего пользователя).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Note.ViewUrl">
            <summary>
            Адрес страницы для отображения заметки.
            </summary>
        </member>
        <member name="M:VkNet.Model.Attachments.Note.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            </summary>
            <param name="response"> </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.Attachments.Note.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Attachments.Note">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.Attachments.Note" /> в <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns>Результат преобразования в <see cref="T:VkNet.Model.Attachments.Note" /></returns>
        </member>
        <member name="T:VkNet.Model.Attachments.Page">
            <summary>
            Информация о вики-странице сообщества.
            См. описание http://vk.com/dev/pages.get
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Page.Alias">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.Attachments.Page.GroupId">
            <summary>
            Идентификатор сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Page.CreatorId">
            <summary>
            Идентификатор создателя страницы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Page.Title">
            <summary>
            Название страницы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Page.CurrentUserCanEdit">
            <summary>
            Указывает, может ли текущий пользователь редактировать текст страницы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Page.CurrentUserCanEditAccess">
            <summary>
            Указывает, может ли текущий пользователь изменять права доступа на страницу.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Page.WhoCanView">
            <summary>
            Указывает, кто может просматривать вики-страницу.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Page.WhoCanEdit">
            <summary>
            Указывает, кто может редактировать вики-страницу.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Page.Edited">
            <summary>
            Дата последнего изменения (в виде строки).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Page.Created">
            <summary>
            Дата создания страницы (в виде строки).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Page.EditorId">
            <summary>
            Идентификатор пользователя, который редактировал страницу последним.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Page.Views">
            <summary>
            Количество просмотров вики-страницы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Page.Parent">
            <summary>
            Заголовок родительской страницы для навигации,если есть.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Page.Parent2">
            <summary>
            Заголовок второй родительской страницы для навигации, если есть.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Page.Source">
            <summary>
            Текст страницы в вики-формате.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Page.Html">
            <summary>
            Html-текст страницы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Page.ViewUrl">
            <summary>
            Адрес страницы для отображения вики-страницы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Page.VersionCreated">
            <summary>
            Gets or sets the version created.
            </summary>
        </member>
        <member name="M:VkNet.Model.Attachments.Page.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            </summary>
            <param name="response"> </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.Attachments.Page.ToString">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Model.Attachments.Page.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Attachments.Page">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.Attachments.Page" /> в <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns>Результат преобразования в <see cref="T:VkNet.Model.Attachments.Page" /></returns>
        </member>
        <member name="T:VkNet.Model.Attachments.Photo">
            <summary>
            Фотография.
            </summary>
            <remarks>
            См. описание http://vk.com/dev/photo
            </remarks>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.Alias">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.AlbumId">
            <summary>
            Идентификатор альбома, в котором находится фотография.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.UserId">
            <summary>
            Идентификатор пользователя, загрузившего фото (если фотография размещена в
            сообществе). Для фотографий, размещенных
            от имени сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.Text">
            <summary>
            Текст описания фотографии.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.CreateTime">
            <summary>
            Дата добавления фотографии.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.Sizes">
            <summary>
            Размеры фотографий.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.Photo50">
            <summary>
            Uri фотографии с максимальным размером 50x50px.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.Photo75">
            <summary>
            Uri фотографии с максимальным размером 75x75px.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.Photo100">
            <summary>
            Uri фотографии с максимальным размером 100x100px.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.Photo130">
            <summary>
            Uri фотографии с максимальным размером 130x130px.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.Photo200">
            <summary>
            Uri фотографии с максимальным размером 200x200px.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.Photo604">
            <summary>
            Uri фотографии с максимальным размером 604x604px.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.Photo807">
            <summary>
            Uri фотографии с максимальным размером 807x807px.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.Photo1280">
            <summary>
            Uri фотографии с максимальным размером 1280x1024px.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.Photo2560">
            <summary>
            Uri фотографии с максимальным размером  2560x2048px.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.Width">
            <summary>
            Ширина оригинала фотографии в пикселах
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.Height">
            <summary>
            Высота оригинала фотографии в пикселах.
            </summary>
        </member>
        <member name="M:VkNet.Model.Attachments.Photo.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.Attachments.Photo.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Attachments.Photo">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.Attachments.Photo" /> в <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns>Результат преобразования в <see cref="T:VkNet.Model.Attachments.Photo" /></returns>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.PostId">
            <summary>
            Идентификатор записи, у которой данная фотография является прикреплением???
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.PlacerId">
            <summary>
            Идентификатор пользователя, сделавшего отметку
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.TagCreated">
            <summary>
            Дата создания отметки
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.TagId">
            <summary>
            Идентификатор отметки
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.Likes">
            <summary>
            Лайки
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.CanComment">
            <summary>
            Возможность комментирования фотографии
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.Comments">
            <summary>
            Комментарии
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.Reposts">
            <summary>
            Комментарии
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.Tags">
            <summary>
            Теги
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.PhotoSrc">
            <summary>
            Источник изображения.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.PhotoHash">
            <summary>
            Хеш изображения.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.Latitude">
            <summary>
            Географическая широта отметки, заданная в градусах
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.Longitude">
            <summary>
            Географическая долгота отметки, заданная в градусах
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.BigPhotoSrc">
            <summary>
            Uri фотографии с максимальным размером.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Photo.SmallPhotoSrc">
            <summary>
            Uri фотографии с минимальным размером.
            </summary>
        </member>
        <member name="T:VkNet.Model.Attachments.Podcast">
            <summary>
            Подкаст
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Podcast.Alias">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.Attachments.Podcast.Artist">
            <summary>
            Исполнитель
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Podcast.Title">
            <summary>
            Заголовок
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Podcast.Duration">
            <summary>
            Длительность
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Podcast.Date">
            <summary>
            Дата
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Podcast.Url">
            <summary>
            URL на подкаст
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Podcast.LyricsId">
            <summary>
            Идентификатор текста песни
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Podcast.NoSearch">
            <summary>
            Не искать
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Podcast.IsHq">
            <summary>
            Высокое качество
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Podcast.IsExplicit">
            <summary>
            Явный
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Podcast.PodcastInfo">
            <summary>
            Информация о подкасте
            </summary>
        </member>
        <member name="M:VkNet.Model.Attachments.Podcast.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.Attachments.Podcast.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Attachments.Podcast">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.Attachments.Podcast" /> в <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns>Результат преобразования в <see cref="T:VkNet.Model.Attachments.Podcast" /></returns>
        </member>
        <member name="T:VkNet.Model.Attachments.Poll">
            <inheritdoc />
            <summary>
            Опрос.
            См. описание https://vk.com/dev/objects/poll
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Poll.Alias">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.Attachments.Poll.Created">
            <summary>
            Дата создания опроса
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Poll.Question">
            <summary>
            Вопрос, заданный в голосовании.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Poll.Votes">
            <summary>
            Кол-во ответов
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Poll.AnswerId">
            <summary>
            Идентификатор выбранного ответа
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Poll.Answers">
            <summary>
            Варианты ответов
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Poll.Anonymous">
            <summary>
            Возможность анонимых ответов
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Poll.Multiple">
            <summary>
            Допускает ли опрос выбор нескольких вариантов ответа.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Poll.AnswerIds">
            <summary>
            Идентификаторы вариантов ответа, выбранных текущим пользователем.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Poll.EndDate">
            <summary>
            Дата завершения опроса в Unixtime. 0, если опрос бессрочный.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Poll.Closed">
            <summary>
            Является ли опрос завершенным.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Poll.IsBoard">
            <summary>
            Прикреплён ли опрос к обсуждению.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Poll.CanEdit">
            <summary>
            Можно ли отредактировать опрос.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Poll.CanVote">
            <summary>
            Можно ли проголосовать в опросе.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Poll.CanReport">
            <summary>
            Можно ли пожаловаться на опрос.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Poll.CanShare">
            <summary>
            Можно ли поделиться опросом.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Poll.AuthorId">
            <summary>
            Идентификатор автора опроса.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Poll.Photo">
            <summary>
            Фотография — фон сниппета опроса. Объект фотографии.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Poll.Background">
            <summary>
            Фон сниппета опроса.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Poll.Friends">
            <summary>
            Идентификаторы 3 друзей, которые проголосовали в опросе.
            </summary>
        </member>
        <member name="M:VkNet.Model.Attachments.Poll.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.Attachments.Poll.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Attachments.Poll">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.Attachments.Poll" /> в <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns>Результат преобразования в <see cref="T:VkNet.Model.Attachments.Poll" /></returns>
        </member>
        <member name="T:VkNet.Model.Attachments.Post">
            <summary>
            Запись со стены пользователя или сообщества.
            </summary>
            <remarks>
            См. описание http://vk.com/dev/post
            </remarks>
        </member>
        <member name="P:VkNet.Model.Attachments.Post.Alias">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.Attachments.Post.FromId">
            <summary>
            Идентификатор автора записи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Post.Date">
            <summary>
            Время публикации записи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Post.Text">
            <summary>
            Текст записи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Post.ReplyOwnerId">
            <summary>
            Идентификатор владельца записи, в ответ на которую была оставлена текущая.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Post.ReplyPostId">
            <summary>
            Идентификатор записи, в ответ на которую была оставлена текущая.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Post.FriendsOnly">
            <summary>
            <c> true </c>, если запись была создана с опцией «Только для друзей»,
            <c> false </c> в противном случае.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Post.Comments">
            <summary>
            Информация о комментариях к записи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Post.Likes">
            <summary>
            Информация о лайках к записи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Post.Reposts">
            <summary>
            Информация о репостах записи («Рассказать друзьям»).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Post.Views">
            <summary>
            Информация о просмотрах записи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Post.PostType">
            <summary>
            Тип записи (post, copy, reply, postpone, suggest). Если PostType равен "copy",
            то запись является копией записи с
            чужой стены.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Post.PostSource">
            <summary>
            Информация о способе размещения записи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Post.Attachments">
            <summary>
            Информация о вложениях записи (фотографии ссылки и т.п.).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Post.Attachment">
            <summary>
            Первое вложение.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Post.Geo">
            <summary>
            Информация о местоположении.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Post.IsPinned">
            <summary>
            Если запись закрепленная - вернет true
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Post.SignerId">
            <summary>
            Идентификатор автора, если запись была опубликована от имени сообщества и
            подписана пользователем.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Post.CopyPostDate">
            <summary>
            Время публикации записи-оригинала (если запись является копией записи с чужой
            стены).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Post.CopyPostType">
            <summary>
            Тип записи-оригинала (если запись является копией записи с чужой стены).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Post.CopyOwnerId">
            <summary>
            Идентификатор владельца стены, у которого была скопирована запись (если запись
            является копией записи с чужой
            стены).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Post.CopyPostId">
            <summary>
            Идентификатор скопированной записи на стене ее владельца (если запись является
            копией записи с чужой стены).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Post.CopyText">
            <summary>
            Текст комментария, добавленного при копировании (если запись является копией
            записи с чужой стены).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Post.CopyHistory">
            <summary>
            Массив, содержащий историю репостов для записи. Возвращается только в том
            случае, если запись является репостом.
            </summary>
        </member>
        <member name="M:VkNet.Model.Attachments.Post.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            </summary>
            <param name="response"> </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.Attachments.Post.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Attachments.Post">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.Attachments.Post" /> в <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns>Результат преобразования в <see cref="T:VkNet.Model.Attachments.Post" /></returns>
        </member>
        <member name="P:VkNet.Model.Attachments.Post.CreatedBy">
            <summary>
            Идентификатор создателя записи в группе или паблике (тот, кто фактически ее
            написал)
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Post.CopyCommenterId">
            <summary>
            Если запись является копией записи с чужой стены, то в этом поле содержится
            идентификатор коментатора записи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Post.CopyCommentId">
            <summary>
            Если запись является копией записи с чужой стены, то в этом поле содержится
            идентификатор коментария.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Post.CanDelete">
            <summary>
            Признак может ли текущий пользователь удалить эту запись.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Post.CanEdit">
            <summary>
            Признак может ли текущий пользователь редактировать эту запись.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Post.CanPin">
            <summary>
            Информация о том, может ли текущий пользователь закрепить запись (1 — может, 0
            — не может)
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Post.MarkedAsAds">
            <summary>
            Информация о том, содержит ли запись отметку "реклама"
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Post.AccessKey">
            <summary>
            Ключ доступа
            </summary>
        </member>
        <member name="T:VkNet.Model.Attachments.PrettyCards">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.Attachments.PrettyCards.Cards">
            <summary>
            Cards
            </summary>
        </member>
        <member name="M:VkNet.Model.Attachments.PrettyCards.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.Attachments.PrettyCards.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Attachments.PrettyCards">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.Attachments.PrettyCards" /> в <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns>Результат преобразования в <see cref="T:VkNet.Model.Attachments.PrettyCards" /></returns>
        </member>
        <member name="T:VkNet.Model.Attachments.Sticker">
            <summary>
            Стикер.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Sticker.ProductId">
            <summary>
            Идентификатор набора.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Sticker.Images">
            <summary>
            Изображения для стикера (с прозрачным фоном).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Sticker.ImagesWithBackground">
            <summary>
            Изображения для стикера (с непрозрачным фоном).
            </summary>
        </member>
        <member name="M:VkNet.Model.Attachments.Sticker.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.Attachments.Sticker.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Attachments.Sticker">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.Attachments.Sticker" /> в <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns>Результат преобразования в <see cref="T:VkNet.Model.Attachments.Sticker" /></returns>
        </member>
        <member name="T:VkNet.Model.Attachments.Story">
            <summary>
            История
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Story.Alias">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.Attachments.Story.Date">
            <summary>
            Дата добавления в Unixtime.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Story.IsExpired">
            <summary>
            true, если срок хранения истории истёк.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Story.IsDeleted">
            <summary>
            true, если история удалена или не существует.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Story.CanSee">
            <summary>
            информация о том, может ли пользователь просмотреть историю.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Story.Seen">
            <summary>
            true, если история просмотрена текущим пользователем.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Story.Type">
            <summary>
            Тип истории.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Story.Photo">
            <summary>
            Фотография из истории.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Story.Video">
            <summary>
            Видео из истории.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Story.Link">
            <summary>
            Ссылка для перехода из истории.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Story.ParentStoryOwnerId">
            <summary>
            Идентификатор пользователя, загрузившего историю, ответом на которую является
            текущая.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Story.ParentStoryId">
            <summary>
            Идентификатор истории, ответом на которую является текущая.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Story.ParentStory">
            <summary>
            Родительская история.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Story.Replies">
            <summary>
            Информация об ответах на текущую историю.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Story.CanReply">
            <summary>
            Информация о том, может ли пользователь ответить на историю .
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Story.CanShare">
            <summary>
            Информация о том, может ли пользователь расшарить историю.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Story.CanComment">
            <summary>
            Информация о том, может ли пользователь комментировать историю.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Story.Views">
            <summary>
            Число просмотров.
            </summary>
        </member>
        <member name="M:VkNet.Model.Attachments.Story.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.Attachments.Story.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Attachments.Story">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.Attachments.Story" /> в <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns>Результат преобразования в <see cref="T:VkNet.Model.Attachments.Story" /></returns>
        </member>
        <member name="T:VkNet.Model.Attachments.StringLink">
            <summary>
            Строковая ссылка
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.StringLink.Alias">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.Attachments.StringLink.Link">
            <summary>
            Ссылка
            </summary>
        </member>
        <member name="M:VkNet.Model.Attachments.StringLink.ToString">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Model.Attachments.StringLink.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Attachments.StringLink">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.Attachments.StringLink" /> в <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns>Результат преобразования в <see cref="T:VkNet.Model.Attachments.StringLink" /></returns>
        </member>
        <member name="T:VkNet.Model.Attachments.UnknownAttachment">
            <summary>
            Неизвестное вложение
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.UnknownAttachment.Alias">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Model.Attachments.UnknownAttachment.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.Attachments.UnknownAttachment.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Attachments.UnknownAttachment">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.Attachments.MoneyTransfer" /> в <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns>Результат преобразования в <see cref="T:VkNet.Model.Attachments.MoneyTransfer" /></returns>
        </member>
        <member name="T:VkNet.Model.Attachments.Video">
            <summary>
            Видеозапись пользователя или группы.
            </summary>
            <remarks>
            См. описание http://vk.com/dev/video_object
            </remarks>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.Alias">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.Attachments.Video.VideoId">
            <summary>
            Идентификатор вложения.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.Title">
            <summary>
            Название видеозаписи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.Description">
            <summary>
            Текст описания видеозаписи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.Duration">
            <summary>
            Длительность ролика в секундах.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.Photo130">
            <summary>
            Uri изображения-обложки ролика с размером 130x98px.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.Photo320">
            <summary>
            Uri изображения-обложки ролика с размером 320x240px.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.Photo640">
            <summary>
            Uri изображения-обложки ролика с размером 640x480px (если размер есть).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.Photo800">
            <summary>
            Uri изображения-обложки ролика с размером 800x450px (если размер есть).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.Photo1280">
            <summary>
            Uri изображения-обложки ролика с размером до 1280 px по ширине (если размер есть).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.FirstFrame">
            <summary>
            Список изображений первого кадра ролика.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.FirstFrame130">
            <summary>
            URL изображения первого кадра ролика с размером 130x98px.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.FirstFrame320">
            <summary>
            URL изображения первого кадра ролика с размером 320x240px.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.FirstFrame640">
            <summary>
            URL изображения первого кадра ролика с размером 640x480px (если размер есть).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.FirstFrame800">
            <summary>
            URL изображения первого кадра ролика с размером 800x450px (если размер есть).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.FirstFrame1280">
            <summary>
            URL изображения первого кадра ролика с шириной до 1028 px (если размер есть).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.Date">
            <summary>
            Дата добавления видеозаписи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.AddingDate">
            <summary>
            Дата добавления видеозаписи пользователем или группой в формате unixtime.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.Views">
            <summary>
            Количество просмотров.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.Comments">
            <summary>
            Количество комментариев.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.Player">
            <summary>
            Адрес страницы с плеером, который можно использовать для воспроизведения ролика
            в браузере.
            Поддерживается flash и html5, плеер всегда масштабируется по размеру окна.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.Platform">
            <summary>
            Платформа
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.CanEdit">
            <summary>
            поле возвращается, если пользователь может редактировать видеозапись, всегда
            содержит 1.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.CanAdd">
            <summary>
            Признак может ли текущий пользователь добавлять комментарии к видеозаписи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.IsPrivate">
            <summary>
            поле возвращается, если видеозапись приватная (например, была загружена в
            личное сообщение), всегда содержит 1.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.Image">
            <summary>
            Список изображений обложки видеозаписи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.Processing">
            <summary>
            Поле возвращается в том случае, если видеоролик находится в процессе обработки,
            всегда содержит 1.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.Live">
            <summary>
            Поле возвращается в том случае, если видеозапись является прямой трансляцией,
            всегда содержит 1. Обратите внимание,
            в этом случае в поле duration содержится значение 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.Upcoming">
            <summary>
            (для live = 1). Поле свидетельствует о том, что трансляция скоро начнётся.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.IsFavorite">
            <summary>
            true, если объект добавлен в закладки у текущего пользователя.
            </summary>
        </member>
        <member name="M:VkNet.Model.Attachments.Video.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.Attachments.Video.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Attachments.Video">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.Attachments.Video" /> в <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns>Результат преобразования в <see cref="T:VkNet.Model.Attachments.Video" /></returns>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.CanComment">
            <summary>
            Признак может ли текущий пользователь добавлять комментарии к видеозаписи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.CanRepost">
            <summary>
            Признак может ли текущий пользователь сделать репост данной видеозаписи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.Likes">
            <summary>
            Информация о лайках к видеозаписи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.Repeat">
            <summary>
            Признак является ли видеозапись зацикленной.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.AlbumId">
            <summary>
            Идентификатор видеоальбома VideoAlbum
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.UploadUrl">
            <summary>
            Uri, по которому необходимо выполнить загрузку видеов (см. метод
            VideoCategory.Save
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.Tag">
            <summary>
            Отметка к видеозаписи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.Files">
            <summary>
            Ссылки на файлы
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.Reposts">
            <summary>
            Информация о репостах записи
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.Width">
            <summary>
            Ширина
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Video.Height">
            <summary>
            Высота
            </summary>
        </member>
        <member name="T:VkNet.Model.Attachments.Wall">
            <summary>
            Запись со стены пользователя или сообщества. Используется для отправки
            сообщений
            </summary>
            <remarks>
            См. описание http://vk.com/dev/post
            </remarks>
        </member>
        <member name="P:VkNet.Model.Attachments.Wall.Alias">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.Attachments.Wall.FromId">
            <summary>
            Идентификатор автора записи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Wall.CreatedBy">
            <summary>
            Идентификатор создателя записи в группе или паблике (тот, кто фактически ее
            написал)
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Wall.Date">
            <summary>
            Время публикации записи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Wall.Text">
            <summary>
            Текст записи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Wall.ReplyOwnerId">
            <summary>
            Идентификатор владельца записи, в ответ на которую была оставлена текущая.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Wall.ReplyPostId">
            <summary>
            Идентификатор записи, в ответ на которую была оставлена текущая.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Wall.FriendsOnly">
            <summary>
            <c> true </c>, если запись была создана с опцией «Только для друзей»,
            <c> false </c> в противном случае.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Wall.Comments">
            <summary>
            Информация о комментариях к записи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Wall.Likes">
            <summary>
            Информация о лайках к записи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Wall.Reposts">
            <summary>
            Информация о репостах записи («Рассказать друзьям»).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Wall.Views">
            <summary>
            Информация о просмотрах записи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Wall.PostType">
            <summary>
            Тип записи (post, copy, reply, postpone, suggest). Если PostType равен "copy",
            то запись является копией записи с
            чужой стены.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Wall.PostSource">
            <summary>
            Информация о способе размещения записи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Wall.Attachments">
            <summary>
            Информация о вложениях записи (фотографии ссылки и т.п.).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Wall.Geo">
            <summary>
            Информация о местоположении.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Wall.SignerId">
            <summary>
            Идентификатор автора, если запись была опубликована от имени сообщества и
            подписана пользователем.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Wall.CopyHistory">
            <summary>
            Массив, содержащий историю репостов для записи. Возвращается только в том
            случае, если запись является репостом.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Wall.CanPin">
            <summary>
            Информация о том, может ли текущий пользователь закрепить запись (1 — может, 0
            — не может)
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Wall.CanDelete">
            <summary>
            Признак может ли текущий пользователь удалить эту запись.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Wall.CanEdit">
            <summary>
            Признак может ли текущий пользователь редактировать эту запись.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Wall.IsPinned">
            <summary>
            Если запись закрепленная - вернет true
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Wall.MarkedAsAds">
            <summary>
            Информация о том, содержит ли запись отметку "реклама"
            </summary>
        </member>
        <member name="M:VkNet.Model.Attachments.Wall.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Парсинг из JSON
            </summary>
            <param name="response"> </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.Attachments.Wall.op_Explicit(VkNet.Model.Attachments.Post)~VkNet.Model.Attachments.Wall">
            <summary>
            Приведение к <c> Wall </c> из <c> Post </c>
            </summary>
            <param name="post"> </param>
        </member>
        <member name="M:VkNet.Model.Attachments.Wall.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Attachments.Wall">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.Attachments.Wall" /> в <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns>Результат преобразования в <see cref="T:VkNet.Model.Attachments.Wall" /></returns>
        </member>
        <member name="P:VkNet.Model.Attachments.Wall.CopyText">
            <summary>
            Текст комментария, добавленного при копировании (если запись является копией
            записи с чужой стены).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Wall.CopyPostType">
            <summary>
            Тип записи-оригинала (если запись является копией записи с чужой стены).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Wall.CopyPostId">
            <summary>
            Идентификатор скопированной записи на стене ее владельца (если запись является
            копией записи с чужой стены).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Wall.CopyOwnerId">
            <summary>
            Идентификатор владельца стены, у которого была скопирована запись (если запись
            является копией записи с чужой
            стены).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Wall.CopyPostDate">
            <summary>
            Время публикации записи-оригинала (если запись является копией записи с чужой
            стены).
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Wall.CopyCommenterId">
            <summary>
            Если запись является копией записи с чужой стены, то в этом поле содержится
            идентификатор коментатора записи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.Wall.CopyCommentId">
            <summary>
            Если запись является копией записи с чужой стены, то в этом поле содержится
            идентификатор коментария.
            </summary>
        </member>
        <member name="T:VkNet.Model.Attachments.WallReply">
            <summary>
            Комментарий к записи на стене.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.WallReply.Alias">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.Attachments.WallReply.FromId">
            <summary>
            Идентификатор автора комментария.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.WallReply.Date">
            <summary>
            Дата создания комментария в формате unixtime.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.WallReply.Text">
            <summary>
            Текст комментария.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.WallReply.Likes">
            <summary>
            Информация о лайках к комментарию.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.WallReply.ReplyToUId">
            <summary>
            Идентификатор пользователя, в ответ которому был оставлен комментарий;
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.WallReply.ReplyToCId">
            <summary>
            Идентификатор комментария, в ответ на который был оставлен текущий.
            </summary>
        </member>
        <member name="M:VkNet.Model.Attachments.WallReply.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.Attachments.WallReply.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Attachments.WallReply">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.Attachments.WallReply" /> в <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns>Результат преобразования в <see cref="T:VkNet.Model.Attachments.WallReply" /></returns>
        </member>
        <member name="T:VkNet.Model.Attachments.DocumentPreview">
            <summary>
            Информация для предварительного просмотра документа
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.DocumentPreview.Photo">
            <summary>
            Изображения для предпросмотра.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.DocumentPreview.Graffiti">
            <summary>
            Данные о граффити
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.DocumentPreview.AudioMessage">
            <summary>
            Данные об аудиосообщении.
            </summary>
        </member>
        <member name="M:VkNet.Model.Attachments.DocumentPreview.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.Attachments.DocumentPreview.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Attachments.DocumentPreview">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.Attachments.Document" /> в <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns>Результат преобразования в <see cref="T:VkNet.Model.Attachments.Document" /></returns>
        </member>
        <member name="T:VkNet.Model.Attachments.PollBackgroundPoint">
            <summary>
            Точки градиента фона опроса.
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.PollBackgroundPoint.Position">
            <summary>
            Положение точки
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.PollBackgroundPoint.Color">
            <summary>
            HEX-код цвета точки
            </summary>
        </member>
        <member name="M:VkNet.Model.Attachments.PollBackgroundPoint.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.Attachments.PollBackgroundPoint.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Attachments.PollBackgroundPoint">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="T:VkNet.Model.Attachments.PrettyCard">
            <summary>
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.PrettyCard.CardId">
            <summary>
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.PrettyCard.LinkUrlTarget">
            <summary>
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.PrettyCard.LinkUrl">
            <summary>
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.PrettyCard.Title">
            <summary>
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.PrettyCard.Button">
            <summary>
            </summary>
        </member>
        <member name="P:VkNet.Model.Attachments.PrettyCard.Images">
            <summary>
            </summary>
        </member>
        <member name="M:VkNet.Model.Attachments.PrettyCard.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.Attachments.PrettyCard.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Attachments.PrettyCard">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.Attachments.PrettyCard" /> в <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns>Результат преобразования в <see cref="T:VkNet.Model.Attachments.PrettyCard" /></returns>
        </member>
        <member name="T:VkNet.Model.Market">
            <summary>
            Информация о продукте.
            </summary>
        </member>
        <member name="P:VkNet.Model.Market.Alias">
            <inheritdoc />
        </member>
        <member name="P:VkNet.Model.Market.Title">
            <summary>
            Название товара
            </summary>
        </member>
        <member name="P:VkNet.Model.Market.Description">
            <summary>
            Текст описания товара
            </summary>
        </member>
        <member name="P:VkNet.Model.Market.Price">
            <summary>
            Цена
            </summary>
        </member>
        <member name="P:VkNet.Model.Market.Category">
            <summary>
            Категория товара
            </summary>
        </member>
        <member name="P:VkNet.Model.Market.ThumbPhoto">
            <summary>
            URL изображения-обложки товара
            </summary>
        </member>
        <member name="P:VkNet.Model.Market.Date">
            <summary>
            Дата создания товара в формате Unixtime.
            </summary>
        </member>
        <member name="P:VkNet.Model.Market.Availability">
            <summary>
            Статус доступности товара
            </summary>
        </member>
        <member name="P:VkNet.Model.Market.Photos">
            <summary>
            Изображения товара
            </summary>
        </member>
        <member name="P:VkNet.Model.Market.CanComment">
            <summary>
            Возможность комментировать товар для текущего пользователя
            </summary>
        </member>
        <member name="P:VkNet.Model.Market.CanRepost">
            <summary>
            Возможность сделать репост товара для текущего пользователя
            </summary>
        </member>
        <member name="P:VkNet.Model.Market.Likes">
            <summary>
            Информация об отметках «Мне нравится»
            </summary>
        </member>
        <member name="P:VkNet.Model.Market.Url">
            <summary>
            Cсылка на товар во внешних ресурсах.
            </summary>
        </member>
        <member name="P:VkNet.Model.Market.ButtonTitle">
            <summary>
            Текст на кнопке товара.
            </summary>
        </member>
        <member name="M:VkNet.Model.Market.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.Message">
            <summary>
            Личное сообщение пользователя.
            См. описание http://vk.com/dev/message
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.Alias">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Model.Message.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            </summary>
            <param name="response"> </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.Message.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Message">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.Message" /> в <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns>Результат преобразования в <see cref="T:VkNet.Model.Message" /></returns>
        </member>
        <member name="P:VkNet.Model.Message.UserId">
            <summary>
            Идентификатор автора сообщения (для исходящего сообщения — идентификатор
            получателя).
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.FromId">
            <summary>
            Идентификатор автора сообщения.
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.PeerId">
            <summary>
            Идентификатор назначения.
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.Text">
            <summary>
            Текст сообщения.
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.Date">
            <summary>
            Дата отправки сообщения.
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.Payload">
            <summary>
            Сервисное поле для сообщений ботам (полезная нагрузка).
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.ReadState">
            <summary>
            Статус сообщения (не возвращается для пересланных сообщений).
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.Out">
            <summary>
            тип сообщения (0 — полученное, 1 — отправленное, не возвращается для
            пересланных сообщений).
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.Title">
            <summary>
            Заголовок сообщения или беседы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.Body">
            <summary>
            Текст сообщения.
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.Geo">
            <summary>
            Гео данные.
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.Attachments">
            <summary>
            Массив медиа-вложений (прикреплений).
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.ForwardedMessages">
            <summary>
            Массив пересланных сообщений (если есть).
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.Emoji">
            <summary>
            Содержатся ли в сообщении emoji-смайлы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.Important">
            <summary>
            Является ли сообщение важным.
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.Deleted">
            <summary>
            Удалено ли сообщение.
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.RandomId">
            <summary>
            идентификатор, используемый при отправке сообщения. Возвращается только для
            исходящих сообщений.
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.Ref">
            <summary>
            Произвольный параметр для работы с источниками переходов.
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.RefSource">
            <summary>
            Произвольный параметр для работы с источниками переходов.
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.ReplyMessage">
            <summary>
            Сообщение, в ответ на которое отправлено текущее.
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.ChatId">
            <summary>
            Идентификатор беседы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.ChatActive">
            <summary>
            Идентификаторы участников беседы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.PushSettings">
            <summary>
            Настройки уведомлений для беседы, если они есть. sound и disabled_until
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.UsersCount">
            <summary>
            Количество участников беседы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.AdminId">
            <summary>
            Идентификатор создателя беседы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.Action">
            <summary>
            поле передано, если это служебное сообщение
            </summary>
            <remarks>
            строка, может быть chat_photo_update или chat_photo_remove, а с версии 5.14 еще
            и chat_create, chat_title_update,
            chat_invite_user, chat_kick_user
            </remarks>
        </member>
        <member name="P:VkNet.Model.Message.ActionMid">
            <summary>
            Идентификатор пользователя (если больше 0) или email (если меньше 0), которого
            пригласили или исключили.
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.ActionEmail">
            <summary>
            email, который пригласили или исключили.
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.ActionText">
            <summary>
            Название беседы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.Photo50">
            <summary>
            <c> Uri </c> копии фотографии беседы шириной 50px.
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.Photo100">
            <summary>
            <c> Uri </c> копии фотографии беседы шириной 100px.
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.Photo200">
            <summary>
            <c> Uri </c> копии фотографии беседы шириной 200px.
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.Keyboard">
            <summary>
            Клавиатура, присланная ботом
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.ConversationMessageId">
            <summary>
            Идентификатор сообщения в беседе
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.Type">
            <summary>
            Тип сообщения (не возвращается для пересланных сообщений).
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.Unread">
            <summary>
            Содержит количество непрочитанных сообщений в текущем диалоге (если это
            значение было возвращено, иначе 0)
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.PhotoPreviews">
            <summary>
            Информация о ссылках на предпросмотр фотографий беседы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.InRead">
            <summary>
            Идентификатор последнего прочитанного сообщения текущим пользователем
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.OutRead">
            <summary>
            Идентификатор последнего прочитанного сообщения собеседником
            </summary>
        </member>
        <member name="P:VkNet.Model.Message.UpdateTime">
            <summary>
            </summary>
        </member>
        <member name="T:VkNet.Model.AudioAlbum">
            <summary>
            Информация об аудиоальбоме.
            </summary>
        </member>
        <member name="P:VkNet.Model.AudioAlbum.Id">
            <summary>
            Идентификатор альбома.
            </summary>
        </member>
        <member name="P:VkNet.Model.AudioAlbum.OwnerId">
            <summary>
            Идентификатор владельца альбома (пользователь или сообщество).
            </summary>
        </member>
        <member name="P:VkNet.Model.AudioAlbum.Title">
            <summary>
            Название альбома.
            </summary>
        </member>
        <member name="P:VkNet.Model.AudioAlbum.Cover">
            <summary>
            Обложка альбома.
            </summary>
        </member>
        <member name="P:VkNet.Model.AudioAlbum.AccessKey">
            <summary>
            Ключ доступа.
            </summary>
        </member>
        <member name="M:VkNet.Model.AudioAlbum.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.AudioArtist">
            <summary>
            Информация об артисте/группе.
            </summary>
        </member>
        <member name="P:VkNet.Model.AudioArtist.Id">
            <summary>
            Идентификатор артиста/группы.
            </summary>
        </member>
        <member name="P:VkNet.Model.AudioArtist.Name">
            <summary>
            Имя артиста/название группы.
            </summary>
        </member>
        <member name="P:VkNet.Model.AudioArtist.Domain">
            <summary>
            Неизвестно (получено экспериментально).
            </summary>
        </member>
        <member name="M:VkNet.Model.AudioArtist.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.AudioArtist.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.AudioArtist">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.AudioArtist" /> в
            <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns>
            Результат преобразования в <see cref="T:VkNet.Model.AudioArtist" />
            </returns>
        </member>
        <member name="T:VkNet.Model.AudioCover">
            <summary>
            Обложка аудиоальбома.
            </summary>
        </member>
        <member name="P:VkNet.Model.AudioCover.Photo34">
            <summary>
            Uri обложки с максимальным размером 34x34.
            </summary>
        </member>
        <member name="P:VkNet.Model.AudioCover.Photo68">
            <summary>
            Uri обложки с максимальным размером 68x68.
            </summary>
        </member>
        <member name="P:VkNet.Model.AudioCover.Photo135">
            <summary>
            Uri обложки с максимальным размером 135x135.
            </summary>
        </member>
        <member name="P:VkNet.Model.AudioCover.Photo270">
            <summary>
            Uri обложки с максимальным размером 270x270.
            </summary>
        </member>
        <member name="P:VkNet.Model.AudioCover.Photo300">
            <summary>
            Uri обложки с максимальным размером 300x300.
            </summary>
        </member>
        <member name="P:VkNet.Model.AudioCover.Photo600">
            <summary>
            Uri обложки с максимальным размером 600x600.
            </summary>
        </member>
        <member name="P:VkNet.Model.AudioCover.Width">
            <summary>
            Ширина изображения обложки.
            </summary>
        </member>
        <member name="P:VkNet.Model.AudioCover.Height">
            <summary>
            Высота изображения обложки.
            </summary>
        </member>
        <member name="M:VkNet.Model.AudioCover.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.AudioCover.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.AudioCover">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.AudioCover" /> в
            <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> Результат преобразования в <see cref="T:VkNet.Model.AudioCover" /> </returns>
        </member>
        <member name="T:VkNet.Model.AudioPlaylistFollower">
            <summary>
            Подписчик плейлиста.
            </summary>
        </member>
        <member name="P:VkNet.Model.AudioPlaylistFollower.OwnerId">
            <summary>
            Идентификатор владельца.
            </summary>
        </member>
        <member name="P:VkNet.Model.AudioPlaylistFollower.PlaylistId">
            <summary>
            Идентификатор плейлиста.
            </summary>
        </member>
        <member name="M:VkNet.Model.AudioPlaylistFollower.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.AudioPlaylistFollower.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.AudioPlaylistFollower">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.AudioPlaylistFollower" /> в
            <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> Результат преобразования в <see cref="T:VkNet.Model.AudioPlaylistFollower" /> </returns>
        </member>
        <member name="T:VkNet.Model.AudioPlaylistGenre">
            <summary>
            Жанр плейлиста.
            </summary>
        </member>
        <member name="P:VkNet.Model.AudioPlaylistGenre.Id">
            <summary>
            Идентификатор жанра.
            </summary>
        </member>
        <member name="P:VkNet.Model.AudioPlaylistGenre.Name">
            <summary>
            Название жанра.
            </summary>
        </member>
        <member name="M:VkNet.Model.AudioPlaylistGenre.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.AudioPlaylistGenre.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.AudioPlaylistGenre">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.AudioPlaylistGenre" /> в
            <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> Результат преобразования в <see cref="T:VkNet.Model.AudioPlaylistGenre" /> </returns>
        </member>
        <member name="T:VkNet.Model.AudioPlaylistOriginal">
            <summary>
            Неизвестно.
            </summary>
        </member>
        <member name="P:VkNet.Model.AudioPlaylistOriginal.OwnerId">
            <summary>
            Идентификатор владельца.
            </summary>
        </member>
        <member name="P:VkNet.Model.AudioPlaylistOriginal.PlaylistId">
            <summary>
            Идентификатор плейлиста.
            </summary>
        </member>
        <member name="P:VkNet.Model.AudioPlaylistOriginal.AccessKey">
            <summary>
            Ключ доступа.
            </summary>
        </member>
        <member name="M:VkNet.Model.AudioPlaylistOriginal.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.AudioPlaylistOriginal.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.AudioPlaylistOriginal">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.AudioPlaylistOriginal" /> в
            <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> Результат преобразования в <see cref="T:VkNet.Model.AudioPlaylistOriginal" /> </returns>
        </member>
        <member name="T:VkNet.Model.AuthConfirmResult">
            <summary>
            Результат метода auth.confirm
            </summary>
        </member>
        <member name="P:VkNet.Model.AuthConfirmResult.Success">
            <summary>
            Успешно.
            </summary>
        </member>
        <member name="P:VkNet.Model.AuthConfirmResult.UserId">
            <summary>
            Идентификатор пользователя.
            </summary>
        </member>
        <member name="M:VkNet.Model.AuthConfirmResult.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.AuthorizationResult">
            <summary>
            Результат авторизаци
            </summary>
        </member>
        <member name="P:VkNet.Model.AuthorizationResult.AccessToken">
            <summary>
            Access Token
            </summary>
        </member>
        <member name="P:VkNet.Model.AuthorizationResult.ExpiresIn">
            <summary>
            Время истечения токена
            </summary>
        </member>
        <member name="P:VkNet.Model.AuthorizationResult.UserId">
            <summary>
            Идентификатор пользователя
            </summary>
        </member>
        <member name="P:VkNet.Model.AuthorizationResult.State">
            <summary>
            Произвольная строка, которая будет возвращена вместе с результатом авторизации.
            </summary>
        </member>
        <member name="T:VkNet.Model.BanInfo">
            <summary>
            Информация о забанненом (добавленном в черный список) пользователе сообщества.
            </summary>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/groups.getBanned
            </remarks>
        </member>
        <member name="P:VkNet.Model.BanInfo.AdminId">
            <summary>
            Идентификатор администратора, который добавил пользователя в черный список.
            </summary>
        </member>
        <member name="P:VkNet.Model.BanInfo.Date">
            <summary>
            Дата добавления пользователя в черный список.
            </summary>
        </member>
        <member name="P:VkNet.Model.BanInfo.Comment">
            <summary>
            Текст комментария к бану.
            </summary>
        </member>
        <member name="P:VkNet.Model.BanInfo.EndDate">
            <summary>
            Дата, когда пользователь будет разбанен.
            </summary>
        </member>
        <member name="P:VkNet.Model.BanInfo.Reason">
            <summary>
            Причина добавления пользователя в черный список.
            </summary>
        </member>
        <member name="M:VkNet.Model.BanInfo.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.BotsLongPollEvents">
            <summary>
            Настройки Bots Longpoll.
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollEvents.MessageNew">
            <summary>
            Уведомления о новых сообщениях (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollEvents.MessageReply">
            <summary>
            Уведомления об исходящем сообщении (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollEvents.MessageAllow">
            <summary>
            Уведомления о подписке на сообщения  (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollEvents.MessageDeny">
            <summary>
            Уведомления о запрете на сообщения (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollEvents.MessageEdit">
            <summary>
            Уведомления о редактировании сообщения (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollEvents.MessageTypingState">
            <summary>
            Флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollEvents.PhotoNew">
            <summary>
            Уведомления о добавлении новой фотографии (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollEvents.AudioNew">
            <summary>
            Уведомления о добавлении новой аудиозаписи (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollEvents.VideoNew">
            <summary>
            Уведомления о добавлении новой видеозаписи (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollEvents.WallReplyNew">
            <summary>
            Уведомления о добавлении нового комментария на стене (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollEvents.WallReplyEdit">
            <summary>
            Уведомления о редактировании комментария на стене (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollEvents.WallReplyDelete">
            <summary>
            Уведомления об удалении комментария на стене (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollEvents.WallReplyRestore">
            <summary>
            Уведомления о восстановлении комментария на стене (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollEvents.WallPostNew">
            <summary>
            Уведомления о новой записи на стене (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollEvents.WallRepost">
            <summary>
            Уведомления о репосте записи (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollEvents.BoardPostNew">
            <summary>
            Уведомления о создании комментария в обсуждении (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollEvents.BoardPostEdit">
            <summary>
            Уведомления о редактировании комментария в обсуждении (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollEvents.BoardPostRestore">
            <summary>
            Уведомление о восстановлении комментария в обсуждении (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollEvents.BoardPostDelete">
            <summary>
            Уведомления об удалении комментария в обсуждении (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollEvents.PhotoCommentNew">
            <summary>
            Уведомления о добавлении нового комментария к фото (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollEvents.PhotoCommentEdit">
            <summary>
            Уведомления о редактировании комментария к фото (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollEvents.PhotoCommentDelete">
            <summary>
            Уведомления об удалении комментария к фото (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollEvents.PhotoCommentRestore">
            <summary>
            Уведомления о восстановлении комментария к фото (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollEvents.VideoCommentNew">
            <summary>
            Уведомления о добавлении нового комментария к видео (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollEvents.VideoCommentEdit">
            <summary>
            Уведомления о редактировании комментария к видео (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollEvents.VideoCommentDelete">
            <summary>
            Уведомления об удалении комментария к видео (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollEvents.VideoCommentRestore">
            <summary>
            Уведомления о восстановлении комментария к видео (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollEvents.MarketCommentNew">
            <summary>
            Уведомления о добавлении нового комментария к товару (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollEvents.MarketCommentEdit">
            <summary>
            Уведомления о редактировании комментария к товару (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollEvents.MarketCommentDelete">
            <summary>
            Уведомления об удалении комментария к товару (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollEvents.MarketCommentRestore">
            <summary>
            Уведомления о восстановлении комментария к товару (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollEvents.PollVoteNew">
            <summary>
            Уведомления о новом голосе в публичных опросах (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollEvents.GroupJoin">
            <summary>
            Уведомления о вступлении в сообщество (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollEvents.GroupLeave">
            <summary>
            Уведомления о выходе из сообщества (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollEvents.UserBlock">
            <summary>
            Уведомления об внесении пользователя в чёрный список (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollEvents.UserUnblock">
            <summary>
            Уведомления об исключении пользователя из чёрного списка (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollEvents.GroupChangeSettings">
            <summary>
            Уведомления об изменении настроек (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollEvents.GroupChangePhoto">
            <summary>
            Уведомления об изменении главной фотографии (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollEvents.GroupOfficersEdit">
            <summary>
            Уведомления об изменении руководства (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="T:VkNet.Model.BotsLongPollHistoryResponse">
            <summary>
            Обновление в событиях группы
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollHistoryResponse.Ts">
            <summary>
            Номер последнего события, начиная с которого нужно получать данные;
            </summary>
        </member>
        <member name="P:VkNet.Model.BotsLongPollHistoryResponse.Updates">
            <summary>
            Обновления группы
            </summary>
        </member>
        <member name="M:VkNet.Model.BotsLongPollHistoryResponse.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.BotsLongPollHistoryResponse.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.BotsLongPollHistoryResponse">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="T:VkNet.Model.Button">
            <summary>
            Кнопка.
            </summary>
        </member>
        <member name="P:VkNet.Model.Button.Title">
            <summary>
            Название кнопки.
            </summary>
        </member>
        <member name="P:VkNet.Model.Button.Uri">
            <summary>
            Ссылка на которую ведет кнопка.
            </summary>
        </member>
        <member name="P:VkNet.Model.Button.Action">
            <summary>
            </summary>
        </member>
        <member name="M:VkNet.Model.Button.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.CallbackServerItem">
            <summary>
            Данные о сервере
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackServerItem.Id">
            <summary>
            Идентификатор сервера
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackServerItem.Title">
            <summary>
            Название сервера
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackServerItem.CreatorId">
            <summary>
            Идентификатор пользователя, который добавил сервер (может содержать 0)
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackServerItem.Url">
            <summary>
            URL сервера
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackServerItem.SecretKey">
            <summary>
            Секретный ключ
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackServerItem.Status">
            <summary>
            Статус сервера
            </summary>
        </member>
        <member name="M:VkNet.Model.CallbackServerItem.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.CallbackSettings">
            <summary>
            Настройки уведомлений в формате «название события» : «статус»
            ( 0 — уведомления о событии выключены, 1 — уведомления о событии включены).
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackSettings.MessageNew">
            <summary>
            новое сообщение
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackSettings.MessageReply">
            <summary>
            новое исходящее сообщение
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackSettings.MessageEdit">
            <summary>
            редактирование сообщения
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackSettings.MessageAllow">
            <summary>
            новая подписка на сообщения
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackSettings.MessageDeny">
            <summary>
            новый запрет сообщений
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackSettings.PhotoNew">
            <summary>
            добавление новой фотографии
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackSettings.AudioNew">
            <summary>
            добавление новой аудиозаписи
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackSettings.VideoNew">
            <summary>
            добавление новой видеозаписи
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackSettings.WallReplyNew">
            <summary>
            добавление нового комментария на стене
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackSettings.WallReplyEdit">
            <summary>
            редактирование комментария на стене
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackSettings.WallReplyRestore">
            <summary>
            восстановление комментария на стене
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackSettings.WallReplyDelete">
            <summary>
            удаление комментария на стене
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackSettings.WallPostNew">
            <summary>
            добавление новой записи на стене
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackSettings.WallRepost">
            <summary>
            новый репост записи на стене
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackSettings.BoardPostNew">
            <summary>
            добавление нового комментария в обсуждении
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackSettings.BoardPostEdit">
            <summary>
            редактирование комментария в обсуждении
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackSettings.BoardPostDelete">
            <summary>
            удаление комментария в обсуждении
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackSettings.BoardPostRestore">
            <summary>
            восстановление комментария в обсуждении
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackSettings.PhotoCommentNew">
            <summary>
            добавление нового комментария к фото
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackSettings.PhotoCommentEdit">
            <summary>
            редактирование комментария к фото
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackSettings.PhotoCommentDelete">
            <summary>
            удаление комментария к фото
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackSettings.PhotoCommentRestore">
            <summary>
            восстановление комментария к фото
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackSettings.VideoCommentNew">
            <summary>
            добавление нового комментария к видео
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackSettings.VideoCommentEdit">
            <summary>
            редактирование комментария к видео
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackSettings.VideoCommentDelete">
            <summary>
            удаление комментария к видео
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackSettings.VideoCommentRestore">
            <summary>
            восстановление комментария к видео
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackSettings.MarketCommentNew">
            <summary>
            добавление нового комментария к товару
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackSettings.MarketCommentEdit">
            <summary>
            редактирование комментария к товару
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackSettings.MarketCommentDelete">
            <summary>
            удаление комментария к товару
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackSettings.MarketCommentRestore">
            <summary>
            восстановление удалённого комментария к товару
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackSettings.PollVoteNew">
            <summary>
            новый голос в публичном опросе
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackSettings.GroupJoin">
            <summary>
            вступление в сообщество
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackSettings.GroupLeave">
            <summary>
            выход участника из сообщества
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackSettings.UserBlock">
            <summary>
            занесение пользователя в черный список
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackSettings.UserUnblock">
            <summary>
            удаление пользователя из черного списка
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackSettings.GroupChangeSettings">
            <summary>
            изменение настроек сообщества
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackSettings.GroupChangePhoto">
            <summary>
            изменение главной фотографии
            </summary>
        </member>
        <member name="P:VkNet.Model.CallbackSettings.GroupOfficersEdit">
            <summary>
            изменение руководства сообщества
            </summary>
        </member>
        <member name="M:VkNet.Model.CallbackSettings.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.Career">
            <summary>
            Информация о карьере пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.Career.GroupId">
            <summary>
            Идентификатор сообщества (если доступно, иначе company).
            </summary>
        </member>
        <member name="P:VkNet.Model.Career.Company">
            <summary>
            Название организации (если доступно, иначе group_id).
            </summary>
        </member>
        <member name="P:VkNet.Model.Career.CountryId">
            <summary>
            Идентификатор страны.
            </summary>
        </member>
        <member name="P:VkNet.Model.Career.CityId">
            <summary>
            Идентификатор города (если доступно, иначе city_name).
            </summary>
        </member>
        <member name="P:VkNet.Model.Career.CityName">
            <summary>
            Название города (если доступно, иначе city_id).
            </summary>
        </member>
        <member name="P:VkNet.Model.Career.From">
            <summary>
            Год начала работы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Career.Until">
            <summary>
            Год окончания работы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Career.Position">
            <summary>
            Должность.
            </summary>
        </member>
        <member name="M:VkNet.Model.Career.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.CategoryGroup">
            <summary>
            Категории для каталога сообществ
            </summary>
        </member>
        <member name="P:VkNet.Model.CategoryGroup.Name">
            <summary>
            Название категории.
            </summary>
        </member>
        <member name="P:VkNet.Model.CategoryGroup.Subcategories">
            <summary>
            Gets or sets the subcategories.
            </summary>
        </member>
        <member name="P:VkNet.Model.CategoryGroup.PageCount">
            <summary>
            Количество сообществ в категории.
            </summary>
        </member>
        <member name="P:VkNet.Model.CategoryGroup.PagePreviews">
            <summary>
            Массив объектов сообществ для предпросмотра.
            </summary>
        </member>
        <member name="P:VkNet.Model.CategoryGroup.Id">
            <summary>
            Идентификатор.
            </summary>
        </member>
        <member name="M:VkNet.Model.CategoryGroup.VkNet#Utils#IVkModel#FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Преобразовать из JSON
            </summary>
            <param name="response"> Ответ от сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.CategoryGroup.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.Chair">
            <summary>
            Кафедра
            </summary>
        </member>
        <member name="P:VkNet.Model.Chair.Id">
            <summary>
            Идентификатор факультета
            </summary>
        </member>
        <member name="P:VkNet.Model.Chair.Title">
            <summary>
            Название факультета
            </summary>
        </member>
        <member name="M:VkNet.Model.Chair.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.ChangeNameRequest">
            <summary>
            Информация о заявке на смену имени.
            </summary>
        </member>
        <member name="P:VkNet.Model.ChangeNameRequest.Id">
            <summary>
            Идентификатор заявки, необходимый для её отмены (только если
            ChangeNameRequest.Status
            </summary>
        </member>
        <member name="P:VkNet.Model.ChangeNameRequest.Status">
            <summary>
            Статус заявки
            </summary>
        </member>
        <member name="P:VkNet.Model.ChangeNameRequest.RepeatDate">
            <summary>
            Дата, после которой возможна повторная подача заявки.
            </summary>
        </member>
        <member name="P:VkNet.Model.ChangeNameRequest.FirstName">
            <summary>
            Имя пользователя, указанное в заявке
            </summary>
        </member>
        <member name="P:VkNet.Model.ChangeNameRequest.LastName">
            <summary>
            Фамилия пользователя, указанная в заявке.
            </summary>
        </member>
        <member name="M:VkNet.Model.ChangeNameRequest.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.Chat">
            <summary>
            Информация о беседе (мультидиалоге, чате).
            См. описание http://vk.com/dev/chat_object
            </summary>
        </member>
        <member name="P:VkNet.Model.Chat.Id">
            <summary>
            Идентификатор беседы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Chat.Type">
            <summary>
            Тип диалога.
            </summary>
        </member>
        <member name="P:VkNet.Model.Chat.Title">
            <summary>
            Название беседы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Chat.AdminId">
            <summary>
            Идентификатор пользователя, который является создателем беседы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Chat.Users">
            <summary>
            Список идентификаторов участников беседы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Chat.PushSettings">
            <summary>
            Настройки оповещений для диалога..
            </summary>
        </member>
        <member name="P:VkNet.Model.Chat.Photo50">
            <summary>
            URL изображения-обложки чата шириной 50 px (если доступно).
            </summary>
        </member>
        <member name="P:VkNet.Model.Chat.Photo100">
            <summary>
            URL изображения-обложки чата шириной 100 px (если доступно).
            </summary>
        </member>
        <member name="P:VkNet.Model.Chat.Photo200">
            <summary>
            URL изображения-обложки чата шириной 200 px (если доступно).
            </summary>
        </member>
        <member name="P:VkNet.Model.Chat.Left">
            <summary>
            флаг, указывающий, что пользователь покинул беседу. Всегда содержит 1.
            </summary>
        </member>
        <member name="P:VkNet.Model.Chat.Kicked">
            <summary>
            флаг, указывающий, что пользователь был исключен из беседы. Всегда содержит 1.
            </summary>
        </member>
        <member name="M:VkNet.Model.Chat.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.ChatPhoto">
            <summary>
            Обложка чата
            </summary>
        </member>
        <member name="P:VkNet.Model.ChatPhoto.Photo50">
            <summary>
            URL копии фотографии с шириной 50 px
            </summary>
        </member>
        <member name="P:VkNet.Model.ChatPhoto.Photo100">
            <summary>
            URL копии фотографии с шириной 100 px
            </summary>
        </member>
        <member name="P:VkNet.Model.ChatPhoto.Photo200">
            <summary>
            URL копии фотографии с шириной 200 px
            </summary>
        </member>
        <member name="M:VkNet.Model.ChatPhoto.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.ChatPreview">
            <summary>
            Превью чата
            </summary>
        </member>
        <member name="P:VkNet.Model.ChatPreview.Preview">
            <summary>
            Информация о чате.
            </summary>
        </member>
        <member name="P:VkNet.Model.ChatPreview.Profiles">
            <summary>
            Массив объектов пользователей
            </summary>
        </member>
        <member name="P:VkNet.Model.ChatPreview.Groups">
            <summary>
            Массив объектов сообществ
            </summary>
        </member>
        <member name="P:VkNet.Model.ChatPreview.Emails">
            <summary>
            Массив объектов, описывающих e-mail.
            </summary>
        </member>
        <member name="M:VkNet.Model.ChatPreview.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.ChatPreviewField">
            <summary>
            Информация о чате.
            </summary>
        </member>
        <member name="P:VkNet.Model.ChatPreviewField.AdminId">
            <summary>
            Идентификатор создателя чата
            </summary>
        </member>
        <member name="P:VkNet.Model.ChatPreviewField.Members">
            <summary>
            Массив идентификаторов участников чата
            </summary>
        </member>
        <member name="P:VkNet.Model.ChatPreviewField.Title">
            <summary>
            Название чата
            </summary>
        </member>
        <member name="P:VkNet.Model.ChatPreviewField.Photo">
            <summary>
            Обложка чата
            </summary>
        </member>
        <member name="P:VkNet.Model.ChatPreviewField.LocalId">
            <summary>
            Идентификатор чата для текущего пользователя
            </summary>
        </member>
        <member name="M:VkNet.Model.ChatPreviewField.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.ChatPushSettings">
            <summary>
            Настройки уведомлений для беседы
            </summary>
        </member>
        <member name="P:VkNet.Model.ChatPushSettings.PeerId">
            <summary>
            Идентификатор собеседника.
            </summary>
        </member>
        <member name="P:VkNet.Model.ChatPushSettings.Sound">
            <summary>
            Состояние звукового оповещения
            </summary>
        </member>
        <member name="P:VkNet.Model.ChatPushSettings.DisabledUntil">
            <summary>
            Неизвестный параметр
            </summary>
        </member>
        <member name="M:VkNet.Model.ChatPushSettings.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.Checked">
            <summary>
            Доступность рекламной акции пользователю.
            </summary>
        </member>
        <member name="P:VkNet.Model.Checked.Result">
            <summary>
            Information whether user can start the lead
            </summary>
        </member>
        <member name="P:VkNet.Model.Checked.StartLink">
            <summary>
            URL user should open to start the lead
            </summary>
        </member>
        <member name="P:VkNet.Model.Checked.Sid">
            <summary>
            Session ID
            </summary>
        </member>
        <member name="P:VkNet.Model.Checked.Reason">
            <summary>
            Reason why user can't start the lead
            </summary>
        </member>
        <member name="T:VkNet.Model.Checkin">
            <summary>
            Отметка пользователя
            </summary>
        </member>
        <member name="P:VkNet.Model.Checkin.Id">
            <summary>
            Идентификатор
            </summary>
        </member>
        <member name="P:VkNet.Model.Checkin.UserId">
            <summary>
            Идентификатор отметившегося пользователя
            </summary>
        </member>
        <member name="P:VkNet.Model.Checkin.Date">
            <summary>
            Дата добавления отметки в формате unixtime;
            </summary>
        </member>
        <member name="P:VkNet.Model.Checkin.Latitude">
            <summary>
            Географическая широта, заданная в градусах (от -90 до 90);
            </summary>
        </member>
        <member name="P:VkNet.Model.Checkin.Longitude">
            <summary>
            Географическая долгота, заданная в градусах (от -180 до 180);
            </summary>
        </member>
        <member name="P:VkNet.Model.Checkin.PlaceId">
            <summary>
            Идентификатор места
            </summary>
        </member>
        <member name="P:VkNet.Model.Checkin.Text">
            <summary>
            Текст сопроводительного сообщения;
            </summary>
        </member>
        <member name="P:VkNet.Model.Checkin.Distance">
            <summary>
            Расстояние от места до заданной точки.
            </summary>
        </member>
        <member name="P:VkNet.Model.Checkin.PlaceTitle">
            <summary>
            Наименование места
            </summary>
        </member>
        <member name="P:VkNet.Model.Checkin.PlaceCountry">
            <summary>
            Идентификатор страны
            </summary>
        </member>
        <member name="P:VkNet.Model.Checkin.PlaceCity">
            <summary>
            Идентификатор города
            </summary>
        </member>
        <member name="P:VkNet.Model.Checkin.PlaceAddress">
            <summary>
            Адрес
            </summary>
        </member>
        <member name="P:VkNet.Model.Checkin.PlaceType">
            <summary>
            Тип места;
            </summary>
        </member>
        <member name="P:VkNet.Model.Checkin.Icon">
            <summary>
            URL адрес к иконке
            </summary>
        </member>
        <member name="T:VkNet.Model.CitiesStats">
            <summary>
            Статистика по городу
            </summary>
        </member>
        <member name="P:VkNet.Model.CitiesStats.CityId">
            <summary>
            идентификатор города;
            </summary>
        </member>
        <member name="P:VkNet.Model.CitiesStats.Views">
            <summary>
            число переходов из этого города
            </summary>
        </member>
        <member name="T:VkNet.Model.City">
            <summary>
            Город.
            </summary>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/database.getCities
            </remarks>
        </member>
        <member name="P:VkNet.Model.City.Id">
            <summary>
            Идентификатор города.
            </summary>
        </member>
        <member name="P:VkNet.Model.City.Title">
            <summary>
            Название города.
            </summary>
        </member>
        <member name="P:VkNet.Model.City.Area">
            <summary>
            Район.
            </summary>
        </member>
        <member name="P:VkNet.Model.City.Region">
            <summary>
            Область.
            </summary>
        </member>
        <member name="P:VkNet.Model.City.Important">
            <summary>
            Является ли город основным.
            </summary>
        </member>
        <member name="M:VkNet.Model.City.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.Comment">
            <summary>
            Комментарий к записи.
            См. описание <see href="http://vk.com/devcomment_object" />.
            </summary>
        </member>
        <member name="P:VkNet.Model.Comment.Id">
            <summary>
            Идентификатор комментария.
            </summary>
        </member>
        <member name="P:VkNet.Model.Comment.FromId">
            <summary>
            Идентификатор автора комментария.
            </summary>
        </member>
        <member name="P:VkNet.Model.Comment.PostId">
            <summary>
            Идентификатор автора комментария.
            </summary>
        </member>
        <member name="P:VkNet.Model.Comment.OwnerId">
            <summary>
            Идентификатор автора комментария.
            </summary>
        </member>
        <member name="P:VkNet.Model.Comment.ParentsStack">
            <summary>
            Идентификатор автора комментария.
            </summary>
        </member>
        <member name="P:VkNet.Model.Comment.thread">
            <summary>
            Идентификатор автора комментария.
            </summary>
        </member>
        <member name="P:VkNet.Model.Comment.Date">
            <summary>
            Дата и время создания комментария.
            </summary>
        </member>
        <member name="P:VkNet.Model.Comment.Text">
            <summary>
            Текст комментария.
            </summary>
        </member>
        <member name="P:VkNet.Model.Comment.ReplyToUser">
            <summary>
            Идентификатор пользователя или сообщества, в ответ которому оставлен текущий
            комментарий (если применимо).
            </summary>
        </member>
        <member name="P:VkNet.Model.Comment.ReplyToComment">
            <summary>
            Идентификатор комментария, в ответ на который оставлен текущий комментарий
            (если применимо).
            </summary>
        </member>
        <member name="P:VkNet.Model.Comment.Attachments">
            <summary>
            Объект, содержащий информацию о медиавложениях в комментарии. См. описание
            формата медиавложений.
            </summary>
        </member>
        <member name="P:VkNet.Model.Comment.Attachment">
            <summary>
            Первое приложение к комментарию.
            </summary>
        </member>
        <member name="P:VkNet.Model.Comment.Likes">
            <summary>
            Информация о числе людей, которым понравился данный комментарий.
            </summary>
        </member>
        <member name="M:VkNet.Model.Comment.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.Comment.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Comment">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.Comment" /> в <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns>Результат преобразования в <see cref="T:VkNet.Model.Comment" /></returns>
        </member>
        <member name="T:VkNet.Model.CommentBoard">
            <summary>
            Комментарий в обсуждении
            </summary>
        </member>
        <member name="P:VkNet.Model.CommentBoard.Id">
            <summary>
            Идентификатор комментария.
            </summary>
        </member>
        <member name="P:VkNet.Model.CommentBoard.FromId">
            <summary>
            Идентификатор автора комментария.
            </summary>
        </member>
        <member name="P:VkNet.Model.CommentBoard.Date">
            <summary>
            Дата создания (в формате Unixtime).
            </summary>
        </member>
        <member name="P:VkNet.Model.CommentBoard.Text">
            <summary>
            Текст комментария.
            </summary>
        </member>
        <member name="P:VkNet.Model.CommentBoard.Attachments">
            <summary>
            Медиавложения комментария (фотографии, ссылки и т.п.).
            </summary>
        </member>
        <member name="P:VkNet.Model.CommentBoard.Likes">
            <summary>
            Информация об отметках «Мне нравится» текущего комментария (если был задан
            параметр need_likes)
            </summary>
        </member>
        <member name="M:VkNet.Model.CommentBoard.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.CommentBoard.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.CommentBoard">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="T:VkNet.Model.CommentNote">
            <summary>
             Комментарий к заметке
            </summary>
        </member>
        <member name="P:VkNet.Model.CommentNote.Id">
            <summary>
            идентификатор комментария
            </summary>
        </member>
        <member name="P:VkNet.Model.CommentNote.UserId">
            <summary>
            идентификатор автора комментария
            </summary>
        </member>
        <member name="P:VkNet.Model.CommentNote.NoteId">
            <summary>
            идентификатор заметки
            </summary>
        </member>
        <member name="P:VkNet.Model.CommentNote.OwnerId">
            <summary>
            идентификатор владельца заметки
            </summary>
        </member>
        <member name="P:VkNet.Model.CommentNote.Date">
            <summary>
            Дата добавления комментария в формате unixtime
            </summary>
        </member>
        <member name="P:VkNet.Model.CommentNote.Message">
            <summary>
            текст комментария
            </summary>
        </member>
        <member name="P:VkNet.Model.CommentNote.ReplyTo">
            <summary>
            идентификатор пользователя, в ответ на комментарий которого
            был оставлен текущий комментарий (если доступно). 
            </summary>
        </member>
        <member name="M:VkNet.Model.CommentNote.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response">Ответ сервера. </param>
            <returns>Результат преобразования.</returns>
        </member>
        <member name="M:VkNet.Model.CommentNote.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.CommentNote">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="T:VkNet.Model.Comments">
            <summary>
            Информация о количестве комментариев к записи.
            См. описание http://vk.com/dev/post
            </summary>
        </member>
        <member name="P:VkNet.Model.Comments.Count">
            <summary>
            Количество комментариев к записи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Comments.CanPost">
            <summary>
            Признак может ли текущий пользователь добавить комментарий к записи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Comments.GroupsCanPost">
            <summary>
            Информация о том, могут ли сообщества комментировать запись..
            </summary>
        </member>
        <member name="P:VkNet.Model.Comments.CanClose">
             <summary>
            
             </summary>
        </member>
        <member name="P:VkNet.Model.Comments.CanOpen">
             <summary>
            
             </summary>
        </member>
        <member name="M:VkNet.Model.Comments.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из JSON.
            </summary>
            <param name="response"> Ответ от vk. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.CommentThread">
            <summary>
            Информация о вложенной ветке комментариев
            </summary>
        </member>
        <member name="P:VkNet.Model.CommentThread.Count">
            <summary>
            Количество комментариев в ветке
            </summary>
        </member>
        <member name="P:VkNet.Model.CommentThread.Items">
            <summary>
            Массив объектов комментариев к записи
            </summary>
            <remarks>
            Только для метода wall.getComments
            </remarks>
        </member>
        <member name="P:VkNet.Model.CommentThread.CanPost">
            <summary>
            Может ли текущий пользователь оставлять комментарии в этой ветке
            </summary>
        </member>
        <member name="P:VkNet.Model.CommentThread.ShowReplyButton">
            <summary>
            Нужно ли отображать кнопку «ответить» в ветке
            </summary>
        </member>
        <member name="P:VkNet.Model.CommentThread.GroupsCanPost">
            <summary>
            Могут ли сообщества оставлять комментарии в ветке.
            </summary>
        </member>
        <member name="M:VkNet.Model.CommentThread.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.CommentThread.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.CommentThread">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.CommentThread" /> в <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns>Результат преобразования в <see cref="T:VkNet.Model.CommentThread" /></returns>
        </member>
        <member name="T:VkNet.Model.Connections">
            <summary>
            Информация о социальных контактах пользователя.
            См. описание
            <see href="https://vk.com/dev/objects/user" />
            Экспериментально установлено, что поля находятся непосредственно в полях
            объекта User.
            </summary>
        </member>
        <member name="P:VkNet.Model.Connections.Skype">
            <summary>
            Логин в Skype.
            </summary>
        </member>
        <member name="P:VkNet.Model.Connections.Facebook">
            <summary>
            Идентификатор акаунта в Facebook.
            </summary>
        </member>
        <member name="P:VkNet.Model.Connections.FacebookName">
            <summary>
            Имя и фамилия в facebook.
            </summary>
        </member>
        <member name="P:VkNet.Model.Connections.Twitter">
            <summary>
            Акаунт в twitter.
            </summary>
        </member>
        <member name="P:VkNet.Model.Connections.Instagram">
            <summary>
            Акаунт в Instagram.
            </summary>
        </member>
        <member name="M:VkNet.Model.Connections.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.Contact">
            <summary>
            Контакты группы
            </summary>
        </member>
        <member name="P:VkNet.Model.Contact.UserId">
            <summary>
            Идентификатор пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.Contact.Description">
            <summary>
            Должность.
            </summary>
        </member>
        <member name="P:VkNet.Model.Contact.Email">
            <summary>
            Электронная почта.
            </summary>
        </member>
        <member name="P:VkNet.Model.Contact.Phone">
            <summary>
            Телефон.
            </summary>
        </member>
        <member name="M:VkNet.Model.Contact.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.Contacts">
            <summary>
            Информация о телефонных номерах пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.Contacts.MobilePhone">
            <summary>
            Номер мобильного телефона пользователя (только для Standalone-приложений).
            </summary>
        </member>
        <member name="P:VkNet.Model.Contacts.HomePhone">
            <summary>
            Дополнительный номер телефона пользователя.
            </summary>
        </member>
        <member name="M:VkNet.Model.Contacts.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.Conversation">
            <summary>
            Беседа
            </summary>
        </member>
        <member name="P:VkNet.Model.Conversation.Peer">
            <summary>
            Информация о собеседнике.
            </summary>
        </member>
        <member name="P:VkNet.Model.Conversation.InRead">
            <summary>
            Идентификатор последнего прочтенного входящего сообщения.
            </summary>
        </member>
        <member name="P:VkNet.Model.Conversation.OutRead">
            <summary>
            Идентификатор последнего прочтенного исходящего сообщения.
            </summary>
        </member>
        <member name="P:VkNet.Model.Conversation.UnreadCount">
            <summary>
            Число непрочитанных сообщений.
            </summary>
        </member>
        <member name="P:VkNet.Model.Conversation.Important">
            <summary>
            true, если диалог помечен как важный (только для сообщений сообществ).
            </summary>
        </member>
        <member name="P:VkNet.Model.Conversation.Unanswered">
            <summary>
            true, если диалог помечен как неотвеченный (только для сообщений сообществ).
            </summary>
        </member>
        <member name="P:VkNet.Model.Conversation.PushSettings">
            <summary>
            Настройки Push-уведомлений.
            </summary>
        </member>
        <member name="P:VkNet.Model.Conversation.CanWrite">
            <summary>
            Информация о том, может ли пользователь писать в диалог.
            </summary>
        </member>
        <member name="P:VkNet.Model.Conversation.ChatSettings">
            <summary>
            Настройки чата.
            </summary>
        </member>
        <member name="P:VkNet.Model.Conversation.LastMessageId">
            <summary>
            Идентификатор последнего сообщения.
            </summary>
        </member>
        <member name="P:VkNet.Model.Conversation.CurrentKeyboard">
            <summary>
            Клавиатура.
            </summary>
        </member>
        <member name="T:VkNet.Model.ConversationAndLastMessage">
            <summary>
            Беседы
            </summary>
        </member>
        <member name="P:VkNet.Model.ConversationAndLastMessage.Conversation">
            <summary>
            Объект беседы
            </summary>
        </member>
        <member name="P:VkNet.Model.ConversationAndLastMessage.LastMessage">
            <summary>
            Объект, описывающий последнее сообщение в беседе.
            </summary>
        </member>
        <member name="T:VkNet.Model.ConversationCanWrite">
            <summary>
            Информация о том, может ли пользователь писать в диалог.
            </summary>
        </member>
        <member name="P:VkNet.Model.ConversationCanWrite.Allowed">
            <summary>
            true, если пользователь может писать в диалог;
            </summary>
        </member>
        <member name="P:VkNet.Model.ConversationCanWrite.Reason">
            <summary>
            Код ошибки для allowed = false.
            </summary>
        </member>
        <member name="T:VkNet.Model.ConversationChatSettings">
            <summary>
            Беседа настройки чата.
            </summary>
        </member>
        <member name="P:VkNet.Model.ConversationChatSettings.MembersCount">
            <summary>
            Число участников;
            </summary>
        </member>
        <member name="P:VkNet.Model.ConversationChatSettings.Title">
            <summary>
            Название
            </summary>
        </member>
        <member name="P:VkNet.Model.ConversationChatSettings.PinnedMessage">
            <summary>
            Объект содержит информацию о закреплённом сообщении в беседе.
            </summary>
        </member>
        <member name="P:VkNet.Model.ConversationChatSettings.State">
            <summary>
            Статус текущего пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.ConversationChatSettings.Photo">
            <summary>
            Изображение-обложка чата.
            </summary>
        </member>
        <member name="P:VkNet.Model.ConversationChatSettings.ActiveIds">
            <summary>
            Идентификаторы последних пользователей, писавших в чат.
            </summary>
        </member>
        <member name="P:VkNet.Model.ConversationChatSettings.AdminIds">
            <summary>
            Идентификаторы администраторов чата.
            </summary>
        </member>
        <member name="P:VkNet.Model.ConversationChatSettings.OwnerId">
            <summary>
            Идентификатор владельца чата
            </summary>
        </member>
        <member name="P:VkNet.Model.ConversationChatSettings.IsGroupChannel">
            <summary>
            Признак группового канала
            </summary>
        </member>
        <member name="P:VkNet.Model.ConversationChatSettings.Acl">
             <summary>
            
             </summary>
        </member>
        <member name="T:VkNet.Model.ConversationMember">
            <summary>
            Члены обсуждения
            </summary>
        </member>
        <member name="P:VkNet.Model.ConversationMember.MemberId">
            <summary>
            Идентификатор участника беседы
            </summary>
        </member>
        <member name="P:VkNet.Model.ConversationMember.InvitedBy">
            <summary>
            Идентификатор пользователя, который пригласил участника;
            </summary>
        </member>
        <member name="P:VkNet.Model.ConversationMember.JoinDate">
            <summary>
            Дата добавления в беседу;
            </summary>
        </member>
        <member name="P:VkNet.Model.ConversationMember.IsAdmin">
            <summary>
            Является ли пользователь администратором
            </summary>
        </member>
        <member name="P:VkNet.Model.ConversationMember.CanKick">
            <summary>
            Может ли текущий пользователь исключить участника.
            </summary>
        </member>
        <member name="T:VkNet.Model.ConversationPushSettings">
            <summary>
            Беседа настройки Push-уведомлений.
            </summary>
        </member>
        <member name="P:VkNet.Model.ConversationPushSettings.DisableUntil">
            <summary>
            timestamp, до которого оповещения отключены;
            </summary>
        </member>
        <member name="P:VkNet.Model.ConversationPushSettings.DisabledForever">
            <summary>
            Передается в случае, если оповещения отключены навсегда, содержит true;
            </summary>
        </member>
        <member name="P:VkNet.Model.ConversationPushSettings.NoSound">
            <summary>
            Передается в случае, если отключен звук оповещений, содержит true.
            </summary>
        </member>
        <member name="T:VkNet.Model.ConversationResultObject">
            <summary>
            Результат запроса о получении беседы
            </summary>
        </member>
        <member name="P:VkNet.Model.ConversationResultObject.Count">
            <summary>
            Общее число результатов
            </summary>
        </member>
        <member name="P:VkNet.Model.ConversationResultObject.Items">
            <summary>
            Массив объектов бесед
            </summary>
        </member>
        <member name="P:VkNet.Model.ConversationResultObject.Profiles">
            <summary>
            Профили
            </summary>
        </member>
        <member name="P:VkNet.Model.ConversationResultObject.Groups">
            <summary>
            Группы
            </summary>
        </member>
        <member name="T:VkNet.Model.Coordinates">
            <summary>
            Координаты места, в котором была сделана запись.
            См. описание <see href="http://vk.com/pages?oid=-1&amp;p=Описание_поля_geo" />.
            Официальная страница http://vk.com/dev/post
            молчит о том, что возвращаются географические координаты.
            </summary>
        </member>
        <member name="P:VkNet.Model.Coordinates.Latitude">
            <summary>
            Географическая широта.
            </summary>
        </member>
        <member name="P:VkNet.Model.Coordinates.Longitude">
            <summary>
            Географическая долгота.
            </summary>
        </member>
        <member name="M:VkNet.Model.Coordinates.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.Counters">
            <summary>
            Количество различных объектов у пользователя.
            См. описание http://vk.com/dev/fields
            http://vk.com/dev/fields_groups
            Раздел counters.
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.Albums">
            <summary>
            Количество фотоальбомов.
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.Videos">
            <summary>
            Количество видеозаписей.
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.Audios">
            <summary>
            Количество аудиозаписей.
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.Photos">
            <summary>
            Количество фотографий.
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.Notes">
            <summary>
            Количество заметок.
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.Friends">
            <summary>
            Количество друзей.
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.Groups">
            <summary>
            Количество сообществ.
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.OnlineFriends">
            <summary>
            Количество друзей онлайн.
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.MutualFriends">
            <summary>
            Количество общих друзей.
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.UserVideos">
            <summary>
            Количество видеозаписей с пользователем.
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.Followers">
            <summary>
            Количество подписчиков.
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.UserPhotos">
            <summary>
            Количество фотографий с пользователем.
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.Subscriptions">
            <summary>
            Количество подписок (только пользователи).
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.TopicsCount">
            <summary>
            Количество тем обсуждений сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.DocumentsCount">
            <summary>
            Количество документов.
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.Pages">
            <summary>
            Количество публичных страниц, на которые подписан пользователь.
            </summary>
        </member>
        <member name="M:VkNet.Model.Counters.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="P:VkNet.Model.Counters.Messages">
            <summary>
            Количество сообщений
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.Gifts">
            <summary>
            Количество подарков
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.Events">
            <summary>
            Количество событий
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.Notifications">
            <summary>
            Количество уведомлений
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.Sdk">
            <summary>
            SDK.
            </summary>
        </member>
        <member name="P:VkNet.Model.Counters.AppRequests">
            <summary>
            Запросов к приложению.
            </summary>
        </member>
        <member name="T:VkNet.Model.CountriesStats">
            <summary>
            Статистика по стране
            </summary>
        </member>
        <member name="P:VkNet.Model.CountriesStats.CountryId">
            <summary>
            идентификатор страны;
            </summary>
        </member>
        <member name="P:VkNet.Model.CountriesStats.Views">
            <summary>
            число переходов из этой страны
            </summary>
        </member>
        <member name="T:VkNet.Model.Country">
            <summary>
            Информация о стране.
            </summary>
        </member>
        <member name="P:VkNet.Model.Country.Id">
            <summary>
            Идентификатор страны.
            </summary>
        </member>
        <member name="P:VkNet.Model.Country.Title">
            <summary>
            Название страны.
            </summary>
        </member>
        <member name="M:VkNet.Model.Country.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.CountValue">
            <summary>
            Count Value
            </summary>
        </member>
        <member name="P:VkNet.Model.CountValue.Count">
            <summary>
            Количество
            </summary>
        </member>
        <member name="P:VkNet.Model.CountValue.Value">
            <summary>
            Значение
            </summary>
        </member>
        <member name="T:VkNet.Model.Cover">
            <summary>
            Обложка
            </summary>
        </member>
        <member name="P:VkNet.Model.Cover.Sizes">
            <summary>
            Размеры
            </summary>
        </member>
        <member name="M:VkNet.Model.Cover.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.Cover.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Cover">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.CoverSize">
            <summary>
            Размер
            </summary>
        </member>
        <member name="P:VkNet.Model.CoverSize.Url">
            <summary>
            URL
            </summary>
        </member>
        <member name="P:VkNet.Model.CoverSize.Width">
            <summary>
            Ширина
            </summary>
        </member>
        <member name="P:VkNet.Model.CoverSize.Height">
            <summary>
            Высота
            </summary>
        </member>
        <member name="P:VkNet.Model.CoverSize.Type">
            <summary>
            Тип
            </summary>
        </member>
        <member name="M:VkNet.Model.CoverSize.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.CoverSize.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.CoverSize">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.CropPhoto">
            <summary>
            Возвращает данные о точках, по которым вырезаны профильная и миниатюрная
            фотографии пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.CropPhoto.Photo">
            <summary>
            Объект photo фотографии пользователя из которой вырезается профильная аватарка.
            </summary>
        </member>
        <member name="P:VkNet.Model.CropPhoto.Crop">
            <summary>
            Вырезанная фотография пользователя, поля: x, y, x2, y2, координаты указаны в
            процентах.
            </summary>
        </member>
        <member name="P:VkNet.Model.CropPhoto.Rect">
            <summary>
            Миниатюрная квадратная фотография, вырезанная из фотографии Crop: x, y, x2, y2,
            координаты также указаны в
            процентах;
            </summary>
        </member>
        <member name="M:VkNet.Model.CropPhoto.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.Currency">
            <summary>
            Валюта.
            </summary>
        </member>
        <member name="P:VkNet.Model.Currency.Id">
            <summary>
            Идентификатор валюты
            </summary>
        </member>
        <member name="P:VkNet.Model.Currency.Сurrency">
            <summary>
            Буквенное обозначение валюты
            </summary>
        </member>
        <member name="P:VkNet.Model.Currency.Name">
            <summary>
            Буквенное обозначение валюты
            </summary>
        </member>
        <member name="M:VkNet.Model.Currency.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.DocumentType">
            <summary>
            Тип документа.
            </summary>
        </member>
        <member name="P:VkNet.Model.DocumentType.Id">
            <summary>
            Идентификатор полученного подарка.
            </summary>
        </member>
        <member name="P:VkNet.Model.DocumentType.Name">
            <summary>
            Текст сообщения, приложенного к подарку.
            </summary>
        </member>
        <member name="P:VkNet.Model.DocumentType.Count">
            <summary>
            Количество документов данного типа.
            </summary>
        </member>
        <member name="M:VkNet.Model.DocumentType.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> Тип документа. </returns>
        </member>
        <member name="T:VkNet.Model.Education">
            <summary>
            Информация о высшем учебном заведении пользователя.
            См. описание http://vk.com/dev/fields
            </summary>
        </member>
        <member name="P:VkNet.Model.Education.UniversityId">
            <summary>
            Идентификатор университета.
            </summary>
        </member>
        <member name="P:VkNet.Model.Education.UniversityName">
            <summary>
            Название ВУЗа.
            </summary>
        </member>
        <member name="P:VkNet.Model.Education.FacultyId">
            <summary>
            Идентификатор факультета.
            </summary>
        </member>
        <member name="P:VkNet.Model.Education.FacultyName">
            <summary>
            Название факультета.
            </summary>
        </member>
        <member name="P:VkNet.Model.Education.Graduation">
            <summary>
            Год окончания.
            </summary>
        </member>
        <member name="M:VkNet.Model.Education.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="P:VkNet.Model.Education.EducationForm">
            <summary>
            Форма обучения.
            </summary>
        </member>
        <member name="P:VkNet.Model.Education.EducationStatus">
            <summary>
            Текущий статус пользователя в высшем учебном заведении.
            </summary>
        </member>
        <member name="T:VkNet.Model.Email">
            <summary>
            E-Mail.
            </summary>
        </member>
        <member name="P:VkNet.Model.Email.Id">
            <summary>
            Идентификатор e-mail
            </summary>
        </member>
        <member name="P:VkNet.Model.Email.Address">
            <summary>
            Адрес e-mail
            </summary>
        </member>
        <member name="M:VkNet.Model.Email.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.Entry">
            <summary>
            Последние действия пользователей по рекламной акции
            </summary>
        </member>
        <member name="P:VkNet.Model.Entry.Date">
            <summary>
            Время действия в формате unixtime;
            </summary>
        </member>
        <member name="P:VkNet.Model.Entry.Status">
            <summary>
            0 - начало действия, 1 - завершение действия, 2 - блокирование пользователя;
            </summary>
        </member>
        <member name="P:VkNet.Model.Entry.Uid">
            <summary>
            Идентификатор пользователя;
            </summary>
        </member>
        <member name="P:VkNet.Model.Entry.Comment">
            <summary>
            Текст комментария.
            </summary>
        </member>
        <member name="P:VkNet.Model.Entry.Aid">
            <summary>
            Идентификатор приложения, из которого было выполнено действие;
            </summary>
        </member>
        <member name="P:VkNet.Model.Entry.TestMode">
            <summary>
            0 - рабочий режим, 1 - тестовый режим;
            </summary>
        </member>
        <member name="P:VkNet.Model.Entry.StartDate">
            <summary>
            Время начала действия в формате unixtime для status = 1;
            </summary>
        </member>
        <member name="P:VkNet.Model.Entry.Sid">
            <summary>
            Идентификатор сессии;
            </summary>
        </member>
        <member name="T:VkNet.Model.EventSticker">
            <summary>
            Событие стикера
            </summary>
        </member>
        <member name="P:VkNet.Model.EventSticker.UserId">
            <summary>
            Идентификатор пользователя
            </summary>
        </member>
        <member name="P:VkNet.Model.EventSticker.Status">
            <summary>
            Статус
            </summary>
        </member>
        <member name="T:VkNet.Model.ExecuteErrorsResponse">
            <summary>
            Ошибоки при вызове метода execute
            </summary>
        </member>
        <member name="P:VkNet.Model.ExecuteErrorsResponse.Response">
            <summary>
            Ответ Vk
            </summary>
        </member>
        <member name="P:VkNet.Model.ExecuteErrorsResponse.ExecuteErrors">
            <summary>
            Массив ошибок при вызове метода execute
            </summary>
        </member>
        <member name="T:VkNet.Model.Exports">
            <summary>
            Внешние сервисы, в которые настроен экспорт из ВК
            </summary>
        </member>
        <member name="P:VkNet.Model.Exports.Twitter">
            <summary>
            Twitter
            </summary>
        </member>
        <member name="P:VkNet.Model.Exports.Facebook">
            <summary>
            Facebook
            </summary>
        </member>
        <member name="P:VkNet.Model.Exports.Livejournal">
            <summary>
            LiveJournal
            </summary>
        </member>
        <member name="P:VkNet.Model.Exports.Instagram">
            <summary>
            Instagram
            </summary>
        </member>
        <member name="M:VkNet.Model.Exports.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.ExternalLink">
            <summary>
            Ссылки в группе
            </summary>
        </member>
        <member name="P:VkNet.Model.ExternalLink.Id">
            <summary>
            Идентификатор ссылки.
            </summary>
        </member>
        <member name="P:VkNet.Model.ExternalLink.Uri">
            <summary>
            Адрес ссылки.
            </summary>
        </member>
        <member name="P:VkNet.Model.ExternalLink.Name">
            <summary>
            Название страницы, на которую ведет ссылка.
            </summary>
        </member>
        <member name="P:VkNet.Model.ExternalLink.Description">
            <summary>
            Описание.
            </summary>
        </member>
        <member name="P:VkNet.Model.ExternalLink.Photo50">
            <summary>
            Фото 50px.
            </summary>
        </member>
        <member name="P:VkNet.Model.ExternalLink.Photo100">
            <summary>
            Фото 100px.
            </summary>
        </member>
        <member name="P:VkNet.Model.ExternalLink.EditTitle">
            <summary>
            Возвращается 1, если можно редактировать название ссылки (для внешних ссылок)
            </summary>
        </member>
        <member name="P:VkNet.Model.ExternalLink.ImageProcessing">
            <summary>
            Возвращается 1, если превью находится в процессе обработки.
            </summary>
        </member>
        <member name="M:VkNet.Model.ExternalLink.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.Faculty">
            <summary>
            Факультет
            </summary>
        </member>
        <member name="P:VkNet.Model.Faculty.Id">
            <summary>
            Идентификатор факультета
            </summary>
        </member>
        <member name="P:VkNet.Model.Faculty.Title">
            <summary>
            Название факультета
            </summary>
        </member>
        <member name="M:VkNet.Model.Faculty.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.FaveGetObject">
            <summary>
            Результат метода fave.get
            </summary>
        </member>
        <member name="P:VkNet.Model.FaveGetObject.AddedDate">
            <summary>
            Дата добавления объекта в закладки.
            </summary>
        </member>
        <member name="P:VkNet.Model.FaveGetObject.Seen">
            <summary>
            Является ли закладка просмотренной.
            </summary>
        </member>
        <member name="P:VkNet.Model.FaveGetObject.Type">
            <summary>
            Тип объекта, добавленного в закладки.
            </summary>
        </member>
        <member name="P:VkNet.Model.FaveGetObject.Tags">
            <summary>
            Массив меток объекта в списке закладок.
            </summary>
        </member>
        <member name="P:VkNet.Model.FaveGetObject.Post">
            <inheritdoc cref="T:VkNet.Model.Attachments.Post" />
        </member>
        <member name="P:VkNet.Model.FaveGetObject.Video">
            <inheritdoc cref="T:VkNet.Model.Attachments.Video" />
        </member>
        <member name="P:VkNet.Model.FaveGetObject.Product">
            <inheritdoc cref="T:VkNet.Model.Market" />
        </member>
        <member name="P:VkNet.Model.FaveGetObject.Article">
            <inheritdoc cref="T:VkNet.Model.Attachments.Article" />
        </member>
        <member name="P:VkNet.Model.FaveGetObject.Podcast">
            <inheritdoc cref="T:VkNet.Model.Attachments.Podcast" />
        </member>
        <member name="P:VkNet.Model.FaveGetObject.Link">
            <inheritdoc cref="T:VkNet.Model.Attachments.Link" />
        </member>
        <member name="T:VkNet.Model.FaveGetPagesObject">
            <summary>
            Ответ метода fave.getPages
            </summary>
        </member>
        <member name="P:VkNet.Model.FaveGetPagesObject.Description">
            <summary>
            Описание страницы.
            </summary>
        </member>
        <member name="P:VkNet.Model.FaveGetPagesObject.Type">
            <summary>
            Тип страницы.
            </summary>
        </member>
        <member name="P:VkNet.Model.FaveGetPagesObject.Tags">
            <summary>
            Метки страницы.
            </summary>
        </member>
        <member name="P:VkNet.Model.FaveGetPagesObject.UpdatedDate">
            <summary>
            Дата обновления.
            </summary>
        </member>
        <member name="P:VkNet.Model.FaveGetPagesObject.User">
            <inheritdoc cref="T:VkNet.Model.User"/>
        </member>
        <member name="P:VkNet.Model.FaveGetPagesObject.Group">
            <inheritdoc cref="T:VkNet.Model.Group"/>
        </member>
        <member name="T:VkNet.Model.FaveTag">
            <summary>
            Метка закладки.
            </summary>
        </member>
        <member name="P:VkNet.Model.FaveTag.Id">
            <summary>
            Идентификатор метки.
            </summary>
        </member>
        <member name="P:VkNet.Model.FaveTag.Name">
            <summary>
            Название метки.
            </summary>
        </member>
        <member name="T:VkNet.Model.FaveVideoEx">
            <summary>
            Расширенный объект видео для закладок
            </summary>
        </member>
        <member name="P:VkNet.Model.FaveVideoEx.Count">
            <summary>
            Общее количество записей на стене.
            </summary>
        </member>
        <member name="P:VkNet.Model.FaveVideoEx.Videos">
            <summary>
            Видеозаписи.
            </summary>
        </member>
        <member name="P:VkNet.Model.FaveVideoEx.Profiles">
            <summary>
            Профили.
            </summary>
        </member>
        <member name="P:VkNet.Model.FaveVideoEx.Groups">
            <summary>
            Группы.
            </summary>
        </member>
        <member name="M:VkNet.Model.FaveVideoEx.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.Feedback">
            <summary>
            Объект описывающий поступивший ответ.
            </summary>
        </member>
        <member name="P:VkNet.Model.Feedback.Count">
            <summary>
            Количество
            </summary>
        </member>
        <member name="P:VkNet.Model.Feedback.Items">
            <summary>
            Массив объектов
            </summary>
        </member>
        <member name="T:VkNet.Model.FeedbackItem">
            <summary>
            Feedback Item
            </summary>
        </member>
        <member name="P:VkNet.Model.FeedbackItem.Id">
            <summary>
            Идентификатор записи-ответа;
            </summary>
        </member>
        <member name="P:VkNet.Model.FeedbackItem.ToId">
            <summary>
            Идентификатор стены, на которой размещена запись;
            </summary>
        </member>
        <member name="P:VkNet.Model.FeedbackItem.FromId">
            <summary>
            Идентификатор автора ответа;
            </summary>
        </member>
        <member name="P:VkNet.Model.FeedbackItem.Text">
            <summary>
            Текст ответа;
            </summary>
        </member>
        <member name="P:VkNet.Model.FeedbackItem.Likes">
            <summary>
            Находится в записях со стен и содержит информацию о числе людей, которым
            понравилась данная запись
            </summary>
        </member>
        <member name="P:VkNet.Model.FeedbackItem.Attachments">
            <summary>
            Содержит массив объектов, которые присоединены к текущей записи (фотографии,
            ссылки и т.п.)
            </summary>
        </member>
        <member name="P:VkNet.Model.FeedbackItem.Geo">
            <summary>
            Находится в записях со стен, в которых имеется информация о местоположении
            </summary>
        </member>
        <member name="T:VkNet.Model.FriendList">
            <summary>
            Метка в списке друзей
            </summary>
        </member>
        <member name="P:VkNet.Model.FriendList.Id">
            <summary>
            Идентификатор метки
            </summary>
        </member>
        <member name="P:VkNet.Model.FriendList.Name">
            <summary>
            Название метки
            </summary>
        </member>
        <member name="M:VkNet.Model.FriendList.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.FriendOnline">
            <summary>
            Результат запроса Friends.FriendOnline
            </summary>
        </member>
        <member name="P:VkNet.Model.FriendOnline.Online">
            <summary>
            Online
            </summary>
        </member>
        <member name="P:VkNet.Model.FriendOnline.MobileOnline">
            <summary>
            Online с мобильного телефона.
            </summary>
        </member>
        <member name="M:VkNet.Model.FriendOnline.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.FriendsDeleteResult">
            <summary>
            Результат запроса Friends.Delete
            </summary>
        </member>
        <member name="P:VkNet.Model.FriendsDeleteResult.Success">
            <summary>
            Удалось успешно удалить друга
            </summary>
        </member>
        <member name="P:VkNet.Model.FriendsDeleteResult.FriendDeleted">
            <summary>
            Был удален друг
            </summary>
        </member>
        <member name="P:VkNet.Model.FriendsDeleteResult.OutRequestDeleted">
            <summary>
            Отменена исходящая заявка
            </summary>
        </member>
        <member name="P:VkNet.Model.FriendsDeleteResult.InRequestDeleted">
            <summary>
            Отклонена входящая заявка
            </summary>
        </member>
        <member name="P:VkNet.Model.FriendsDeleteResult.SuggestionDeleted">
            <summary>
            Отклонена рекомендация друга
            </summary>
        </member>
        <member name="M:VkNet.Model.FriendsDeleteResult.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.FriendsGetRequestsResult">
            <summary>
            Friends Get Requests Result
            </summary>
        </member>
        <member name="P:VkNet.Model.FriendsGetRequestsResult.UserId">
            <summary>
            Идентификатор пользователя
            </summary>
        </member>
        <member name="P:VkNet.Model.FriendsGetRequestsResult.Mutual">
            <summary>
            </summary>
        </member>
        <member name="P:VkNet.Model.FriendsGetRequestsResult.Message">
            <summary>
            Текст сообщения
            </summary>
        </member>
        <member name="M:VkNet.Model.FriendsGetRequestsResult.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.FriendsGetRequestsResult.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.FriendsGetRequestsResult">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="T:VkNet.Model.Geo">
            <summary>
            Информация о географическом месте, в котором была сделана запись.
            См. описание <see href="http://vk.com/pages?oid=-1&amp;p=Описание_поля_geo" />.
            </summary>
        </member>
        <member name="P:VkNet.Model.Geo.Type">
            <summary>
            Имя типа информации о географическом месте (в настоящий момент поддерживается
            единственный тип "place", это
            означает,
            что запись привязана к определенному географическому месту в базе мест.)
            </summary>
        </member>
        <member name="P:VkNet.Model.Geo.Coordinates">
            <summary>
            Координаты места, в котором была сделана запись.
            </summary>
        </member>
        <member name="P:VkNet.Model.Geo.Place">
            <summary>
            Информация о месте, в котором была сделана запись.
            </summary>
        </member>
        <member name="M:VkNet.Model.Geo.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.GetBannedResult">
            <summary>
            Результат запроса groups.getBanned
            </summary>
        </member>
        <member name="P:VkNet.Model.GetBannedResult.Type">
            <summary>
            Тип
            </summary>
        </member>
        <member name="P:VkNet.Model.GetBannedResult.Group">
            <summary>
            Информация о сообществе (для type = group)
            </summary>
        </member>
        <member name="P:VkNet.Model.GetBannedResult.Profile">
            <summary>
            Информация о пользователе (для type = profile)
            </summary>
        </member>
        <member name="P:VkNet.Model.GetBannedResult.BanInfo">
            <summary>
            Информация о блокировке в сообществе.
            </summary>
        </member>
        <member name="T:VkNet.Model.GetByConversationMessageIdResult">
            <summary>
            Результат метода messages.getByConversationMessageId
            </summary>
        </member>
        <member name="P:VkNet.Model.GetByConversationMessageIdResult.Count">
            <summary>
            Число результатов
            </summary>
        </member>
        <member name="P:VkNet.Model.GetByConversationMessageIdResult.Items">
            <summary>
            Массив объектов, описывающих сообщения
            </summary>
        </member>
        <member name="P:VkNet.Model.GetByConversationMessageIdResult.Profiles">
            <summary>
            Массив объектов пользователей.
            </summary>
        </member>
        <member name="P:VkNet.Model.GetByConversationMessageIdResult.Groups">
            <summary>
            Массив объектов сообществ.
            </summary>
        </member>
        <member name="T:VkNet.Model.GetConversationMembersResult">
            <summary>
            Результат метода messages.GetConversationMembersResult
            </summary>
        </member>
        <member name="P:VkNet.Model.GetConversationMembersResult.Count">
            <summary>
            Число участников беседы.
            </summary>
        </member>
        <member name="P:VkNet.Model.GetConversationMembersResult.Items">
            <summary>
            Участники беседы.
            </summary>
        </member>
        <member name="P:VkNet.Model.GetConversationMembersResult.Profiles">
            <summary>
            Массив объектов пользователей.
            </summary>
        </member>
        <member name="P:VkNet.Model.GetConversationMembersResult.Groups">
            <summary>
            Массив объектов сообществ.
            </summary>
        </member>
        <member name="T:VkNet.Model.GetConversationsResult">
            <summary>
            Результат метода messages.GetConversationsResult
            </summary>
        </member>
        <member name="P:VkNet.Model.GetConversationsResult.Count">
            <summary>
            Число результатов.
            </summary>
        </member>
        <member name="P:VkNet.Model.GetConversationsResult.Items">
            <summary>
            Беседы
            </summary>
        </member>
        <member name="P:VkNet.Model.GetConversationsResult.UnreadCount">
            <summary>
            Число непрочитанных бесед.
            </summary>
        </member>
        <member name="P:VkNet.Model.GetConversationsResult.Profiles">
            <summary>
            Массив объектов пользователей.
            </summary>
        </member>
        <member name="P:VkNet.Model.GetConversationsResult.Groups">
            <summary>
            Массив объектов сообществ.
            </summary>
        </member>
        <member name="T:VkNet.Model.GetImportantMessagesResult">
            <summary>
            Параметры метода Messages.GetImportantMessages
            </summary>
        </member>
        <member name="P:VkNet.Model.GetImportantMessagesResult.Messages">
            <summary>
            Сообщения
            </summary>
        </member>
        <member name="P:VkNet.Model.GetImportantMessagesResult.Profiles">
            <summary>
            Профили пользователей
            </summary>
        </member>
        <member name="P:VkNet.Model.GetImportantMessagesResult.Conversations">
            <summary>
            Беседы
            </summary>
        </member>
        <member name="P:VkNet.Model.GetLeadResult.LeadId">
            <summary>
            идентификатор заявки
            </summary>
        </member>
        <member name="P:VkNet.Model.GetLeadResult.UserId">
            <summary>
            идентификатор пользователя, оставившего заявку
            </summary>
        </member>
        <member name="P:VkNet.Model.GetLeadResult.Date">
            <summary>
            дата и время оставления заявки в формате unix timestamp
            </summary>
        </member>
        <member name="P:VkNet.Model.GetLeadResult.Answers">
            <summary>
            информация об ответах на вопросы — массив структур со следующими полями
            </summary>
        </member>
        <member name="P:VkNet.Model.GetLeadResult.AdId">
            <summary>
            идентификатор рекламного объявления, с которого пришла заявка (поле отсутствует в случае, если заявка пришла не из рекламного объявления).
            </summary>
        </member>
        <member name="T:VkNet.Model.GetLongPollSettingsResult">
             <summary>
            
             </summary>
        </member>
        <member name="P:VkNet.Model.GetLongPollSettingsResult.IsEnabled">
            <summary>
            1 — включить Bots Long Poll, 0 — отключить. флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.GetLongPollSettingsResult.Events">
            <summary>
            Настройки Bots Longpoll.
            </summary>
        </member>
        <member name="P:VkNet.Model.GetLongPollSettingsResult.ApiVersion">
            <summary>
            Версия API строка
            </summary>
        </member>
        <member name="T:VkNet.Model.GetRecentCallsResult">
            <summary>
            Результат запроса messages.GetRecentCalls
            </summary>
        </member>
        <member name="P:VkNet.Model.GetRecentCallsResult.Count">
            <summary>
            Число результатов.
            </summary>
        </member>
        <member name="P:VkNet.Model.GetRecentCallsResult.Messages">
            <summary>
            Сообщения
            </summary>
        </member>
        <member name="P:VkNet.Model.GetRecentCallsResult.Profiles">
            <summary>
            Профили пользователей
            </summary>
        </member>
        <member name="P:VkNet.Model.GetRecentCallsResult.Groups">
            <summary>
            Массив объектов сообществ.
            </summary>
        </member>
        <member name="T:VkNet.Model.GetRequestsResult">
            <summary>
            Результат запроса friends.getRequests
            </summary>
        </member>
        <member name="P:VkNet.Model.GetRequestsResult.Count">
            <summary>
            Total requests number
            </summary>
        </member>
        <member name="P:VkNet.Model.GetRequestsResult.Items">
            <summary>
            User ID's
            </summary>
        </member>
        <member name="P:VkNet.Model.GetRequestsResult.CountUnread">
            <summary>
            Total unread requests number
            </summary>
        </member>
        <member name="T:VkNet.Model.GiftItem">
            <summary>
            Подарок.
            </summary>
        </member>
        <member name="P:VkNet.Model.GiftItem.Id">
            <summary>
            Идентификатор полученного подарка.
            </summary>
        </member>
        <member name="P:VkNet.Model.GiftItem.FromId">
            <summary>
            Идентификатор пользователя, который отправил подарок, или 0, если отправитель
            скрыт.
            </summary>
        </member>
        <member name="P:VkNet.Model.GiftItem.Message">
            <summary>
            Текст сообщения, приложенного к подарку.
            </summary>
        </member>
        <member name="P:VkNet.Model.GiftItem.Date">
            <summary>
            Время отправки подарка в формате unixtime.
            </summary>
        </member>
        <member name="P:VkNet.Model.GiftItem.Gift">
            <summary>
            Подарок.
            </summary>
        </member>
        <member name="P:VkNet.Model.GiftItem.Privacy">
            <summary>
            Значение приватности подарка (только для текущего пользователя).
            </summary>
        </member>
        <member name="P:VkNet.Model.GiftItem.GiftHash">
            <summary>
            Хеш подарка
            </summary>
        </member>
        <member name="M:VkNet.Model.GiftItem.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.Group">
            <summary>
            Информация о сообществе (группе).
            См. описание http://vk.com/dev/fields_groups
            </summary>
        </member>
        <member name="M:VkNet.Model.Group.#ctor">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:VkNet.Model.Group.VkNet#Utils#IVkModel#FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Преобразовать из JSON
            </summary>
            <param name="response"> Ответ от сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.Group.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="P:VkNet.Model.Group.Id">
            <summary>
            Идентификатор сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.Name">
            <summary>
            Название сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.ScreenName">
            <summary>
            Короткий адрес страницы сообщества, например, apiclub. Если он не назначен, то
            'club'+gid, например, club35828305.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.IsClosed">
            <summary>
            Публичность группы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.Deactivated">
            <summary>
            Возвращается в случае, если сообщество удалено или заблокировано
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.IsAdmin">
            <summary>
            Признак яляется ли текущий пользователь руководителем сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.AdminLevel">
            <summary>
            Уровень административных полномочий текущего пользователя в сообществе
            (действительно, если IsAdmin = true).
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.IsMember">
            <summary>
            Признак является ли текущий пользователь участником сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.InvitedBy">
            <summary>
            Идентификатор пользователя пригласившего в группу
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.Type">
            <summary>
            Тип сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.Photo50">
            <summary>
            url фотографии сообщества с размером 50x50px
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.Photo100">
            <summary>
            url фотографии сообщества с размером 100x100px
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.Photo200">
            <summary>
            url фотографии сообщества с размером 200x200px
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.Activity">
            <summary>
            Строка состояния публичной страницы. У групп возвращается строковое значение,
            открыта ли группа или нет,
            а у событий дата начала.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.AgeLimits">
            <summary>
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.BanInfo">
            <summary>
            Информация о забанненом (добавленном в черный список) пользователе сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.CanCreateTopic">
            <summary>
            Информация о том, может ли текущий пользователь создать тему обсуждения в
            группе.
            (<c> true </c>, если пользователь может создать обсуждение, <c> false </c> –
            если не может).
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.CanMessage">
            <summary>
            информация о том, может ли текущий пользователь написать сообщение сообществу.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.CanPost">
            <summary>
            Информация о том, может ли текущий пользователь оставлять записи на стене
            сообщества (<c> true </c> - может,
            <c> false </c> - не может).
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.CanSeeAllPosts">
            <summary>
            Информация о том, разрешено видеть чужие записи на стене группы (<c> true </c>
            - разрешено, <c> false </c> - не
            разрешено).
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.CanUploadDocuments">
            <summary>
            Информация о том, может ли текущий пользователь загружать документы в группу (
            <c> true </c>, если пользователь может
            загружать документы, <c> false </c> – если не может).
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.CanUploadVideo">
            <summary>
            Информация о том, может ли текущий пользователь загружать видеозаписи в группу.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.City">
            <summary>
            Город.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.Contacts">
            <summary>
            Информация из блока контактов публичной страницы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.Counters">
            <summary>
            Счетчики сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.Country">
            <summary>
            Идентификатор страны, указанной в информации о сообществе. Возвращается
            идентификатор страны, который можно
            использовать для
            получения ее названия с помощью метода DatabaseCategory.GetCountriesById
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.Cover">
            <summary>
            обложка сообщества
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.Description">
            <summary>
            Текст описания сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.FixedPost">
            <summary>
            Идентификатор закрепленного поста сообщества. Сам пост можно получить,
            используя WallCategory.GetById
            передав идентификатор в виде – {group_id}_{post_id}.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.HasPhoto">
            <summary>
            Содержит фото.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.IsFavorite">
            <summary>
            Возвращается 1, если сообщество находится в закладках у текущего пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.IsHiddenFromFeed">
            <summary>
            Возвращается 1, если сообщество скрыто в новостях у текущего пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.IsMessagesAllowed">
            <summary>
            Информация о том, разрешено ли сообществу отправлять сообщения текущему
            пользователю.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.Links">
            <summary>
            Информация из блока ссылок сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.MainAlbumId">
            <summary>
            Идентификатор основного альбома сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.MainSection">
            <summary>
            Информация о главной секции в сообществе
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.Market">
            <summary>
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.MemberStatus">
            <summary>
            статус участника текущего пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.MembersCount">
            <summary>
            Количество участников сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.Place">
            <summary>
            Место, указанное в информации о сообществе.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.PublicDateLabel">
            <summary>
            возвращается для публичных страниц. Текст описания для поля start_date.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.Site">
            <summary>
            Адрес сайта из поля «веб-сайт» в описании сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.StartDate">
            <summary>
            Время начала встречи (возвращаются только для встреч).
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.StatusAudio">
            <summary>
            Объект аудиозаписи, установленной в статус (если аудиозапись транслируется в текущей момент).
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.EndDate">
            <summary>
            Время окончания встречи (возвращаются только для встреч).
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.Status">
            <summary>
            Статус сообщества. Возвращается строка, содержащая текст статуса,
            расположенного на странице сообщества под его
            названием.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.Trending">
            <summary>
            Информация о том, есть ли у сообщества «огонёк».
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.Verified">
            <summary>
            Возвращает информацию о том, является ли сообщество верифицированным.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.WikiPage">
            <summary>
            Название главной вики-страницы сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.PhotoPreviews">
            <summary>
            Информация о ссылках на предпросмотр фотографий сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.Group.Wall">
            <summary>
            Стена
            </summary>
        </member>
        <member name="T:VkNet.Model.GroupInfo">
            <summary>
            Информация о сообществе (группе).
            См. описание http://vk.com/dev/fields_groups
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupInfo.Title">
            <summary>
            Название сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupInfo.Description">
            <summary>
            Описание сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupInfo.Address">
            <summary>
            Gets or sets the address.
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupInfo.Place">
            <summary>
            Место, указанное в информации о сообществе.
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupInfo.Wall">
            <summary>
            Стена.
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupInfo.Photos">
            <summary>
            Фотографии.
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupInfo.Video">
            <summary>
            Видеозаписи.
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupInfo.Audio">
            <summary>
            Аудиозаписи.
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupInfo.Docs">
            <summary>
            Документы.
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupInfo.Topics">
            <summary>
            Обсуждения.
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupInfo.Wiki">
            <summary>
            Материалы.
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupInfo.Access">
            <summary>
            Тип группы.
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupInfo.Subject">
            <summary>
            Тематика сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupInfo.Website">
            <summary>
            Адрес сайта, который будет указан в информации о группе
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupInfo.Contacts">
            <summary>
            Контакты: (доступно только для публичных страниц).
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupInfo.Places">
            <summary>
            Места: (доступно только для публичных страниц)
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupInfo.Events">
            <summary>
            События: (доступно только для публичных страниц).
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupInfo.Links">
            <summary>
            Ссылки: (доступно только для публичных страниц).
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupInfo.PublicDate">
            <summary>
            Дата основания компании, организации,
            которой посвящена публичная страница в виде строки формата "dd.mm.YYYY".
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupInfo.PublicSubcategory">
            <summary>
            Подкатегория публичной станицы.
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupInfo.PublicCategory">
            <summary>
            Категория публичной страницы.
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupInfo.EventGroupId">
            <summary>
            Идентификатор группы, которая является организатором события (только для
            событий).
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupInfo.EventFinishDate">
            <summary>
            Дата окончания события.
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupInfo.EventStartDate">
            <summary>
            Дата начала события.
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupInfo.Rss">
            <summary>
            Адрес rss для импорта новостей
            (доступен только группам, получившим соответствуюшее разрешение,
            обратитесь в http://vk.com/support для получения разрешения).
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupInfo.Phone">
            <summary>
            Номер телефона сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupInfo.Email">
            <summary>
            Электронный адрес сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupInfo.ScreenName">
            <summary>
            Короткое имя сообщества.
            </summary>
        </member>
        <member name="F:VkNet.Model.GroupInfo.Subjects">
            <summary>
            Список тематик
            </summary>
        </member>
        <member name="M:VkNet.Model.GroupInfo.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из JSON.
            </summary>
            <param name="response"> Ответ от vk. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.GroupMarket">
            <summary>
            Информация о магазине.
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupMarket.Enabled">
            <summary>
            Информация о том, включен ли блок товаров в сообществе.
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupMarket.PriceMin">
            <summary>
            Минимальная цена товаров;
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupMarket.PriceMax">
            <summary>
            Максимальная цена товаров
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupMarket.MainAlbumId">
            <summary>
            Идентификатор главной подборки товаров
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupMarket.ContactId">
            <summary>
            Идентификатор контактного лица для связи с продавцом. Возвращается отрицательное значение, если для связи с продавцом используются сообщения сообщества;
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupMarket.Currency">
            <summary>
            Информация о валюте.
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupMarket.CurrencyText">
            <summary>
            Строковое обозначение.
            </summary>
        </member>
        <member name="M:VkNet.Model.GroupMarket.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Десериализовать из Json.
            </summary>
            <param name="response"> Ответ от vk. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.GroupMarket.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.GroupMarket">
            <summary>
            Неявное преобразование к объекту <see cref="T:VkNet.Model.GroupMarket"/> из <see cref="T:VkNet.Utils.VkResponse"/>
            </summary>
            <param name="response">Ответ от vk.</param>
            <returns></returns>
        </member>
        <member name="T:VkNet.Model.GroupMember">
            <summary>
            Информация о сообществе (группе).
            См. описание http://vk.com/dev/fields_groups
            </summary>
        </member>
        <member name="M:VkNet.Model.GroupMember.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Десериализовать из Json.
            </summary>
            <param name="response"> Jndtn. </param>
            <returns> </returns>
        </member>
        <member name="P:VkNet.Model.GroupMember.UserId">
            <summary>
            Идентификатор пользователя ВК.
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupMember.Member">
            <summary>
            Является ли пользователь участником сообщества;
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupMember.Request">
            <summary>
            Есть ли непринятая заявка от пользователя на вступление в группу (такую заявку
            можно отозвать методом
            groups.leave).
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupMember.Invitation">
            <summary>
            Приглашён ли пользователь в группу или встречу.
            </summary>
        </member>
        <member name="T:VkNet.Model.GroupCover">
            <summary>
            Обложка сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupCover.Enabled">
            <summary>
            Информация о том, включена ли обложка (1 — да, 0 — нет);
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupCover.Images">
            <summary>
            Копии изображений обложки.
            </summary>
        </member>
        <member name="M:VkNet.Model.GroupCover.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.GroupCoverImage">
            <summary>
            Копия изображения обложки.
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupCoverImage.Url">
            <summary>
            URL копии;
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupCoverImage.Width">
            <summary>
            Ширина копии;
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupCoverImage.Height">
            <summary>
            Высота копии.
            </summary>
        </member>
        <member name="M:VkNet.Model.GroupCoverImage.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.GroupsCatalogInfo">
            <summary>
            Ответ на запрос метода groups.getCatalogInfo
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupsCatalogInfo.Categories">
            <summary>
            Список категорий.
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupsCatalogInfo.Enabled">
            <summary>
            Признак доступности каталога для пользователя.
            </summary>
        </member>
        <member name="M:VkNet.Model.GroupsCatalogInfo.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.GroupUpdate.BoardPost">
            <summary>
            Добавление/редактирование/восстановление комментария в обсуждении(BoardPostNew, BoardPostEdit, BoardPostRestore)(CommentBoard с дополнительными полями)
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.BoardPost.TopicId">
            <summary>
            Идентификатор обсуждения
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.BoardPost.TopicOwnerId">
            <summary>
            Идентификатор владельца обсуждения
            </summary>
        </member>
        <member name="M:VkNet.Model.GroupUpdate.BoardPost.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
        </member>
        <member name="T:VkNet.Model.GroupUpdate.BoardPostDelete">
            <summary>
            Удаление комментария в обсуждении(BoardPostDelete)
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.BoardPostDelete.Id">
            <summary>
            Идентификатор комментария
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.BoardPostDelete.TopicId">
            <summary>
            Идентификатор обсуждения
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.BoardPostDelete.TopicOwnerId">
            <summary>
            Идентификатор владельца обсуждения
            </summary>
        </member>
        <member name="M:VkNet.Model.GroupUpdate.BoardPostDelete.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
        </member>
        <member name="T:VkNet.Model.GroupUpdate.GroupChangePhoto">
            <summary>
            Изменение главного фото
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.GroupChangePhoto.UserId">
            <summary>
            Идентификатор пользователя, который внес изменения
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.GroupChangePhoto.Photo">
            <summary>
            Фотография
            </summary>
        </member>
        <member name="M:VkNet.Model.GroupUpdate.GroupChangePhoto.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
        </member>
        <member name="T:VkNet.Model.GroupUpdate.GroupJoin">
            <summary>
            Добавление участника или заявки на вступление в сообщество
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.GroupJoin.UserId">
            <summary>
            Идентификатор пользователя
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.GroupJoin.JoinType">
            <summary>
            Указывает, как именно был добавлен участник.
            </summary>
        </member>
        <member name="M:VkNet.Model.GroupUpdate.GroupJoin.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
        </member>
        <member name="T:VkNet.Model.GroupUpdate.GroupLeave">
            <summary>
            Удаление/выход участника из сообщества
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.GroupLeave.UserId">
            <summary>
            Идентификатор пользователя
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.GroupLeave.IsSelf">
            <summary>
            Самостояльный ли был выход
            </summary>
        </member>
        <member name="M:VkNet.Model.GroupUpdate.GroupLeave.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
        </member>
        <member name="T:VkNet.Model.GroupUpdate.GroupOfficersEdit">
            <summary>
            Редактирование списка руководителей
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.GroupOfficersEdit.UserId">
            <summary>
            Идентификатор пользователя
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.GroupOfficersEdit.AdminId">
            <summary>
            Идентификатор администратора, который внёс пользователя в чёрный список
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.GroupOfficersEdit.LevelNew">
            <summary>
            Новый уровень полномочий
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.GroupOfficersEdit.LevelOld">
            <summary>
            Старый уровень полномочий
            </summary>
        </member>
        <member name="M:VkNet.Model.GroupUpdate.GroupOfficersEdit.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
        </member>
        <member name="T:VkNet.Model.GroupUpdate.GroupUpdate">
            <summary>
            Обновление группы
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.GroupUpdate.Type">
            <summary>
            Тип обновления
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.GroupUpdate.Message">
            <summary>
            Сообщение для типов событий с сообщением в ответе(MessageNew, MessageEdit, MessageReply)
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.GroupUpdate.Photo">
            <summary>
            Фотография для типов событий с фотографией в ответе(PhotoNew)
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.GroupUpdate.Audio">
            <summary>
            Аудиозапись
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.GroupUpdate.Video">
            <summary>
            Видеозапись
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.GroupUpdate.MessageAllow">
            <summary>
            Подписка на сообщения от сообщества
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.GroupUpdate.MessageDeny">
            <summary>
            Новый запрет сообщений от сообщества(MessageDeny)
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.GroupUpdate.PhotoComment">
            <summary>
            Добавление/редактирование/восстановление комментария к фотографии(PhotoCommentNew, PhotoCommentEdit, PhotoCommentRestore)
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.GroupUpdate.PhotoCommentDelete">
            <summary>
            Удаление комментария к фотографии(PhotoCommentDelete)
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.GroupUpdate.VideoComment">
            <summary>
            Добавление/редактирование/восстановление комментария к видео(VideoCommentNew, VideoCommentEdit, VideoCommentRestore)
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.GroupUpdate.VideoCommentDelete">
            <summary>
            Удаление комментария к видео(VideoCommentDelete)
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.GroupUpdate.BoardPost">
            <summary>
            Добавление/редактирование/восстановление комментария в обсуждении(BoardPostNew, BoardPostEdit, BoardPostRestore)
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.GroupUpdate.BoardPostDelete">
            <summary>
            Удаление комментария в обсуждении(BoardPostDelete)
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.GroupUpdate.GroupChangePhoto">
            <summary>
            Изменение главного фото
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.GroupUpdate.GroupJoin">
            <summary>
            Добавление участника или заявки на вступление в сообщество
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.GroupUpdate.GroupLeave">
            <summary>
            Удаление/выход участника из сообщества
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.GroupUpdate.GroupOfficersEdit">
            <summary>
            Редактирование списка руководителей
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.GroupUpdate.MarketComment">
            <summary>
            Добавление/редактирование/восстановление комментария к товару(MarketCommentNew, MarketCommentEdit, MarketCommentRestore)
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.GroupUpdate.MarketCommentDelete">
            <summary>
            Удаление комментария к товару(MarketCommentDelete)
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.GroupUpdate.PollVoteNew">
            <summary>
            Добавление голоса в публичном опросе
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.GroupUpdate.UserBlock">
            <summary>
            Добавление пользователя в чёрный список
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.GroupUpdate.UserUnblock">
            <summary>
            Удаление пользователя из чёрного списка
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.GroupUpdate.WallPost">
            <summary>
            Новая запись на стене(WallPost, WallRepost)
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.GroupUpdate.WallReply">
            <summary>
            Добавление/редактирование/восстановление комментария на стене(WallReplyNew, WallReplyEdit, WallReplyRestore)
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.GroupUpdate.WallReplyDelete">
            <summary>
            Удаление комментария к записи(WallReplyDelete)
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.GroupUpdate.GroupId">
            <summary>
            ID группы
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.GroupUpdate.Secret">
            <summary>
            Secret Key для Callback
            </summary>
        </member>
        <member name="M:VkNet.Model.GroupUpdate.GroupUpdate.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.GroupUpdate.MarketComment">
            <summary>
            Добавление/редактирование/восстановление комментария к товару(MarketCommentNew, MarketCommentEdit, MarketCommentRestore)(Comment с дополнительными полями)
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.MarketComment.ItemId">
            <summary>
            Идентификатор товара
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.MarketComment.MarketOwnerId">
            <summary>
            Идентификатор владельца товара
            </summary>
        </member>
        <member name="M:VkNet.Model.GroupUpdate.MarketComment.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
        </member>
        <member name="T:VkNet.Model.GroupUpdate.MarketCommentDelete">
            <summary>
            Удаление комментария к товару(MarketCommentDelete)
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.MarketCommentDelete.Id">
            <summary>
            Идентификатор комментария
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.MarketCommentDelete.ItemId">
            <summary>
            Идентификатор товара
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.MarketCommentDelete.OwnerId">
            <summary>
            Идентификатор владельца товара
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.MarketCommentDelete.UserId">
            <summary>
            Идентификатор автора комментария
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.MarketCommentDelete.DeleterId">
            <summary>
            Идентификатор пользователя, который удалил комментарий
            </summary>
        </member>
        <member name="M:VkNet.Model.GroupUpdate.MarketCommentDelete.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
        </member>
        <member name="T:VkNet.Model.GroupUpdate.MessageAllow">
            <summary>
            Подписка на сообщения от сообщества(MessageAllow, ваш капитан!)
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.MessageAllow.UserId">
            <summary>
            Идентификатор пользователя
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.MessageAllow.Key">
            <summary>
            Параметр, переданный в методе messages.allowMessagesFromGroup
            </summary>
        </member>
        <member name="M:VkNet.Model.GroupUpdate.MessageAllow.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
        </member>
        <member name="T:VkNet.Model.GroupUpdate.MessageDeny">
            <summary>
            Новый запрет сообщений от сообщества(MessageDeny)
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.MessageDeny.UserId">
            <summary>
            Идентификатор пользователя
            </summary>
        </member>
        <member name="M:VkNet.Model.GroupUpdate.MessageDeny.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
        </member>
        <member name="T:VkNet.Model.GroupUpdate.PhotoComment">
            <summary>
            Добавление/редактирование/восстановление комментария к фотографии(PhotoCommentNew, PhotoCommentEdit, PhotoCommentRestore)(Comment с дополнительными полями)
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.PhotoComment.PhotoId">
            <summary>
            Идентификатор фотографии
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.PhotoComment.PhotoOwnerId">
            <summary>
            Идентификатор владельца фотографии
            </summary>
        </member>
        <member name="M:VkNet.Model.GroupUpdate.PhotoComment.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
        </member>
        <member name="T:VkNet.Model.GroupUpdate.PhotoCommentDelete">
            <summary>
            Удаление комментария к фотографии(PhotoCommentDelete)
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.PhotoCommentDelete.Id">
            <summary>
            Идентификатор комментария
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.PhotoCommentDelete.PhotoId">
            <summary>
            Идентификатор фотографии
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.PhotoCommentDelete.OwnerId">
            <summary>
            Идентификатор владельца фотографии
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.PhotoCommentDelete.UserId">
            <summary>
            Идентификатор автора комментария
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.PhotoCommentDelete.DeleterId">
            <summary>
            Идентификатор пользователя, который удалил комментарий
            </summary>
        </member>
        <member name="M:VkNet.Model.GroupUpdate.PhotoCommentDelete.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
        </member>
        <member name="T:VkNet.Model.GroupUpdate.PollVoteNew">
            <summary>
            Добавление голоса в публичном опросе
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.PollVoteNew.UserId">
            <summary>
            Идентификатор пользователя
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.PollVoteNew.PollId">
            <summary>
            Идентификатор опроса
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.PollVoteNew.OptionId">
            <summary>
            Идентификатор варианта ответа
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.PollVoteNew.OwnerId">
            <summary>
            Идентификатор владельца опроса
            </summary>
        </member>
        <member name="M:VkNet.Model.GroupUpdate.PollVoteNew.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
        </member>
        <member name="T:VkNet.Model.GroupUpdate.UserBlock">
            <summary>
            Добавление пользователя в чёрный список
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.UserBlock.UserId">
            <summary>
            Идентификатор пользователя
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.UserBlock.AdminId">
            <summary>
            Идентификатор администратора, который внёс пользователя в чёрный список
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.UserBlock.UnblockDate">
            <summary>
            Дата разблокировки
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.UserBlock.Reason">
            <summary>
            Причины блокировки пользователя
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.UserBlock.Comment">
            <summary>
            Комментарий администратора к блокировке
            </summary>
        </member>
        <member name="M:VkNet.Model.GroupUpdate.UserBlock.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
        </member>
        <member name="T:VkNet.Model.GroupUpdate.UserUnblock">
            <summary>
            Удаление пользователя из чёрного списка
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.UserUnblock.UserId">
            <summary>
            Идентификатор пользователя
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.UserUnblock.AdminId">
            <summary>
            Идентификатор администратора, который убрал пользователя из чёрного списка
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.UserUnblock.ByEndDate">
            <summary>
            Была ли разблокировка по окончанию блокировки
            </summary>
        </member>
        <member name="M:VkNet.Model.GroupUpdate.UserUnblock.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
        </member>
        <member name="T:VkNet.Model.GroupUpdate.VideoComment">
            <summary>
            Добавление/редактирование/восстановление комментария к видео(VideoCommentNew, VideoCommentEdit, VideoCommentRestore)(Comment с дополнительными полями)
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.VideoComment.VideoId">
            <summary>
            Идентификатор видеозаписи
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.VideoComment.VideoOwnerId">
            <summary>
            Идентификатор владельца видеозаписи
            </summary>
        </member>
        <member name="M:VkNet.Model.GroupUpdate.VideoComment.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
        </member>
        <member name="T:VkNet.Model.GroupUpdate.VideoCommentDelete">
            <summary>
            Удаление комментария к видео(VideoCommentDelete)
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.VideoCommentDelete.Id">
            <summary>
            Идентификатор комментария
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.VideoCommentDelete.VideoId">
            <summary>
            Идентификатор видео
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.VideoCommentDelete.OwnerId">
            <summary>
            Идентификатор владельца видео
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.VideoCommentDelete.UserId">
            <summary>
            Идентификатор автора комментария
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.VideoCommentDelete.DeleterId">
            <summary>
            Идентификатор пользователя, который удалил комментарий
            </summary>
        </member>
        <member name="M:VkNet.Model.GroupUpdate.VideoCommentDelete.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
        </member>
        <member name="T:VkNet.Model.GroupUpdate.WallPost">
            <summary>
            Новая запись на стене(WallPost, WallRepost)(Post с дополнительными полями)
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.WallPost.PostponedId">
            <summary>
            Id отложенной записи
            </summary>
        </member>
        <member name="M:VkNet.Model.GroupUpdate.WallPost.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
        </member>
        <member name="T:VkNet.Model.GroupUpdate.WallReply">
            <summary>
            Добавление/редактирование/восстановление комментария на стене(WallReplyNew, WallReplyEdit, WallReplyRestore)(Comment с дополнительными полями)
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.WallReply.PostId">
            <summary>
            Идентификатор записи
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.WallReply.PostOwnerId">
            <summary>
            Идентификатор владельца записи
            </summary>
        </member>
        <member name="M:VkNet.Model.GroupUpdate.WallReply.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
        </member>
        <member name="T:VkNet.Model.GroupUpdate.WallReplyDelete">
            <summary>
            Удаление комментария к записи(WallReplyDelete)
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.WallReplyDelete.Id">
            <summary>
            Идентификатор комментария
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.WallReplyDelete.PostId">
            <summary>
            Идентификатор записи, к которой был оставлен комментарий
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.WallReplyDelete.OwnerId">
            <summary>
            Идентификатор владельца стены
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.WallReplyDelete.UserId">
            <summary>
            Идентификатор автора комментария
            </summary>
        </member>
        <member name="P:VkNet.Model.GroupUpdate.WallReplyDelete.DeleterId">
            <summary>
            Идентификатор пользователя, который удалил комментарий
            </summary>
        </member>
        <member name="M:VkNet.Model.GroupUpdate.WallReplyDelete.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
        </member>
        <member name="T:VkNet.Model.History">
            <summary>
            История изменения объекта
            </summary>
        </member>
        <member name="P:VkNet.Model.History.Id">
            <summary>
            Идентификатор.
            </summary>
        </member>
        <member name="P:VkNet.Model.History.Length">
            <summary>
            Длина символов.
            </summary>
            <remarks>
            При необходимости сделать nullable
            </remarks>
        </member>
        <member name="P:VkNet.Model.History.Date">
            <summary>
            Дата изменения.
            </summary>
        </member>
        <member name="P:VkNet.Model.History.EditorId">
            <summary>
            Идентификатор пользователя применившего изменения.
            </summary>
        </member>
        <member name="P:VkNet.Model.History.EditorName">
            <summary>
            Имя пользователя применившего изменения.
            </summary>
        </member>
        <member name="M:VkNet.Model.History.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.HistoryAttachment">
            <summary>
            Вложения материалов диалога или беседы
            </summary>
        </member>
        <member name="P:VkNet.Model.HistoryAttachment.MessageId">
            <summary>
            Идентификатор сообщения, в котором было отправлено вложение.
            </summary>
        </member>
        <member name="P:VkNet.Model.HistoryAttachment.Attachment">
            <summary>
            Информация о вложении.
            </summary>
        </member>
        <member name="M:VkNet.Model.HistoryAttachment.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.IApiAuthParams">
            <summary>
            Параметры авторизации
            </summary>
        </member>
        <member name="P:VkNet.Model.IApiAuthParams.ApplicationId">
            <summary>
            Идентификатор приложения с помощью которого будет авторизован пользователь
            </summary>
        </member>
        <member name="P:VkNet.Model.IApiAuthParams.Login">
            <summary>
            Логин пользователя
            </summary>
        </member>
        <member name="P:VkNet.Model.IApiAuthParams.Password">
            <summary>
            Пароль пользователя
            </summary>
        </member>
        <member name="P:VkNet.Model.IApiAuthParams.Settings">
            <summary>
            Права доступа приложений
            См. описание <see href="https://vk.com/dev/permissions" />
            </summary>
            <remarks>
            ВНИМАНИЕ!!! Settings.All по умолчанию не содержит Settings.Offline и
            Settings.Messages
            </remarks>
        </member>
        <member name="P:VkNet.Model.IApiAuthParams.TwoFactorAuthorization">
            <summary>
            Функция двух факторной авторизации
            </summary>
        </member>
        <member name="P:VkNet.Model.IApiAuthParams.AccessToken">
            <summary>
            Токен доступа, полученный извне
            </summary>
        </member>
        <member name="P:VkNet.Model.IApiAuthParams.TokenExpireTime">
            <summary>
            Время, в течении которого действует токен доступа полученный извне (0 -
            бесконечно, по умолчанию)
            Используется при авторизации с помощью токена доступа, полученного извне
            </summary>
        </member>
        <member name="P:VkNet.Model.IApiAuthParams.UserId">
            <summary>
            Идентификатор пользователя, установившего приложение
            Используется при авторизации с помощью токена доступа, полученного извне
            </summary>
        </member>
        <member name="P:VkNet.Model.IApiAuthParams.CaptchaSid">
            <summary>
            Идентификатор капчи (если установлена)
            </summary>
        </member>
        <member name="P:VkNet.Model.IApiAuthParams.CaptchaKey">
            <summary>
            Ключ капчи (если необходимо)
            </summary>
        </member>
        <member name="P:VkNet.Model.IApiAuthParams.Host">
            <summary>
            Имя узла прокси-сервера.
            </summary>
        </member>
        <member name="P:VkNet.Model.IApiAuthParams.Port">
            <summary>
            Номер порта используемого Host.
            </summary>
        </member>
        <member name="P:VkNet.Model.IApiAuthParams.ProxyLogin">
            <summary>
            Логин для прокси с авторизацией. Если прокси без авторизации - оставить пустым
            </summary>
        </member>
        <member name="P:VkNet.Model.IApiAuthParams.ProxyPassword">
            <summary>
            Пароль для прокси с авторищацией. Если прокси без авторизации - оставить пустым
            </summary>
        </member>
        <member name="P:VkNet.Model.IApiAuthParams.Phone">
            <summary>
            Номер телефона
            </summary>
        </member>
        <member name="P:VkNet.Model.IApiAuthParams.ClientSecret">
            <summary>
            Cекретный ключ Вашего приложения.
            </summary>
        </member>
        <member name="P:VkNet.Model.IApiAuthParams.ForceSms">
            <summary>
            Если возникли проблемы с получением кода из приложения или пользователь не
            хочет использовать приложение для генерации кодов,
            Вы можете форсировать получение кода по SMS, повторно передав запрос
            авторизации с этим параметром равным <c> true </c>
            </summary>
        </member>
        <member name="P:VkNet.Model.IApiAuthParams.Display">
            <summary>
            Указывает тип отображения страницы авторизации.
            </summary>
        </member>
        <member name="P:VkNet.Model.IApiAuthParams.RedirectUri">
            <summary>
            Адрес, на который будет переадресован пользователь после прохождения
            авторизации / передан code.
            </summary>
        </member>
        <member name="P:VkNet.Model.IApiAuthParams.State">
            <summary>
            Произвольная строка, которая будет возвращена вместе с результатом авторизации.
            </summary>
        </member>
        <member name="P:VkNet.Model.IApiAuthParams.TwoFactorSupported">
            <summary>
            Передайте <c> true </c>, чтобы включить поддержку двухфакторной аутентификации.
            </summary>
        </member>
        <member name="P:VkNet.Model.IApiAuthParams.GrantType">
            <summary>
            Тип авторизации.
            </summary>
        </member>
        <member name="P:VkNet.Model.IApiAuthParams.ResponseType">
            <summary>
            Тип ответа, который Вы хотите получить.
            </summary>
        </member>
        <member name="P:VkNet.Model.IApiAuthParams.Revoke">
            <summary>
            Параметр, указывающий, что необходимо не пропускать этап подтверждения прав,
            даже если пользователь уже авторизован.
            (При <c> true </c>)
            </summary>
        </member>
        <member name="P:VkNet.Model.IApiAuthParams.Code">
            <summary>
            Код подтверждения двухфакторной авторизации / временный код, полученный после
            прохождения авторизации.
            </summary>
        </member>
        <member name="T:VkNet.Model.Image">
            <summary>
            Копия изображения обложки.
            </summary>
        </member>
        <member name="P:VkNet.Model.Image.Url">
            <summary>
            URL копии;
            </summary>
        </member>
        <member name="P:VkNet.Model.Image.Width">
            <summary>
            Ширина копии;
            </summary>
        </member>
        <member name="P:VkNet.Model.Image.Height">
            <summary>
            Высота копии.
            </summary>
        </member>
        <member name="M:VkNet.Model.Image.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.Image.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Image">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.InformationAboutOffers">
            <summary>
            Информация о предложениях.
            </summary>
        </member>
        <member name="P:VkNet.Model.InformationAboutOffers.Id">
            <summary>
            Идентификатор.
            </summary>
        </member>
        <member name="P:VkNet.Model.InformationAboutOffers.Title">
            <summary>
            Заголовок.
            </summary>
        </member>
        <member name="P:VkNet.Model.InformationAboutOffers.Instruction">
            <summary>
            Инструкция.
            </summary>
        </member>
        <member name="P:VkNet.Model.InformationAboutOffers.InstructionHtml">
            <summary>
            Инструкция с html разметкой.
            </summary>
            <value>
            The instruction_html.
            </value>
        </member>
        <member name="P:VkNet.Model.InformationAboutOffers.ShortDescription">
            <summary>
            Краткое описание.
            </summary>
        </member>
        <member name="P:VkNet.Model.InformationAboutOffers.Description">
            <summary>
            Описание.
            </summary>
        </member>
        <member name="P:VkNet.Model.InformationAboutOffers.Img">
            <summary>
            Ссылка на изображение.
            </summary>
        </member>
        <member name="P:VkNet.Model.InformationAboutOffers.Tag">
            <summary>
            Тег.
            </summary>
        </member>
        <member name="P:VkNet.Model.InformationAboutOffers.Price">
            <summary>
            Цена.
            </summary>
        </member>
        <member name="M:VkNet.Model.InformationAboutOffers.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.Keyboard.IKeyboardBuilder">
            <summary>
            Конструктор клавиатур
            </summary>
        </member>
        <member name="M:VkNet.Model.Keyboard.IKeyboardBuilder.AddButton(System.String,System.String,VkNet.Enums.SafetyEnums.KeyboardButtonColor,System.String)">
            <summary>
            Добавить кнопку
            </summary>
            <param name="label">Надписть на кнопке</param>
            <param name="extra">Дополнительная информация о кнопке</param>
            <param name="type">Основная информация о кнопке</param>
            <param name="color">Цвет кнопки</param>
            <returns>Конструктор клавиатур</returns>
        </member>
        <member name="M:VkNet.Model.Keyboard.IKeyboardBuilder.AddLine">
            <summary>
            Добавить строку в клавиатуру
            </summary>
            <returns>Конструктор клавиатур</returns>
        </member>
        <member name="M:VkNet.Model.Keyboard.IKeyboardBuilder.SetOneTime">
            <summary>
            Сделать клавиатуру одноразовой
            </summary>
            <returns>Конструктор клавиатур</returns>
        </member>
        <member name="M:VkNet.Model.Keyboard.IKeyboardBuilder.Clear">
            <summary>
            Удалить все добавленные кнопки и строки из клавиатуры
            </summary>
            <returns>Конструктор клавиатур</returns>
        </member>
        <member name="M:VkNet.Model.Keyboard.IKeyboardBuilder.Build">
            <summary>
            Построить
            </summary>
            <returns>Клавиатура</returns>
        </member>
        <member name="T:VkNet.Model.Keyboard.KeyboardBuilder">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Model.Keyboard.KeyboardBuilder.#ctor">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Model.Keyboard.KeyboardBuilder.#ctor(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Model.Keyboard.KeyboardBuilder.#ctor(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Model.Keyboard.KeyboardBuilder.AddButton(System.String,System.String,VkNet.Enums.SafetyEnums.KeyboardButtonColor,System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Model.Keyboard.KeyboardBuilder.AddLine">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Model.Keyboard.KeyboardBuilder.SetOneTime">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Model.Keyboard.KeyboardBuilder.Clear">
            <inheritdoc />
        </member>
        <member name="M:VkNet.Model.Keyboard.KeyboardBuilder.Build">
            <inheritdoc />
        </member>
        <member name="T:VkNet.Model.Keyboard.MessageKeyboard">
            <summary>
            Объект клавиатуры, отправляемой ботом.
            </summary>
        </member>
        <member name="P:VkNet.Model.Keyboard.MessageKeyboard.OneTime">
            <summary>
            Скрыть клавиатуру сразу же после нажатия на кнопку.
            </summary>
        </member>
        <member name="P:VkNet.Model.Keyboard.MessageKeyboard.Buttons">
            <summary>
            Массив кнопок отправляемых ботом, размером до 4х10
            </summary>
        </member>
        <member name="M:VkNet.Model.Keyboard.MessageKeyboard.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.Keyboard.MessageKeyboard.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Keyboard.MessageKeyboard">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="T:VkNet.Model.Keyboard.MessageKeyboardButton">
            <summary>
            Кнопка клавиатуры, отправляемая ботом.
            </summary>
        </member>
        <member name="P:VkNet.Model.Keyboard.MessageKeyboardButton.Action">
            <summary>
            Информация содержащаяся в кнопке
            </summary>
        </member>
        <member name="P:VkNet.Model.Keyboard.MessageKeyboardButton.Color">
            <summary>
            Цвет кнопки
            </summary>
        </member>
        <member name="M:VkNet.Model.Keyboard.MessageKeyboardButton.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.Keyboard.MessageKeyboardButton.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Keyboard.MessageKeyboardButton">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="T:VkNet.Model.Keyboard.MessageKeyboardButtonAction">
            <summary>
            Информация о кнопке клавиатуры.
            </summary>
        </member>
        <member name="P:VkNet.Model.Keyboard.MessageKeyboardButtonAction.Type">
            <summary>
            Содержит 'text'
            </summary>
        </member>
        <member name="P:VkNet.Model.Keyboard.MessageKeyboardButtonAction.Payload">
            <summary>
            Дополнительная информация.
            </summary>
            <remarks>JSON строка с payload, до 255 символов</remarks>
        </member>
        <member name="P:VkNet.Model.Keyboard.MessageKeyboardButtonAction.Label">
            <summary>
            Текст на кнопке, до 40 символов
            </summary>
        </member>
        <member name="P:VkNet.Model.Keyboard.MessageKeyboardButtonAction.Hash">
            <summary>
            <list type="KeyboardButtonActionType">
            <listheader>
            <term>Значение параметра <see cref="P:VkNet.Model.Keyboard.MessageKeyboardButtonAction.Type"/></term>
            <description>description</description>
            </listheader>
            <item>
            <term><see cref="F:VkNet.Enums.SafetyEnums.KeyboardButtonActionType.VkApp"/></term>
            <description>хэш для навигации в приложении, будет передан в строке параметров запуска после символа #</description>
            </item>
            <item>
            <term><see cref="F:VkNet.Enums.SafetyEnums.KeyboardButtonActionType.VkPay"/></term>
            <description>строка, содержащая параметры платежа VK Pay и идентификатор приложения в параметре aid , разделенные &amp;.</description>
            </item>
            </list>
            </summary>
            <remarks>
            Пример: action=transfer-to-group&amp;group_id=1&amp;aid=10.
            </remarks>
        </member>
        <member name="P:VkNet.Model.Keyboard.MessageKeyboardButtonAction.AppId">
            <summary>
            Идентификатор вызываемого приложения с типом <see cref="F:VkNet.Enums.SafetyEnums.KeyboardButtonActionType.VkApp"/>.
            </summary>
            <remarks>
            Пока может использоваться только приложение, которому мы выдали под это доступ.
            Получить доступ для Вашего приложения Вы можете <a href="https://vk.com/support?act=home_api">здесь </a>;
            </remarks>
        </member>
        <member name="P:VkNet.Model.Keyboard.MessageKeyboardButtonAction.OwnerId">
            <summary>
            Идентификатор сообщества, в котором установлено приложение, если требуется открыть в контексте сообщества.
            </summary>
            <remarks>
            Для <see cref="P:VkNet.Model.Keyboard.MessageKeyboardButtonAction.Type"/> со значением <see cref="F:VkNet.Enums.SafetyEnums.KeyboardButtonActionType.VkApp"/>
            </remarks>
        </member>
        <member name="M:VkNet.Model.Keyboard.MessageKeyboardButtonAction.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.Keyboard.MessageKeyboardButtonAction.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.Keyboard.MessageKeyboardButtonAction">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="T:VkNet.Model.LastActivity">
            <summary>
            Информация о последней активности пользователя.
            См. описание http://vk.com/dev/messages.getLastActivity
            </summary>
        </member>
        <member name="P:VkNet.Model.LastActivity.UserId">
            <summary>
            Идентификатор пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.LastActivity.IsOnline">
            <summary>
            Текущий статус пользователя (true - в сети, false - не в сети).
            </summary>
        </member>
        <member name="P:VkNet.Model.LastActivity.Time">
            <summary>
            Дата последней активности пользователя.
            </summary>
        </member>
        <member name="M:VkNet.Model.LastActivity.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.LastSeen">
            <summary>
            Время последнего посещения.
            </summary>
        </member>
        <member name="P:VkNet.Model.LastSeen.Time">
            <summary>
            Время последнего посещения в формате unixtime. .
            </summary>
        </member>
        <member name="P:VkNet.Model.LastSeen.Platform">
            <summary>
            Тип платформы, через которую был осуществлён последний вход. Подробнее cмотрите
            на странице Подключение к LongPoll
            серверу. .
            </summary>
        </member>
        <member name="M:VkNet.Model.LastSeen.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.Lead">
            <summary>
            Статистика по рекламной акции.
            </summary>
        </member>
        <member name="P:VkNet.Model.Lead.Spent">
            <summary>
            Amount of spent votes
            </summary>
        </member>
        <member name="P:VkNet.Model.Lead.Started">
            <summary>
            Started offers number
            </summary>
        </member>
        <member name="P:VkNet.Model.Lead.Limit">
            <summary>
            Lead limit
            </summary>
        </member>
        <member name="P:VkNet.Model.Lead.Days">
            <summary>
            Property
            </summary>
        </member>
        <member name="P:VkNet.Model.Lead.Impressions">
            <summary>
            Impressions number
            </summary>
        </member>
        <member name="P:VkNet.Model.Lead.Completed">
            <summary>
            Completed offers number
            </summary>
        </member>
        <member name="P:VkNet.Model.Lead.Cost">
            <summary>
            Offer cost
            </summary>
        </member>
        <member name="T:VkNet.Model.LeadAnswer">
            <summary>
            ответ на вопрос
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadAnswer.Key">
            <summary>
            ключ ответа (в случае, если был задан при создании формы)
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadAnswer.Value">
            <summary>
            текст ответа
            </summary>
        </member>
        <member name="T:VkNet.Model.LeadAnswerInfo">
            <summary>
            информация об ответах на вопросы — массив структур со следующими полями
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadAnswerInfo.Key">
            <summary>
            ключ вопроса.
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadAnswerInfo.Answer">
            <summary>
            ответ на вопрос
            </summary>
        </member>
        <member name="T:VkNet.Model.LeadDays">
            <summary>
            Days
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadDays.Spent">
            <summary>
            Amount of spent votes
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadDays.Impressions">
            <summary>
            Impressions number
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadDays.Completed">
            <summary>
            Completed offers number
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadDays.Started">
            <summary>
            Started offers number
            </summary>
        </member>
        <member name="T:VkNet.Model.LeaderboardResult">
            <summary>
            </summary>
        </member>
        <member name="P:VkNet.Model.LeaderboardResult.Count">
            <summary>
            </summary>
        </member>
        <member name="P:VkNet.Model.LeaderboardResult.Items">
            <summary>
            </summary>
        </member>
        <member name="P:VkNet.Model.LeaderboardResult.Profiles">
            <summary>
            </summary>
        </member>
        <member name="T:VkNet.Model.LeaderboardItem">
            <summary>
            </summary>
        </member>
        <member name="P:VkNet.Model.LeaderboardItem.Score">
            <summary>
            </summary>
        </member>
        <member name="P:VkNet.Model.LeaderboardItem.Level">
            <summary>
            </summary>
        </member>
        <member name="P:VkNet.Model.LeaderboardItem.Points">
            <summary>
            </summary>
        </member>
        <member name="P:VkNet.Model.LeaderboardItem.UserId">
            <summary>
            </summary>
        </member>
        <member name="T:VkNet.Model.LeadFormCreateResult">
            <summary>
            Результат метода LeadForm.Create
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadFormCreateResult.FormId">
            <summary>
            Идентификатор формы
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadFormCreateResult.LeadsCount">
            <summary>
            Количество заявок
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadFormCreateResult.Url">
            <summary>
            Ссылка на форму
            </summary>
        </member>
        <member name="T:VkNet.Model.LeadForms.LeadFormsCreateParams">
            <summary>
            Параметры запроса leadForms.createParams
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadForms.LeadFormsCreateParams.GroupId">
            <summary>
            Идентификатор группы, в которой надо создать форму. обязательный параметр, целое число
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadForms.LeadFormsCreateParams.Name">
            <summary>
            Название формы (видно только администратору). обязательный параметр, строка, максимальная длина 100
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadForms.LeadFormsCreateParams.Title">
            <summary>
            Заголовок формы (видят пользователи). обязательный параметр, строка, максимальная длина 60
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadForms.LeadFormsCreateParams.Description">
            <summary>
            Описание формы. обязательный параметр, строка, максимальная длина 600
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadForms.LeadFormsCreateParams.Questions">
            <summary>
            Информация о вопросах формы.
            </summary>
            <remarks>
            Для построения рекомендуется использовать <see cref="T:VkNet.Abstractions.Utils.ILeadFormsQuestionBuilder"/>
            </remarks>
        </member>
        <member name="P:VkNet.Model.LeadForms.LeadFormsCreateParams.PolicyLinkUrl">
            <summary>
            Ссылка на политику конфиденциальности. строка, обязательный параметр, максимальная длина 200
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadForms.LeadFormsCreateParams.Photo">
            <summary>
            Обложка формы.
            Используйте значение, полученное после загрузки фотографии на сервер. См. метод leadForms.getUploadURL.
            Также можно переиспользовать существующую фотографию из другой формы. Используйте значение поля photo, которое возвращает метод leadForms.get или leadForms.list. строка
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadForms.LeadFormsCreateParams.Confirmation">
            <summary>
            Текст подтверждения, который увидит пользователь после отправки формы. строка, максимальная длина 300
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadForms.LeadFormsCreateParams.SiteLinkUrl">
            <summary>
            Ссылка на сайт или сообщество автора формы. строка, максимальная длина 200
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadForms.LeadFormsCreateParams.PixelCode">
            <summary>
            Передайте код пикселя ретаргетинга ВКонтакте в виде VK-RTRG-000000-XXXXX. По этому пикселю будет собираться аудитория пользователей, открывших форму. Подробнее о пикселе см. здесь. строка
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadForms.LeadFormsCreateParams.NotifyEmails">
            <summary>
            Передайте список email-адресов, разделённых запятой, на которые будут отправлены оповещения о заполнении пользователями формы. Можно указать до 10 адресов. список слов, разделенных через запятую
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadForms.LeadFormsCreateParams.Active">
            <summary>
            Передайте 1, чтобы активировать форму сразу после создания. Пользователи могут оставлять заявки только в активных формах. флаг, может принимать значения 1 или 0, по умолчанию 0
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadForms.LeadFormsCreateParams.OncePerUser">
            <summary>
            Передайте 1, чтобы разрешить каждому пользователю заполнять форму только один раз. флаг, может принимать значения 1 или 0, по умолчанию 0
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadForms.LeadFormsCreateParams.NotifyAdmins">
            <summary>
            Передайте список идентификаторов пользователей, которым будут отправлены оповещения о заполнении пользователями формы. Оповещения могут быть отправлены только администраторам сообщества. список положительных чисел, разделенных запятыми
            </summary>
        </member>
        <member name="T:VkNet.Model.LeadForms.LeadFormsUpdateParams">
            <summary>
            Параметры запроса leadForms.updateParams
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadForms.LeadFormsUpdateParams.GroupId">
            <summary>
            Идентификатор группы, в которой надо обновить форму. обязательный параметр, целое число
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadForms.LeadFormsUpdateParams.FormId">
            <summary>
            Идентификатор формы, которую надо обновить. обязательный параметр, целое число
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadForms.LeadFormsUpdateParams.Name">
            <summary>
            Новое название формы (видно только администратору). обязательный параметр, строка, максимальная длина 100
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadForms.LeadFormsUpdateParams.Title">
            <summary>
            Новый заголовок формы (видят пользователи). обязательный параметр, строка, максимальная длина 60
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadForms.LeadFormsUpdateParams.Description">
            <summary>
            Новое описание формы. обязательный параметр, строка, максимальная длина 600
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadForms.LeadFormsUpdateParams.Questions">
            <summary>
            Новые вопросы формы. Подробнее см. метод leadForms.create. данные в формате JSON, обязательный параметр
            </summary>
            <remarks>
            Для построения рекомендуется использовать <see cref="T:VkNet.Abstractions.Utils.ILeadFormsQuestionBuilder"/>
            </remarks>
        </member>
        <member name="P:VkNet.Model.LeadForms.LeadFormsUpdateParams.PolicyLinkUrl">
            <summary>
            Новая ссылка на политику конфиденциальности. строка, обязательный параметр, максимальная длина 200
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadForms.LeadFormsUpdateParams.Photo">
            <summary>
            Новая обложка формы. строка
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadForms.LeadFormsUpdateParams.Confirmation">
            <summary>
            Новый текст подтверждения, который увидит пользователь после отправки формы. строка, максимальная длина 300
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadForms.LeadFormsUpdateParams.SiteLinkUrl">
            <summary>
            Новая ссылка на сайт или сообщество автора формы. строка, максимальная длина 200
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadForms.LeadFormsUpdateParams.PixelCode">
            <summary>
            Новый код пикселя ретаргетинга ВКонтакте. строка
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadForms.LeadFormsUpdateParams.NotifyEmails">
            <summary>
            Новый список email-адресов, разделённых запятой, на которые будут отправлены оповещения о заполнении пользователями формы. Можно указать до 10 адресов. список слов, разделенных через запятую
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadForms.LeadFormsUpdateParams.Active">
            <summary>
            Передайте 1, чтобы активировать форму. Пользователи могут оставлять заявки только в активных формах. флаг, может принимать значения 1 или 0, по умолчанию 0
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadForms.LeadFormsUpdateParams.OncePerUser">
            <summary>
            Передайте 1, чтобы разрешить каждому пользователю заполнять форму только один раз. флаг, может принимать значения 1 или 0, по умолчанию 0
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadForms.LeadFormsUpdateParams.NotifyAdmins">
            <summary>
            Новый список идентификаторов пользователей, которым будут отправлены оповещения о заполнении пользователями формы. Оповещения могут быть отправлены только администраторам сообщества. список положительных чисел, разделенных запятыми
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadFormsQuestionInfo.Type">
            <summary>
            Тип вопроса
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadFormsQuestionInfo.Label">
            <summary>
            Заголовок вопроса (только для нестандартных вопросов)
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadFormsQuestionInfo.Key">
            <summary>
            Уникальный ключ вопроса (необязательно; только для нестандартных вопросов)
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadFormsQuestionInfo.Options">
            <summary>
            Массив возможных ответов на вопрос (только для нестандартных вопросов типа radio, select, checkbox)
            </summary>
        </member>
        <member name="T:VkNet.Model.LeadsComplete">
            <summary>
            При успешном завершении оффера
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadsComplete.Limit">
            <summary>
            Ограничение, установленное у текущего оффера;
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadsComplete.DayLimit">
            <summary>
            Ограничение, установленное у текущего оффера;
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadsComplete.Spent">
            <summary>
            Количество потраченных на акцию голосов;
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadsComplete.Cost">
            <summary>
            Стоимость одной выполненной акции;
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadsComplete.TestMode">
            <summary>
            Режим транзакции (1 — тестовый, 0 — реальный);
            </summary>
        </member>
        <member name="P:VkNet.Model.LeadsComplete.Success">
            <summary>
            Результат выполнения транзакции (всегда равно 1).
            </summary>
        </member>
        <member name="T:VkNet.Model.Likes">
            <summary>
            Информация о лайках к записи.
            См. описание http://vk.com/dev/post
            </summary>
        </member>
        <member name="P:VkNet.Model.Likes.Count">
            <summary>
            Число пользователей, которым понравилась запись.
            </summary>
        </member>
        <member name="P:VkNet.Model.Likes.UserLikes">
            <summary>
            Признак понравилась ли запись текущему пользователю.
            </summary>
        </member>
        <member name="P:VkNet.Model.Likes.CanLike">
            <summary>
            Признак может ли текущий пользователь поставить отметку "Мне нравится".
            </summary>
        </member>
        <member name="P:VkNet.Model.Likes.CanPublish">
            <summary>
            Признак может ли текущий пользователь сделать репост записи (опубликовать у
            себя запись).
            </summary>
        </member>
        <member name="M:VkNet.Model.Likes.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.LinkButton">
            <summary>
            ССылочная кнопка
            </summary>
        </member>
        <member name="P:VkNet.Model.LinkButton.Title">
            <summary>
            Название кнопки.
            </summary>
        </member>
        <member name="P:VkNet.Model.LinkButton.Uri">
            <summary>
            Ссылка на которую ведет кнопка.
            </summary>
        </member>
        <member name="M:VkNet.Model.LinkButton.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.LinkButtonAction">
            <summary>
            Действие кнопки
            </summary>
        </member>
        <member name="P:VkNet.Model.LinkButtonAction.Type">
            <summary>
            Тип действия. Возможные значения.
            </summary>
        </member>
        <member name="P:VkNet.Model.LinkButtonAction.Uri">
            <summary>
            Ссылка на которую ведет кнопка.
            </summary>
        </member>
        <member name="P:VkNet.Model.LinkButtonAction.Target">
            <summary>
            </summary>
        </member>
        <member name="P:VkNet.Model.LinkButtonAction.GroupId">
            <summary>
            </summary>
        </member>
        <member name="M:VkNet.Model.LinkButtonAction.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.LinkStat">
            <summary>
            </summary>
        </member>
        <member name="P:VkNet.Model.LinkStat.Timestamp">
            <summary>
            Время начала отсчета
            </summary>
        </member>
        <member name="P:VkNet.Model.LinkStat.Views">
            <summary>
            Общее число переходов
            </summary>
        </member>
        <member name="P:VkNet.Model.LinkStat.SexAge">
            <summary>
            Половозрастная статистика
            </summary>
        </member>
        <member name="P:VkNet.Model.LinkStat.Countries">
            <summary>
            Статистика по странам
            </summary>
        </member>
        <member name="P:VkNet.Model.LinkStat.Cities">
            <summary>
            Статистика по городам
            </summary>
        </member>
        <member name="T:VkNet.Model.LinkStatsResult">
            <summary>
            Данные о статистике.
            </summary>
        </member>
        <member name="P:VkNet.Model.LinkStatsResult.Key">
            <summary>
            Ключ
            </summary>
        </member>
        <member name="P:VkNet.Model.LinkStatsResult.Stats">
            <summary>
            Данные о статистике.
            </summary>
        </member>
        <member name="T:VkNet.Model.LinkStatus">
            <summary>
            API LinkStatus object.
            </summary>
        </member>
        <member name="P:VkNet.Model.LinkStatus.RedirectUrl">
            <summary>
            URL
            </summary>
        </member>
        <member name="P:VkNet.Model.LinkStatus.Status">
            <summary>
            Link status
            </summary>
        </member>
        <member name="P:VkNet.Model.LinkStatus.Description">
            <summary>
            Reject reason
            </summary>
        </member>
        <member name="T:VkNet.Model.LongPollHistoryResponse">
            <summary>
            Обновления в личных сообщениях пользователя.
            </summary>
        </member>
        <member name="M:VkNet.Model.LongPollHistoryResponse.#ctor">
            <summary>
            Обновления в личных сообщениях пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.LongPollHistoryResponse.History">
            <summary>
            История.
            </summary>
        </member>
        <member name="P:VkNet.Model.LongPollHistoryResponse.UnreadMessages">
            <summary>
            Количество непрочитанных сообщений
            </summary>
        </member>
        <member name="P:VkNet.Model.LongPollHistoryResponse.Messages">
            <summary>
            Колекция сообщений.
            </summary>
        </member>
        <member name="P:VkNet.Model.LongPollHistoryResponse.Profiles">
            <summary>
            Колекция профилей.
            </summary>
        </member>
        <member name="P:VkNet.Model.LongPollHistoryResponse.Groups">
            <summary>
            Колекция профилей.
            </summary>
        </member>
        <member name="P:VkNet.Model.LongPollHistoryResponse.NewPts">
            <summary>
            Последнее значение параметра new_pts, полученное от Long Poll сервера,
            используется для получения действий, которые
            хранятся всегда.
            </summary>
        </member>
        <member name="P:VkNet.Model.LongPollHistoryResponse.More">
            <summary>
            Если true — это означает, что нужно запросить оставшиеся данные с помощью
            запроса с параметром max_msg_id
            </summary>
        </member>
        <member name="M:VkNet.Model.LongPollHistoryResponse.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.LongPollServerResponse">
            <summary>
            Объект, с помощью которого можно подключиться к серверу быстрых сообщений для
            мгновенного
            получения приходящих сообщений и других событий.
            См. описание http://vk.com/dev/messages.getLongPollServer
            </summary>
        </member>
        <member name="P:VkNet.Model.LongPollServerResponse.Key">
            <summary>
            Ключ для подключения.
            </summary>
        </member>
        <member name="P:VkNet.Model.LongPollServerResponse.Server">
            <summary>
            Имя сервера быстрых сообщений.
            </summary>
        </member>
        <member name="P:VkNet.Model.LongPollServerResponse.Ts">
            <summary>
            Отметка времени.
            </summary>
        </member>
        <member name="P:VkNet.Model.LongPollServerResponse.Pts">
            <summary>
            Постоянное событие для работы с методом getLongPoolHistory
            </summary>
        </member>
        <member name="M:VkNet.Model.LongPollServerResponse.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.LookupContactsOther">
            <summary>
            Контактов, который не был найден.
            </summary>
        </member>
        <member name="P:VkNet.Model.LookupContactsOther.Contact">
            <summary>
            Контакт.
            </summary>
        </member>
        <member name="P:VkNet.Model.LookupContactsOther.CommonCount">
            <summary>
            Количество.
            </summary>
        </member>
        <member name="M:VkNet.Model.LookupContactsOther.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.LookupContactsResult">
            <summary>
            Результат поиск пользователей по другим сервисам.
            </summary>
        </member>
        <member name="P:VkNet.Model.LookupContactsResult.FoundList">
            <summary>
            Список объектов пользователей.
            </summary>
        </member>
        <member name="P:VkNet.Model.LookupContactsResult.Other">
            <summary>
            Список контактов, которые не были найдены.
            </summary>
        </member>
        <member name="M:VkNet.Model.LookupContactsResult.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.Lyrics">
            <summary>
            Текст аудиозаписи.
            См. описание http://vk.com/dev/audio.getLyrics
            </summary>
        </member>
        <member name="P:VkNet.Model.Lyrics.Id">
            <summary>
            Идентификатор текста аудиозаписи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Lyrics.Text">
            <summary>
            Тест аудиозаписи. В качестве переводов строк в тексте используется '\n'.
            </summary>
        </member>
        <member name="M:VkNet.Model.Lyrics.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.MarketCategory">
            <summary>
            Категория товара.
            </summary>
        </member>
        <member name="P:VkNet.Model.MarketCategory.Id">
            <summary>
            Идентификатор
            </summary>
        </member>
        <member name="P:VkNet.Model.MarketCategory.Name">
            <summary>
            Название категории
            </summary>
        </member>
        <member name="P:VkNet.Model.MarketCategory.Section">
            <summary>
            Секция
            </summary>
        </member>
        <member name="M:VkNet.Model.MarketCategory.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.MarketCategorySection">
            <summary>
            Секция катеогории товара
            </summary>
        </member>
        <member name="P:VkNet.Model.MarketCategorySection.Id">
            <summary>
            Идентификатор
            </summary>
        </member>
        <member name="P:VkNet.Model.MarketCategorySection.Name">
            <summary>
            Название секции
            </summary>
        </member>
        <member name="M:VkNet.Model.MarketCategorySection.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.MarketComment">
            <summary>
            ����������� � ������
            </summary>
        </member>
        <member name="P:VkNet.Model.MarketComment.Comments">
            <summary>
            ������ ������������.
            </summary>
        </member>
        <member name="P:VkNet.Model.MarketComment.Count">
            <summary>
            ���������� ������������.
            </summary>
        </member>
        <member name="P:VkNet.Model.MarketComment.Profiles">
            <summary>
            ������ �������������.
            </summary>
        </member>
        <member name="P:VkNet.Model.MarketComment.Groups">
            <summary>
            ������ ���������.
            </summary>
        </member>
        <member name="M:VkNet.Model.MarketComment.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            ��������� �� json.
            </summary>
            <param name="response"> ����� �������. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.Mention">
            <summary>
            Упоминание.
            </summary>
        </member>
        <member name="P:VkNet.Model.Mention.Id">
            <summary>
            Идентификатор записи на стене пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.Mention.FromId">
            <summary>
            Идентификатор пользователя, написавшего запись.
            </summary>
        </member>
        <member name="P:VkNet.Model.Mention.Date">
            <summary>
            Время публикаии записи в формате unixtime.
            </summary>
        </member>
        <member name="P:VkNet.Model.Mention.Text">
            <summary>
            Текст записи.
            </summary>
        </member>
        <member name="P:VkNet.Model.Mention.Likes">
            <summary>
            Содержит информацию о числе людей, которым понравилась данная запись, и
            понравилась ли она текущему пользователю.
            </summary>
        </member>
        <member name="P:VkNet.Model.Mention.Comments">
            <summary>
            Содержит информацию о количестве комментариев к записи и возможности текущего
            пользователя оставлять комментарии к
            ней.
            </summary>
        </member>
        <member name="P:VkNet.Model.Mention.Attachment">
            <summary>
            Содержит объект, который присоединен к текущей новости ( фотография, ссылка и
            т.п.). Более подробная информация
            представлена на странице Описание поля attachment.
            </summary>
        </member>
        <member name="P:VkNet.Model.Mention.Geo">
            <summary>
            Находится в записях со стен, в которых имеется информация о местоположении.
            </summary>
        </member>
        <member name="P:VkNet.Model.Mention.CopyOwnerId">
            <summary>
            Если запись является копией записи с чужой стены, то в поле содержится
            идентификатор владельца стены у которого
            была скопирована запись.
            </summary>
        </member>
        <member name="P:VkNet.Model.Mention.CopyPostId">
            <summary>
            Если запись является копией записи с чужой стены, то в поле содержится
            идентфикатор скопированной записи на стене
            ее владельца.
            </summary>
        </member>
        <member name="P:VkNet.Model.Mention.ToId">
            <summary>
            Идентификатор сообщества где было сделано упоминание.
            </summary>
            <remarks>
            Выведено экспериментально.
            </remarks>
        </member>
        <member name="P:VkNet.Model.Mention.PostId">
            <summary>
            Идентификатор поста.
            </summary>
            <remarks>
            Выведено экспериментально.
            </remarks>
        </member>
        <member name="P:VkNet.Model.Mention.PostType">
            <summary>
            Тип поста.
            </summary>
            <remarks>
            Выведено экспериментально.
            </remarks>
        </member>
        <member name="P:VkNet.Model.Mention.Reposts">
            <summary>
            Репосты.
            </summary>
            <remarks>
            Выведено экспериментально.
            </remarks>
        </member>
        <member name="M:VkNet.Model.Mention.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.MessageActionObject">
            <summary>
            Информация о сервисном действии с чатом.
            </summary>
        </member>
        <member name="P:VkNet.Model.MessageActionObject.Type">
            <summary>
            Информация о сервисном действии с чатом.
            </summary>
        </member>
        <member name="P:VkNet.Model.MessageActionObject.MemberId">
            <summary>
            Идентификатор пользователя, которого пригласили или исключили
            (для служебных сообщений с type = chat_invite_user, chat_invite_user_by_link или chat_kick_user).
            Идентификатор пользователя, который закрепил/открепил сообщение для action = chat_pin_message или chat_unpin_message.
            </summary>
        </member>
        <member name="P:VkNet.Model.MessageActionObject.Text">
            <summary>
            Название беседы (для служебных сообщений с type = chat_create или chat_title_update).
            </summary>
        </member>
        <member name="P:VkNet.Model.MessageActionObject.Email">
            <summary>
            Email, который пригласили или исключили (для служебных сообщений с type = chat_invite_user или chat_kick_user и отрицательным member_id).
            </summary>
        </member>
        <member name="P:VkNet.Model.MessageActionObject.Photo">
            <summary>
            Изображение-обложка чата.
            </summary>
        </member>
        <member name="M:VkNet.Model.MessageActionObject.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Преобразование из <see cref="T:VkNet.Utils.VkResponse"/> в <see cref="T:VkNet.Model.MessageActionObject"/>
            </summary>
            <param name="response">Ответ вк</param>
            <returns></returns>
        </member>
        <member name="M:VkNet.Model.MessageActionObject.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.MessageActionObject">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="T:VkNet.Model.MessageGetHistoryObject">
            <summary>
            Объект ответа на message.getHistory
            </summary>
        </member>
        <member name="P:VkNet.Model.MessageGetHistoryObject.TotalCount">
            <summary>
            Общее число результатов
            </summary>
        </member>
        <member name="P:VkNet.Model.MessageGetHistoryObject.Messages">
            <summary>
            Массив объектов <see cref="T:VkNet.Model.Message"/>
            </summary>
        </member>
        <member name="P:VkNet.Model.MessageGetHistoryObject.Conversations">
            <summary>
            Массив объектов <see cref="T:VkNet.Model.Conversation"/>
            <remarks>Возвращается, если был передан параметр Extended=<c>true</c></remarks>
            </summary>
        </member>
        <member name="P:VkNet.Model.MessageGetHistoryObject.Users">
            <summary>
            Массив объектов <see cref="T:VkNet.Model.User"/>
            <remarks>Возвращается, если был передан параметр Extended=<c>true</c></remarks>
            </summary>
        </member>
        <member name="P:VkNet.Model.MessageGetHistoryObject.Groups">
            <summary>
            Массив объектов <see cref="T:VkNet.Model.Group"/>
            <remarks>Возвращается, если был передан параметр Extended=<c>true</c></remarks>
            </summary>
        </member>
        <member name="T:VkNet.Model.MessageSearchResult">
            <summary>
            Результат метода messages.search
            </summary>
        </member>
        <member name="P:VkNet.Model.MessageSearchResult.Count">
            <summary>
            Количество найденных сообщений
            </summary>
        </member>
        <member name="P:VkNet.Model.MessageSearchResult.Items">
            <summary>
            Личные сообщения
            </summary>
        </member>
        <member name="P:VkNet.Model.MessageSearchResult.Profiles">
            <summary>
            Профили пользователей
            </summary>
        </member>
        <member name="P:VkNet.Model.MessageSearchResult.Groups">
            <summary>
            Сообщества
            </summary>
        </member>
        <member name="P:VkNet.Model.MessageSearchResult.Conversations">
            <summary>
            Беседы
            </summary>
        </member>
        <member name="T:VkNet.Model.MessagesGetObject">
            <summary>
            Результат выполнения запроса получения диалогов
            </summary>
        </member>
        <member name="P:VkNet.Model.MessagesGetObject.TotalCount">
            <summary>
            Общее число диалогов.
            Если Вы используете при вызове unread=true, то здесь будет содержаться
            количество непрочитанных диалогов
            </summary>
        </member>
        <member name="P:VkNet.Model.MessagesGetObject.Unread">
            <summary>
            Количество непрочитанных диалогов.
            Если Вы используете при вызове unread=true, то это поле возвращено не будет
            </summary>
        </member>
        <member name="P:VkNet.Model.MessagesGetObject.RealOffset">
            <summary>
            Если был передан параметр start_message_id, будет содержать итоговое смещение
            данного подмножества диалогов
            (оно может быть отрицательным, если был указан отрицательный offset).
            </summary>
        </member>
        <member name="P:VkNet.Model.MessagesGetObject.Messages">
            <summary>
            Диалоги
            </summary>
        </member>
        <member name="P:VkNet.Model.MessagesGetObject.InRead">
            <summary>
            Идентификатор последнего сообщения, прочитанного текущим пользователем
            </summary>
        </member>
        <member name="P:VkNet.Model.MessagesGetObject.OutRead">
            <summary>
            Идентификатор последнего сообщения, прочитанного собеседником.
            </summary>
        </member>
        <member name="M:VkNet.Model.MessagesGetObject.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> Объект типа MessagesGetObject </returns>
        </member>
        <member name="T:VkNet.Model.MessagesPushSettings">
            <summary>
            Настройки уведомлений для сообщений
            </summary>
        </member>
        <member name="P:VkNet.Model.MessagesPushSettings.NoSound">
            <summary>
            Отключить звук.
            </summary>
        </member>
        <member name="P:VkNet.Model.MessagesPushSettings.NoText">
            <summary>
            Не передавать текст сообщения.
            </summary>
        </member>
        <member name="M:VkNet.Model.MessagesPushSettings.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.MessagesSendResult">
            <summary>
            </summary>
        </member>
        <member name="P:VkNet.Model.MessagesSendResult.PeerId">
            <summary>
            Идентификатор назначения;
            </summary>
        </member>
        <member name="P:VkNet.Model.MessagesSendResult.MessageId">
            <summary>
            Идентификатор сообщения
            </summary>
        </member>
        <member name="P:VkNet.Model.MessagesSendResult.ErrorCode">
            <summary>
            Код ошибки если есть (в наличии в версии 5.101)
            </summary>
        </member>
        <member name="P:VkNet.Model.MessagesSendResult.Error">
            <summary>
            Cообщение об ошибке, если сообщение не было доставлено получателю.
            </summary>
        </member>
        <member name="M:VkNet.Model.MessagesSendResult.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.MetricHitResponse">
            <summary>
            Событие метрики.
            </summary>
        </member>
        <member name="P:VkNet.Model.MetricHitResponse.RedirectLink">
            <summary>
            Redirect link
            </summary>
        </member>
        <member name="P:VkNet.Model.MetricHitResponse.Result">
            <summary>
            Information whether request has been processed successfully
            </summary>
        </member>
        <member name="T:VkNet.Model.MetroStation">
            <summary>
            Станция метро
            </summary>
        </member>
        <member name="P:VkNet.Model.MetroStation.Id">
            <summary>
            Идентификатор станции метро
            </summary>
        </member>
        <member name="P:VkNet.Model.MetroStation.Name">
            <summary>
            Название станции метро
            </summary>
        </member>
        <member name="P:VkNet.Model.MetroStation.Color">
            <summary>
            Цвет ветки станции метро
            </summary>
        </member>
        <member name="T:VkNet.Model.Military">
            <summary>
            Информация о военной службе пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.Military.Unit">
            <summary>
            Номер части.
            </summary>
        </member>
        <member name="P:VkNet.Model.Military.UnitId">
            <summary>
            Идентификатор части в базе данных.
            </summary>
        </member>
        <member name="P:VkNet.Model.Military.CountryId">
            <summary>
            Идентификатор страны, в которой находится часть.
            </summary>
        </member>
        <member name="P:VkNet.Model.Military.From">
            <summary>
            Год начала службы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Military.Until">
            <summary>
            Год окончания службы.
            </summary>
        </member>
        <member name="M:VkNet.Model.Military.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.MutualFriend">
            <summary>
            Общий друг
            </summary>
        </member>
        <member name="P:VkNet.Model.MutualFriend.Id">
            <summary>
            Идентификатор
            </summary>
        </member>
        <member name="P:VkNet.Model.MutualFriend.CommonFriends">
            <summary>
            Идентификаторы общих друзей
            </summary>
        </member>
        <member name="P:VkNet.Model.MutualFriend.CommonCount">
            <summary>
            Количество общих друзей
            </summary>
        </member>
        <member name="M:VkNet.Model.MutualFriend.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.MutualFriend.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.MutualFriend">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="T:VkNet.Model.NewsBannedExList">
            <summary>
            Расширеный список забаненых новостей.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsBannedExList.Groups">
            <summary>
            В поле groups содержится массив идентификаторов сообществ, которые пользователь
            скрыл из ленты новостей.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsBannedExList.Profiles">
            <summary>
            В поле members содержится массив идентификаторов друзей, которые пользователь
            скрыл из ленты новостей.
            </summary>
        </member>
        <member name="M:VkNet.Model.NewsBannedExList.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.NewsBannedList">
            <summary>
            Список забаненых новостей.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsBannedList.Groups">
            <summary>
            В поле groups содержится массив идентификаторов сообществ, которые пользователь
            скрыл из ленты новостей.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsBannedList.Members">
            <summary>
            В поле members содержится массив идентификаторов друзей, которые пользователь
            скрыл из ленты новостей.
            </summary>
        </member>
        <member name="M:VkNet.Model.NewsBannedList.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.NewsFeed">
            <summary>
            Новости
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsFeed.Items">
            <summary>
            Массив новостей для текущего пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsFeed.Profiles">
            <summary>
            Информация о пользователях, которые находятся в списке новостей.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsFeed.Groups">
            <summary>
            Информация о группах, которые находятся в списке новостей.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsFeed.NewOffset">
            <summary>
            Содержит offset, который необходимо передать, для того, чтобы получить
            следующую часть новостей.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsFeed.NextFrom">
            <summary>
            Содержит start_from, который необходимо передать, для того, чтобы получить
            следующую часть новостей. Позволяет
            избавиться от дубликатов, которые могут возникнуть при появлении новых новостей
            между вызовами этого метода.
            </summary>
        </member>
        <member name="T:VkNet.Model.NewsItem">
            <summary>
            Элемент коллекции новостей.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsItem.Type">
            <summary>
            Тип списка новости, соответствующий одному из значений параметра filters.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsItem.SourceId">
            <summary>
            Идентификатор источника новости (положительный — новость пользователя,
            отрицательный — новость группы).
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsItem.Date">
            <summary>
            Время публикации новости в формате unixtime.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsItem.PostId">
            <summary>
            Находится в записях со стен и содержит идентификатор записи на стене владельца.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsItem.PostType">
            <summary>
            Находится в записях со стен, содержит тип новости (post или copy).
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsItem.FinalPost">
            <summary>
            Передается в случае, если этот пост сделан при удалении.
            </summary>
            <remarks>
            TODO: Установить настоящий тип данных
            </remarks>
        </member>
        <member name="P:VkNet.Model.NewsItem.CopyOwnerId">
            <summary>
            Находится в записях со стен, если сообщение является копией сообщения с чужой
            стены, и содержит идентификатор
            владельца стены, у которого было скопировано сообщение.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsItem.CopyPostId">
            <summary>
            Находится в записях со стен, если сообщение является копией сообщения с чужой
            стены, и содержит идентификатор
            скопированного сообщения на стене его владельца.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsItem.CopyHistory">
            <summary>
            Массив, содержащий историю репостов для записи. Возвращается только в том
            случае, если запись является репостом.
            Каждый из объектов массива, в свою очередь, является объектом-записью
            стандартного формата.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsItem.CopyPostDate">
            <summary>
            Находится в записях со стен, если сообщение является копией сообщения с чужой
            стены, и содержит дату скопированного
            сообщения.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsItem.Text">
            <summary>
            Находится в записях со стен и содержит текст записи.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsItem.CanEdit">
            <summary>
            Содержит <c> true </c>, если текущий пользователь может редактировать запись.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsItem.CanDelete">
            <summary>
            Возвращается, если пользователь может удалить новость, всегда содержит
            <c> true </c>.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsItem.Comments">
            <summary>
            Находится в записях со стен и содержит информацию о комментариях к записи.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsItem.Likes">
            <summary>
            Находится в записях со стен и содержит информацию о числе людей, которым
            понравилась данная запись.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsItem.Reposts">
            <summary>
            Находится в записях со стен и содержит информацию о числе людей, которые
            скопировали данную запись на свою
            страницу.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsItem.Attachments">
            <summary>
            Находится в записях со стен и содержит массив объектов, которые прикреплены к
            текущей новости (фотография, ссылка и
            т.п.). Более подробная информация представлена на странице Описание поля
            attachments.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsItem.Geo">
            <summary>
            Находится в записях со стен, в которых имеется информация о местоположении.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsItem.Photos">
            <summary>
            Содержат информацию о количестве объектов и до 5 последних объектов, связанных
            с данной новостью.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsItem.PhotoTags">
            <summary>
            Содержат информацию о количестве объектов и до 5 последних объектов, связанных
            с данной новостью.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsItem.Notes">
            <summary>
            Содержат информацию о количестве объектов и до 5 последних объектов, связанных
            с данной новостью.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsItem.Friends">
            <summary>
            Содержат информацию о количестве объектов и до 5 последних объектов, связанных
            с данной новостью.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsItem.Audios">
            <summary>
            Содержат информацию о количестве объектов и до 5 последних объектов, связанных
            с данной новостью.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsItem.Videos">
            <summary>
            Содержат информацию о количестве объектов и до 5 последних объектов, связанных
            с данной новостью.
            </summary>
        </member>
        <member name="T:VkNet.Model.NewsSearchItem">
            <summary>
            Новость
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsSearchItem.Id">
            <summary>
            Локальный идентификатор записи (для конкретного владельца).
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsSearchItem.OwnerId">
            <summary>
            Идентификатор владельца стены, на которой размещена запись. Если стена
            принадлежит сообществу, то данный параметр
            равен -gid (идентификатор сообщества со знаком минус).
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsSearchItem.FromId">
            <summary>
            Идентификатор автора записи;.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsSearchItem.Date">
            <summary>
            Время публикации записи в формате unixtime.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsSearchItem.Text">
            <summary>
            Текст записи.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsSearchItem.Comments">
            <summary>
            Содержит информацию о количестве комментариев к записи.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsSearchItem.Likes">
            <summary>
            Содержит информацию о числе людей, которым понравилась данная запись.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsSearchItem.Attachments">
            <summary>
            Находится в записях со стен и содержит массив объектов, которые прикреплены к
            текущей новости (фотография, ссылка и
            т.п.). Более подробная информация представлена на странице Описание поля
            attachments.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsSearchItem.Geo">
            <summary>
            Находится в записях со стен, в которых имеется информация о местоположении.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsSearchItem.SignerId">
            <summary>
            Идентификатор владельца записи.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsSearchItem.PostType">
            <summary>
            Тип записи
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsSearchItem.PostId">
            <summary>
            Идентификатор записи при PostType == reply
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsSearchItem.NextFrom">
            <summary>
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsSearchItem.Profiles">
            <summary>
            массив profiles
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsSearchItem.Groups">
            <summary>
            массив groups
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsSearchItem.PostSource">
            <summary>
            Информация информацию о том, каким образом (через интерфейс сайта, виджет и
            т.п.) была создана запись на стене.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsSearchItem.IsFavorite">
            <summary>
            В закладках
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsSearchItem.MarkedAsAds">
            <summary>
            Помечено как реклама
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsSearchItem.Views">
            <summary>
            Просмотры
            </summary>
        </member>
        <member name="T:VkNet.Model.NewsSearchResult">
            <summary>
            Результат поиска метода newsfeed.search
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsSearchResult.Items">
            <summary>
            Список новостей
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsSearchResult.Count">
            <summary>
            Количество новостей
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsSearchResult.TotalCount">
            <summary>
            Общее количество новостей
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsSearchResult.Profiles">
            <summary>
            Профили пользователей
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsSearchResult.Groups">
            <summary>
            Сообщества
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsSearchResult.NextFrom">
            <summary>
            Ключ для следующего поиска
            </summary>
        </member>
        <member name="T:VkNet.Model.NewsSuggestions">
            <summary>
            Предложения новостей.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsSuggestions.Users">
            <summary>
            Предложения по пользователям.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsSuggestions.Groups">
            <summary>
            Предложения по группам.
            </summary>
        </member>
        <member name="M:VkNet.Model.NewsSuggestions.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.NewsUserListItem">
            <summary>
            Элемент пользовательского списка новостей
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsUserListItem.Id">
            <summary>
            Идентификатор списка.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsUserListItem.Title">
            <summary>
            Название списка, заданное пользователем.
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsUserListItem.NoReposts">
            <summary>
            Отключены ли копии постов;
            </summary>
        </member>
        <member name="P:VkNet.Model.NewsUserListItem.SourceIds">
            <summary>
            Идентификаторы пользователей и сообществ, включенных в список.
            </summary>
        </member>
        <member name="M:VkNet.Model.NewsUserListItem.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.Notification">
            <summary>
            API Notification object.
            </summary>
        </member>
        <member name="P:VkNet.Model.Notification.Type">
            <summary>
            Тип оповещения.
            </summary>
        </member>
        <member name="P:VkNet.Model.Notification.Date">
            <summary>
            Время появления ответа в формате Unixtime.
            </summary>
        </member>
        <member name="P:VkNet.Model.Notification.Feedback">
            <summary>
            Объект описывающий поступивший ответ.
            </summary>
        </member>
        <member name="P:VkNet.Model.Notification.Reply">
            <summary>
            объект, описывающий комментарий текущего пользователя, отправленный в ответ на
            данное оповещение. Отсутствует, если
            пользователь ещё не давал ответа.
            </summary>
        </member>
        <member name="P:VkNet.Model.Notification.Parent">
            <summary>
            Property
            </summary>
        </member>
        <member name="T:VkNet.Model.NotificationGetResult">
            <summary>
            Результат запроса
            </summary>
        </member>
        <member name="P:VkNet.Model.NotificationGetResult.Count">
            <summary>
            Количество уведомлений
            </summary>
        </member>
        <member name="P:VkNet.Model.NotificationGetResult.Items">
            <summary>
            Массив оповещений для текущего пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.NotificationGetResult.Profiles">
            <summary>
            Информация о пользователях, которые находятся в списке оповещений.
            </summary>
        </member>
        <member name="P:VkNet.Model.NotificationGetResult.Groups">
            <summary>
            Информация о сообществах, которые находятся в списке оповещений.
            </summary>
        </member>
        <member name="P:VkNet.Model.NotificationGetResult.LastViewed">
            <summary>
            Время последнего просмотра пользователем раздела оповещений в формате Unixtime.
            </summary>
        </member>
        <member name="P:VkNet.Model.NotificationGetResult.NextFrom">
            <summary>
            Строковый идентификатор оповещения, полученного последним в предыдущем вызове
            </summary>
        </member>
        <member name="T:VkNet.Model.ObjectCount">
            <summary>
            Объект, содержащий поле count
            </summary>
        </member>
        <member name="P:VkNet.Model.ObjectCount.Count">
            <summary>
            количество *** к странице внутри виджета
            </summary>
        </member>
        <member name="T:VkNet.Model.Occupation">
            <summary>
            Информация о текущем роде занятия пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.Occupation.Name">
            <summary>
            Название школы, вуза или места работы
            </summary>
        </member>
        <member name="P:VkNet.Model.Occupation.Id">
            <summary>
            Идентификатор школы, вуза, группы компании (в которой пользователь работает).
            </summary>
        </member>
        <member name="P:VkNet.Model.Occupation.Type">
            <summary>
            Информация о текущем роде занятия пользователя.
            </summary>
        </member>
        <member name="M:VkNet.Model.Occupation.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.OnlineStatus">
            <summary>
            Онлайн статус
            </summary>
        </member>
        <member name="P:VkNet.Model.OnlineStatus.Status">
            <summary>
            Статус
            </summary>
        </member>
        <member name="P:VkNet.Model.OnlineStatus.Minutes">
            <summary>
            Оценка времени ответа в минутах
            </summary>
        </member>
        <member name="T:VkNet.Model.Order">
            <summary>
            API Order object.
            </summary>
        </member>
        <member name="P:VkNet.Model.Order.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="P:VkNet.Model.Order.ReceiverId">
            <summary>
            Receiver ID
            </summary>
        </member>
        <member name="P:VkNet.Model.Order.Id">
            <summary>
            Order ID
            </summary>
        </member>
        <member name="P:VkNet.Model.Order.Item">
            <summary>
            Order item
            </summary>
        </member>
        <member name="P:VkNet.Model.Order.AppOrderId">
            <summary>
            App order ID
            </summary>
        </member>
        <member name="P:VkNet.Model.Order.CancelTransactionId">
            <summary>
            Cancel transaction ID
            </summary>
        </member>
        <member name="P:VkNet.Model.Order.Status">
            <summary>
            Order status
            </summary>
        </member>
        <member name="P:VkNet.Model.Order.UserId">
            <summary>
            User ID
            </summary>
        </member>
        <member name="P:VkNet.Model.Order.TransactionId">
            <summary>
            Transaction ID
            </summary>
        </member>
        <member name="P:VkNet.Model.Order.Date">
            <summary>
            Date of creation in Unixtime
            </summary>
        </member>
        <member name="T:VkNet.Model.PageVersion">
            <summary>
            Версия страницы
            </summary>
        </member>
        <member name="P:VkNet.Model.PageVersion.Id">
            <summary>
            идентификатор версии страницы;
            </summary>
        </member>
        <member name="P:VkNet.Model.PageVersion.Length">
            <summary>
            длина версии страницы в байтах;
            </summary>
        </member>
        <member name="P:VkNet.Model.PageVersion.Edited">
            <summary>
            дата редактирования страницы;
            </summary>
        </member>
        <member name="P:VkNet.Model.PageVersion.EditorId">
            <summary>
            идентификатор редактора;
            </summary>
        </member>
        <member name="P:VkNet.Model.PageVersion.EditorName">
            <summary>
            имя редактора.
            </summary>
        </member>
        <member name="M:VkNet.Model.PageVersion.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.Peer">
            <summary>
            Информация о собеседнике.
            </summary>
        </member>
        <member name="P:VkNet.Model.Peer.Id">
            <summary>
            Идентификатор назначения.
            </summary>
        </member>
        <member name="P:VkNet.Model.Peer.Type">
            <summary>
            Тип.
            </summary>
        </member>
        <member name="P:VkNet.Model.Peer.LocalId">
            <summary>
            Локальный идентификатор назначения.
            </summary>
        </member>
        <member name="T:VkNet.Model.PhotoAlbum">
            <summary>
            Альбом для фотографий
            </summary>
        </member>
        <member name="P:VkNet.Model.PhotoAlbum.Id">
            <summary>
            Идентификатор созданного альбома
            </summary>
        </member>
        <member name="P:VkNet.Model.PhotoAlbum.ThumbId">
            <summary>
            Идентификатор фотографии, которая является обложкой альбома
            </summary>
        </member>
        <member name="P:VkNet.Model.PhotoAlbum.OwnerId">
            <summary>
            Идентификатор пользователя или сообщества, которому принадлежит альбом
            </summary>
        </member>
        <member name="P:VkNet.Model.PhotoAlbum.Title">
            <summary>
            Название альбома
            </summary>
        </member>
        <member name="P:VkNet.Model.PhotoAlbum.Description">
            <summary>
            Описание альбома
            </summary>
        </member>
        <member name="P:VkNet.Model.PhotoAlbum.Created">
            <summary>
            Дата создания альбома
            </summary>
        </member>
        <member name="P:VkNet.Model.PhotoAlbum.Updated">
            <summary>
            Дата обновления альбома
            </summary>
        </member>
        <member name="P:VkNet.Model.PhotoAlbum.Size">
            <summary>
            Количество фотографий в альбоме
            </summary>
        </member>
        <member name="P:VkNet.Model.PhotoAlbum.PrivacyView">
            <summary>
            Настройки приватности для альбома в формате настроек приватности; (не приходит
            для системных альбомов)
            </summary>
        </member>
        <member name="P:VkNet.Model.PhotoAlbum.PrivacyComment">
            <summary>
            Настройки приватности для комментирования альбома
            </summary>
        </member>
        <member name="P:VkNet.Model.PhotoAlbum.CanUpload">
            <summary>
            Может ли текущий пользователь добавлять фотографии в альбом
            </summary>
        </member>
        <member name="P:VkNet.Model.PhotoAlbum.ThumbSrc">
            <summary>
            Адрес на изображение с предпросмотром
            </summary>
        </member>
        <member name="P:VkNet.Model.PhotoAlbum.Sizes">
            <summary>
            Размеры фотографий.
            </summary>
        </member>
        <member name="P:VkNet.Model.PhotoAlbum.CommentsDisabled">
            <summary>
            Комментирование запрещено.
            </summary>
        </member>
        <member name="P:VkNet.Model.PhotoAlbum.UploadByAdminsOnly">
            <summary>
            Загружать могут только администраторы.
            </summary>
        </member>
        <member name="P:VkNet.Model.PhotoAlbum.ThumbIsLast">
            <summary>
            Gets or sets a value indicating whether this PhotoAlbum
            </summary>
            <remarks>
            Получено экспериментально.
            </remarks>
        </member>
        <member name="M:VkNet.Model.PhotoAlbum.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.PhotoSize">
            <summary>
            Формат описания размеров фотографи.
            </summary>
        </member>
        <member name="P:VkNet.Model.PhotoSize.Src">
            <summary>
            Uri копии изображения.
            </summary>
        </member>
        <member name="P:VkNet.Model.PhotoSize.Url">
            <summary>
            Uri копии изображения.
            </summary>
        </member>
        <member name="P:VkNet.Model.PhotoSize.Width">
            <summary>
            Ширина копии в пикселах.
            </summary>
        </member>
        <member name="P:VkNet.Model.PhotoSize.Height">
            <summary>
            Высота копии в пикселах.
            </summary>
        </member>
        <member name="P:VkNet.Model.PhotoSize.Type">
            <summary>
            Обозначение размера и пропорций копии.
            </summary>
        </member>
        <member name="M:VkNet.Model.PhotoSize.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.PinnedMessage">
            <summary>
            Объект содержит информацию о закреплённом сообщении в беседе.
            </summary>
        </member>
        <member name="P:VkNet.Model.PinnedMessage.Id">
            <summary>
            Идентификатор сообщения.
            </summary>
        </member>
        <member name="P:VkNet.Model.PinnedMessage.Date">
            <summary>
            Время отправки сообщения в Unixtime.
            </summary>
        </member>
        <member name="P:VkNet.Model.PinnedMessage.FromId">
            <summary>
            Идентификатор отправителя.
            </summary>
        </member>
        <member name="P:VkNet.Model.PinnedMessage.Title">
            <summary>
            Текст сообщения.
            </summary>
        </member>
        <member name="P:VkNet.Model.PinnedMessage.Attachments">
            <summary>
            Медиавложения сообщения (фотографии, ссылки и т.п.).
            </summary>
        </member>
        <member name="P:VkNet.Model.PinnedMessage.Geo">
            <summary>
            Информация о местоположении
            </summary>
        </member>
        <member name="P:VkNet.Model.PinnedMessage.ForwardMessages">
            <summary>
            Массив пересланных сообщений (если есть).
            </summary>
        </member>
        <member name="P:VkNet.Model.PinnedMessage.Text">
            <summary>
            Текст сообщения.
            </summary>
        </member>
        <member name="T:VkNet.Model.Place">
            <summary>
            Информация о месте, в котором была сделана запись.
            См. описание <see href="http://vk.com/pages?oid=-1&amp;p=Описание_поля_geo" />
            и http://vk.com/dev/fields_groups
            </summary>
        </member>
        <member name="P:VkNet.Model.Place.Id">
            <summary>
            Идентификатор места.
            </summary>
        </member>
        <member name="P:VkNet.Model.Place.Title">
            <summary>
            Название места.
            </summary>
        </member>
        <member name="P:VkNet.Model.Place.Latitude">
            <summary>
            Географическая широта, заданная в градусах (от -90 до 90).
            </summary>
        </member>
        <member name="P:VkNet.Model.Place.Longitude">
            <summary>
            Географическая долгота, заданная в градусах (от -90 до 90).
            </summary>
        </member>
        <member name="P:VkNet.Model.Place.TypeId">
            <summary>
            Идентификатор типа места, информацию о котором можно получить с помощью метода
            DatabaseCategory.GetPlaceTypes
            </summary>
        </member>
        <member name="P:VkNet.Model.Place.CountryId">
            <summary>
            Идентификатор страны, название которой можно получить с помощью метода
            DatabaseCategory.GetCountriesById
            </summary>
        </member>
        <member name="P:VkNet.Model.Place.CityId">
            <summary>
            Идентификатор города, название которого можно получить с помощью метода
            DatabaseCategory.GetCitiesById
            </summary>
        </member>
        <member name="P:VkNet.Model.Place.Address">
            <summary>
            Строка с указанием адреса места в городе.
            </summary>
        </member>
        <member name="P:VkNet.Model.Place.ShowMap">
            <summary>
            Данный параметр указывается, если местоположение является прикреплённой картой.
            </summary>
        </member>
        <member name="P:VkNet.Model.Place.Checkins">
            <summary>
            Регистрации
            </summary>
        </member>
        <member name="P:VkNet.Model.Place.Created">
            <summary>
            Дата создания
            </summary>
        </member>
        <member name="P:VkNet.Model.Place.Updated">
            <summary>
            Дата и время последнего обновления
            </summary>
        </member>
        <member name="P:VkNet.Model.Place.Type">
            <summary>
            Тип
            </summary>
        </member>
        <member name="P:VkNet.Model.Place.Icon">
            <summary>
            Иконка
            </summary>
        </member>
        <member name="P:VkNet.Model.Place.Country">
            <summary>
            Страна, в которой находится место.
            </summary>
        </member>
        <member name="P:VkNet.Model.Place.City">
            <summary>
            Город, в котором находится место.
            </summary>
        </member>
        <member name="P:VkNet.Model.Place.Distance">
            <summary>
            Расстояние от исходной точки
            </summary>
        </member>
        <member name="P:VkNet.Model.Place.GroupId">
             <summary>
            
             </summary>
        </member>
        <member name="P:VkNet.Model.Place.GroupPhoto">
             <summary>
            
             </summary>
        </member>
        <member name="M:VkNet.Model.Place.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.PlaceType">
            <summary>
            Тип места
            </summary>
        </member>
        <member name="P:VkNet.Model.PlaceType.Id">
            <summary>
            Идентификатор
            </summary>
        </member>
        <member name="P:VkNet.Model.PlaceType.Title">
            <summary>
            Наименование
            </summary>
        </member>
        <member name="P:VkNet.Model.PlaceType.Icon">
            <summary>
            URL адрес к иконке
            </summary>
        </member>
        <member name="T:VkNet.Model.PodcastInfo">
            <summary>
            Информация о подкасте
            </summary>
        </member>
        <member name="P:VkNet.Model.PodcastInfo.Cover">
            <summary>
            Обложка
            </summary>
        </member>
        <member name="P:VkNet.Model.PodcastInfo.Plays">
            <summary>
            Количество прослушиваний
            </summary>
        </member>
        <member name="P:VkNet.Model.PodcastInfo.IsFavorite">
            <summary>
            Важный
            </summary>
        </member>
        <member name="P:VkNet.Model.PodcastInfo.Description">
            <summary>
            Описание
            </summary>
        </member>
        <member name="M:VkNet.Model.PodcastInfo.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.PodcastInfo.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.PodcastInfo">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.PollAnswer">
            <summary>
            Вариант ответа в опросе
            </summary>
        </member>
        <member name="P:VkNet.Model.PollAnswer.Id">
            <summary>
            Идентификатор варианта ответа
            </summary>
        </member>
        <member name="P:VkNet.Model.PollAnswer.Text">
            <summary>
            Текст ответа
            </summary>
        </member>
        <member name="P:VkNet.Model.PollAnswer.Votes">
            <summary>
            Кол-во проголосовавших
            </summary>
        </member>
        <member name="P:VkNet.Model.PollAnswer.Rate">
            <summary>
            Процент текущего ответа ко всем остальным вариантам
            </summary>
        </member>
        <member name="M:VkNet.Model.PollAnswer.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.PollAnswerVoters">
            <summary>
            Объект для перечисления пользователей, которые выбрали определенные варианты
            ответа в опросе.
            </summary>
        </member>
        <member name="P:VkNet.Model.PollAnswerVoters.AnswerId">
            <summary>
            Идентификатор варианта ответа
            </summary>
        </member>
        <member name="P:VkNet.Model.PollAnswerVoters.Users">
            <summary>
            Коллекция пользователей, только если Fields != null
            </summary>
        </member>
        <member name="P:VkNet.Model.PollAnswerVoters.UsersIds">
            <summary>
            Коллекция идентификаторов пользователей, только если Fields = null
            </summary>
        </member>
        <member name="M:VkNet.Model.PollAnswerVoters.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.PollBackground">
            <summary>
            Фон сниппета опроса.
            </summary>
        </member>
        <member name="P:VkNet.Model.PollBackground.Id">
            <summary>
            Идентификатор фона.
            </summary>
        </member>
        <member name="P:VkNet.Model.PollBackground.Type">
            <summary>
            Тип фона.
            </summary>
        </member>
        <member name="P:VkNet.Model.PollBackground.Angle">
            <summary>
            (для type = gradient) угол градиента по оси X.
            </summary>
        </member>
        <member name="P:VkNet.Model.PollBackground.Color">
            <summary>
            HEX-код замещающего цвета (без #).
            </summary>
        </member>
        <member name="P:VkNet.Model.PollBackground.Width">
            <summary>
            (для type = tile) ширина плитки паттерна.
            </summary>
        </member>
        <member name="P:VkNet.Model.PollBackground.Height">
            <summary>
            (для type = tile) высота плитки паттерна.
            </summary>
        </member>
        <member name="P:VkNet.Model.PollBackground.Images">
            <summary>
            (для type = tile) изображение плитки паттерна. Массив объектов изображений.
            </summary>
        </member>
        <member name="P:VkNet.Model.PollBackground.Points">
            <summary>
            (для type = gradient) точки градиента.
            </summary>
        </member>
        <member name="M:VkNet.Model.PollBackground.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.PollBackground.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.PollBackground">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.PollBackground" /> в <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns>Результат преобразования в <see cref="T:VkNet.Model.PollBackground" /></returns>
        </member>
        <member name="T:VkNet.Model.PostReach">
            <summary>
            Статистика для записи на стене.
            </summary>
        </member>
        <member name="P:VkNet.Model.PostReach.ReachSubscribers">
            <summary>
            Охват подписчиков.
            </summary>
        </member>
        <member name="P:VkNet.Model.PostReach.ReachTotal">
            <summary>
            Суммарный охват.
            </summary>
        </member>
        <member name="P:VkNet.Model.PostReach.Links">
            <summary>
            Переходы по ссылке.
            </summary>
        </member>
        <member name="P:VkNet.Model.PostReach.ToGroup">
            <summary>
            Переходы в сообщество.
            </summary>
        </member>
        <member name="P:VkNet.Model.PostReach.JoinGroup">
            <summary>
            Вступления в сообщество.
            </summary>
        </member>
        <member name="P:VkNet.Model.PostReach.Report">
            <summary>
            Количество жалоб на запись.
            </summary>
        </member>
        <member name="P:VkNet.Model.PostReach.Hide">
            <summary>
            Количество скрытий записи.
            </summary>
        </member>
        <member name="P:VkNet.Model.PostReach.Unsubscribe">
            <summary>
            Количество отписавшихся участников.
            </summary>
        </member>
        <member name="M:VkNet.Model.PostReach.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.PostSource">
            <summary>
            Информация информацию о том, каким образом (через интерфейс сайта, виджет и
            т.п.) была создана запись на стене.
            Используя данные из этого поля, разработчик может вывести уточняющую информацию
            о том, как была создана запись на
            стене
            в своем приложении.
            См. описание http://vk.com/dev/post_source
            </summary>
        </member>
        <member name="P:VkNet.Model.PostSource.Type">
            <summary>
            На данный момент поддерживаются следующие типы источников записи на стене.
            </summary>
        </member>
        <member name="P:VkNet.Model.PostSource.Platform">
            <summary>
            Название платформы, если оно доступно: android, iphone, wphone.
            </summary>
        </member>
        <member name="P:VkNet.Model.PostSource.Data">
            <summary>
            Поле data является опциональным и содержит следующие данные в зависимости от
            значения поля type:
            </summary>
        </member>
        <member name="P:VkNet.Model.PostSource.Uri">
            <summary>
            Cодержит внешнюю ссылку на ресурс, с которого была опубликована запись.
            </summary>
        </member>
        <member name="M:VkNet.Model.PostSource.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.PostSourceData">
            <summary>
            Является опциональным и содержит следующие данные в зависимости от значения
            поля type:
            </summary>
        </member>
        <member name="P:VkNet.Model.PostSourceData.ProfileActivity">
            <summary>
            Изменение статуса под именем пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.PostSourceData.ProfilePhoto">
            <summary>
            Изменение профильной фотографии пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.PostSourceData.Comments">
            <summary>
            Виджет комментариев.
            </summary>
        </member>
        <member name="P:VkNet.Model.PostSourceData.Like">
            <summary>
            Виджет «Мне нравится».
            </summary>
        </member>
        <member name="P:VkNet.Model.PostSourceData.Poll">
            <summary>
            Виджет опросов.
            </summary>
        </member>
        <member name="M:VkNet.Model.PostSourceData.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.PostView">
            <summary>
            Информация о просмотрах записи.
            </summary>
        </member>
        <member name="P:VkNet.Model.PostView.Count">
            <summary>
            Число просмотров записи.
            </summary>
        </member>
        <member name="M:VkNet.Model.PostView.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.Previews">
            <summary>
            ����� Uri � ��������� � ��������� �����������.
            ������������ � User
            </summary>
        </member>
        <member name="P:VkNet.Model.Previews.Photo50">
            <summary>
            Uri ���������� ����������, ������� ������ 50 ��������.
            </summary>
        </member>
        <member name="P:VkNet.Model.Previews.Photo100">
            <summary>
            Uri ���������� ����������, ������� ������ 100 ��������.
            </summary>
        </member>
        <member name="P:VkNet.Model.Previews.Photo130">
            <summary>
            Uri ���������� ����������, ������� ������ 130 ��������.
            </summary>
        </member>
        <member name="P:VkNet.Model.Previews.Photo200">
            <summary>
            Uri ���������� ����������, ������� ������ 200 ��������.
            </summary>
        </member>
        <member name="P:VkNet.Model.Previews.Photo400">
            <summary>
            Uri ���������� ����������, ������� ������ 400 ��������.
            </summary>
        </member>
        <member name="P:VkNet.Model.Previews.PhotoMax">
            <summary>
            Uri ���������� ����������, ������� ������������ ������.
            </summary>
        </member>
        <member name="P:VkNet.Model.Previews.Photo">
            <summary>
            Gets or sets the photo.
            </summary>
        </member>
        <member name="M:VkNet.Model.Previews.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            ��������� �� json.
            </summary>
            <param name="response"> ����� �������. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.Price">
            <summary>
            Цена.
            </summary>
        </member>
        <member name="P:VkNet.Model.Price.Amount">
            <summary>
            Целочисленное значение цены, умноженное на 100.
            </summary>
        </member>
        <member name="P:VkNet.Model.Price.Currency">
            <summary>
            Валюта.
            </summary>
        </member>
        <member name="P:VkNet.Model.Price.Text">
            <summary>
            Строка с локализованной ценой и валютой.
            </summary>
        </member>
        <member name="M:VkNet.Model.Price.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.PrivacySettings">
            <summary>
            Приватные настройки
            </summary>
        </member>
        <member name="P:VkNet.Model.PrivacySettings.Settings">
            <summary>
            Настройки
            </summary>
        </member>
        <member name="P:VkNet.Model.PrivacySettings.Sections">
            <summary>
            Секции
            </summary>
        </member>
        <member name="T:VkNet.Model.PrivacySettingSetting">
            <summary>
            Настройка
            </summary>
        </member>
        <member name="P:VkNet.Model.PrivacySettingSetting.Key">
            <summary>
            Ключ
            </summary>
        </member>
        <member name="P:VkNet.Model.PrivacySettingSetting.Title">
            <summary>
            Заголовок
            </summary>
        </member>
        <member name="P:VkNet.Model.PrivacySettingSetting.Value">
            <summary>
            Текущее значение
            </summary>
        </member>
        <member name="P:VkNet.Model.PrivacySettingSetting.Section">
            <summary>
            Секция
            </summary>
        </member>
        <member name="P:VkNet.Model.PrivacySettingSetting.SupportedValues">
            <summary>
            Поддерживаемые значения
            </summary>
        </member>
        <member name="T:VkNet.Model.PrivacySettingsSection">
            <summary>
            Секция
            </summary>
        </member>
        <member name="P:VkNet.Model.PrivacySettingsSection.Name">
            <summary>
            Наименование секции
            </summary>
        </member>
        <member name="P:VkNet.Model.PrivacySettingsSection.Title">
            <summary>
            Заголовок секции
            </summary>
        </member>
        <member name="T:VkNet.Model.PushSettings">
            <summary>
            Настройки Push-уведомлений
            </summary>
        </member>
        <member name="P:VkNet.Model.PushSettings.Msg">
            <summary>
            Личные сообщения. Может принимать массив значений.
            </summary>
        </member>
        <member name="P:VkNet.Model.PushSettings.Chat">
            <summary>
            Групповые чаты. Может принимать массив значений.
            </summary>
        </member>
        <member name="P:VkNet.Model.PushSettings.Friend">
            <summary>
            Запрос на добавления в друзья. Может принимать массив значений.
            </summary>
        </member>
        <member name="P:VkNet.Model.PushSettings.FriendFound">
            <summary>
            Регистрация импортированного контакта.
            </summary>
        </member>
        <member name="P:VkNet.Model.PushSettings.FriendAccepted">
            <summary>
            Подтверждение заявки в друзья.
            </summary>
        </member>
        <member name="P:VkNet.Model.PushSettings.Reply">
            <summary>
            Ответы.
            </summary>
        </member>
        <member name="P:VkNet.Model.PushSettings.Comment">
            <summary>
            Комментарии. Может принимать массив значений.
            </summary>
        </member>
        <member name="P:VkNet.Model.PushSettings.Mention">
            <summary>
            Упоминания. Может принимать массив значений.
            </summary>
        </member>
        <member name="P:VkNet.Model.PushSettings.Like">
            <summary>
            Отметки "Мне нравится". Может принимать массив значений.
            </summary>
        </member>
        <member name="P:VkNet.Model.PushSettings.Repost">
            <summary>
            Действия "Рассказать друзьям". Может принимать массив значений.
            </summary>
        </member>
        <member name="P:VkNet.Model.PushSettings.WallPost">
            <summary>
            Новая запись на стене пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.PushSettings.WallPublish">
            <summary>
            Размещение предложенной новости.
            </summary>
        </member>
        <member name="P:VkNet.Model.PushSettings.GroupInvite">
            <summary>
            Приглашение в сообщество.
            </summary>
        </member>
        <member name="P:VkNet.Model.PushSettings.GroupAccepted">
            <summary>
            Подтверждение заявки на вступление в группу.
            </summary>
        </member>
        <member name="P:VkNet.Model.PushSettings.EventSoon">
            <summary>
            Ближайшие мероприятия.
            </summary>
        </member>
        <member name="P:VkNet.Model.PushSettings.TagPhoto">
            <summary>
            Отметки на фотографиях. Может принимать массив значений.
            </summary>
        </member>
        <member name="P:VkNet.Model.PushSettings.AppRequest">
            <summary>
            Запросы в приложениях.
            </summary>
        </member>
        <member name="P:VkNet.Model.PushSettings.SdkOpen">
            <summary>
            Установка приложения.
            </summary>
        </member>
        <member name="P:VkNet.Model.PushSettings.NewPost">
            <summary>
            Записи выбранных людей и сообществ.
            </summary>
        </member>
        <member name="P:VkNet.Model.PushSettings.Birthday">
            <summary>
            Уведомления о днях рождения на текущую дату.
            </summary>
        </member>
        <member name="M:VkNet.Model.PushSettings.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.QuestionOption">
            <summary>
            Вариант ответа
            </summary>
        </member>
        <member name="P:VkNet.Model.QuestionOption.Key">
            <summary>
            Ключ ответа (необязательно)
            </summary>
        </member>
        <member name="P:VkNet.Model.QuestionOption.Label">
            <summary>
            Текст ответа
            </summary>
        </member>
        <member name="T:VkNet.Model.Rating">
            <summary>
            Рейтинг.
            </summary>
        </member>
        <member name="P:VkNet.Model.Rating.Stars">
            <summary>
            Количество звезд у продукта;.
            </summary>
        </member>
        <member name="P:VkNet.Model.Rating.ReviewsCount">
            <summary>
            Количество отзывов о продукте;.
            </summary>
        </member>
        <member name="M:VkNet.Model.Rating.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.ReachStats">
            <summary>
            Данные об охвате.
            </summary>
        </member>
        <member name="P:VkNet.Model.ReachStats.Reach">
            <summary>
            Полный охват;
            </summary>
        </member>
        <member name="P:VkNet.Model.ReachStats.ReachSubscribers">
            <summary>
            Охват подписчиков;
            </summary>
        </member>
        <member name="P:VkNet.Model.ReachStats.MobileReach">
            <summary>
            Охват с мобильных устройств;
            </summary>
        </member>
        <member name="P:VkNet.Model.ReachStats.Sex">
            <summary>
            Статистика по полу.
            </summary>
        </member>
        <member name="P:VkNet.Model.ReachStats.Age">
            <summary>
            Статистика по возрасту.
            </summary>
        </member>
        <member name="P:VkNet.Model.ReachStats.SexAge">
            <summary>
            Статистика по полу и возрасту.
            </summary>
        </member>
        <member name="P:VkNet.Model.ReachStats.Countries">
            <summary>
            Статистика по странам.
            </summary>
        </member>
        <member name="P:VkNet.Model.ReachStats.Cities">
            <summary>
            Статистика по городам.
            </summary>
        </member>
        <member name="T:VkNet.Model.Rect">
            <summary>
            Вырезанная фотография пользователя
            </summary>
        </member>
        <member name="P:VkNet.Model.Rect.X">
            <summary>
            x
            </summary>
        </member>
        <member name="P:VkNet.Model.Rect.X2">
            <summary>
            x2
            </summary>
        </member>
        <member name="P:VkNet.Model.Rect.Y">
            <summary>
            y
            </summary>
        </member>
        <member name="P:VkNet.Model.Rect.Y2">
            <summary>
            y2
            </summary>
        </member>
        <member name="M:VkNet.Model.Rect.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.Region">
            <summary>
            Регион
            </summary>
        </member>
        <member name="P:VkNet.Model.Region.Id">
            <summary>
            Идентификатор региона
            </summary>
        </member>
        <member name="P:VkNet.Model.Region.Title">
            <summary>
            Название региона
            </summary>
        </member>
        <member name="M:VkNet.Model.Region.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.Relative">
            <summary>
            Информация о родственнике.
            См. описание http://vk.com/dev/fields
            </summary>
        </member>
        <member name="P:VkNet.Model.Relative.Id">
            <summary>
            Идентификатор родственника.
            </summary>
        </member>
        <member name="P:VkNet.Model.Relative.Type">
            <summary>
            Тип родственника (sibling и т.п.)
            </summary>
        </member>
        <member name="P:VkNet.Model.Relative.Name">
            <summary>
            Имя родственника, если он не является пользователем ВКонтакте.
            </summary>
        </member>
        <member name="M:VkNet.Model.Relative.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.Reply">
            <summary>
            Описание поля reply
            </summary>
        </member>
        <member name="P:VkNet.Model.Reply.Id">
            <summary>
            Идентификатор комментария
            </summary>
        </member>
        <member name="P:VkNet.Model.Reply.Date">
            <summary>
            Время публикации комментария в формате unixtime
            </summary>
        </member>
        <member name="P:VkNet.Model.Reply.Text">
            <summary>
            Текст комментария
            </summary>
        </member>
        <member name="T:VkNet.Model.RepostResult">
            <summary>
            Результат запроса wall.Repost
            </summary>
        </member>
        <member name="P:VkNet.Model.RepostResult.Success">
            <summary>
            всегда содержит 1;
            </summary>
        </member>
        <member name="P:VkNet.Model.RepostResult.PostId">
            <summary>
            идентификатор созданной записи;
            </summary>
        </member>
        <member name="P:VkNet.Model.RepostResult.RepostsCount">
            <summary>
            количество репостов объекта с учетом осуществленного;
            </summary>
        </member>
        <member name="P:VkNet.Model.RepostResult.LikesCount">
            <summary>
            число отметок «Мне нравится» у объекта.
            </summary>
        </member>
        <member name="M:VkNet.Model.RepostResult.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            ��������� �� json.
            </summary>
            <param name="response"> ����� �������. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.Reposts">
            <summary>
            Информация о репостах записи.
            См. описание http://vk.com/dev/post
            </summary>
        </member>
        <member name="P:VkNet.Model.Reposts.Count">
            <summary>
            Число пользователей, скопировавших запись.
            </summary>
        </member>
        <member name="P:VkNet.Model.Reposts.UserReposted">
            <summary>
            Наличие репоста от текущего пользователя .
            </summary>
        </member>
        <member name="M:VkNet.Model.Reposts.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParam">
            <summary>
            Параметр запроса
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParam.Key">
            <summary>
            Ключ
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParam.Value">
            <summary>
            Значение
            </summary>
        </member>
        <member name="T:VkNet.Model.RequestParams.AccountRegisterDeviceParams">
            <summary>
            Параметры запроса подписывания устройства на базе iOS, Android или Windows
            Phone на получение Push-уведомлений.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AccountRegisterDeviceParams.Token">
            <summary>
            Идентификатор устройства, используемый для отправки уведомлений. (для mpns
            идентификатор должен представлять из
            себя URL для отправки уведомлений) строка, обязательный параметр.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AccountRegisterDeviceParams.DeviceModel">
            <summary>
            Cтроковое название модели устройства. строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AccountRegisterDeviceParams.DeviceYear">
            <summary>
            Год устройства целое число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AccountRegisterDeviceParams.DeviceId">
            <summary>
            Уникальный идентификатор устройства. строка, обязательный параметр.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AccountRegisterDeviceParams.SystemVersion">
            <summary>
            Строковая версия операционной системы устройства. строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AccountRegisterDeviceParams.Settings">
            <summary>
            Сериализованный JSON-объект, описывающий настройки уведомлений в специальном
            формате данные в формате JSON,
            доступен начиная с версии 5.31.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AccountRegisterDeviceParams.Sandbox">
            <summary>
            Флаг предназначен для iOS устройств. 1 — использовать sandbox сервер для
            отправки push-уведомлений, 0 — не
            использовать флаг, может принимать значения 1 или 0, по умолчанию 0.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.AccountRegisterDeviceParams.ToVkParameters(VkNet.Model.RequestParams.AccountRegisterDeviceParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> Объект типа AccountRegisterDeviceParams </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.AccountSaveProfileInfoParams">
            <summary>
            Параметры метода account.saveProfileInfo
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AccountSaveProfileInfoParams.FirstName">
            <summary>
            Имя пользователя. строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AccountSaveProfileInfoParams.LastName">
            <summary>
            Фамилия пользователя. строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AccountSaveProfileInfoParams.MaidenName">
            <summary>
            Девичья фамилия пользователя (только для женского пола). строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AccountSaveProfileInfoParams.ScreenName">
            <summary>
            Короткое имя страницы. строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AccountSaveProfileInfoParams.Sex">
            <summary>
            Пол пользователя. Возможные значения:
            1 — женский;
            2 — мужской.
            положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AccountSaveProfileInfoParams.Relation">
            <summary>
            Семейное положение пользователя. Возможные значения:
            1 — не женат/не замужем;
            2 — есть друг/есть подруга;
            3 — помолвлен/помолвлена;
            4 — женат/замужем;
            5 — всё сложно;
            6 — в активном поиске;
            7 — влюблён/влюблена;
            0 — не указано.
            положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AccountSaveProfileInfoParams.RelationPartner">
            <summary>
            Идентификатор пользователя, с которым связано семейное положение. положительное
            число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AccountSaveProfileInfoParams.BirthDate">
            <summary>
            Дата рождения пользователя в формате DD.MM.YYYY, например "15.11.1984". строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AccountSaveProfileInfoParams.BirthdayVisibility">
            <summary>
            Видимость даты рождения. Возможные значения:
            1 — показывать дату рождения;
            2 — показывать только месяц и день;
            0 — не показывать дату рождения.
            положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AccountSaveProfileInfoParams.HomeTown">
            <summary>
            Родной город пользователя. строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AccountSaveProfileInfoParams.Country">
            <summary>
            Идентификатор страны пользователя. положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AccountSaveProfileInfoParams.City">
            <summary>
            Идентификатор города пользователя. положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AccountSaveProfileInfoParams.Status">
            <summary>
            Статус пользователя, который также может быть изменен методом status.set
            строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AccountSaveProfileInfoParams.Phone">
            <summary>
            Телефон.
            </summary>
            <remarks>
            Обнаружено опытным путем.
            </remarks>
        </member>
        <member name="M:VkNet.Model.RequestParams.AccountSaveProfileInfoParams.ToVkParameters(VkNet.Model.RequestParams.AccountSaveProfileInfoParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> Объект типа AccountSaveProfileInfoParams </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.Ads.AdsGetCampaignsParams">
            <summary>
            Параметры метода wall.search
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.AdsGetCampaignsParams.AccountId">
            <summary>
            Идентификатор рекламного кабинета.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.AdsGetCampaignsParams.ClientId">
            <summary>
            Идентификатор клиента, у которого запрашиваются рекламные кампании. Обязателен
            для рекламных агентств, в остальных
            случаях не используется.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.AdsGetCampaignsParams.IncludeDeleted">
            <summary>
            Флаг, задающий необходимость вывода архивных объявлений. 0 — выводить только
            активные кампании; 1 — выводить все
            кампании.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.AdsGetCampaignsParams.CampaignIds">
            <summary>
            Фильтр выводимых рекламных кампаний.
            Сериализованный JSON-массив, содержащий id кампаний.Выводиться будут только
            кампании, присутствующие в campaign_ids
            и являющиеся кампаниями указанного рекламного кабинета.Если параметр равен
            строке null, то выводиться будут все
            кампании.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.Ads.AdsGetCampaignsParams.ToVkParameters(VkNet.Model.RequestParams.Ads.AdsGetCampaignsParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.Ads.CreateTargetGroupParams">
            <summary>
            Параметры запроса ads.createTargetGroup
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.CreateTargetGroupParams.AccountId">
            <summary>
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.CreateTargetGroupParams.Name">
            <summary>
            Название аудитории ретаргетинга — строка до 64 символов. обязательный параметр, строка
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.CreateTargetGroupParams.ClientId">
            <summary>
            Только для рекламных агентств.
            id клиента, в рекламном кабинете которого будет создаваться аудитория. целое число
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.CreateTargetGroupParams.Lifetime">
            <summary>
            Только для аудиторий, которые собираются с помощью кода на сайте.
            количество дней, через которое пользователи, добавляемые в аудиторию, будут автоматически исключены из нее.
            0 — автоудаление пользователей отсутствует. положительное число, максимальное значение 365
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.CreateTargetGroupParams.TargetPixelId">
            <summary>
            Идентификатор пикселя, если требуется собирать аудиторию с веб-сайта. целое число
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.CreateTargetGroupParams.TargetPixelRules">
            <summary>
            Массив правил для пополнения аудитории из пикселя. Имеет вид:
            [
            {"type": args},
            {"type": args},
            ...
            {"type": args}
            ] данные в формате JSON
            </summary>
        </member>
        <member name="T:VkNet.Model.RequestParams.Ads.GetAdsLayoutParams">
            <summary>
            Параметры запроса ads.getAdsLayout
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetAdsLayoutParams.AccountId">
            <summary>
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetAdsLayoutParams.CampaignIds">
            <summary>
            Фильтр по рекламным кампаниям.
            Сериализованный JSON-массив, содержащий id кампаний. Если параметр равен null, то будут выводиться рекламные объявления всех кампаний. строка
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetAdsLayoutParams.AdIds">
            <summary>
            Фильтр по рекламным объявлениям.
            Сериализованный JSON-массив, содержащий id объявлений. Если параметр равен null, то будут выводиться все рекламные объявления. строка
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetAdsLayoutParams.ClientId">
            <summary>
            Для рекламных агентств. Идентификатор клиента, у которого запрашиваются рекламные объявления. целое число
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetAdsLayoutParams.IncludeDeleted">
            <summary>
            Флаг, задающий необходимость вывода архивных объявлений.
            0 — выводить только активные объявления;
            1 — выводить все объявления.
            флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetAdsLayoutParams.Limit">
            <summary>
            Ограничение на количество возвращаемых объявлений. Используется, только если параметр ad_ids равен null, а параметр campaign_ids содержит id только одной кампании. целое число
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetAdsLayoutParams.Offset">
            <summary>
            Смещение. Используется в тех же случаях, что и параметр limit. целое число
            </summary>
        </member>
        <member name="T:VkNet.Model.RequestParams.Ads.GetAdsParams">
            <summary>
            Параметры запроса ads.getAds
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetAdsParams.AccountId">
            <summary>
            Идентификатор рекламного кабинета.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetAdsParams.ClientId">
            <summary>
            Доступно и обязательно для рекламных агентств. Идентификатор клиента, у которого запрашиваются рекламные объявления.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetAdsParams.IncludeDeleted">
            <summary>
            Флаг, задающий необходимость вывода архивных объявлений. 0 — выводить только активные объявления; 1 — выводить все объявления.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetAdsParams.CampaignIds">
            <summary>
            Фильтр по рекламным кампаниям.
            Сериализованный JSON-массив, содержащий id кампаний.Если параметр равен null, то будут выводиться рекламные объявления всех кампаний.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetAdsParams.AdIds">
            <summary>
            Фильтр по рекламным объявлениям.
            Сериализованный JSON-массив, содержащий id объявлений.Если параметр равен null, то будут выводиться все рекламные объявления.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetAdsParams.Limit">
            <summary>
            Ограничение на количество возвращаемых объявлений.
            Используется, только если параметр ad_ids равен null, а параметр campaign_ids содержит id только одной кампании.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetAdsParams.Offset">
            <summary>
            Cмещение. Используется в тех же случаях, что и параметр limit.
            </summary>
        </member>
        <member name="T:VkNet.Model.RequestParams.Ads.GetAdsTargetingParams">
            <summary>
            Параметры запроса ads.getAdsTargeting
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetAdsTargetingParams.AccountId">
            <summary>
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetAdsTargetingParams.CampaignIds">
            <summary>
            Фильтр по рекламным кампаниям.
            Сериализованный JSON-массив, содержащий id кампаний. Если параметр равен null, то будут выводиться рекламные объявления всех кампаний. строка
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetAdsTargetingParams.AdIds">
            <summary>
            Фильтр по рекламным объявлениям.
            Сериализованный JSON-массив, содержащий id объявлений. Если параметр равен null, то будут выводиться все рекламные объявления. строка
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetAdsTargetingParams.ClientId">
            <summary>
            Для рекламных агентств. id клиента, у которого запрашиваются рекламные объявления. целое число
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetAdsTargetingParams.IncludeDeleted">
            <summary>
            Флаг, задающий необходимость вывода архивных объявлений.
            0 — выводить только активные объявления;
            1 — выводить все объявления.
            флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetAdsTargetingParams.Limit">
            <summary>
            Ограничение на количество возвращаемых объявлений. Используется, только если параметр ad_ids равен null, а параметр campaign_ids содержит id только одной кампании. целое число
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetAdsTargetingParams.Offset">
            <summary>
            Смещение, необходимо для выборки определенного подмножества значений. целое число
            </summary>
        </member>
        <member name="T:VkNet.Model.RequestParams.Ads.GetDemographicsParams">
            <summary>
            Параметры запроса ads.getDemographics
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetDemographicsParams.AccountId">
            <summary>
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetDemographicsParams.IdsType">
            <summary>
            Тип запрашиваемых объектов, которые перечислены в параметре ids:
            ad — объявления;
            campaign — кампании.
            обязательный параметр, строка
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetDemographicsParams.Ids">
            <summary>
            Перечисленные через запятую id запрашиваемых объявлений или кампаний, в зависимости от того, что указано в параметре ids_type. Максимум 2000 объектов. обязательный параметр, строка
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetDemographicsParams.Period">
            <summary>
            Способ группировки данных по датам:
            day — статистика по дням;
            month — статистика по месяцам;
            overall — статистика за всё время.
            Временные ограничения задаются параметрами date_from и date_to. обязательный параметр, строка
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetDemographicsParams.DateFrom">
            <summary>
            Начальная дата выводимой статистики. Используется разный формат дат для разного значения параметра period:
            day: YYYY-MM-DD, пример: 2011-09-27 - 27 сентября 2011
            0 — день создания;
            month: YYYY-MM, пример: 2011-09 - сентябрь 2011
            0 — месяц создания;
            overall: 0
            обязательный параметр, строка
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetDemographicsParams.DateTo">
            <summary>
            Конечная дата выводимой статистики. Используется разный формат дат для разного значения параметра period:
            day: YYYY-MM-DD, пример: 2011-09-27 - 27 сентября 2011
            0 — текущий день;
            month: YYYY-MM, пример: 2011-09 - сентябрь 2011
            0 — текущий месяц;
            overall: 0
            обязательный параметр, строка
            </summary>
        </member>
        <member name="T:VkNet.Model.RequestParams.Ads.GetLookalikeRequestsParams">
            <summary>
            Параметры запроса ads.getLookalikeRequests
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetLookalikeRequestsParams.AccountId">
            <summary>
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetLookalikeRequestsParams.RequestsIds">
            <summary>
            Список идентификаторов запрашиваемых запросов через запятую. Максимальное количество идентификаторов в списке – 200.
            Если этот параметр пуст, возвращаться будут все запросы. строка
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetLookalikeRequestsParams.SortBy">
            <summary>
            Сортировка элементов. Возможные значения:
            id – сортировать по возрастанию идентификаторов
            update_time – сортировать по убыванию времени последнего обновления статуса
            строка, по умолчанию id
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetLookalikeRequestsParams.ClientId">
            <summary>
            Только для рекламных агентств.
            идентификатор клиента, для которого возвращаются запросы. целое число
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetLookalikeRequestsParams.Offset">
            <summary>
            Смещение. Используется в связке с параметром limit. целое число, минимальное значение 0, по умолчанию 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetLookalikeRequestsParams.Limit">
            <summary>
            Ограничение на количество возвращаемых запросов на поиск похожей аудитории. Используется в связке с параметром offset.
            0 — вернуть только количество запросов в кабинете (у клиента в случае агентства).
            целое число, по умолчанию 10, минимальное значение 0, максимальное значение 200
            </summary>
        </member>
        <member name="T:VkNet.Model.RequestParams.Ads.GetStatisticsParams">
            <summary>
            Параметры запроса ads.getStatistics
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetStatisticsParams.AccountId">
            <summary>
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetStatisticsParams.IdsType">
            <summary>
            Тип запрашиваемых объектов, которые перечислены в параметре ids:
            ad — объявления;
            campaign — кампании;
            client — клиенты;
            office — кабинет.
            обязательный параметр, строка
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetStatisticsParams.Ids">
            <summary>
            Перечисленные через запятую id запрашиваемых объявлений, кампаний, клиентов или кабинета, в зависимости от того, что указано в параметре ids_type. Максимум 2000 объектов. обязательный параметр, строка
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetStatisticsParams.Period">
            <summary>
            Способ группировки данных по датам:
            day — статистика по дням;
            month — статистика по месяцам;
            overall — статистика за всё время;
            Временные ограничения задаются параметрами date_from и date_to. обязательный параметр, строка
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetStatisticsParams.DateFrom">
            <summary>
            Начальная дата выводимой статистики. Используется разный формат дат для разного значения параметра period:
            day: YYYY-MM-DD, пример: 2011-09-27 - 27 сентября 2011
            0 — день создания;
            month: YYYY-MM, пример: 2011-09 - сентябрь 2011
            0 — месяц создания;
            overall: 0
            обязательный параметр, строка
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetStatisticsParams.DateTo">
            <summary>
            Конечная дата выводимой статистики. Используется разный формат дат для разного значения параметра period:
            day: YYYY-MM-DD, пример: 2011-09-27 - 27 сентября 2011
            0 — текущий день;
            month: YYYY-MM, пример: 2011-09 - сентябрь 2011
            0 — текущий месяц;
            overall: 0
            обязательный параметр, строка
            </summary>
        </member>
        <member name="T:VkNet.Model.RequestParams.Ads.GetSuggestionsParams">
            <summary>
            Параметры запроса ads.getSuggestions
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetSuggestionsParams.Section">
            <summary>
            Раздел, по которому запрашиваются подсказки.
            Поддерживаются следующие значения:
            countries — страны;
            q — необязательный параметр;
            1 — возвращается полный список стран;
            не задан — возвращается краткий список стран;
            regions — регионы;
            country — обязательный параметр;
            q — обязательный параметр;
            cities — города.
            country — обязательный параметр;
            q — необязательный параметр;
            districts — районы
            cities — обязательный параметр;
            stations — станции метро
            cities — обязательный параметр;
            streets — улицы
            cities — обязательный параметр;
            q — обязательный параметр;
            schools — учебные заведения: школы, университеты, факультеты, кафедры
            cities — обязательный параметр;
            q — обязательный параметр;
            interest_categories_v2 — категории интересов;
            interest_categories — устаревшие категории интересов;
            positions — должности (профессии);
            q — необязательный параметр;
            religions — религиозные взгляды;
            user_devices — устройства;
            user_os — операционные системы;
            user_browsers — интернет-браузеры.
            обязательный параметр, строка
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetSuggestionsParams.Ids">
            <summary>
            ID объектов, разделённые запятыми. Служит для расшифровки ID, возвращаемых в методе ads.getAdsTargeting. Если задан этот параметр, то параметры q, country, cities не должны передаваться, таким образом отменяется их обязательность для конкретного раздела. Объекты возвращаются в том же порядке, в каком они были заданы в этом параметре. строка
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetSuggestionsParams.Q">
            <summary>
            Строка-фильтр запроса строка
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetSuggestionsParams.Cities">
            <summary>
            ID городов, в которых ищутся объекты, разделенные запятыми. строка
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetSuggestionsParams.Lang">
            <summary>
            Язык возвращаемых строковых значений. Поддерживаемые языки:
            ru — русский;
            ua — украинский;
            en — английский.
            строка
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetSuggestionsParams.Country">
            <summary>
            ID страны, в которой ищутся объекты. целое число
            </summary>
        </member>
        <member name="T:VkNet.Model.RequestParams.Ads.GetTargetingStatsParams">
            <summary>
            Параметры запроса ads.getTargetingStats
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetTargetingStatsParams.AccountId">
            <summary>
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetTargetingStatsParams.Criteria">
            <summary>
            Сериализованный JSON-объект, описывающий параметры таргетинга. Описание объекта criteria см. ниже. Игнорируется, если задан параметр ad_id. строка
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetTargetingStatsParams.AdPlatform">
            <summary>
            Рекламные площадки, на которых будет показываться объявление:
            (если ad_format равен 1)
            0 — ВКонтакте и сайты-партнёры;
            1 — только ВКонтакте.
            (если ad_format равен 9)
            all — все площадки;
            desktop — полная версия сайта;
            mobile — мобильный сайт и приложения.
            строка
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetTargetingStatsParams.AdPlatformNoWall">
            <summary>
            Для ad_format = 9.
            1 — не показывать объявление на стенах сообществ. По умолчанию: 0. строка
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetTargetingStatsParams.LinkUrl">
            <summary>
            Ссылка на рекламируемый объект. обязательный параметр, строка
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetTargetingStatsParams.LinkDomain">
            <summary>
            Домен рекламируемого объекта. строка
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetTargetingStatsParams.ClientId">
            <summary>
            Обязательный параметр для агентских кабинетов целое число
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetTargetingStatsParams.AdId">
            <summary>
            Идентификатор рекламного объявления, чьи параметры таргетинга требуется анализировать. Если задан этот параметр, criteria игнорируется. целое число
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.GetTargetingStatsParams.AdFormat">
            <summary>
            Формат объявления:
            1 — изображение и текст;
            2 — большое изображение;
            3 — эксклюзивный формат;
            4 — продвижение сообществ или приложений, квадратное изображение;
            7 — специальный формат приложений;
            8 — специальный формат сообществ;
            9 — запись в сообществе;
            10 — витрина приложений.
            целое число
            </summary>
        </member>
        <member name="T:VkNet.Model.RequestParams.Ads.UpdateTargetGroupParams">
            <summary>
            Параметры запроса ads.updateTargetGroup
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.UpdateTargetGroupParams.AccountId">
            <summary>
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.UpdateTargetGroupParams.TargetGroupId">
            <summary>
            Идентификатор аудитории. обязательный параметр, целое число
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.UpdateTargetGroupParams.Name">
            <summary>
            Новое название аудитории ретаргетинга — строка до 64 символов. обязательный параметр, строка
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.UpdateTargetGroupParams.Domain">
            <summary>
            Домен сайта, на котором будет размещен код учета пользователей.
            Устаревший параметр. Используется только для старых групп ретаргетинга, которые пополнялись без помощи пикселя. Для новых аудиторий его следует опускать, иначе будет возвращена ошибка. строка
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.UpdateTargetGroupParams.ClientId">
            <summary>
            Только для рекламных агентств.
            id клиента, в рекламном кабинете которого будет редактироваться аудитория. целое число
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.UpdateTargetGroupParams.Lifetime">
            <summary>
            Только для аудиторий, которые пополняются с помощью пикселя.
            количество дней, через которое пользователи, добавляемые в аудиторию, будут автоматически исключены из нее.
            0 — автоудаление пользователей отсутствует. положительное число, максимальное значение 365
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.UpdateTargetGroupParams.TargetPixelId">
            <summary>
            Передайте в этом параметре идентификатор пикселя, если требуется собирать аудиторию с веб-сайта. целое число
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.UpdateTargetGroupParams.TargetPixelRules">
            <summary>
            Закодированный в JSON массив правил, в соответствии с которыми будет пополняться аудитория из пикселя. Подробнее см. документацию метода ads.createTargetGroup. данные в формате JSON
            </summary>
        </member>
        <member name="T:VkNet.Model.RequestParams.Ads.UpdateTargetPixelParams">
            <summary>
            Параметры запроса ads.updateTargetGroup
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.UpdateTargetPixelParams.AccountId">
            <summary>
            Идентификатор рекламного кабинета. обязательный параметр, целое число
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.UpdateTargetPixelParams.TargetPixelId">
            <summary>
            Идентификатор пикселя. обязательный параметр, целое число
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.UpdateTargetPixelParams.Name">
            <summary>
            Новое название пикселя — строка до 64 символов. обязательный параметр, строка
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.UpdateTargetPixelParams.Domain">
            <summary>
            Новый домен сайта, на котором будет размещен код пикселя. строка
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.UpdateTargetPixelParams.CategoryId">
            <summary>
            Новый идентификатор категории сайта, на котором будет размещен пиксель. Для получения списка возможных идентификаторов можно использовать метод ads.getSuggestions (раздел interest_categories). обязательный параметр, целое число
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Ads.UpdateTargetPixelParams.ClientId">
            <summary>
            Только для рекламных агентств.
            id клиента, в рекламном кабинете которого находится пиксель. целое число
            </summary>
        </member>
        <member name="T:VkNet.Model.RequestParams.AppGetCatalogParams">
            <summary>
            Параметры запроса для приложений
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AppGetCatalogParams.Sort">
            <summary>
            Способ сортировки приложений
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AppGetCatalogParams.Offset">
            <summary>
            Смещение, необходимое для выборки определенного подмножества приложений.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AppGetCatalogParams.Count">
            <summary>
            Количество приложений, информацию о которых необходимо вернуть.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AppGetCatalogParams.Platform">
            <summary>
            Платформа для которой необходимо вернуть приложения, принимает значения: ios,
            android, winphone, web. По умолчанию
            используется web.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AppGetCatalogParams.Extended">
            <summary>
            Позволяет получить дополнительные поля: screenshots, MAU (количество уникальных
            посетителей в месяц),
            catalog_position, international (отображается ли приложение в каталоге у
            иностранных пользователей).
            По умолчанию возвращает только основные поля приложений. Если указан extended –
            count не должен быть больше 100.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AppGetCatalogParams.ReturnFriends">
            <summary>
            <c> true </c> – возвращает список друзей, установивших это приложение.
            (Данный параметр работает только, если пользователь передал валидный
            access_token)
            <c> false </c> – не возвращать список друзей, по умолчанию.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AppGetCatalogParams.Fields">
            <summary>
            Список дополнительных полей, которые необходимо вернуть для профилей
            пользователей.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AppGetCatalogParams.NameCase">
            <summary>
            Падеж для склонения имени и фамилии пользователей.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AppGetCatalogParams.Query">
            <summary>
            Поисковая строка для поиска по каталогу приложений.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AppGetCatalogParams.GenreId">
            <summary>
            Идентификатор жанра.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AppGetCatalogParams.Filter">
            <summary>
            Фильтр.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.AppGetCatalogParams.ToVkParameters(VkNet.Model.RequestParams.AppGetCatalogParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.AppGetParams">
            <summary>
            Параметры метода Get для приложений
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AppGetParams.AppIds">
            <summary>
            Список идентификаторов приложений, данные которых необходимо получить.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AppGetParams.Platform">
            <summary>
            Платформа, для которой необходимо вернуть platform_id, принимает значения: ios,
            android, winphone, web.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AppGetParams.Extended">
            <summary>
            Позволяет получить дополнительные поля: screenshots. По умолчанию возвращает
            только основные поля приложений.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AppGetParams.ReturnFriends">
            <summary>
            <c> true </c> – возвращает список друзей, установивших приложение. (Данный
            параметр работает только, если
            пользователь передал валидный access_token) <c> false </c> – не возвращать
            список друзей, по умолчанию.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AppGetParams.Fields">
            <summary>
            (Работает при использовании return_friends) список дополнительных полей,
            которые необходимо вернуть для профилей
            пользователей.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AppGetParams.NameCase">
            <summary>
            (Работает при использовании return_friends) падеж для склонения имени и фамилии
            пользователей. Возможные значения:
            именительный – nom, родительный – gen, дательный – dat, винительный – acc,
            творительный – ins, предложный – abl. По
            умолчанию nom.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.AppGetParams.ToVkParameters(VkNet.Model.RequestParams.AppGetParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.AppSendRequestParams">
            <summary>
            Параметры запроса SendRequest для приложений.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AppSendRequestParams.UserId">
            <summary>
            Идентификатор пользователя, которому следует отправить запрос.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AppSendRequestParams.Text">
            <summary>
            Текст запроса.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AppSendRequestParams.Type">
            <summary>
            Тип запроса, может принимать значения:.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AppSendRequestParams.Name">
            <summary>
            Уникальное в рамках приложения имя для каждого вида отправляемого запроса.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AppSendRequestParams.Key">
            <summary>
            Строка, которая будет возвращена назад при переходе пользователя по запросу в
            приложение. Может использоваться для
            подсчета конверсии.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AppSendRequestParams.Separate">
            <summary>
            Запрет на группировку запроса с другими, имеющими тот же name. По умолчанию
            отключен.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.AppSendRequestParams.ToVkParameters(VkNet.Model.RequestParams.AppSendRequestParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.AudioEditParams">
            <summary>
            Параметры метода audio.edit
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AudioEditParams.OwnerId">
            <summary>
            Идентификатор владельца аудиозаписи (пользователь или сообщество). ID
            сообщества должен быть отрицательным.
            owner_id=1 — пользователь;
            owner_id=-1 — сообщество.  целое число, обязательный параметр.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AudioEditParams.AudioId">
            <summary>
            Идентификатор аудиозаписи. положительное число, обязательный параметр.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AudioEditParams.Artist">
            <summary>
            Новое название исполнителя. строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AudioEditParams.Title">
            <summary>
            Новое название композиции. строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AudioEditParams.Text">
            <summary>
            Новый текст аудиозаписи. строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AudioEditParams.GenreId">
            <summary>
            Идентификатор жанра из списка аудио жанров. положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AudioEditParams.NoSearch">
            <summary>
            1 — аудиозапись не будет доступна в поиске. По умолчанию — 0. флаг, может
            принимать значения 1 или 0.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.AudioEditParams.ToVkParameters(VkNet.Model.RequestParams.AudioEditParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.AudioGetParams">
            <summary>
            Параметры метода audio.get
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AudioGetParams.OwnerId">
            <summary>
            Идентификатор владельца аудиозаписей (пользователь или сообщество). Обратите
            внимание, идентификатор сообщества в параметре owner_id необходимо указывать
            со знаком "-" — например, owner_id=-1.
            По умолчанию идентификатор текущего пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AudioGetParams.AlbumId">
            <summary>
            Идентификатор альбома с аудиозаписями.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AudioGetParams.PlaylistId">
            <summary>
            Идентификатор плейлиста с аудиозаписями.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AudioGetParams.AudioIds">
            <summary>
            Идентификаторы аудиозаписей, информацию о которых необходимо вернуть.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AudioGetParams.Offset">
            <summary>
            Смещение, необходимое для выборки определенного количества аудиозаписей.
            По умолчанию — 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AudioGetParams.Count">
            <summary>
            Количество аудиозаписей, информацию о которых необходимо вернуть. Максимальное
            значение — 6000.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AudioGetParams.AccessKey">
            <summary>
            Токен доступа
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.AudioGetParams.ToVkParameters(VkNet.Model.RequestParams.AudioGetParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.AudioSearchParams">
            <summary>
            Критерии поиска аудиозаписей.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AudioSearchParams.Query">
            <summary>
            Текст поискового запроса (прим., The Beatles).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AudioSearchParams.Count">
            <summary>
            Количество аудиозаписей, информацию о которых необходимо вернуть.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AudioSearchParams.Offset">
            <summary>
            Смещение, необходимое для выборки определенного подмножетсва аудиозаписей.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AudioSearchParams.Autocomplete">
            <summary>
            Автоматически исправлять ошибки в поисковом запросе (прим. при строке Query
            "Иуфедуы" поиск будет осуществляться по
            строке "Beatles").
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AudioSearchParams.Lyrics">
            <summary>
            Поиск только по тем аудиозаписям, которые содержат тексты.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AudioSearchParams.PerformerOnly">
            <summary>
            Поиск только по названию исполнителя.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AudioSearchParams.Sort">
            <summary>
            Сортировка аудиозаписей при поиске.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AudioSearchParams.SearchOwn">
            <summary>
            Производить ли поиск по аудиозаписям пользователя.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.AudioSearchParams.ToVkParameters(VkNet.Model.RequestParams.AudioSearchParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.AuthConfirmParams">
            <summary>
            Параметры запроса метода auth.confirm
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AuthConfirmParams.ClientId">
            <summary>
            Идентификатор Вашего приложения. целое число, обязательный параметр.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AuthConfirmParams.ClientSecret">
            <summary>
            Секретный ключ приложения, доступный в резделе редактирования приложения.
            строка, обязательный параметр.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AuthConfirmParams.Phone">
            <summary>
            Номер телефона регистрируемого пользователя. Номер телефона может быть проверен
            заранее методом auth.checkPhone.
            строка, обязательный параметр.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AuthConfirmParams.Code">
            <summary>
            Код, отправленный пользователю по SMS. строка, обязательный параметр.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AuthConfirmParams.Password">
            <summary>
            Пароль пользователя, который будет использоваться при входе. (Следует
            передавать только если он не был передан на
            предыдущем шаге auth.signup) Не меньше 6 символов. строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AuthConfirmParams.TestMode">
            <summary>
            1 — тестовый режим, при котором не будет зарегистрирован новый пользователь, но
            при этом номер не будет проверяться
            на использованность. 0 — (по умолчанию) рабочий. флаг, может принимать значения
            1 или 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AuthConfirmParams.Intro">
            <summary>
            Битовая маска отвечающая за прохождение обучения использованию приложения.
            положительное число.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.AuthConfirmParams.ToVkParameters(VkNet.Model.RequestParams.AuthConfirmParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.AuthSignupParams">
            <summary>
            Параметры запроса регистрации нового пользователя по номеру телефона.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AuthSignupParams.FirstName">
            <summary>
            Имя пользователя. строка, обязательный параметр.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AuthSignupParams.LastName">
            <summary>
            Фамилия пользователя. строка, обязательный параметр.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AuthSignupParams.Birthday">
            <summary>
            Дата рождения пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AuthSignupParams.ClientId">
            <summary>
            Идентификатор Вашего приложения. целое число, обязательный параметр.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AuthSignupParams.ClientSecret">
            <summary>
            Секретный ключ приложения, доступный в резделе редактирования приложения.
            строка, обязательный параметр.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AuthSignupParams.Phone">
            <summary>
            Номер телефона регистрируемого пользователя. Номер телефона может быть проверен
            заранее методом auth.checkPhone.
            строка, обязательный параметр.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AuthSignupParams.Password">
            <summary>
            Пароль пользователя, который будет использоваться при входе. Не меньше 6
            символов. Также пароль может быть указан
            позже, при вызове метода auth.confirm. строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AuthSignupParams.TestMode">
            <summary>
            1 — тестовый режим, при котором не будет зарегистрирован новый пользователь, но
            при этом номер не будет проверяться
            на использованность. 0 — (по умолчанию) рабочий. флаг, может принимать значения
            1 или 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AuthSignupParams.Voice">
            <summary>
            1 — в случае, если вместо SMS необходимо позвонить на указанный номер и
            продиктовать код голосом. 0 — (по
            умолчанию) необходимо отправить SMS. В случае если СМС не дошло до пользователя
            – необходимо вызвать метод повторно
            указав voice=1 и sid, полученный при первом вызове метода. флаг, может
            принимать значения 1 или 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AuthSignupParams.Sex">
            <summary>
            Пол пользователя: 1 — женский, 2 — мужской. положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.AuthSignupParams.Sid">
            <summary>
            Идентификатор сессии, необходимый при повторном вызове метода, в случае если
            SMS сообщение доставлено не было. При
            первом вызове этот параметр не передается. строка.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.AuthSignupParams.ToVkParameters(VkNet.Model.RequestParams.AuthSignupParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.BoardAddTopicParams">
            <summary>
            Параметры метода wall.addComment
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardAddTopicParams.GroupId">
            <summary>
            идентификатор сообщества, в котором находится обсуждение.положительное число,
            обязательный параметр
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardAddTopicParams.Title">
            <summary>
            название обсуждения. Обязательный параметр.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardAddTopicParams.Text">
            <summary>
            текст первого сообщения в обсуждении.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardAddTopicParams.FromGroup">
            <summary>
            1 — сообщение будет опубликовано от имени группы, 0 — сообщение будет
            опубликовано от имени пользователя (по
            умолчанию).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardAddTopicParams.Attachments">
            <summary>
            Список объектов, приложенных к комментарию и разделённых символом ",". Поле
            attachments представляется в формате:
            &lt;type&gt;&lt;owner_id&gt;_&lt;media_id&gt;,&lt;type&gt;&lt;owner_id&gt;_&lt;
            media_id&gt;
            &lt;type&gt; — тип медиа-вложения:
            photo — фотография
            video — видеозапись
            audio — аудиозапись
            doc — документ
            &lt;owner_id&gt; — идентификатор владельца медиа-вложения
            &lt;media_id&gt; — идентификатор медиа-вложения.
            Например:
            photo100172_166443618,photo66748_265827614
            Параметр является обязательным, если не задан параметр text. список строк,
            разделенных через запятую.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardAddTopicParams.CaptchaSid">
            <summary>
            Идентификатор капчи
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardAddTopicParams.CaptchaKey">
            <summary>
            текст, который ввел пользователь
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.BoardAddTopicParams.ToVkParameters(VkNet.Model.RequestParams.BoardAddTopicParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.BoardCommentParams">
            <summary>
            Параметры метода wall.addComment
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardCommentParams.GroupId">
            <summary>
            Идентификатор сообщества, в котором находится обсуждение. положительное число,
            обязательный параметр
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardCommentParams.TopicId">
            <summary>
            Идентификатор обсуждения. положительное число,
            обязательный параметр
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardCommentParams.CommentId">
            <summary>
            Идентификатор комментария в обсуждении, обязательный параметр.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardCommentParams.CaptchaSid">
            <summary>
            Идентификатор капчи
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardCommentParams.CaptchaKey">
            <summary>
            Текст, который ввел пользователь
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.BoardCommentParams.ToVkParameters(VkNet.Model.RequestParams.BoardCommentParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.BoardCreateCommentParams">
            <summary>
            Параметры метода wall.addComment
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardCreateCommentParams.GroupId">
            <summary>
            Идентификатор сообщества, в котором находится обсуждение.положительное число,
            обязательный параметр
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardCreateCommentParams.TopicId">
            <summary>
            Идентификатор темы, в которой необходимо оставить комментарий.положительное
            число, обязательный параметр
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardCreateCommentParams.Message">
            <summary>
            Текст комментария. Обязательный параметр, если не передано значение
            attachments.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardCreateCommentParams.Attachments">
            <summary>
            Список объектов, приложенных к комментарию и разделённых символом ",". Поле
            attachments представляется в формате:
            &lt;type&gt;&lt;owner_id&gt;_&lt;media_id&gt;,&lt;type&gt;&lt;owner_id&gt;_&lt;
            media_id&gt;
            &lt;type&gt; — тип медиа-вложения:
            photo — фотография
            video — видеозапись
            audio — аудиозапись
            doc — документ
            &lt;owner_id&gt; — идентификатор владельца медиа-вложения
            &lt;media_id&gt; — идентификатор медиа-вложения.
            Например:
            photo100172_166443618,photo66748_265827614
            Параметр является обязательным, если не задан параметр text. список строк,
            разделенных через запятую.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardCreateCommentParams.FromGroup">
            <summary>
            1 — сообщение будет опубликовано от имени группы, 0 — сообщение будет
            опубликовано от имени пользователя (по
            умолчанию).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardCreateCommentParams.StickerId">
            <summary>
            Идентификатор стикера. положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardCreateCommentParams.CaptchaSid">
            <summary>
            Идентификатор капчи
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardCreateCommentParams.CaptchaKey">
            <summary>
            Текст, который ввел пользователь
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardCreateCommentParams.Guid">
            <summary>
            уникальный идентификатор, предназначенный для предотвращения повторной отправки
            одинакового комментария.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.BoardCreateCommentParams.ToVkParameters(VkNet.Model.RequestParams.BoardCreateCommentParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.BoardEditCommentParams">
            <summary>
            Параметры метода wall.addComment
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardEditCommentParams.GroupId">
            <summary>
            Идентификатор сообщества, в котором находится обсуждение.положительное число,
            обязательный параметр
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardEditCommentParams.TopicId">
            <summary>
            Идентификатор темы, в которой необходимо оставить комментарий.положительное
            число, обязательный параметр
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardEditCommentParams.CommentId">
            <summary>
            Идентификатор комментария в обсуждении.положительное число, обязательный
            параметр.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardEditCommentParams.Message">
            <summary>
            Текст комментария. Обязательный параметр, если не передано значение
            attachments.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardEditCommentParams.Attachments">
            <summary>
            Список объектов, приложенных к комментарию и разделённых символом ",". Поле
            attachments представляется в формате:
            &lt;type&gt;&lt;owner_id&gt;_&lt;media_id&gt;,&lt;type&gt;&lt;owner_id&gt;_&lt;
            media_id&gt;
            &lt;type&gt; — тип медиа-вложения:
            photo — фотография
            video — видеозапись
            audio — аудиозапись
            doc — документ
            &lt;owner_id&gt; — идентификатор владельца медиа-вложения
            &lt;media_id&gt; — идентификатор медиа-вложения.
            Например:
            photo100172_166443618,photo66748_265827614
            Параметр является обязательным, если не задан параметр text. список строк,
            разделенных через запятую.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardEditCommentParams.CaptchaSid">
            <summary>
            Идентификатор капчи
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardEditCommentParams.CaptchaKey">
            <summary>
            Текст, который ввел пользователь
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.BoardEditCommentParams.ToVkParameters(VkNet.Model.RequestParams.BoardEditCommentParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.BoardEditTopicParams">
            <summary>
            Параметры метода wall.addComment
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardEditTopicParams.GroupId">
            <summary>
            Идентификатор сообщества, в котором находится обсуждение.положительное число,
            обязательный параметр
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardEditTopicParams.TopicId">
            <summary>
            Идентификатор сообщества, в котором находится обсуждение.положительное число,
            обязательный параметр
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardEditTopicParams.Title">
            <summary>
            Новое название обсуждения. Обязательный параметр.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardEditTopicParams.CaptchaSid">
            <summary>
            Идентификатор капчи
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardEditTopicParams.CaptchaKey">
            <summary>
            Текст, который ввел пользователь
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.BoardEditTopicParams.ToVkParameters(VkNet.Model.RequestParams.BoardEditTopicParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.BoardGetCommentsParams">
            <summary>
            Параметры метода board.getTopics
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardGetCommentsParams.GroupId">
            <summary>
            Идентификатор владельца страницы (пользователь или сообщество). Обратите
            внимание, идентификатор сообщества в
            параметре owner_id необходимо указывать со знаком "-" — например, owner_id=-1
            соответствует идентификатору
            сообщества ВКонтакте API (club1)  целое число, по умолчанию идентификатор
            текущего пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardGetCommentsParams.TopicId">
            <summary>
            Идентификатор обсуждения.Положительное число, обязательный параметр.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardGetCommentsParams.NeedLikes">
            <summary>
            1 — возвращать информацию о лайках. флаг, может принимать значения 1 или 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardGetCommentsParams.StartCommentId">
            <summary>
            Идентификатор комментария, начиная с которого нужно вернуть список (подробности
            см. ниже). положительное число,
            доступен начиная с версии 5.33.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardGetCommentsParams.Offset">
            <summary>
            Сдвиг, необходимый для получения конкретной выборки результатов. целое число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardGetCommentsParams.Count">
            <summary>
            Число комментариев, которые необходимо получить. По умолчанию — 10,
            максимальное значение — 100. положительное
            число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardGetCommentsParams.Sort">
            <summary>
            Порядок сортировки комментариев (asc — от старых к новым, desc - от новых к
            старым) строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardGetCommentsParams.PreviewLength">
            <summary>
            Количество символов, по которому нужно обрезать текст комментария. Укажите 0,
            если Вы не хотите обрезатьтекст.
            положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardGetCommentsParams.Extended">
            <summary>
            1 — комментарии в ответе будут возвращены в виде пронумерованных объектов,
            дополнительно будут возвращены списки
            объектов profiles, groups. флаг, может принимать значения 1 или 0, доступен
            начиная с версии 5.0.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.BoardGetCommentsParams.ToVkParameters(VkNet.Model.RequestParams.BoardGetCommentsParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.BoardGetTopicsParams">
            <summary>
            Параметры метода board.getTopics
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardGetTopicsParams.GroupId">
            <summary>
            Идентификатор владельца страницы (пользователь или сообщество). Обратите
            внимание, идентификатор сообщества в
            параметре owner_id необходимо указывать со знаком "-" — например, owner_id=-1
            соответствует идентификатору
            сообщества ВКонтакте API (club1)  целое число, по умолчанию идентификатор
            текущего пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardGetTopicsParams.TopicIds">
            <summary>
            Cписок идентификаторов тем, которые необходимо получить (не более 100).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardGetTopicsParams.Order">
            <summary>
            Порядок, в котором необходимо вернуть список тем.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardGetTopicsParams.Offset">
            <summary>
            Сдвиг, необходимый для получения конкретной выборки результатов. целое число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardGetTopicsParams.Count">
            <summary>
            Число комментариев, которые необходимо получить. По умолчанию — 10,
            максимальное значение — 100. положительное
            число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardGetTopicsParams.Extended">
            <summary>
            Если указать в качестве этого параметра 1, то будет возвращена информация о
            пользователях, являющихся создателями
            тем или оставившими в них последнее сообщение. По умолчанию 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardGetTopicsParams.Preview">
            <summary>
            Набор флагов, определяющий, необходимо ли вернуть вместе с информацией о темах
            текст первых и последних сообщений в
            них..
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardGetTopicsParams.PreviewLength">
            <summary>
            Количество символов, по которому нужно обрезать первое и последнее сообщение.
            Укажите 0, если Вы не хотите обрезать
            сообщение. (по умолчанию — 90).
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.BoardGetTopicsParams.ToVkParameters(VkNet.Model.RequestParams.BoardGetTopicsParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.BoardTopicParams">
            <summary>
            Параметры метода wall.addComment
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardTopicParams.GroupId">
            <summary>
            Идентификатор сообщества, в котором находится обсуждение.положительное число,
            обязательный параметр
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardTopicParams.TopicId">
            <summary>
            Идентификатор сообщества, в котором находится обсуждение.положительное число,
            обязательный параметр
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardTopicParams.CaptchaSid">
            <summary>
            Идентификатор капчи
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BoardTopicParams.CaptchaKey">
            <summary>
            Текст, который ввел пользователь
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.BoardTopicParams.ToVkParameters(VkNet.Model.RequestParams.BoardTopicParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.CallbackServerParams">
            <summary>
            Параметры настройки уведомлений о событиях в Callback API.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.CallbackServerParams.GroupId">
            <summary>
            идентификатор сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.CallbackServerParams.ServerId">
            <summary>
            идентификатор сервера.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.CallbackServerParams.CallbackSettings">
            <summary>
            уведомления о новых сообщениях (0 — выключить, 1 — включить).
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.CallbackServerParams.ToVkParameters(VkNet.Model.RequestParams.CallbackServerParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.Database.GetCitiesParams">
            <summary>
            Параметры запроса database.getCities
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Database.GetCitiesParams.CountryId">
            <summary>
            Идентификатор страны, полученный в методе database.getCountries
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Database.GetCitiesParams.RegionId">
            <summary>
            идентификатор региона, города которого необходимо получить. (параметр не
            обязателен)
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Database.GetCitiesParams.Query">
            <summary>
            Строка поискового запроса. Например, Санкт. Максимальная длина строки — 15
            символов.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Database.GetCitiesParams.NeedAll">
            <summary>
            1 – возвращать все города. 0 – возвращать только основные города.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Database.GetCitiesParams.Count">
            <summary>
            Количество городов, которые необходимо вернуть.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Database.GetCitiesParams.Offset">
            <summary>
            Отступ, необходимый для получения определенного подмножества городов.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.Database.GetCitiesParams.ToVkParameters(VkNet.Model.RequestParams.Database.GetCitiesParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.Fave.FaveAddPostParams">
            <summary>
            Параметры запроса метода fave.addPost
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Fave.FaveAddPostParams.OwnerId">
            <summary>
            Идентификатор пользователя или сообщества, чью запись со стены требуется добавить в закладки.
            Обратите внимание, идентификатор сообщества в параметре owner_id необходимо указывать со знаком "-" — например,
            owner_id=-1 соответствует идентификатору сообщества ВКонтакте API (club1).
            </summary>
            <remarks>
            Обязательный параметр.
            </remarks>
        </member>
        <member name="P:VkNet.Model.RequestParams.Fave.FaveAddPostParams.Id">
            <summary>
            Идентификатор записи, которую необходимо добавить в закладки. 
            </summary>
            <remarks>
            Обязательный параметр.
            </remarks>
        </member>
        <member name="P:VkNet.Model.RequestParams.Fave.FaveAddPostParams.AccessKey">
            <summary>
            Специальный код доступа для приватных постов.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Fave.FaveAddPostParams.Ref">
            <summary/>
        </member>
        <member name="P:VkNet.Model.RequestParams.Fave.FaveAddPostParams.TrackCode">
            <summary/>
        </member>
        <member name="P:VkNet.Model.RequestParams.Fave.FaveAddPostParams.Source">
            <summary/>
        </member>
        <member name="T:VkNet.Model.RequestParams.Fave.FaveGetParams">
            <summary>
            Параметры запроса метода fave.get
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Fave.FaveGetParams.ItemType">
            <summary>
            Типы объектов, которые необходимо вернуть.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Fave.FaveGetParams.Fields">
            <summary>
            Список дополнительных полей профилей, которые необходимо вернуть.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Fave.FaveGetParams.Extended">
            <summary>
            <c>true</c>, если необходимо получить информацию о пользователе.
            </summary>
            <remarks>
            По умолчанию: <c>false</c>.
            </remarks>
        </member>
        <member name="P:VkNet.Model.RequestParams.Fave.FaveGetParams.TagId">
            <summary>
            Идентификатор метки, закладки отмеченные которой требуется вернуть.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Fave.FaveGetParams.Offset">
            <summary>
            Смещение относительно первого объекта в закладках пользователя для выборки определенного подмножества.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Fave.FaveGetParams.Count">
            <summary>
            Количество возвращаемых закладок. 
            </summary>
            <remarks>
            По умолчанию 50, минимальное значение 1, максимальное значение 100.
            </remarks>
        </member>
        <member name="P:VkNet.Model.RequestParams.Fave.FaveGetParams.IsFromSnackbar">
            <summary>
            Флаг, может принимать значения <c>true</c> или <c>false</c>
            </summary>
        </member>
        <member name="T:VkNet.Model.RequestParams.Fave.FaveSetTagsParams">
            <summary>
            Параметры запроса метода fave.setTags
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Fave.FaveSetTagsParams.ItemType">
            <summary>
            Тип объекта, которому необходимо присвоить метку.
            </summary>
            <remarks>
            Для работы с объектами пользователя или сообщества используйте метод fave.setPageTags
            </remarks>
        </member>
        <member name="P:VkNet.Model.RequestParams.Fave.FaveSetTagsParams.LinkId">
            <summary>
            Идентификатор ссылки, которой требуется присвоить метку.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Fave.FaveSetTagsParams.LinkUrl">
            <summary/>
        </member>
        <member name="P:VkNet.Model.RequestParams.Fave.FaveSetTagsParams.ItemOwnerId">
            <summary>
            Идентификатор владельца объекта, которому требуется присвоить метку.
            Обратите внимание, идентификатор сообщества в параметре owner_id необходимо указывать со знаком "-" — например,
            owner_id=-1 соответствует идентификатору сообщества ВКонтакте API (club1).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Fave.FaveSetTagsParams.ItemId">
            <summary>
            Идентификатор объекта.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Fave.FaveSetTagsParams.TagIds">
            <summary>
            Идентификатор метки, которую требуется присвоить объекту.
            </summary>
        </member>
        <member name="T:VkNet.Model.RequestParams.FriendsGetMutualParams">
            <summary>
            Параметры метода friends.getMutual
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.FriendsGetMutualParams.SourceUid">
            <summary>
            Идентификатор пользователя, чьи друзья пересекаются с друзьями пользователя с
            идентификатором target_uid. Если
            параметр не задан, то считается, что source_uid равен идентификатору текущего
            пользователя. положительное число, по
            умолчанию идентификатор текущего пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.FriendsGetMutualParams.TargetUid">
            <summary>
            Идентификатор пользователя, с которым необходимо искать общих друзей.
            положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.FriendsGetMutualParams.TargetUids">
            <summary>
            Список идентификаторов пользователей, с которыми необходимо искать общих
            друзей. список положительных чисел,
            разделенных запятыми.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.FriendsGetMutualParams.Order">
            <summary>
            Порядок, в котором нужно вернуть список общих друзей. Допустимые значения:
            random - возвращает друзей в случайном
            порядке. строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.FriendsGetMutualParams.Count">
            <summary>
            Количество общих друзей, которое нужно вернуть. (по умолчанию – все общие
            друзья) положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.FriendsGetMutualParams.Offset">
            <summary>
            Смещение, необходимое для выборки определенного подмножества общих друзей.
            положительное число.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.FriendsGetMutualParams.ToVkParameters(VkNet.Model.RequestParams.FriendsGetMutualParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.FriendsGetOnlineParams">
            <summary>
            Параметры метода friends.getOnline
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.FriendsGetOnlineParams.UserId">
            <summary>
            Идентификатор пользователя, для которого необходимо получить список друзей
            онлайн. Если параметр не задан, то
            считается, что он равен идентификатору текущего пользователя. положительное
            число, по умолчанию идентификатор
            текущего пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.FriendsGetOnlineParams.ListId">
            <summary>
            Идентификатор списка друзей. Если параметр не задан, возвращается информация
            обо всех друзьях, находящихся на
            сайте. положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.FriendsGetOnlineParams.OnlineMobile">
            <summary>
            1 — будет возвращено дополнительное поле online_mobile.
            По умолчанию — 0. флаг, может принимать значения 1 или 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.FriendsGetOnlineParams.Order">
            <summary>
            Порядок, в котором нужно вернуть список друзей, находящихся на сайте.
            Допустимые значения: random - возвращает
            друзей в случайном порядке, hints - сортировать по рейтингу, аналогично тому,
            как друзья сортируются в разделе Мои
            друзья (данный параметр доступен только для Desktop-приложений). строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.FriendsGetOnlineParams.Count">
            <summary>
            Количество друзей онлайн, которое нужно вернуть. (по умолчанию – все друзья
            онлайн) положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.FriendsGetOnlineParams.Offset">
            <summary>
            Смещение, необходимое для выборки определенного подмножества друзей онлайн.
            положительное число.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.FriendsGetOnlineParams.ToVkParameters(VkNet.Model.RequestParams.FriendsGetOnlineParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.FriendsGetParams">
            <summary>
            Параметры метода friends.get
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.FriendsGetParams.UserId">
            <summary>
            Идентификатор пользователя, для которого необходимо получить список друзей.
            Если параметр не задан, то считается, что он равен идентификатору текущего
            пользователя
            (справедливо для вызова с передачей access_token).
            целое число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.FriendsGetParams.Order">
            <summary>
            Порядок, в котором нужно вернуть список друзей. Допустимые значения:
            hints - сортировать по рейтингу, аналогично тому, как друзья сортируются в
            разделе Мои друзья (данный параметр
            доступен только для Desktop-приложений).
            random - возвращает друзей в случайном порядке.
            mobile - возвращает выше тех друзей, у которых установлены мобильные
            приложения.
            name - сортировать по имени. Данный тип сортировки работает медленно, так как
            сервер будет получать всех друзей а
            не только указанное количество count. (работает только при переданном параметре
            fields)
            строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.FriendsGetParams.ListId">
            <summary>
            Идентификатор списка друзей, полученный методом friends.getLists, друзей из
            которого необходимо получить. Данный
            параметр учитывается, только когда параметр user_id равен идентификатору
            текущего пользователя.
            Данный параметр доступен только для Desktop-приложений. положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.FriendsGetParams.Count">
            <summary>
            Количество друзей, которое нужно вернуть. (по умолчанию – все друзья)
            положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.FriendsGetParams.Offset">
            <summary>
            Смещение, необходимое для выборки определенного подмножества друзей.
            положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.FriendsGetParams.Fields">
            <summary>
            Список дополнительных полей, которые необходимо вернуть.
            Доступные значения: nickname, domain, sex, bdate, city, country, timezone,
            photo_50, photo_100, photo_200_orig,
            has_mobile, contacts, education, online, relation, last_seen, status,
            can_write_private_message, can_see_all_posts,
            can_post, universities список строк, разделенных через запятую.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.FriendsGetParams.NameCase">
            <summary>
            Падеж для склонения имени и фамилии пользователя. Возможные значения:
            именительный – nom, родительный – gen,
            дательный – dat, винительный – acc, творительный – ins, предложный – abl. По
            умолчанию nom. строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.FriendsGetParams.Reference">
            <summary>
            Ссылка?
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.FriendsGetParams.ToVkParameters(VkNet.Model.RequestParams.FriendsGetParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.FriendsGetRequestsParams">
            <summary>
            Параметры метода friends.getRequests
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.FriendsGetRequestsParams.Offset">
            <summary>
            Смещение, необходимое для выборки определенного подмножества заявок на
            добавление в друзья. положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.FriendsGetRequestsParams.Count">
            <summary>
            Максимальное количество заявок на добавление в друзья, которые необходимо
            получить (не более'''1000).
            По умолчанию —  100''. положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.FriendsGetRequestsParams.Extended">
            <summary>
            Определяет, требуется ли возвращать в ответе сообщения от пользователей,
            подавших заявку на добавление в друзья. И
            отправителя рекомендации при suggested=1. флаг, может принимать значения 1 или
            0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.FriendsGetRequestsParams.NeedMutual">
            <summary>
            Определяет, требуется ли возвращать в ответе список общих друзей, если они
            есть. Обратите внимание, что при
            использовании need_mutual будет возвращено не более 20 заявок. флаг, может
            принимать значения 1 или 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.FriendsGetRequestsParams.Out">
            <summary>
            0 — возвращать полученные заявки в друзья (по умолчанию), 1 — возвращать
            отправленные пользователем заявки. флаг,
            может принимать значения 1 или 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.FriendsGetRequestsParams.Sort">
            <summary>
            0 — сортировать по дате добавления, 1 — сортировать по количеству общих друзей.
            (Если out = 1, данный параметр не
            учитывается). положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.FriendsGetRequestsParams.Suggested">
            <summary>
            1 — возвращать рекомендованных другими пользователями друзей, 0 — возвращать
            заявки в друзья (по умолчанию). флаг,
            может принимать значения 1 или 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.FriendsGetRequestsParams.NeedViewed">
            <summary>
            0 - не возвращать просмотренные заявки, 1 — возвращать просмотренные заявки.
            (Если out = 1, данный параметр не
            учитывается). флаг, может принимать значения 1 или 0, по умолчанию 0.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.FriendsGetRequestsParams.ToVkParameters(VkNet.Model.RequestParams.FriendsGetRequestsParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.FriendsSearchParams">
            <summary>
            Параметры метода friends.search
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.FriendsSearchParams.UserId">
            <summary>
            Идентификатор пользователя, по списку друзей которого необходимо произвести
            поиск. положительное число, по
            умолчанию идентификатор текущего пользователя, обязательный параметр.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.FriendsSearchParams.Query">
            <summary>
            Строка запроса. строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.FriendsSearchParams.Fields">
            <summary>
            Список дополнительных полей, которые необходимо вернуть.
            Доступные значения: nickname, screen_name, sex, bdate, city, country, timezone,
            photo_50, photo_100,
            photo_200_orig, has_mobile, contacts, education, online, relation, last_seen,
            status, can_write_private_message,
            can_see_all_posts, can_post, universities, domain список строк, разделенных
            через запятую.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.FriendsSearchParams.NameCase">
            <summary>
            Падеж для склонения имени и фамилии пользователя. Возможные значения:
            именительный – nom, родительный – gen,
            дательный – dat, винительный – acc, творительный – ins, предложный – abl. По
            умолчанию nom. строка, по умолчанию
            Nom.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.FriendsSearchParams.Offset">
            <summary>
            Смещение, необходимое для выборки определенного подмножества друзей.
            положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.FriendsSearchParams.Count">
            <summary>
            Количество друзей, которое нужно вернуть. положительное число, по умолчанию 20,
            максимальное значение 1000.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.FriendsSearchParams.ToVkParameters(VkNet.Model.RequestParams.FriendsSearchParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.GetCommentsParams">
            <summary>
            Параметры запроса widgets.getComments
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GetCommentsParams.WidgetApiId">
            <summary>
            Идентификатор приложения/сайта, с которым инициализируются виджеты.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GetCommentsParams.Url">
            <summary>
            URL-адрес страницы.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GetCommentsParams.PageId">
            <summary>
            Внутренний идентификатор страницы в приложении/сайте
            (в случае, если для инициализации виджетов использовался параметр page_id).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GetCommentsParams.Order">
            <summary>
            Тип сортировки комментариев. Возможные значения: date, likes, last_comment.
            Значение по умолчанию - date.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GetCommentsParams.Fields">
            <summary>
            Перечисленные через запятую поля анкет необходимые для получения.
            Если среди полей присутствует replies,
            будут возвращены последние комментарии второго уровня для каждого комментария
            первого уровня.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GetCommentsParams.Offset">
            <summary>
            Смещение необходимое для выборки определенного подмножества комментариев. По
            умолчанию 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GetCommentsParams.Count">
            <summary>
            Количество возвращаемых записей.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.GetCommentsParams.ToVkParameters(VkNet.Model.RequestParams.GetCommentsParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> Объект типа GetCommentsParams </returns>
        </member>
        <member name="M:VkNet.Model.RequestParams.GetCommentsParams.op_Implicit(VkNet.Model.RequestParams.GetCommentsParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.GetCommentsParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.Groups.AddAddressParams">
            <summary>
            Параметры метода <see cref="T:VkNet.Abstractions.IGroupsCategory"/>.<see cref="!:IGroupsCategory.AddAddressAsync"/>
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.AddAddressParams.GroupId">
            <summary>
            Идентификатор сообщества, в которое добавляется адрес.
            </summary>
            <remarks>
            Положительное число, обязательный параметр
            </remarks>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.AddAddressParams.Title">
            <summary>
            Заголовок адреса строка, обязательный параметр, максимальная длина 255
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.AddAddressParams.Address">
            <summary>
            Строка адреса Невский проспект, дом 28 строка, обязательный параметр, максимальная длина 255
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.AddAddressParams.AdditionalAddress">
            <summary>
            Дополнительное описание адреса.
            </summary>
            <example>
            Второй этаж, налево строка, максимальная длина 400
            </example>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.AddAddressParams.CountryId">
            <summary>
            Идентификатор  страны.
            </summary>
            <remarks>
            Для получения можно использовать <see cref="T:VkNet.Abstractions.IDatabaseCategory"/>.<see cref="!:IDatabaseCategory.GetCountriesAsync"/> положительное число,
            обязательный параметр, минимальное значение 1
            </remarks>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.AddAddressParams.CityId">
            <summary>
            Идентификатор города.
            </summary>
            <remarks>
            Для получения можно использовать <see cref="T:VkNet.Abstractions.IDatabaseCategory"/>.<see cref="!:IDatabaseCategory.GetCitiesAsync"/> положительное число,
            обязательный параметр, минимальное значение 1
            </remarks>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.AddAddressParams.Latitude">
            <summary>
            Географическая широта отметки, заданная в градусах (от -90 до 90).
            </summary>
            <remarks>
            Дробное число, обязательный параметр, минимальное значение -90, максимальное значение 90
            </remarks>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.AddAddressParams.Longitude">
            <summary>
            Географическая долгота отметки, заданная в градусах (от -180 до 180).
            </summary>
            <remarks>
            Дробное число, обязательный параметр, минимальное значение -180, максимальное значение 180
            </remarks>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.AddAddressParams.Phone">
            <summary>
            Номер телефона строка
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.AddAddressParams.WorkInfoStatus">
            <summary>
            Тип расписания.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.AddAddressParams.MetroId">
            <summary>
            Идентификатор станции метро.
            </summary>
            <remarks>
            Для получения можно использовать <see cref="T:VkNet.Abstractions.IDatabaseCategory"/>.<see cref="!:IDatabaseCategory.GetMetroStationsAsync"/>
            положительное число, минимальное значение 0
            </remarks>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.AddAddressParams.Timetable">
            <summary>
            Для типа timetable можно передать расписание в формате json.
            Время передается в минутах от 0 часов.
            Ключ по дню означает, что день рабочий. open_time, close_time - начало и конец рабочего дня. break_open_time, break_close_time —  время перерыва.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.AddAddressParams.IsMainAddress">
            <summary>
            Установить адрес основным. Информация об основном адресе сразу показывается в сообществе.
            Для получения информации об остальных адресах нужно перейти к списку адресов.
            </summary>
        </member>
        <member name="T:VkNet.Model.RequestParams.Groups.EditAddressParams">
            <summary>
            Параметры метода <see cref="T:VkNet.Abstractions.IGroupsCategory"/>.<see cref="M:VkNet.Abstractions.IGroupsCategoryAsync.EditAddressAsync(VkNet.Model.RequestParams.Groups.EditAddressParams)"/>
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.EditAddressParams.GroupId">
            <summary>
            Идентификатор сообщества, в которое добавляется адрес.
            </summary>
            <remarks>
            Положительное число, обязательный параметр
            </remarks>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.EditAddressParams.AddressId">
            <summary>
            Идентификатор адреса
            </summary>
            <remarks>
            Положительное число, обязательный параметр
            </remarks>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.EditAddressParams.Title">
            <summary>
            Заголовок адреса строка, максимальная длина 255
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.EditAddressParams.Address">
            <summary>
            Строка адреса
            </summary>
            <example>
            Невский проспект, дом 28
            </example>
            <remarks>
            Строка, максимальная длина 255
            </remarks>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.EditAddressParams.AdditionalAddress">
            <summary>
            Дополнительное описание адреса.
            </summary>
            <example>
            Второй этаж, налево
            </example>
            <remarks>
            Строка, максимальная длина 400
            </remarks>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.EditAddressParams.Phone">
            <summary>
            Номер телефона
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.EditAddressParams.WorkInfoStatus">
            <summary>
            Тип расписания.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.EditAddressParams.CountryId">
            <summary>
            Идентификатор  страны.
            </summary>
            <remarks>
            Для получения можно использовать <see cref="T:VkNet.Abstractions.IDatabaseCategory"/>.<see cref="!:IDatabaseCategory.GetCountriesAsync"/> положительное число, минимальное значение 0
            </remarks>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.EditAddressParams.CityId">
            <summary>
            Идентификатор города.
            </summary>
            <remarks>
            Для получения можно использовать <see cref="T:VkNet.Abstractions.IDatabaseCategory"/>.<see cref="!:IDatabaseCategory.GetCitiesAsync"/> положительное число, минимальное значение 0
            </remarks>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.EditAddressParams.MetroId">
            <summary>
            Идентификатор станции метро.
            </summary>
            <remarks>
            Для получения можно использовать <see cref="T:VkNet.Abstractions.IDatabaseCategory"/>.<see cref="!:IDatabaseCategory.GetMetroStationsAsync"/> положительное число, минимальное значение 0
            </remarks>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.EditAddressParams.Latitude">
            <summary>
            Географическая широта отметки, заданная в градусах (от -90 до 90). дробное число, минимальное значение -90, максимальное значение 90
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.EditAddressParams.Longitude">
            <summary>
            Географическая долгота отметки, заданная в градусах (от -180 до 180). дробное число, минимальное значение -180, максимальное значение 180
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.EditAddressParams.Timetable">
            <summary>
            Для типа timetable можно передать расписание в формате json.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.EditAddressParams.IsMainAddress">
            <summary>
            Установить адрес основным. Информация об основном адресе сразу показывается в сообществе.
            Для получения информации об остальных адресах нужно перейти к списку адресов. флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="T:VkNet.Model.RequestParams.Groups.GetAddressesParams">
            <summary>
            Параметры метода <see cref="T:VkNet.Abstractions.IGroupsCategory"/>.<see cref="!:IGroupsCategory.GetAddressesAsync"/>
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.GetAddressesParams.GroupId">
            <summary>
            Идентификатор сообщества.
            </summary>
            <remarks>
            Положительное число, обязательный параметр
            </remarks>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.GetAddressesParams.Fields">
            <summary>
            Список дополнительных полей сообществ, которые необходимо вернуть.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.GetAddressesParams.AddressIds">
            <summary>
            Перечисленные через запятую идентификаторы адресов, информацию о которых необходимо вернуть.
            </summary>
            <remarks>
            Список положительных чисел, разделенных запятыми
            </remarks>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.GetAddressesParams.Latitude">
            <summary>
            Географическая широта отметки, заданная в градусах (от -90 до 90).
            </summary>
            <remarks>
            Дробное число, минимальное значение -90, максимальное значение 90
            </remarks>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.GetAddressesParams.Longitude">
            <summary>
            Географическая долгота отметки, заданная в градусах (от -180 до 180).
            </summary>
            <remarks>
            Дробное число, минимальное значение -180, максимальное значение 180
            </remarks>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.GetAddressesParams.Offset">
            <summary>
            Смещение, необходимое для выборки определенного подмножества черного списка.
            </summary>
            <remarks>
            Положительное число
            </remarks>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.GetAddressesParams.Count">
            <summary>
            Количество адресов, которое необходимо вернуть.
            </summary>
            <remarks>
            Положительное число, по умолчанию 10
            </remarks>
        </member>
        <member name="T:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams">
            <summary>
            Параметры метода <see cref="T:VkNet.Abstractions.IGroupsCategory"/>.<see cref="M:VkNet.Abstractions.IGroupsCategoryAsync.SetLongPollSettingsAsync(VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams)"/>
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.GroupId">
            <summary>
            Идентификатор сообщества. положительное число, обязательный параметр
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.ApiVersion">
            <summary>
            Версия API строка
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.Enabled">
            <summary>
            1 — включить Bots Long Poll, 0 — отключить. флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.MessageNew">
            <summary>
            Уведомления о новых сообщениях (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.MessageReply">
            <summary>
            Уведомления об исходящем сообщении (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.MessageAllow">
            <summary>
            Уведомления о подписке на сообщения  (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.MessageDeny">
            <summary>
            Уведомления о запрете на сообщения (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.MessageEdit">
            <summary>
            Уведомления о редактировании сообщения (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.MessageTypingState">
            <summary>
            Флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.PhotoNew">
            <summary>
            Уведомления о добавлении новой фотографии (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.AudioNew">
            <summary>
            Уведомления о добавлении новой аудиозаписи (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.VideoNew">
            <summary>
            Уведомления о добавлении новой видеозаписи (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.WallReplyNew">
            <summary>
            Уведомления о добавлении нового комментария на стене (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.WallReplyEdit">
            <summary>
            Уведомления о редактировании комментария на стене (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.WallReplyDelete">
            <summary>
            Уведомления об удалении комментария на стене (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.WallReplyRestore">
            <summary>
            Уведомления о восстановлении комментария на стене (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.WallPostNew">
            <summary>
            Уведомления о новой записи на стене (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.WallRepost">
            <summary>
            Уведомления о репосте записи (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.BoardPostNew">
            <summary>
            Уведомления о создании комментария в обсуждении (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.BoardPostEdit">
            <summary>
            Уведомления о редактировании комментария в обсуждении (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.BoardPostRestore">
            <summary>
            Уведомление о восстановлении комментария в обсуждении (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.BoardPostDelete">
            <summary>
            Уведомления об удалении комментария в обсуждении (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.PhotoCommentNew">
            <summary>
            Уведомления о добавлении нового комментария к фото (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.PhotoCommentEdit">
            <summary>
            Уведомления о редактировании комментария к фото (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.PhotoCommentDelete">
            <summary>
            Уведомления об удалении комментария к фото (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.PhotoCommentRestore">
            <summary>
            Уведомления о восстановлении комментария к фото (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.VideoCommentNew">
            <summary>
            Уведомления о добавлении нового комментария к видео (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.VideoCommentEdit">
            <summary>
            Уведомления о редактировании комментария к видео (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.VideoCommentDelete">
            <summary>
            Уведомления об удалении комментария к видео (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.VideoCommentRestore">
            <summary>
            Уведомления о восстановлении комментария к видео (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.MarketCommentNew">
            <summary>
            Уведомления о добавлении нового комментария к товару (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.MarketCommentEdit">
            <summary>
            Уведомления о редактировании комментария к товару (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.MarketCommentDelete">
            <summary>
            Уведомления об удалении комментария к товару (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.MarketCommentRestore">
            <summary>
            Уведомления о восстановлении комментария к товару (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.PollVoteNew">
            <summary>
            Уведомления о новом голосе в публичных опросах (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.GroupJoin">
            <summary>
            Уведомления о вступлении в сообщество (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.GroupLeave">
            <summary>
            Уведомления о выходе из сообщества (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.GroupChangeSettings">
            <summary>
            Уведомления об изменении настроек (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.GroupChangePhoto">
            <summary>
            Уведомления об изменении главной фотографии (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.GroupOfficersEdit">
            <summary>
            Уведомления об изменении руководства (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.UserBlock">
            <summary>
            Уведомления об внесении пользователя в чёрный список (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Groups.SetLongPollSettingsParams.UserUnblock">
            <summary>
            Уведомления об исключении пользователя из чёрного списка (0 — выключить, 1 — включить). флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="T:VkNet.Model.RequestParams.BotsLongPollHistoryParams">
            <summary>
            Параметры BotsLongPoll API
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BotsLongPollHistoryParams.Server">
            <summary>
            Сервер для подключения Long Poll группы
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BotsLongPollHistoryParams.Ts">
            <summary>
            Последние полученое событие
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BotsLongPollHistoryParams.Key">
            <summary>
            Ключ сессии
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.BotsLongPollHistoryParams.Wait">
            <summary>
            Время ожидание события
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.BotsLongPollHistoryParams.ToVkParameters(VkNet.Model.RequestParams.BotsLongPollHistoryParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.RequestParams.BotsLongPollHistoryParams.op_Implicit(VkNet.Model.RequestParams.BotsLongPollHistoryParams)~VkNet.Utils.VkParameters">
            <summary>
            Преобразование класса <see cref="T:VkNet.Model.RequestParams.BotsLongPollHistoryParams" /> в VkParameters
            </summary>
            <param name="p"> Параметр. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.GroupsBanUserParams">
            <summary>
            Параметры метода groups.banUser
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsBanUserParams.GroupId">
            <summary>
            Идентификатор группы. положительное число, обязательный параметр.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsBanUserParams.UserId">
            <summary>
            Идентификатор пользователя, которого нужно добавить в черный список.
            положительное число, обязательный параметр.
            Использовать <see cref="P:VkNet.Model.RequestParams.GroupsBanUserParams.OwnerId"/> для более новых версий API
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsBanUserParams.OwnerId">
            <summary>
            Идентификатор пользователя или сообщества,  которое будет добавлено в черный список.
            обязательный параметр.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsBanUserParams.EndDate">
            <summary>
            Дата завершения срока действия бана в формате unixtime. Максимальный возможный
            срок окончания бана, который можно
            указать, — один год с его начала. Если параметр не указан, пользователь будет
            заблокирован навсегда. положительное
            число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsBanUserParams.Reason">
            <summary>
            Причина бана:
            0 — другое (по умолчанию);
            1 — спам;
            2 — оскорбление участников;
            3 — нецензурные выражения;
            4 — сообщения не по теме.
            положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsBanUserParams.Comment">
            <summary>
            Текст комментария к бану. строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsBanUserParams.CommentVisible">
            <summary>
            1 – текст комментария будет отображаться пользователю.
            0 – текст комментария не доступен пользователю. (по умолчанию) флаг, может
            принимать значения 1 или 0.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.GroupsBanUserParams.ToVkParameters(VkNet.Model.RequestParams.GroupsBanUserParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.GroupsEditManagerParams">
            <summary>
            Параметры метода groups.editManager
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditManagerParams.GroupId">
            <summary>
            Идентификатор сообщества (указывается без знака «минус»). положительное число,
            обязательный параметр.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditManagerParams.UserId">
            <summary>
            Идентификатор пользователя, чьи полномочия в сообществе нужно изменить.
            положительное число, обязательный параметр.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditManagerParams.Role">
            <summary>
            Уровень полномочий:
            moderator — модератор;
            editor — редактор;
            administrator — администратор.
            Если параметр не задан, с пользователя user_id снимаются полномочия
            руководителя. строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditManagerParams.IsContact">
            <summary>
            Отображать ли пользователя в блоке контактов сообщества. флаг, может принимать
            значения 1 или 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditManagerParams.ContactPosition">
            <summary>
            Должность пользователя, отображаемая в блоке контактов. строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditManagerParams.ContactPhone">
            <summary>
            Телефон пользователя, отображаемый в блоке контактов. строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditManagerParams.ContactEmail">
            <summary>
            Email пользователя, отображаемый в блоке контактов. строка.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.GroupsEditManagerParams.ToVkParameters(VkNet.Model.RequestParams.GroupsEditManagerParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.GroupsEditParams">
            <summary>
            Параметры метода groups.edit
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.GroupId">
            <summary>
            Идентификатор сообщества. положительное число, обязательный параметр.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.Title">
            <summary>
            Название сообщества. строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.Description">
            <summary>
            Описание сообщества. строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.ScreenName">
            <summary>
            Короткое имя сообщества. строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.Access">
            <summary>
            Тип группы.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.Website">
            <summary>
            Адрес сайта, который будет указан в информации о группе. строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.Subject">
            <summary>
            Тематика сообщества. строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.Email">
            <summary>
            Электронный адрес организатора (для мероприятий). строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.Phone">
            <summary>
            Номер телефона организатора (для мероприятий). строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.Rss">
            <summary>
            Адрес rss для импорта новостей (доступен только группам, получившим
            соответствующее разрешение, обратитесь в
            http://vk.com/support для получения разрешения). строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.EventStartDate">
            <summary>
            Дата начала события. положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.EventFinishDate">
            <summary>
            Дата окончания события. положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.EventGroupId">
            <summary>
            Идентификатор группы, которая является организатором события (только для
            событий). положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.PublicCategory">
            <summary>
            Категория публичной страницы. положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.PublicSubcategory">
            <summary>
            Подкатегория публичной станицы. положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.PublicDate">
            <summary>
            Дата основания компании, организации, которой посвящена публичная страница в
            виде строки формата "dd.mm.YYYY".
            строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.Wall">
            <summary>
            Стена.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.Topics">
            <summary>
            Обсуждения.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.Photos">
            <summary>
            Фотографии.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.Video">
            <summary>
            Видеозаписи.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.Audio">
            <summary>
            Аудиозаписи.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.Links">
            <summary>
            Ссылки (доступно только для публичных страниц).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.Events">
            <summary>
            События (доступно только для публичных страниц).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.Places">
            <summary>
            Места (доступно только для публичных страниц).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.Contacts">
            <summary>
            Контакты (доступно только для публичных страниц).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.Docs">
            <summary>
            Документы сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.Wiki">
            <summary>
            Wiki-материалы сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.Messages">
            <summary>
            Сообщения сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.AgeLimits">
            <summary>
            Возрастное ограничение для сообщества. положительное число, по умолчанию 1.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.MarketEnabled">
            <summary>
            Товары включены.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.MarketCommentsEnabled">
            <summary>
            Комментарии к товарам включены.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.MarketCountry">
            <summary>
            Регионы доставки товаров. список положительных чисел, разделенных запятыми.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.MarketCity">
            <summary>
            Города доставки товаров (в случае если указана одна страна). список
            положительных чисел, разделенных запятыми.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.MarketCurrency">
            <summary>
            Идентификатор валюты магазина.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.MarketContact">
            <summary>
            Контакт для связи для продавцом.
            Для использования сообщений сообщества следует включить их и передать значение
            0. положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.MarketWiki">
            <summary>
            Идентификатор wiki-страницы с описанием магазина. положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.ObsceneFilter">
            <summary>
            Фильтр нецензурных выражений в комментариях.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.ObsceneStopwords">
            <summary>
            Фильтр по ключевым словам в комментариях.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.ObsceneWords">
            <summary>
            Ключевые слова для фильтра комментариев. список слов, разделенных через
            запятую.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.MainSection">
            <summary>
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.SecondarySection">
            <summary>
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.Country">
            <summary>
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.City">
            <summary>
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.Articles">
            <summary>
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsEditParams.Addresses">
            <summary>
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.GroupsEditParams.ToVkParameters(VkNet.Model.RequestParams.GroupsEditParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> Объект типа GroupsEditParams </returns>
        </member>
        <member name="M:VkNet.Model.RequestParams.GroupsEditParams.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.GroupsGetMembersParams">
            <summary>
            Параметры метода groups.getMembers
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsGetMembersParams.GroupId">
            <summary>
            Идентификатор или короткое имя сообщества. строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsGetMembersParams.Sort">
            <summary>
            Сортировка, с которой необходимо вернуть список участников. Может принимать
            значения:
            id_asc — в порядке возрастания id;
            id_desc — в порядке убывания id;
            time_asc — в хронологическом порядке по вступлению в сообщество;
            time_desc — в антихронологическом порядке по вступлению в сообщество.
            Сортировка по time_asc и time_desc возможна только при вызове от модератора
            сообщества. строка, по умолчанию
            id_asc.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsGetMembersParams.Offset">
            <summary>
            Смещение, необходимое для выборки определенного подмножества участников. По
            умолчанию 0. положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsGetMembersParams.Count">
            <summary>
            Количество участников сообщества, информацию о которых необходимо получить.
            положительное число, по умолчанию 1000,
            максимальное значение 1000.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsGetMembersParams.Fields">
            <summary>
            Список дополнительных полей, которые необходимо вернуть.
            Доступные значения: sex, bdate, city, country, photo_50, photo_100,
            photo_200_orig, photo_200, photo_400_orig,
            photo_max, photo_max_orig, online, online_mobile, lists, domain, has_mobile,
            contacts, connections, site,
            education, universities, schools, can_post, can_see_all_posts, can_see_audio,
            can_write_private_message, status,
            last_seen, common_count, relation, relatives, counters список строк,
            разделенных через запятую.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsGetMembersParams.Filter">
            <summary>
            Friends — будут возвращены только друзья в этом сообществе.
            unsure — будут возвращены пользователи, которые выбрали «Возможно пойду» (если
            сообщество относится к
            мероприятиям).
            managers — будут возвращены только руководители сообщества (доступно при
            запросе с передачей access_token от имени
            администратора сообщества).
            строка.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.GroupsGetMembersParams.ToVkParameters(VkNet.Model.RequestParams.GroupsGetMembersParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.GroupsGetParams">
            <summary>
            Параметры метода groups.get
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsGetParams.UserId">
            <summary>
            Идентификатор пользователя, информацию о сообществах которого требуется
            получить. положительное число, по умолчанию
            идентификатор текущего пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsGetParams.Extended">
            <summary>
            Если указать в качестве этого параметра 1, то будет возвращена полная
            информация о группах пользователя. По
            умолчанию 0. флаг, может принимать значения 1 или 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsGetParams.Filter">
            <summary>
            Список фильтров сообществ, которые необходимо вернуть, перечисленные через
            запятую. Доступны значения admin,
            editor, moder, groups, publics, events. По умолчанию возвращаются все
            сообщества пользователя.
            При указании фильтра admin будут возвращены сообщества, в которых пользователь
            является администратором, editor —
            администратором или редактором, moder — администратором, редактором или
            модератором. список строк, разделенных
            через запятую.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsGetParams.Fields">
            <summary>
            Список дополнительных полей, которые необходимо вернуть. Возможные значения:
            city, country, place, description,
            wiki_page, members_count, counters, start_date, finish_date, can_post,
            can_see_all_posts, activity, status,
            contacts, links, fixed_post, verified, site, can_create_topic. Подробнее см.
            описание полей объекта group.
            Обратите внимание, этот параметр учитывается только при extended=1. список
            строк, разделенных через запятую.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsGetParams.Offset">
            <summary>
            Смещение, необходимое для выборки определённого подмножества сообществ.
            положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsGetParams.Count">
            <summary>
            Количество сообществ, информацию о которых нужно вернуть. положительное число,
            максимальное значение 1000.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.GroupsGetParams.ToVkParameters(VkNet.Model.RequestParams.GroupsGetParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.GroupsSearchParams">
            <summary>
            Параметры метода groups.search
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsSearchParams.Query">
            <summary>
            Текст поискового запроса. строка, обязательный параметр.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsSearchParams.Type">
            <summary>
            Тип сообщества. Возможные значения: group, page, event. строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsSearchParams.CountryId">
            <summary>
            Идентификатор страны. положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsSearchParams.CityId">
            <summary>
            Идентификатор города. При передаче этого параметра поле country_id
            игнорируется. положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsSearchParams.Future">
            <summary>
            При передаче значения 1 будут выведены предстоящие события. Учитывается только
            при передаче в качестве type
            значения event. флаг, может принимать значения 1 или 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsSearchParams.Market">
            <summary>
            при передаче значения 1 будут выведены сообщества с включенными товарами.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsSearchParams.Sort">
            <summary>
            0 — сортировать по умолчанию (аналогично результатам поиска в полной версии
            сайта);
            1 — сортировать по скорости роста;
            2 — сортировать по отношению дневной посещаемости к количеству пользователей;
            3 — сортировать по отношению количества лайков к количеству пользователей;
            4 — сортировать по отношению количества комментариев к количеству
            пользователей;
            5 — сортировать по отношению количества записей в обсуждениях к количеству
            пользователей.
            целое число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsSearchParams.Offset">
            <summary>
            Смещение, необходимое для выборки определённого подмножества результатов
            поиска. По умолчанию — 0. положительное
            число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GroupsSearchParams.Count">
            <summary>
            Количество результатов поиска, которое необходимо вернуть. Обратите внимание —
            даже при использовании параметра
            offset для получения информации доступны только первые 1000 результатов.
            положительное число, по умолчанию 20, максимальное значение 1000.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.GroupsSearchParams.ToVkParameters(VkNet.Model.RequestParams.GroupsSearchParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.Leads.CheckUserParams">
            <summary>
            Доступна ли рекламная акция пользователю.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Leads.CheckUserParams.LeadId">
            <summary>
            Идентификатор рекламной акции
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Leads.CheckUserParams.Country">
            <summary>
            Двухбуквенный код страны пользователя (ISO 3166-1 alpha-2, также известный как
            ISO2).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Leads.CheckUserParams.TestResult">
            <summary>
            При использовании тестового режима функция вернёт result, соответствующий
            значению этого параметра.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Leads.CheckUserParams.TestMode">
            <summary>
            1 -- включить тестовый режим;
            0 -- включить боевой режим.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Leads.CheckUserParams.AutoStart">
            <summary>
            Автоматический старт акции при успешной проверке. Доступно по согласованию с
            администрацией.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Leads.CheckUserParams.Age">
            <summary>
            Возраст пользователя.
            </summary>
        </member>
        <member name="T:VkNet.Model.RequestParams.Leads.GetUsersParams">
            <summary>
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Leads.GetUsersParams.OfferId">
            <summary>
            Идентификатор рекламной акции.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Leads.GetUsersParams.Secret">
            <summary>
            Секретный ключ, доступный в интерфейсе редактирования рекламной акции.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Leads.GetUsersParams.Offset">
            <summary>
            Смещение необходимое для выборки определенного подмножества действий.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Leads.GetUsersParams.Count">
            <summary>
            Количество действий, которые необходимо вернуть.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Leads.GetUsersParams.Status">
            <summary>
            Тип действия
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Leads.GetUsersParams.Reverse">
            <summary>
            0 — сортировка в обратном хронологическом порядке;
            1 — сортировка в прямом хронологическом порядке.
            </summary>
        </member>
        <member name="T:VkNet.Model.RequestParams.Leads.StartParams">
            <summary>
            Создаёт новую сессию для прохождения рекламной акции для пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Leads.StartParams.LeadId">
            <summary>
            идентификатор рекламной акции, доступный в интерфейсе тестирования рекламных
            акций.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Leads.StartParams.Secret">
            <summary>
            секретный ключ, доступный в интерфейсе редактирования рекламных акций.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Leads.StartParams.Uid">
            <summary>
            идентификатор пользователя, для которого необходимо получить сессию рекламной
            акции.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Leads.StartParams.Aid">
            <summary>
            идентификатор приложения, на счет которого будут зачислены голоса.
            Если 0, при завершении рекламной акции голоса будут зачислены на счет
            пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Leads.StartParams.TestMode">
            <summary>
            1 - запустить рекламную акцию в тестовом режиме;
            0 - запустить рекламную акцию в боевом режиме (рекламная акция должна быть
            одобрена).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Leads.StartParams.Force">
            <summary>
            1 - запустить рекламную акцию без проверок пользователя на фрод.
            Рекомендуется использовать только при выполнении оффлайн-офферов.
            </summary>
        </member>
        <member name="T:VkNet.Model.RequestParams.LikesAddParams">
            <summary>
            Параметры метода likes.add
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.LikesAddParams.Type">
            <summary>
            Тип объекта.
            </summary>
            <remarks>
            Возможные типы:
            post — запись на стене пользователя или группы;
            comment — комментарий к записи на стене;
            photo — фотография;
            audio — аудиозапись;
            video — видеозапись;
            note — заметка;
            market — товар;
            photo_comment — комментарий к фотографии;
            video_comment — комментарий к видеозаписи;
            topic_comment — комментарий в обсуждении;
            market_comment — комментарий к товару; строка, обязательный параметр (Строка,
            обязательный параметр).
            </remarks>
        </member>
        <member name="P:VkNet.Model.RequestParams.LikesAddParams.ItemId">
            <summary>
            Идентификатор объекта. положительное число, обязательный параметр
            (Положительное число, обязательный параметр).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.LikesAddParams.OwnerId">
            <summary>
            Идентификатор владельца объекта. целое число, по умолчанию идентификатор
            текущего пользователя (Целое число, по
            умолчанию идентификатор текущего пользователя).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.LikesAddParams.AccessKey">
            <summary>
            Ключ доступа в случае работы с приватными объектами. строка (Строка).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.LikesAddParams.Reference">
            <summary>
            Ссылка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.LikesAddParams.CaptchaSid">
            <summary>
            Идентификатор капчи
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.LikesAddParams.CaptchaKey">
            <summary>
            текст, который ввел пользователь
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.LikesAddParams.ToVkParameters(VkNet.Model.RequestParams.LikesAddParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.LikesGetListParams">
            <summary>
            Параметры запроса likes.getList
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.LikesGetListParams.Type">
            <summary>
            Тип объекта.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.LikesGetListParams.OwnerId">
            <summary>
            Идентификатор владельца Like-объекта: id пользователя, id сообщества (со знаком
            «минус») или id приложения. Если
            параметр type равен sitepage, то в качестве owner_id необходимо передавать id
            приложения. Если параметр не задан,
            то считается, что он равен либо идентификатору текущего пользователя, либо
            идентификатору текущего приложения (если
            type равен sitepage).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.LikesGetListParams.ItemId">
            <summary>
            Идентификатор Like-объекта. Если type равен sitepage, то параметр item_id может
            содержать значение параметра
            page_id, используемый при инициализации виджета «Мне нравится».
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.LikesGetListParams.PageUrl">
            <summary>
            Uri страницы, на которой установлен виджет «Мне нравится». Используется вместо
            параметра item_id, если при
            размещении виджета не был указан page_id.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.LikesGetListParams.Filter">
            <summary>
            Указывает, следует ли вернуть всех пользователей, добавивших объект в список
            "Мне нравится" или только тех, которые
            рассказали о нем друзьям. Параметр может принимать следующие значения:строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.LikesGetListParams.FriendsOnly">
            <summary>
            Указывает, необходимо ли возвращать только пользователей, которые являются
            друзьями текущего пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.LikesGetListParams.Offset">
            <summary>
            Смещение, относительно начала списка, для выборки определенного подмножества.
            Если параметр не задан, то считается,
            что он равен 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.LikesGetListParams.Count">
            <summary>
            Количество возвращаемых идентификаторов пользователей.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.LikesGetListParams.SkipOwn">
            <summary>
            Не возвращать самого пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.LikesGetListParams.Extended">
            <summary>
            1 — возвращать расширенную информацию о пользователях и сообществах из списка
            поставивших отметку «Мне нравится»
            или сделавших репост. По умолчанию — 0.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.LikesGetListParams.ToVkParameters(VkNet.Model.RequestParams.LikesGetListParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.LinkStatsParams">
            <summary>
            Параметры запроса LinkStats
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.LinkStatsParams.Key">
            <summary>
            Сокращенная ссылка (часть URL после "vk.cc/").
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.LinkStatsParams.AccessKey">
            <summary>
            Ключ доступа к приватной статистике ссылки.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.LinkStatsParams.Interval">
            <summary>
            Единица времени для подсчета статистики.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.LinkStatsParams.IntervalsCount">
            <summary>
            Длительность периода для получения статистики в выбранных единицах (из
            параметра interval).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.LinkStatsParams.Extended">
            <summary>
            1 — возвращать расширенную статистику (пол/возраст/страна/город),
            0 — возвращать только количество переходов.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.LinkStatsParams.ToVkParameters(VkNet.Model.RequestParams.LinkStatsParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.Market.MarketCreateCommentParams">
            <summary>
            Параметры запроса market.createComment
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Market.MarketCreateCommentParams.OwnerId">
            <summary>
            Идентификатор владельца товара. Обратите внимание, идентификатор сообщества в
            параметре owner_id необходимо
            указывать со знаком "-" — например, owner_id=-1 соответствует идентификатору
            сообщества ВКонтакте API (club1)
            целое число, обязательный параметр (целое число, обязательный параметр).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Market.MarketCreateCommentParams.ItemId">
            <summary>
            Идентификатор товара. положительное число, обязательный параметр (положительное
            число, обязательный параметр).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Market.MarketCreateCommentParams.Message">
            <summary>
            Текст комментария (является обязательным, если не задан параметр attachments).
            строка (строка).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Market.MarketCreateCommentParams.Attachments">
            <summary>
            Список объектов, приложенных к комментарию и разделённых символом ",".
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Market.MarketCreateCommentParams.FromGroup">
            <summary>
            1 — комментарий будет опубликован от имени группы, 0 — комментарий будет
            опубликован от имени пользователя (по
            умолчанию). флаг, может принимать значения 1 или 0 (флаг, может принимать
            значения 1 или 0).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Market.MarketCreateCommentParams.ReplyToComment">
            <summary>
            Идентификатор комментария, в ответ на который должен быть добавлен новый
            комментарий. положительное число
            (положительное число).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Market.MarketCreateCommentParams.StickerId">
            <summary>
            Идентификатор стикера. положительное число (положительное число).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Market.MarketCreateCommentParams.Guid">
            <summary>
            Уникальный идентификатор, предназначенный для предотвращения повторной отправки
            одинакового комментария.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.Market.MarketCreateCommentParams.ToVkParameters(VkNet.Model.RequestParams.Market.MarketCreateCommentParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.Market.MarketGetCommentsParams">
            <summary>
            Параметры запроса market.getComments
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Market.MarketGetCommentsParams.OwnerId">
            <summary>
            Идентификатор владельца товара. Обратите внимание, идентификатор сообщества в
            параметре owner_id необходимо
            указывать со знаком "-" — например, owner_id=-1 соответствует идентификатору
            сообщества ВКонтакте API (club1)
            целое число, обязательный параметр (целое число, обязательный параметр).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Market.MarketGetCommentsParams.ItemId">
            <summary>
            Идентификатор товара. положительное число, обязательный параметр (положительное
            число, обязательный параметр).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Market.MarketGetCommentsParams.NeedLikes">
            <summary>
            1 — возвращать информацию о лайках. флаг, может принимать значения 1 или 0
            (флаг, может принимать значения 1 или
            0).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Market.MarketGetCommentsParams.StartCommentId">
            <summary>
            Идентификатор комментария, начиная с которого нужно вернуть список (подробности
            см. ниже). положительное число
            (положительное число).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Market.MarketGetCommentsParams.Offset">
            <summary>
            Сдвиг, необходимый для получения конкретной выборки результатов. положительное
            число, по умолчанию 0 (положительное
            число, по умолчанию 0).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Market.MarketGetCommentsParams.Count">
            <summary>
            Число комментариев, которые необходимо получить. положительное число, по
            умолчанию 20, максимальное значение 100
            (положительное число, по умолчанию 20, максимальное значение 100).
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="P:VkNet.Model.RequestParams.Market.MarketGetCommentsParams.Sort">
            <summary>
            Порядок сортировки комментариев (asc — от старых к новым, desc - от новых к
            старым) строка, по умолчанию asc
            (строка, по умолчанию asc).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Market.MarketGetCommentsParams.Extended">
            <summary>
            1 — комментарии в ответе будут возвращены в виде пронумерованных объектов,
            дополнительно будут возвращены списки
            объектов profiles, groups. флаг, может принимать значения 1 или 0 (флаг, может
            принимать значения 1 или 0).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Market.MarketGetCommentsParams.Fields">
            <summary>
            Список дополнительных полей профилей, которые необходимо вернуть. См. подробное
            описание. Доступные значения: sex,
            bdate, city, country, photo_50, photo_100, photo_200_orig, photo_200,
            photo_400_orig, photo_max, photo_max_orig,
            photo_id, online, online_mobile, domain, has_mobile, contacts, connections,
            site, education, universities, schools,
            can_post, can_see_all_posts, can_see_audio, can_write_private_message, status,
            last_seen, common_count, relation,
            relatives, counters, screen_name, maiden_name, timezone, occupation,activities,
            interests, music, movies, tv,
            books, games, about, quotes, personal, friend_status, military, career список
            строк, разделенных через запятую
            (список строк, разделенных через запятую).
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.Market.MarketGetCommentsParams.ToVkParameters(VkNet.Model.RequestParams.Market.MarketGetCommentsParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.Market.MarketProductParams">
            <summary>
            Параметр для добавления / редактирования товара
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Market.MarketProductParams.OwnerId">
            <summary>
            Идентификатор владельца товара. Обратите внимание, идентификатор сообщества в
            параметре owner_id необходимо
            указывать со знаком "-" — например, owner_id=-1 соответствует идентификатору
            сообщества ВКонтакте API (club1)
            целое число, обязательный параметр (целое число, обязательный параметр).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Market.MarketProductParams.ItemId">
            <summary>
            Идентификатор товара.
            </summary>
            <remarks>
            Только для метода <see cref="M:VkNet.Abstractions.IMarketsCategory.Edit(VkNet.Model.RequestParams.Market.MarketProductParams)"/>
            </remarks>
        </member>
        <member name="P:VkNet.Model.RequestParams.Market.MarketProductParams.Name">
            <summary>
            Название товара. строка, минимальная длина 4, максимальная длина 100,
            обязательный параметр (строка, минимальная
            длина 4, максимальная длина 100, обязательный параметр).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Market.MarketProductParams.Description">
            <summary>
            Описание товара. строка, минимальная длина 10, обязательный параметр (строка,
            минимальная длина 10, обязательный
            параметр).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Market.MarketProductParams.CategoryId">
            <summary>
            Идентификатор категории товара. положительное число, обязательный параметр
            (положительное число, обязательный
            параметр).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Market.MarketProductParams.Price">
            <summary>
            Цена товара. дробное число, обязательный параметр, минимальное значение 0.01
            (дробное число, обязательный параметр,
            минимальное значение 0.01).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Market.MarketProductParams.Deleted">
            <summary>
            Статус товара (1 — товар удален, 0 — товар не удален). флаг, может принимать
            значения 1 или 0 (флаг, может
            принимать значения 1 или 0).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Market.MarketProductParams.MainPhotoId">
            <summary>
            Идентификатор фотографии обложки товара. положительное число, обязательный
            параметр (положительное число,
            обязательный параметр).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Market.MarketProductParams.PhotoIds">
            <summary>
            Идентификаторы дополнительных фотографий товара. список положительных чисел,
            разделенных запятыми, количество
            элементов должно составлять не более 4 (список положительных чисел, разделенных
            запятыми, количество элементов
            должно составлять не более 4).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Market.MarketProductParams.Url">
            <summary>
            Ссылка на сайт товара.
            </summary>
            <remarks>
            Строка, минимальная длина 0, максимальная длина 320
            </remarks>
        </member>
        <member name="M:VkNet.Model.RequestParams.Market.MarketProductParams.ToVkParameters(VkNet.Model.RequestParams.Market.MarketProductParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.Market.MarketSearchParams">
            <summary>
            Параметры запроса market.search
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Market.MarketSearchParams.OwnerId">
            <summary>
            Идентификатор сообщества, которому принадлежат товары.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Market.MarketSearchParams.AlbumId">
            <summary>
            Идентификатор подборки, товары из которой нужно вернуть.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Market.MarketSearchParams.Query">
            <summary>
            Строка поискового запроса.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Market.MarketSearchParams.PriceFrom">
            <summary>
            Минимальное значение цены товаров.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Market.MarketSearchParams.PriceTo">
            <summary>
            Максимальное значение цены товаров.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Market.MarketSearchParams.Tags">
            <summary>
            Перечисленные через запятую идентификаторы меток.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Market.MarketSearchParams.Sort">
            <summary>
            Вид сортировки.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Market.MarketSearchParams.Rev">
            <summary>
            0 — не использовать обратный порядок, 1 — использовать обратный порядок.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Market.MarketSearchParams.Offset">
            <summary>
            Смещение относительно первого найденного товара для выборки определенного
            подмножества.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Market.MarketSearchParams.Count">
            <summary>
            Количество возвращаемых товаров.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Market.MarketSearchParams.Extended">
            <summary>
            1 — будут возвращены дополнительные поля likes, can_comment, can_repost,
            ''photos'''.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.Market.MarketSearchParams.ToVkParameters(VkNet.Model.RequestParams.Market.MarketSearchParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.GetConversationsParams">
            <summary>
            Параметры запроса messages.GetConversations
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GetConversationsParams.Filter">
            <summary>
            Фильтр
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GetConversationsParams.Fields">
            <summary>
            Список дополнительных полей для пользователей и сообществ.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GetConversationsParams.Offset">
            <summary>
            Смещение, необходимое для выборки определенного подмножества результатов.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GetConversationsParams.Count">
            <summary>
            Максимальное число результатов, которые нужно получить.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GetConversationsParams.Extended">
            <summary>
            1 — возвращать дополнительные поля для пользователей и сообществ.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GetConversationsParams.StartMessageId">
            <summary>
            Идентификатор сообщения, начиная с которого нужно возвращать беседы.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GetConversationsParams.GroupId">
            <summary>
            Идентификатор сообщества (для сообщений сообщества с ключом доступа пользователя).
            </summary>
        </member>
        <member name="T:VkNet.Model.RequestParams.GetImportantMessagesParams">
            <summary>
            Список параметров для метода Messages.GetImportantMessages
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GetImportantMessagesParams.Fields">
            <summary>
            Список дополнительных полей для пользователей и сообществ. список слов, разделенных через запятую
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GetImportantMessagesParams.Count">
            <summary>
            Максимальное число результатов, которые нужно получить. положительное число, по умолчанию 20, максимальное значение 200
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GetImportantMessagesParams.Offset">
            <summary>
            Смещение, необходимое для выборки определенного подмножества результатов. положительное число
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GetImportantMessagesParams.StartMessageId">
            <summary>
            Идентификатор сообщения, начиная с которого нужно возвращать список. положительное число
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GetImportantMessagesParams.PreviewLength">
            <summary>
            Положительное число
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GetImportantMessagesParams.Extended">
            <summary>
            1 — возвращать дополнительные поля для пользователей и сообществ. флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.GetImportantMessagesParams.GroupId">
            <summary>
            Идентификатор сообщества (для сообщений сообщества с ключом доступа пользователя). положительное число
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.GetImportantMessagesParams.ToVkParameters(VkNet.Model.RequestParams.GetImportantMessagesParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.MessageEditParams">
            <summary>
            Параметры запроса Messages.Edit
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessageEditParams.PeerId">
            <summary>
            Идентификатор назначения.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessageEditParams.Message">
            <summary>
            Текст сообщения. Обязательный параметр, если не задан параметр attachment.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessageEditParams.MessageId">
            <summary>
            Идентификатор сообщения.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessageEditParams.Latitude">
            <summary>
            Географическая широта (от -90 до 90).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessageEditParams.Longitude">
            <summary>
            Географическая долгота (от -180 до 180).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessageEditParams.Attachments">
            <summary>
            медиавложения к личному сообщению, перечисленные через запятую.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessageEditParams.KeepForwardMessages">
            <summary>
            1, чтобы сохранить прикреплённые пересланные сообщения
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessageEditParams.KeepSnippets">
            <summary>
            1, чтобы сохранить прикреплённые внешние ссылки (сниппеты).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessageEditParams.GroupId">
            <summary>
            Идентификатор сообщества (для сообщений сообщества с ключом доступа пользователя). положительное число
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessageEditParams.DontParseLinks">
            <summary>
            1 — не создавать сниппет ссылки из сообщения флаг, может принимать значения 1 или 0, по умолчанию
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.MessageEditParams.ToVkParameters(VkNet.Model.RequestParams.MessageEditParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.MessagesDialogsGetParams">
            <summary>
            Список параметров для метода Messages.GetDialogs
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesDialogsGetParams.Offset">
            <summary>
            Смещение, необходимое для выборки определенного подмножества диалогов.
            Если указан StartMessageId
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesDialogsGetParams.Count">
            <summary>
            Количество диалогов, которое необходимо получить (не более 200)
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesDialogsGetParams.StartMessageId">
            <summary>
            Идентификатор сообщения, начиная с которого нужно вернуть список диалогов
            (подробности см. ниже).
            Если был передан параметр <c> start_message_id </c>, будет найдена позиция
            диалога в списке,
            идентификатор последнего сообщения которого равен <c> start_message_id </c>
            (или ближайший к нему более ранний).
            Начиная с этой позиции будет возвращено <c> count </c> диалогов.
            Смещение <c> offset </c> в этом случае будет отсчитываться от этой позиции (оно
            может быть отрицательным).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesDialogsGetParams.PreviewLength">
            <summary>
            Количество символов, по которому нужно обрезать сообщение.
            Укажите 0, если Вы не хотите обрезать сообщение. (по умолчанию сообщения не
            обрезаются).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesDialogsGetParams.Unread">
            <summary>
            Значение <c> true </c> означает, что нужно вернуть только диалоги в которых
            есть непрочитанные входящие сообщения. По
            умолчанию false.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesDialogsGetParams.Important">
            <summary>
            1 — вернуть диалоги с пометкой «Важные» (для сообщений сообществ).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesDialogsGetParams.Unanswered">
            <summary>
            1 — вернуть диалоги с пометкой «Неотвеченные» (для сообщений сообществ).
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.MessagesDialogsGetParams.ToVkParameters(VkNet.Model.RequestParams.MessagesDialogsGetParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.MessagesGetHistoryAttachmentsParams">
            <summary>
            Параметры метода messages.getHistoryAttachments
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesGetHistoryAttachmentsParams.PeerId">
            <summary>
            Идентификатор назначения. Для групповой беседы:
            2000000000   id беседы.
            Для email:
            id беседы &lt; -2000000000
            Для сообщества:
            -id сообщества.
            целое число, обязательный параметр.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesGetHistoryAttachmentsParams.MediaType">
            <summary>
            Тип материалов, который необходимо вернуть.
            Доступные значения:
            photo — фотографии;
            video — видеозаписи;
            audio — аудиозаписи;
            doc — документы;
            link — ссылки;
            market — товары;
            wall — записи;
            share — ссылки, товары и записи.
            Обратите внимание — существует ограничение по дате отправки вложений. Так, для
            получения доступны вложения типов
            photo,video,audio,doc , отправленные не ранее 25.03.2013, link — не ранее
            20.05.13, market,wall — 01.02.2016.
            строка, по умолчанию photo.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesGetHistoryAttachmentsParams.StartFrom">
            <summary>
            Смещение, необходимое для выборки определенного подмножества объектов. строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesGetHistoryAttachmentsParams.Fields">
            <summary>
            Список слов, разделенных через запятую.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesGetHistoryAttachmentsParams.Count">
            <summary>
            Количество объектов, которое необходимо получить (но не более 200).
            положительное число, максимальное значение 200,
            по умолчанию 30.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesGetHistoryAttachmentsParams.PhotoSizes">
            <summary>
            Параметр, указывающий нужно ли возвращать ли доступные размеры фотографии в
            специальном формате. флаг, может
            принимать значения 1 или 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesGetHistoryAttachmentsParams.GroupId">
            <summary>
            Идентификатор сообщества (для сообщений сообщества с ключом доступа пользователя). положительное число
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.MessagesGetHistoryAttachmentsParams.ToVkParameters(VkNet.Model.RequestParams.MessagesGetHistoryAttachmentsParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> Объект типа MessagesGetHistoryAttachmentsParams </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.MessagesGetHistoryParams">
            <summary>
            Список параметров для метода Message.GetHistory
            http://vk.com/dev/messages.getHistory
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesGetHistoryParams.UserId">
            <summary>
            Идентификатор пользователя, историю переписки с которым необходимо вернуть.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesGetHistoryParams.Fields">
            <summary>
            Список дополнительных полей профилей и сообществ, которые необходимо вернуть.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesGetHistoryParams.Offset">
            <summary>
            Смещение, необходимое для выборки определенного подмножества сообщений,
            должен быть 0 или положительным, если не передан параметр start_message_id, и
            должен быть 0 или отрицательным, если
            передан.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesGetHistoryParams.Count">
            <summary>
            Количество сообщений, которое необходимо получить (но не более 200)
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesGetHistoryParams.PeerId">
            <summary>
            Идентификатор назначения.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesGetHistoryParams.StartMessageId">
            <summary>
            Если значение > 0, то это идентификатор сообщения, начиная с которого нужно
            вернуть историю переписки,
            если же передано значение -1, то к значению параметра offset прибавляется
            количество входящих непрочитанных сообщений в конце диалога
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesGetHistoryParams.Reversed">
            <summary>
            Возвращать сообщения в хронологическом порядке или обратном (по умолчанию в
            обратном). Недоступен при переданном start_message_id.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesGetHistoryParams.Extended">
            <summary>
            Если указать в качестве этого параметра <c>true</c>,
            то будет возвращена информация о пользователях и сообществах, являющихся авторами сообщений.
            <remarks>По умолчанию <c>false</c>.</remarks>
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesGetHistoryParams.GroupId">
            <summary>
            Идентификатор сообщества (для сообщений сообщества с ключом доступа пользователя).
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.MessagesGetHistoryParams.ToVkParameters(VkNet.Model.RequestParams.MessagesGetHistoryParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.MessagesGetLongPollHistoryParams">
            <summary>
            Параметры метода messages.getLongPollHistoryParams
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesGetLongPollHistoryParams.Fields">
            <summary>
            Список дополнительных полей профилей, которые необходимо вернуть.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesGetLongPollHistoryParams.Ts">
            <summary>
            Последнее значение параметра ts, полученное от Long Poll сервера или с помощью
            метода messages.getLongPollServer
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesGetLongPollHistoryParams.Pts">
            <summary>
            Последнее значение параметра new_pts, полученное от Long Poll сервера,
            используется для получения действий, которые
            хранятся всегда.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesGetLongPollHistoryParams.PreviewLength">
            <summary>
            Количество символов, по которому нужно обрезать сообщение. Укажите 0, если Вы
            не хотите обрезать сообщение. (по
            умолчанию сообщения не обрезаются).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesGetLongPollHistoryParams.Onlines">
            <summary>
            При передаче в этот параметра значения 1 будет возвращена история только от тех
            пользователей, которые сейчас
            online. флаг, может принимать значения 1 или 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesGetLongPollHistoryParams.EventsLimit">
            <summary>
            Если количество событий в истории превысит это значение, будет возвращена
            ошибка.
            Положительное число. По умолчанию - 1000. Минимальное значение - 1000
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesGetLongPollHistoryParams.MsgsLimit">
            <summary>
            Количество сообщений, которое нужно вернуть.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesGetLongPollHistoryParams.MaxMsgId">
            <summary>
            Максимальный идентификатор сообщения среди уже имеющихся в локальной копии.
            Необходимо учитывать как сообщения,
            полученные через методы API (например messages.getDialogs,
            messages.getHistory), так и данные, полученные из Long
            Poll сервера (события с кодом 4).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesGetLongPollHistoryParams.GroupId">
            <summary>
            Идентификатор сообщества (для сообщений сообщества с ключом доступа пользователя).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesGetLongPollHistoryParams.LpVersion">
            <summary>
            Версия Long Poll.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.MessagesGetLongPollHistoryParams.ToVkParameters(VkNet.Model.RequestParams.MessagesGetLongPollHistoryParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.MessagesGetParams">
            <summary>
            Список параметров для метода Messages.Get
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesGetParams.Count">
            <summary>
            Количество сообщений, которое необходимо получить.
            (по умолчанию 20, максимальное значение 200)
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesGetParams.Offset">
            <summary>
            Смещение, необходимое для выборки определенного подмножества сообщений
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesGetParams.TimeOffset">
            <summary>
            Максимальное время, прошедшее с момента отправки сообщения до текущего момента
            в секундах.
            0, если Вы хотите получить сообщения любой давности.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesGetParams.Filters">
            <summary>
            Фильтр возвращаемых сообщений.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesGetParams.PreviewLength">
            <summary>
            Количество символов, по которому нужно обрезать сообщение.
            Укажите 0, если Вы не хотите обрезать сообщение. (по умолчанию сообщения не
            обрезаются).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesGetParams.LastMessageId">
            <summary>
            Идентификатор сообщения, полученного перед тем, которое нужно вернуть последним
            (при условии, что после него было получено не более count сообщений, иначе
            необходимо использовать с параметром
            offset)
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.MessagesGetParams.ToVkParameters(VkNet.Model.RequestParams.MessagesGetParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.MessagesSearchParams">
            <summary>
            Параметры запроса messages.search
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesSearchParams.Query">
            <summary>
            Подстрока, по которой будет производиться поиск.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesSearchParams.Fields">
            <summary>
            Список дополнительных полей для пользователей и сообществ. список слов, разделенных через запятую
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesSearchParams.PeerId">
            <summary>
            Фильтр по идентификатору назначения для поиска по отдельному диалогу
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesSearchParams.Date">
            <summary>
            Дата в формате DDMMYYYY — если параметр задан, в ответе будут только сообщения,
            отправленные до указанной даты.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesSearchParams.PreviewLength">
            <summary>
            Количество символов, по которому нужно обрезать сообщение.
            Укажите 0, если Вы не хотите обрезать сообщение. (по умолчанию сообщения не
            обрезаются).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesSearchParams.Offset">
            <summary>
            Смещение, необходимое для выборки определенного подмножества сообщений из
            списка найденных.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesSearchParams.Count">
            <summary>
            Количество сообщений, которое необходимо получить.
            </summary>
            <remarks>
            По умолчанию 20.
            </remarks>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesSearchParams.Extended">
            <summary>
            1 — возвращать дополнительные поля для пользователей и сообществ. В ответе будет содержаться массив объектов бесед. флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesSearchParams.GroupId">
            <summary>
            Идентификатор сообщества (для сообщений сообщества с ключом доступа пользователя). положительное число
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.MessagesSearchParams.ToVkParameters(VkNet.Model.RequestParams.MessagesSearchParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.MessagesSendParams">
            <summary>
            Параметры метода messages.send
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesSendParams.Domain">
            <summary>
            Короткий адрес пользователя (например, illarionov).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesSendParams.Message">
            <summary>
            Текст личного сообщения (является обязательным, если не задан параметр
            attachment)
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesSendParams.Attachments">
            <summary>
            Медиавложения к личному сообщению, перечисленные через запятую.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesSendParams.ForwardMessages">
            <summary>
            Идентификаторы пересылаемых сообщений, перечисленные через запятую.
            Перечисленные сообщения отправителя будут
            отображаться в теле письма у получателя.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesSendParams.Keyboard">
            <summary>
            Объект, описывающий клавиатуру для бота.
            </summary>
            <remarks>
            Рекомендуется для построения использовать <see cref="T:VkNet.Model.Keyboard.IKeyboardBuilder"/>
            </remarks>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesSendParams.UserId">
            <summary>
            Идентификатор пользователя, которому отправляется сообщение.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesSendParams.RandomId">
            <summary>
            Уникальный идентификатор, предназначенный для предотвращения повторной отправки
            одинакового сообщения.
            Сохраняется вместе с сообщением и доступен в истории сообщений.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesSendParams.PeerId">
            <summary>
            Идентификатор назначения. Для групповой беседы: 2000000000 + id беседы. Для
            сообщества: -id сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesSendParams.ChatId">
            <summary>
            Идентификатор беседы, к которой будет относиться сообщение.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesSendParams.UserIds">
            <summary>
            Идентификаторы получателей сообщения (при необходимости отправить сообщение
            сразу нескольким пользователям).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesSendParams.Lat">
            <summary>
            Latitude - широта при добавлении местоположения.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesSendParams.Longitude">
            <summary>
            Longitude - долгота при добавлении местоположения.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesSendParams.StickerId">
            <summary>
            Идентификатор стикера.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesSendParams.GroupId">
            <summary>
            Идентификатор сообщества (для сообщений сообщества с ключом доступа пользователя). положительное число
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesSendParams.Payload">
            <summary>
            Полезная нагрузка (максимальная длина 1000)
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesSendParams.DontParseLinks">
            <summary>
            1 — не создавать сниппет ссылки из сообщения флаг, может принимать значения 1 или 0, по умолчанию
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesSendParams.CaptchaSid">
            <summary>
            Идентификатор капчи
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesSendParams.CaptchaKey">
            <summary>
            текст, который ввел пользователь
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesSendParams.DisableMentions">
            <summary>
            1 - отключить уведомление об упоминании в сообщении, может принимать значения 1 или 0, по умолчанию
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesSendParams.Intent">
            <summary>
            Метка, которая обозначает приблизительное содержание сообщения от сообщества
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.MessagesSendParams.ToVkParameters(VkNet.Model.RequestParams.MessagesSendParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.MessagesSendStickerParams">
            <summary>
            Параметры метода messages.sendSticker
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesSendStickerParams.UserId">
            <summary>
            Идентификатор пользователя. целое число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesSendStickerParams.Domain">
            <summary>
            Короткий адрес пользователя (например, illarionov). строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesSendStickerParams.PeerId">
            <summary>
            Идентификатор назначения. целое число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesSendStickerParams.ChatId">
            <summary>
            Идентификатор беседы, в которую отправляется стикер. положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesSendStickerParams.RandomId">
            <summary>
            Уникальный идентификатор, предназначенный для предотвращения повторной отправки
            одинакового сообщения. Сохраняется
            вместе с сообщением и доступен в истории сообщений. целое число, доступен
            начиная с версии 5.45.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.MessagesSendStickerParams.StickerId">
            <summary>
            Идентификатор стикера. положительное число, обязательный параметр.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.MessagesSendStickerParams.ToVkParameters(VkNet.Model.RequestParams.MessagesSendStickerParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> Объект типа MessagesSendStickerParams </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.NewsFeedGetCommentsParams">
            <summary>
            Список параметров запроса newsfeed.get
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.NewsFeedGetCommentsParams.Filters">
            <summary>
            Названия списков новостей, которые необходимо
            получить.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.NewsFeedGetCommentsParams.Reposts">
            <summary>
            Идентификатор объекта, комментарии к репостам которого необходимо вернуть,
            например wall1_45486.
            </summary>
            <remarks>
            Если указан данный параметр, параметр filters указывать необязательно.
            </remarks>
        </member>
        <member name="P:VkNet.Model.RequestParams.NewsFeedGetCommentsParams.StartTime">
            <summary>
            Время в формате unixtime, начиная с которого следует получить новости для
            текущего пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.NewsFeedGetCommentsParams.EndTime">
            <summary>
            Время в формате unixtime, до которого следует получить новости для текущего
            пользователя. Если параметр не задан,
            то он считается равным текущему времени.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.NewsFeedGetCommentsParams.LastCommentsCount">
            <summary>
            Количество комментариев к записям, которые нужно получить.
            По умолчанию 0. Максимальное значение 10.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.NewsFeedGetCommentsParams.StartFrom">
            <summary>
            Идентификатор, необходимый для получения следующей страницы результатов.
            Значение, необходимое для передачи в этом
            параметре, возвращается в поле ответа next_from.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.NewsFeedGetCommentsParams.Count">
            <summary>
            указывает, какое максимальное число новостей следует возвращать,
            но не более 100. По умолчанию 30.
            Для автоподгрузки Вы можете использовать возвращаемый данным методом параметр new_offset.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.NewsFeedGetCommentsParams.Fields">
            <summary>
            Список дополнительных полей профилей и сообществ, которые необходимо вернуть.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.NewsFeedGetCommentsParams.ToVkParameters(VkNet.Model.RequestParams.NewsFeedGetCommentsParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.NewsFeedGetParams">
            <summary>
            Список параметров запроса newsfeed.get
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.NewsFeedGetParams.Filters">
            <summary>
            Названия списков новостей, которые необходимо
            получить.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.NewsFeedGetParams.ReturnBanned">
            <summary>
            <c> true </c> - включить в выдачу также скрытых из новостей пользователей.
            <c> false </c> - не возвращать скрытых
            пользователей.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.NewsFeedGetParams.StartTime">
            <summary>
            Время в формате unixtime, начиная с которого следует получить новости для
            текущего пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.NewsFeedGetParams.EndTime">
            <summary>
            Время в формате unixtime, до которого следует получить новости для текущего
            пользователя. Если параметр не задан,
            то он считается равным текущему времени.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.NewsFeedGetParams.MaxPhotos">
            <summary>
            Максимальное количество фотографий, информацию о которых необходимо вернуть. По
            умолчанию 5.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.NewsFeedGetParams.SourceIds">
            <summary>
            Перечисленные через запятую иcточники новостей, новости от которых необходимо
            получить. Идентификаторы
            пользователей можно указывать в форматах {uid} или u{uid} где {uid} —
            идентификатор друга пользователя.
            Идентификаторы сообществ можно указывать в форматах -{gid} или g{gid} где
            {gid} — идентификатор сообщества.
            Помимо этого параметр может принимать строковые значения: friends - список
            друзей пользователя groups - список
            групп, на которые подписан текущий пользователь pages - список публичных
            страниц, на который подписан тeкущий
            пользователь following - список пользователей, на которых подписан текущий
            пользователь list{идентификатор списка
            новостей} - список новостей. Вы можете найти все списки новостей пользователя
            используя метод newsfeed.getLists
            Если параметр не задан, то считается, что он включает список всех друзей и
            групп пользователя, за исключением
            скрытых источников, которые можно получить методом newsfeed.getBanned.  строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.NewsFeedGetParams.StartFrom">
            <summary>
            Идентификатор, необходимый для получения следующей страницы результатов.
            Значение, необходимое для передачи в этом
            параметре, возвращается в поле ответа next_from.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.NewsFeedGetParams.Count">
            <summary>
            Указывает, какое максимальное число новостей следует возвращать, но не более
            100. По умолчанию 50.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.NewsFeedGetParams.Fields">
            <summary>
            Список дополнительных полей профилей и сообществ, которые необходимо вернуть.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.NewsFeedGetParams.ToVkParameters(VkNet.Model.RequestParams.NewsFeedGetParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.NewsFeedGetRecommendedParams">
            <summary>
            Список параметров запроса newsfeed.getRecommended
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.NewsFeedGetRecommendedParams.StartTime">
            <summary>
            Время в формате unixtime, начиная с которого следует получить новости для
            текущего пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.NewsFeedGetRecommendedParams.EndTime">
            <summary>
            Время в формате unixtime, до которого следует получить новости для текущего
            пользователя. Если параметр не задан,
            то он считается равным текущему времени.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.NewsFeedGetRecommendedParams.MaxPhotos">
            <summary>
            Максимальное количество фотографий, информацию о которых необходимо вернуть. По
            умолчанию 5.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.NewsFeedGetRecommendedParams.StartFrom">
            <summary>
            Идентификатор, необходимый для получения следующей страницы результатов.
            Значение, необходимое для передачи в этом
            параметре, возвращается в поле ответа next_from.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.NewsFeedGetRecommendedParams.Count">
            <summary>
            Указывает, какое максимальное число новостей следует возвращать, но не более
            100. По умолчанию 50.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.NewsFeedGetRecommendedParams.Fields">
            <summary>
            Список дополнительных полей профилей и сообществ, которые необходимо вернуть.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.NewsFeedGetRecommendedParams.ToVkParameters(VkNet.Model.RequestParams.NewsFeedGetRecommendedParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.NewsFeedSearchParams">
            <summary>
            Список параметров запроса newsfeed.search
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.NewsFeedSearchParams.Query">
            <summary>
            Поисковой запрос.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.NewsFeedSearchParams.Extended">
            <summary>
            Указывается 1, если необходимо получить информацию о пользователе или группе,
            разместившей запись.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.NewsFeedSearchParams.Count">
            <summary>
            Указывает, какое максимальное число записей следует возвращать.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.NewsFeedSearchParams.Latitude">
            <summary>
            Географическая широта точки, в радиусе от которой необходимо производить поиск,
            заданная в градусах (от -90 до 90).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.NewsFeedSearchParams.Longitude">
            <summary>
            Географическая долгота точки, в радиусе от которой необходимо производить
            поиск, заданная в градусах (от -180 до
            180).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.NewsFeedSearchParams.StartTime">
            <summary>
            Время в формате unixtime, начиная с которого следует получить новости для
            текущего пользователя. Если параметр не
            задан, то он считается равным значению времени, которое было сутки назад.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.NewsFeedSearchParams.EndTime">
            <summary>
            Время в формате unixtime, до которого следует получить новости для текущего
            пользователя. Если параметр не задан,
            то он считается равным текущему времени.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.NewsFeedSearchParams.StartFrom">
            <summary>
            Идентификатор, необходимый для получения следующей страницы результатов.
            Значение, необходимое для передачи в этом
            параметре, возвращается в поле ответа next_from.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.NewsFeedSearchParams.Fields">
            <summary>
            Список дополнительных полей профилей, которые необходимо вернуть. Игнорируется
            при отсутствии параметра extended=1.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.NewsFeedSearchParams.ToVkParameters(VkNet.Model.RequestParams.NewsFeedSearchParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.Notes.NotesAddParams">
            <summary>
            Notes Add Params
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Notes.NotesAddParams.Title">
            <summary>
            Заголовок заметки. 
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Notes.NotesAddParams.Text">
            <summary>
            Текст заметки. 
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Notes.NotesAddParams.PrivacyView">
            <summary>
            Настройки приватности просмотра заметки в специальном формате.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Notes.NotesAddParams.PrivacyComment">
            <summary>
            Настройки приватности комментирования заметки в специальном формате.
            </summary>
        </member>
        <member name="T:VkNet.Model.RequestParams.Notes.NotesCreateCommentParams">
            <summary>
            Notes Create Comment Params
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Notes.NotesCreateCommentParams.NoteId">
            <summary>
            Идентификатор заметки. 
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Notes.NotesCreateCommentParams.OwnerId">
            <summary>
            Идентификатор владельца заметки.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Notes.NotesCreateCommentParams.ReplyTo">
             <summary>
             Идентификатор пользователя, ответом на комментарий которого является
            добавляемый комментарий (не передаётся, если
            комментарий не является ответом). 
             </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Notes.NotesCreateCommentParams.Message">
            <summary>
            Текст комментария. 
            </summary>
        </member>
        <member name="T:VkNet.Model.RequestParams.Notes.NotesDeleteCommentParams">
            <summary>
            Notes Delete Comment Params
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Notes.NotesDeleteCommentParams.CommentId">
            <summary>
            Идентификатор комментария. 
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Notes.NotesDeleteCommentParams.OwnerId">
            <summary>
            Идентификатор владельца заметки.  
            </summary>
        </member>
        <member name="T:VkNet.Model.RequestParams.Notes.NotesEditCommentParams">
            <summary>
            Notes Edit Comment Params
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Notes.NotesEditCommentParams.CommentId">
             <summary>
             Идентификатор комментария. 
            положительное число, (обязательный параметр)
             </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Notes.NotesEditCommentParams.OwnerId">
             <summary>
            Идентификатор владельца заметки.
            положительное число, по умолчанию идентификатор текущего пользователя
             </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Notes.NotesEditCommentParams.Message">
            <summary>
            Новый текст комментария. 
            </summary>
        </member>
        <member name="T:VkNet.Model.RequestParams.Notes.NotesEditParams">
            <summary>
            Notes Edit Params
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Notes.NotesEditParams.NoteId">
            <summary>
            Идентификатор заметки.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Notes.NotesEditParams.Title">
            <summary>
            Заголовок заметки. 
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Notes.NotesEditParams.Text">
            <summary>
            Текст заметки. 
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Notes.NotesEditParams.PrivacyView">
            <summary>
            Настройки приватности просмотра заметки в специальном формате.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Notes.NotesEditParams.PrivacyComment">
            <summary>
            Настройки приватности комментирования заметки в специальном формате.
            </summary>
        </member>
        <member name="T:VkNet.Model.RequestParams.Notes.NotesGetByIdParams">
            <summary>
            Notes Get By Id Params
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Notes.NotesGetByIdParams.NoteId">
            <summary>
            идентификатор заметки (обязательный параметр).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Notes.NotesGetByIdParams.OwnerId">
            <summary>
            идентификатор владельца заметки (по умолчанию идентификатор текущего пользователя).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Notes.NotesGetByIdParams.IsNeedWiki">
             <summary>
             определяет, требуется ли в ответе wiki-представление заметки
            (работает, только если запрашиваются заметки текущего пользователя). 
             </summary>
        </member>
        <member name="T:VkNet.Model.RequestParams.Notes.NotesGetCommentParams">
            <summary>
            Notes Get Comments Params
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Notes.NotesGetCommentParams.NoteId">
            <summary>
            идентификатор заметки (обязательный параметр). 
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Notes.NotesGetCommentParams.OwnerId">
            <summary>
            идентификатор владельца заметки. 
            по умолчанию идентификатор текущего пользователя
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Notes.NotesGetCommentParams.Sort">
             <summary>
             сортировка результатов (0 — по дате создания в порядке убывания,
            1 - по дате создания в порядке возрастания). 
             </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Notes.NotesGetCommentParams.Offset">
            <summary>
            Cмещение, необходимое для выборки определенного подмножества комментариев,
            по умолчанию 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Notes.NotesGetCommentParams.Count">
            <summary>
            количество комментариев, которое необходимо получить. 
            положительное число, по умолчанию 20, максимальное значение 100
            </summary>
        </member>
        <member name="T:VkNet.Model.RequestParams.Notes.NotesGetParams">
            <summary>
            Notes Get Params
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Notes.NotesGetParams.NoteIds">
            <summary>
            Идентификаторы заметок, информацию о которых необходимо получить. 
            список положительных чисел, разделенных запятыми
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Notes.NotesGetParams.UserId">
            <summary>
            Идентификатор пользователя, информацию о заметках которого требуется получить.
            по умолчанию идентификатор текущего пользователя
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Notes.NotesGetParams.Offset">
            <summary>
            Cмещение, необходимое для выборки определенного подмножества заметок,
            по умолчанию 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Notes.NotesGetParams.Count">
            <summary>
            количество заметок, информацию о которых необходимо получить. 
            положительное число, по умолчанию 20, максимальное значение 100
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Notes.NotesGetParams.Sort">
             <summary>
             сортировка результатов (0 — по дате создания в порядке убывания,
            1 - по дате создания в порядке возрастания). 
             </summary>
        </member>
        <member name="T:VkNet.Model.RequestParams.Notes.NotesRestoreCommentParams">
            <summary>
            Notes Restore Comment Params
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Notes.NotesRestoreCommentParams.CommentId">
            <summary>
            идентификатор удаленного комментария
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Notes.NotesRestoreCommentParams.OwnerId">
            <summary>
            идентификатор владельца заметки. 
            </summary>
        </member>
        <member name="T:VkNet.Model.RequestParams.PagesGetParams">
            <summary>
            Параметры метода pages.get
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PagesGetParams.OwnerId">
            <summary>
            Идентификатор владельца вики-страницы. целое число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PagesGetParams.PageId">
            <summary>
            Идентификатор вики-страницы. целое число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PagesGetParams.Global">
            <summary>
            1 — требуется получить информацию о глобальной вики-странице. флаг, может
            принимать значения 1 или 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PagesGetParams.SitePreview">
            <summary>
            1 — получаемая wiki страница является предпросмотром для прикрепленной ссылки.
            флаг, может принимать значения 1 или
            0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PagesGetParams.Title">
            <summary>
            Название страницы. строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PagesGetParams.NeedSource">
            <summary>
            1 —  требуется вернуть содержимое страницы в вики-формате. флаг, может
            принимать значения 1 или 0, доступен начиная
            с версии 5.20.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PagesGetParams.NeedHtml">
            <summary>
            1 —  требуется вернуть html-представление страницы. флаг, может принимать
            значения 1 или 0.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.PagesGetParams.ToVkParameters(VkNet.Model.RequestParams.PagesGetParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> Объект типа PagesGetParams </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.PhotoCreateAlbumParams">
            <summary>
            Список параметров для метода photos.createAlbum
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoCreateAlbumParams.Title">
            <summary>
            Название альбома.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoCreateAlbumParams.GroupId">
            <summary>
            Идентификатор сообщества, в котором создаётся альбом.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoCreateAlbumParams.Description">
            <summary>
            Текст описания альбома.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoCreateAlbumParams.PrivacyView">
            <summary>
            Настройки приватности просмотра альбома в специальном формате.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoCreateAlbumParams.PrivacyComment">
            <summary>
            Настройки приватности комментирования альбома в специальном формате.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoCreateAlbumParams.UploadByAdminsOnly">
            <summary>
            Кто может загружать фотографии в альбом (только для альбома сообщества).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoCreateAlbumParams.CommentsDisabled">
            <summary>
            Отключено ли комментирование альбома (только для альбома сообщества).
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.PhotoCreateAlbumParams.ToVkParameters(VkNet.Model.RequestParams.PhotoCreateAlbumParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.PhotoCreateCommentParams">
            <summary>
            Список параметров для метода photos.createComment
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoCreateCommentParams.OwnerId">
            <summary>
            Идентификатор пользователя или сообщества, которому принадлежит фотография.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoCreateCommentParams.PhotoId">
            <summary>
            Идентификатор фотографии.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoCreateCommentParams.Message">
            <summary>
            Текст комментария (является обязательным, если не задан параметр
            <c> Attachments </c>). Максимальное количество
            символов: 2048.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoCreateCommentParams.Attachments">
            <summary>
            Список объектов, приложенных к комментарию и разделённых символом ",". Параметр
            является обязательным, если не
            задан параметр message.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoCreateCommentParams.FromGroup">
            <summary>
            Данный параметр учитывается, если oid меньше 0 (комментарий к фотографии
            группы). <c> true </c> — комментарий будет
            опубликован от имени группы, <c> false </c> — комментарий будет опубликован от
            имени пользователя (по умолчанию).
            флаг, может принимать значения 1 или 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoCreateCommentParams.ReplyToComment">
            <summary>
            Идентификатор комментария, в ответ на который нужно оставить текущий.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoCreateCommentParams.StickerId">
            <summary>
            Идентификатор стикера, который нужно прикрепить к комментарию.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoCreateCommentParams.AccessKey">
            <summary>
            Ключ доступа.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoCreateCommentParams.Guid">
            <summary>
            Положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoCreateCommentParams.CaptchaSid">
            <summary>
            Идентификатор капчи
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoCreateCommentParams.CaptchaKey">
            <summary>
            текст, который ввел пользователь
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.PhotoCreateCommentParams.ToVkParameters(VkNet.Model.RequestParams.PhotoCreateCommentParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.PhotoEditAlbumParams">
            <summary>
            Список параметров для метода photos.editAlbum
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoEditAlbumParams.AlbumId">
            <summary>
            Идентификатор альбома.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoEditAlbumParams.Title">
            <summary>
            Новое название альбома.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoEditAlbumParams.Description">
            <summary>
            Новый текст описания альбома.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoEditAlbumParams.OwnerId">
            <summary>
            Идентификатор владельца альбома (пользователь или сообщество).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoEditAlbumParams.PrivacyView">
            <summary>
            Настройки приватности просмотра альбома в специальном формате.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoEditAlbumParams.PrivacyComment">
            <summary>
            Настройки приватности комментирования альбома в специальном формате.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoEditAlbumParams.UploadByAdminsOnly">
            <summary>
            Кто может загружать фотографии в альбом (только для альбома сообщества).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoEditAlbumParams.CommentsDisabled">
            <summary>
            Отключено ли комментирование альбома (только для альбома сообщества).
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.PhotoEditAlbumParams.ToVkParameters(VkNet.Model.RequestParams.PhotoEditAlbumParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.PhotoEditParams">
            <summary>
            Список параметров для метода photos.edit
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoEditParams.OwnerId">
            <summary>
            Идентификатор пользователя или сообщества, которому принадлежит фотография.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoEditParams.PhotoId">
            <summary>
            Идентификатор фотографии.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoEditParams.Caption">
            <summary>
            Новый текст описания к фотографии. Если параметр не задан, то считается, что он
            равен пустой строке.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoEditParams.Latitude">
            <summary>
            Широта.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoEditParams.Longitude">
            <summary>
            Долгота.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoEditParams.PlaceStr">
            <summary>
            Место.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoEditParams.FoursquareId">
            <summary>
            Идентификатор квадрата.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoEditParams.DeletePlace">
            <summary>
            Место удалено.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoEditParams.CaptchaSid">
            <summary>
            Идентификатор капчи
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoEditParams.CaptchaKey">
            <summary>
            текст, который ввел пользователь
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.PhotoEditParams.ToVkParameters(VkNet.Model.RequestParams.PhotoEditParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.PhotoGetAlbumsParams">
            <summary>
            Список параметров для метода photos.getAlbums
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetAlbumsParams.OwnerId">
            <summary>
            Идентификатор пользователя или сообщества, которому принадлежат альбомы.
            Обратите внимание, идентификатор
            сообщества в параметре owner_id необходимо указывать со знаком "-" — например,
            owner_id=-1 соответствует
            идентификатору сообщества ВКонтакте API (club1).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetAlbumsParams.AlbumIds">
            <summary>
            Перечисленные через запятую ID альбомов.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetAlbumsParams.Offset">
            <summary>
            Cмещение, необходимое для выборки определенного подмножества альбомов.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetAlbumsParams.Count">
            <summary>
            Количество альбомов, которое нужно вернуть.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetAlbumsParams.NeedSystem">
            <summary>
            <c> true </c> – будут возвращены системные альбомы, имеющие отрицательные
            идентификаторы.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetAlbumsParams.NeedCovers">
            <summary>
            <c> true </c> — будет возвращено дополнительное поле thumb_src. По умолчанию
            поле thumb_src не возвращается.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetAlbumsParams.PhotoSizes">
            <summary>
            <c> true </c> — будут возвращены размеры фотографий в специальном формате.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.PhotoGetAlbumsParams.ToVkParameters(VkNet.Model.RequestParams.PhotoGetAlbumsParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.PhotoGetAllCommentsParams">
            <summary>
            Список параметров для метода photos.getAllComments
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetAllCommentsParams.OwnerId">
            <summary>
            Идентификатор пользователя или сообщества, которому принадлежат фотографии.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetAllCommentsParams.AlbumId">
            <summary>
            Идентификатор альбома. Если параметр не задан, то считается, что необходимо
            получить комментарии ко всем альбомам
            пользователя или сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetAllCommentsParams.NeedLikes">
            <summary>
            <c> true </c> — будет возвращено дополнительное поле likes. По умолчанию поле
            likes не возвращается.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetAllCommentsParams.Offset">
            <summary>
            Смещение, необходимое для выборки определенного подмножества комментариев. Если
            параметр не задан, то считается,
            что он равен 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetAllCommentsParams.Count">
            <summary>
            Количество комментариев, которое необходимо получить. Если параметр не задан,
            то считается что он равен 20.
            Максимальное значение параметра 100. Обратите внимание, даже при использовании
            параметра offset для получения
            доступны только первые 10000 комментариев.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.PhotoGetAllCommentsParams.ToVkParameters(VkNet.Model.RequestParams.PhotoGetAllCommentsParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.PhotoGetAllParams">
            <summary>
            Список параметров для метода photos.getAll
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetAllParams.OwnerId">
            <summary>
            Идентификатор пользователя или сообщества, фотографии которого нужно получить.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetAllParams.Extended">
            <summary>
            <c> true </c> — возвращать расширенную информацию о фотографиях.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetAllParams.Offset">
            <summary>
            Смещение, необходимое для выборки определенного подмножества фотографий. По
            умолчанию — <c> false </c>.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetAllParams.Count">
            <summary>
            Число фотографий, информацию о которых необходимо получить.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetAllParams.PhotoSizes">
            <summary>
            <c> true </c> — будут возвращены размеры фотографий в специальном формате.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetAllParams.NoServiceAlbums">
            <summary>
            <c> false </c> — вернуть все фотографии, включая находящиеся в сервисных
            альбомах, таких как "Фотографии на моей
            стене" (по умолчанию).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetAllParams.NeedHidden">
            <summary>
            <c> true </c> — возвращает информацию от том, скрыта ли фотография из блока над
            стеной пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetAllParams.SkipHidden">
            <summary>
            <c> true </c> — не возвращать фотографии, скрытые из блока над стеной
            пользователя (параметр учитывается только при
            owner_id > <c> false </c>, параметр no_service_albums игнорируется).
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.PhotoGetAllParams.ToVkParameters(VkNet.Model.RequestParams.PhotoGetAllParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.PhotoGetCommentsParams">
            <summary>
            Список параметров для метода photos.getComments
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetCommentsParams.OwnerId">
            <summary>
            Идентификатор пользователя или сообщества, которому принадлежит фотография.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetCommentsParams.PhotoId">
            <summary>
            Идентификатор фотографии.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetCommentsParams.NeedLikes">
            <summary>
            <c> true </c> — будет возвращено дополнительное поле likes. По умолчанию поле
            likes не возвращается.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetCommentsParams.StartCommentId">
            <summary>
            Идентификатор комментария, начиная с которого нужно вернуть список (подробности
            см. ниже).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetCommentsParams.Offset">
            <summary>
            Смещение, необходимое для выборки определенного подмножества комментариев. По
            умолчанию — 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetCommentsParams.Count">
            <summary>
            Количество комментариев, которое необходимо получить.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetCommentsParams.Sort">
            <summary>
            Порядок сортировки комментариев (asc — от старых к новым, desc - от новых к
            старым) строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetCommentsParams.AccessKey">
            <summary>
            Ключ доступа к фотографии.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetCommentsParams.Extended">
            <summary>
            <c> true </c> — комментарии в ответе будут возвращены в виде пронумерованных
            объектов, дополнительно будут возвращены
            списки объектов profiles, groups.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetCommentsParams.Fields">
            <summary>
            Список строк, разделенных через запятую.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.PhotoGetCommentsParams.ToVkParameters(VkNet.Model.RequestParams.PhotoGetCommentsParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.PhotoGetParams">
            <summary>
            Список параметров для метода photos.get
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetParams.OwnerId">
            <summary>
            Идентификатор владельца альбома.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetParams.AlbumId">
            <summary>
            Идентификатор альбома. Для служебных альбомов используются следующие
            идентификаторы: строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetParams.PhotoIds">
            <summary>
            Идентификаторы фотографий, информацию о которых необходимо вернуть.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetParams.Reversed">
            <summary>
            Порядок сортировки фотографий (<c> true </c> — антихронологический,
            <c> false </c> — хронологический).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetParams.Extended">
            <summary>
            <c> true </c> — будут возвращены дополнительные поля likes, comments, tags,
            can_comment. Поля comments и tags
            содержат только количество объектов. По умолчанию данные поля не возвращается.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetParams.FeedType">
            <summary>
            Тип новости получаемый в поле type метода newsfeed.get, для получения только
            загруженных пользователем фотографий,
            либо только фотографий, на которых он был отмечен. Может принимать значения
            photo, photo_tag.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetParams.Feed">
            <summary>
            Unixtime, который может быть получен методом newsfeed.get в поле date, для
            получения всех фотографий загруженных
            пользователем в определённый день либо на которых пользователь был отмечен.
            Также нужно указать параметр uid
            пользователя, с которым произошло событие. (не более месяца с текущей даты).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetParams.PhotoSizes">
            <summary>
            Параметр, указывающий нужно ли возвращать ли доступные размеры фотографии в
            специальном формате.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetParams.Offset">
            <summary>
            Отступ, необходимый для получения определенного подмножества записей.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetParams.Count">
            <summary>
            Количество записей, которое будет получено.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.PhotoGetParams.ToVkParameters(VkNet.Model.RequestParams.PhotoGetParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.PhotoGetUserPhotosParams">
            <summary>
            Список параметров для метода photos.getUserPhotos
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetUserPhotosParams.UserId">
            <summary>
            Идентификатор пользователя, список фотографий для которого нужно получить.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetUserPhotosParams.Offset">
            <summary>
            Смещение, необходимое для выборки определенного подмножества фотографий.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetUserPhotosParams.Count">
            <summary>
            Количество фотографий, которое необходимо получить.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetUserPhotosParams.Extended">
            <summary>
            <c> true </c> — будут возвращены дополнительные поля likes, comments, tags,
            can_comment. Поля comments и tags
            содержат только количество объектов. По умолчанию данные поля не возвращается.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoGetUserPhotosParams.Sort">
            <summary>
            Сортировка результатов (0 — по дате добавления отметки в порядке убывания, 1 —
            по дате добавления отметки в порядке
            возрастания).
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.PhotoGetUserPhotosParams.ToVkParameters(VkNet.Model.RequestParams.PhotoGetUserPhotosParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.PhotoPutTagParams">
            <summary>
            Список параметров для метода photos.putTag
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoPutTagParams.OwnerId">
            <summary>
            Идентификатор пользователя, которому принадлежит фотография.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoPutTagParams.PhotoId">
            <summary>
            Идентификатор фотографии.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoPutTagParams.UserId">
            <summary>
            Идентификатор пользователя, которого нужно отметить на фотографии.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoPutTagParams.X">
            <summary>
            Координата верхнего левого угла области с отметкой в % от ширины фотографии.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoPutTagParams.Y">
            <summary>
            Координата верхнего левого угла области с отметкой в % от высоты фотографии.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoPutTagParams.X2">
            <summary>
            Координата правого нижнего угла области с отметкой в % от ширины фотографии.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoPutTagParams.Y2">
            <summary>
            Координата правого нижнего угла области с отметкой в % от высоты фотографии.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.PhotoPutTagParams.ToVkParameters(VkNet.Model.RequestParams.PhotoPutTagParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.PhotoSaveParams">
            <summary>
            Список параметров для метода photos.save
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoSaveParams.AlbumId">
            <summary>
            Идентификатор альбома, в который необходимо сохранить фотографии.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoSaveParams.GroupId">
            <summary>
            Идентификатор сообщества, в которое необходимо сохранить фотографии.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoSaveParams.SaveFileResponse">
            <summary>
            Параметр, возвращаемый в результате загрузки фотографий на сервер.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoSaveParams.Latitude">
            <summary>
            Географическая широта, заданная в градусах (от -90 до 90);
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoSaveParams.Longitude">
            <summary>
            Географическая долгота, заданная в градусах (от -180 до 180);
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoSaveParams.Caption">
            <summary>
            Текст описания фотографии.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.PhotoSaveParams.ToVkParameters(VkNet.Model.RequestParams.PhotoSaveParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.PhotoSearchParams">
            <summary>
            Список параметров для метода photos.search
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoSearchParams.Query">
            <summary>
            Строка поискового запроса, например, "Nature".
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoSearchParams.Latitude">
            <summary>
            Географическая широта отметки, заданная в градусах (от -90 до 90).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoSearchParams.Longitude">
            <summary>
            Географическая долгота отметки, заданная в градусах (от -180 до 180).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoSearchParams.StartTime">
            <summary>
            Время в формате unixtime, не раньше которого должны были быть загружены
            найденные фотографии.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoSearchParams.EndTime">
            <summary>
            Время в формате unixtime, не позже которого должны были быть загружены
            найденные фотографии.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoSearchParams.Sort">
            <summary>
            <c> true </c> – сортировать по количеству отметок «Мне нравится»,
            <c> false </c> – сортировать по дате добавления
            фотографии.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoSearchParams.Offset">
            <summary>
            Смещение относительно первой найденной фотографии для выборки определенного
            подмножества.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoSearchParams.Count">
            <summary>
            Количество возвращаемых фотографий. Положительное число, по умолчанию 100,
            максимальное значение 1000.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PhotoSearchParams.Radius">
            <summary>
            Радиус поиска в метрах. (Работает очень приближенно, поэтому реальное
            расстояние до цели может отличаться от
            заданного). Может принимать значения: 10, 100, 800, 6000, 50000 положительное
            число, по умолчанию 5000.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.PhotoSearchParams.ToVkParameters(VkNet.Model.RequestParams.PhotoSearchParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.PlacesAddParams">
            <summary>
            Places Add Params
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PlacesAddParams.Title">
            <summary>
            Название нового места
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PlacesAddParams.Latitude">
            <summary>
            Географическая широта нового места, заданная в градусах (от -90 до 90)
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PlacesAddParams.Longitude">
            <summary>
            Географическая долгота нового места, заданная в градусах (от -180 до 180)
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PlacesAddParams.Address">
            <summary>
            Строка с адресом нового места (например, Невский просп. 1)
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PlacesAddParams.Type">
            <summary>
            Идентификатор типа нового места, полученный методом places.getTypes
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PlacesAddParams.Country">
            <summary>
            Идентификатор страны нового места, полученный методом places.getCountries
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PlacesAddParams.City">
            <summary>
            Идентификатор города нового места, полученный методом places.getCities
            </summary>
        </member>
        <member name="T:VkNet.Model.RequestParams.PlacesCheckinParams">
            <summary>
            Параметры запроса places.checkin
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PlacesCheckinParams.Text">
            <summary>
            Комментарий к отметке длиной до 255 символов (переводы строк не
            поддерживаются).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PlacesCheckinParams.Services">
            <summary>
            Список сервисов или сайтов, на которые необходимо экспортировать отметку, в
            случае если пользователь настроил
            соответствующую опцию. Например twitter, facebook.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PlacesCheckinParams.PlaceId">
            <summary>
            Идентификатор места.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PlacesCheckinParams.Latitude">
            <summary>
            Географическая широта отметки, заданная в градусах (от -90 до 90).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PlacesCheckinParams.Longitude">
            <summary>
            Географическая долгота отметки, заданная в градусах (от -180 до 180).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PlacesCheckinParams.FriendsOnly">
            <summary>
            1 — отметка будет доступна только друзьям, 0 — отметка будет доступна всем
            пользователям. По умолчанию 0.
            </summary>
        </member>
        <member name="T:VkNet.Model.RequestParams.PlacesGetCheckinsParams">
            <summary>
            Параметры запроса places.checkins
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PlacesGetCheckinsParams.Latitude">
            <summary>
            географическая широта точки, в радиусе которой необходимо производить поиск,
            заданная в градусах (от -90 до 90).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PlacesGetCheckinsParams.Longitude">
            <summary>
            географическая долгота точки, в радиусе которой необходимо производить поиск,
            заданная в градусах (от -180 до 180).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PlacesGetCheckinsParams.Place">
            <summary>
            идентификатор места. Игнорируется, если указаны latitude и longitude.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PlacesGetCheckinsParams.UserId">
            <summary>
            идентификатор пользователя. Игнорируется, если указаны latitude и longitude или
            place.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PlacesGetCheckinsParams.Offset">
            <summary>
            смещение относительно первой отметки для выборки определенного подмножества.
            Игнорируется, если установлен
            ненулевой timestamp.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PlacesGetCheckinsParams.Count">
            <summary>
            количество возвращаемых отметок. Игнорируется, если установлен ненулевой
            timestamp.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PlacesGetCheckinsParams.Timestamp">
            <summary>
            указывает, что нужно вернуть только те отметки, которые были созданы после
            заданного timestamp.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PlacesGetCheckinsParams.FriendsOnly">
            <summary>
            1 — указывает, что следует выводить только отметки друзей, если заданы
            географические координаты.
            Игнорируется, если не заданы параметры latitude и longitude.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PlacesGetCheckinsParams.NeedPlaces">
            <summary>
            указывает, следует ли возвращать информацию о месте в котором была сделана
            отметка.
            Игнорируется, если указан параметр place.
            </summary>
        </member>
        <member name="T:VkNet.Model.RequestParams.PlacesSearchParams">
            <summary>
            Параметры запроса places.search
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PlacesSearchParams.Query">
            <summary>
            Строка поискового запроса.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PlacesSearchParams.Latitude">
            <summary>
            Географическая широта точки, в радиусе которой необходимо производить поиск,
            заданная в градусах (от -90 до 90).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PlacesSearchParams.Longitude">
            <summary>
            Географическая долгота точки, в радиусе которой необходимо производить поиск,
            заданная в градусах (от -180 до 180).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PlacesSearchParams.City">
            <summary>
            Идентификатор города.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PlacesSearchParams.Radius">
            <summary>
            Тип радиуса зоны поиска (от 1 до 4)
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PlacesSearchParams.Offset">
            <summary>
            Смещение, необходимое для выборки определенного подмножества результатов
            поиска.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PlacesSearchParams.Count">
            <summary>
            Количество мест, информацию о которых необходимо вернуть.
            </summary>
        </member>
        <member name="T:VkNet.Model.RequestParams.PollsAddVoteParams">
            <summary>
            Список параметров для метода polls.addVote
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PollsAddVoteParams.OwnerId">
            <summary>
            Идентификатор владельца опроса.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PollsAddVoteParams.IsBoard">
            <summary>
            True — опрос находится в обсуждении, False — опрос прикреплен к стене.
            По умолчанию — False.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PollsAddVoteParams.PollId">
            <summary>
            Идентификатор опроса.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PollsAddVoteParams.AnswerId">
            <summary>
            Идентификатор варианта ответа.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.PollsAddVoteParams.ToVkParameters(VkNet.Model.RequestParams.PollsAddVoteParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.Polls.PollsCreateParams">
            <summary>
            Список параметров для метода polls.create
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Polls.PollsCreateParams.Question">
            <summary>
            Текст опроса.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Polls.PollsCreateParams.IsAnonymous">
            <summary>
            Идентификатор владельца опроса.
            True – анонимный опрос, список проголосовавших недоступен;
            False – опрос публичный, список проголосовавших доступен;
            По умолчанию – False.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Polls.PollsCreateParams.IsMultiple">
            <summary>
            <c>true</c> — для создания опроса с мультивыбором. флаг, может принимать значения <c>true</c> или <c>false</c>
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Polls.PollsCreateParams.EndDate">
            <summary>
            Дата завершения опроса в Unixtime. положительное число, минимальное значение 1536692688
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Polls.PollsCreateParams.OwnerId">
            <summary>
            Если опрос будет добавлен в группу, необходимо передать отрицательный идентификатор группы.
            По умолчанию текущий пользователь.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Polls.PollsCreateParams.AddAnswers">
            <summary>
            Список вариантов ответов.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Polls.PollsCreateParams.PhotoId">
            <summary>
            Идентификатор фотографии для использования в качестве фона сниппета. положительное число
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Polls.PollsCreateParams.BackgroundId">
            <summary>
            Идентификатор стандартного фона для сниппета.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.Polls.PollsCreateParams.ToVkParameters(VkNet.Model.RequestParams.Polls.PollsCreateParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.PollsDeleteVoteParams">
            <summary>
            Список параметров для метода polls.deleteVote
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PollsDeleteVoteParams.OwnerId">
            <summary>
            Идентификатор владельца опроса.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PollsDeleteVoteParams.IsBoard">
            <summary>
            True — опрос находится в обсуждении, False — опрос прикреплен к стене.
            По умолчанию — False.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PollsDeleteVoteParams.PollId">
            <summary>
            Идентификатор опроса.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PollsDeleteVoteParams.AnswerId">
            <summary>
            Идентификатор варианта ответа.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.PollsDeleteVoteParams.ToVkParameters(VkNet.Model.RequestParams.PollsDeleteVoteParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.PollsEditParams">
            <summary>
            Список параметров для метода polls.edit
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PollsEditParams.OwnerId">
            <summary>
            Идентификатор владельца опроса.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PollsEditParams.PollId">
            <summary>
            Идентификатор опроса.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PollsEditParams.Question">
            <summary>
            Текст опроса.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PollsEditParams.AddAnswers">
            <summary>
            Список новых вариантов ответов.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PollsEditParams.EditAnswers">
            <summary>
            Список для изменения существующих вариантов ответа.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PollsEditParams.DeleteAnswers">
            <summary>
            Список для удаления вариантов ответа.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.PollsEditParams.ToVkParameters(VkNet.Model.RequestParams.PollsEditParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.PollsGetByIdParams">
            <summary>
            Список параметров для метода polls.getById
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PollsGetByIdParams.OwnerId">
            <summary>
            Идентификатор владельца опроса.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PollsGetByIdParams.IsBoard">
            <summary>
            True — опрос находится в обсуждении, False — опрос прикреплен к стене.
            По умолчанию — False.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PollsGetByIdParams.PollId">
            <summary>
            Идентификатор опроса.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.PollsGetByIdParams.ToVkParameters(VkNet.Model.RequestParams.PollsGetByIdParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.PollsGetVotersParams">
            <summary>
            Список параметров для метода polls.getById
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PollsGetVotersParams.OwnerId">
            <summary>
            Идентификатор владельца опроса.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PollsGetVotersParams.IsBoard">
            <summary>
            True — опрос находится в обсуждении, False — опрос прикреплен к стене.
            По умолчанию — False.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PollsGetVotersParams.PollId">
            <summary>
            Идентификатор опроса.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PollsGetVotersParams.AnswersIds">
            <summary>
            Идентификаторы вариантов ответа.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PollsGetVotersParams.FriendsOnly">
            <summary>
            Указывает, необходимо ли возвращать только пользователей, которые являются
            друзьями текущего пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PollsGetVotersParams.Offset">
            <summary>
            Смещение относительно начала списка, для выборки определенного подмножества.
            Если параметр не задан, то считается,
            что он равен 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PollsGetVotersParams.Count">
            <summary>
            Количество возвращаемых идентификаторов пользователей.
            Если параметр не задан, то считается, что он равен 100, если не задан параметр
            friends_only, в противном случае 10.
            Максимальное значение параметра 1000, если не задан параметр friends_only, в
            противном случае 100.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PollsGetVotersParams.Fields">
            <summary>
            Список дополнительных полей, которые необходимо вернуть.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PollsGetVotersParams.NameCase">
            <summary>
            Падеж для склонения имени и фамилии пользователя. Возможные значения:
            именительный – nom, родительный – gen,
            дательный – dat, винительный – acc, творительный – ins, предложный – abl. По
            умолчанию nom. строка.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.PollsGetVotersParams.ToVkParameters(VkNet.Model.RequestParams.PollsGetVotersParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.SearchGetHintsParams">
            <summary>
            Параметры запроса Search.GetHints
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.SearchGetHintsParams.Query">
            <summary>
            текст запроса, результаты которого нужно получить
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.SearchGetHintsParams.Offset">
            <summary>
            смещение для выборки определённого подмножества результатов.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.SearchGetHintsParams.Limit">
            <summary>
            ограничение на количество возвращаемых результатов.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.SearchGetHintsParams.Filters">
            <summary>
            Перечисленные через запятую типы данных, которые необходимо вернуть. По
            умолчанию возвращаются все.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.SearchGetHintsParams.ProfileFields">
            <summary>
            дополнительные поля профилей и сообществ для получения.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.SearchGetHintsParams.SearchGlobal">
            <summary>
            1 — к результатам поиска добавляются результаты глобального поиска по всем
            пользователям и группам.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.SearchGetHintsParams.ToVkParameters(VkNet.Model.RequestParams.SearchGetHintsParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.Stories.GetPhotoUploadServerParams">
            <summary>
            Список параметров для метода stories.getPhotoUploadServer
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Stories.GetPhotoUploadServerParams.ReplyToStory">
            <summary>
            Идентификатор истории, в ответ на которую создается новая. строка
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Stories.GetPhotoUploadServerParams.LinkText">
            <summary>
            Текст ссылки для перехода из истории (только для историй сообществ).
            to_store — «В магазин»;
            vote — «Голосовать»;
            more — «Ещё»;
            book — «Забронировать»;
            order — «Заказать»;
            enroll — «Записаться»;
            fill — «Заполнить»;
            signup — «Зарегистрироваться»;
            buy — «Купить»;
            ticket — «Купить билет»;
            write — «Написать»;
            open — «Открыть»;
            learn_more — «Подробнее» (по умолчанию);
            view — «Посмотреть»;
            go_to — «Перейти»;
            contact — «Связаться»;
            watch — «Смотреть»;
            play — «Слушать»;
            install — «Установить»;
            read — «Читать».
            строка
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Stories.GetPhotoUploadServerParams.LinkUrl">
            <summary>
            Адрес ссылки для перехода из истории. Допустимы только внутренние ссылки https://vk.com. строка, максимальная длина 2048
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Stories.GetPhotoUploadServerParams.AddToNews">
            <summary>
            1 — разместить историю в новостях. Обязательно, если не указан user_ids флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Stories.GetPhotoUploadServerParams.UserIds">
            <summary>
            Идентификаторы пользователей, которые будут видеть историю (для отправки в личном сообщении). Обязательно, если add_to_news не передан. список положительных чисел, разделенных запятыми
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Stories.GetPhotoUploadServerParams.GroupId">
            <summary>
            Идентификатор сообщества, в которое должна быть загружена история (при работе с ключом доступа пользователя).
            Обратите внимание — загрузка историй доступна только для верифицированных сообществ и для сообществ, отмеченных «огоньком». положительное число
            </summary>
        </member>
        <member name="T:VkNet.Model.RequestParams.Stories.GetVideoUploadServerParams">
            <summary>
            Список параметров для метода stories.getVideoUploadServer
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Stories.GetVideoUploadServerParams.ReplyToStory">
            <summary>
            Идентификатор истории, в ответ на которую создается новая. строка
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Stories.GetVideoUploadServerParams.LinkText">
            <summary>
            Текст ссылки для перехода из истории. строка
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Stories.GetVideoUploadServerParams.LinkUrl">
            <summary>
            Адрес ссылки для перехода из истории. строка, максимальная длина 2048
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Stories.GetVideoUploadServerParams.AddToNews">
            <summary>
            1 — разместить историю в новостях. флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Stories.GetVideoUploadServerParams.UserIds">
            <summary>
            Идентификаторы пользователей, которые будут видеть историю (для отправки в личном сообщении). список положительных чисел, разделенных запятыми
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.Stories.GetVideoUploadServerParams.GroupId">
            <summary>
            Идентификатор сообщества, в которое должна быть загружена история (при работе с ключом доступа пользователя).
            Обратите внимание — загрузка историй доступна только для верифицированных сообществ и для сообществ, отмеченных «огоньком». положительное число
            </summary>
        </member>
        <member name="T:VkNet.Model.RequestParams.UserSearchParams">
            <summary>
            Параметры метода users.search
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UserSearchParams.Query">
            <summary>
            Строка поискового запроса. Например, Вася Бабич.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UserSearchParams.Sort">
            <summary>
            Сортировка результатов.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UserSearchParams.Offset">
            <summary>
            Смещение относительно первого найденного пользователя для выборки определенного
            подмножества.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UserSearchParams.Count">
            <summary>
            Количество возвращаемых пользователей. Обратите внимание — даже при
            использовании параметра offset для получения
            информации доступны только первые 1000 результатов.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UserSearchParams.Fields">
            <summary>
            Список дополнительных полей, которые необходимо вернуть.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UserSearchParams.City">
            <summary>
            Идентификатор города.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UserSearchParams.Country">
            <summary>
            Идентификатор страны.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UserSearchParams.Hometown">
            <summary>
            Название города строкой.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UserSearchParams.UniversityCountry">
            <summary>
            Идентификатор страны, в которой пользователи закончили ВУЗ.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UserSearchParams.University">
            <summary>
            Идентификатор ВУЗа.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UserSearchParams.UniversityYear">
            <summary>
            Год окончания ВУЗа.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UserSearchParams.UniversityFaculty">
            <summary>
            Идентификатор факультета.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UserSearchParams.UniversityChair">
            <summary>
            Идентификатор кафедры.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UserSearchParams.Sex">
            <summary>
            Пол.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UserSearchParams.Status">
            <summary>
            Семейное положение.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UserSearchParams.AgeFrom">
            <summary>
            Начиная с какого возраста.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UserSearchParams.AgeTo">
            <summary>
            До какого возраста.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UserSearchParams.BirthDay">
            <summary>
            День рождения.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UserSearchParams.BirthMonth">
            <summary>
            Месяц рождения.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UserSearchParams.BirthYear">
            <summary>
            Год рождения.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UserSearchParams.Online">
            <summary>
            <c> true </c> — только в сети, <c> false </c> — все пользователи. флаг.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UserSearchParams.HasPhoto">
            <summary>
            <c> true </c> — только с фотографией, <c> false </c> — все пользователи. флаг.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UserSearchParams.SchoolCountry">
            <summary>
            Идентификатор страны, в которой пользователи закончили школу.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UserSearchParams.SchoolCity">
            <summary>
            Идентификатор города, в котором пользователи закончили школу.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UserSearchParams.SchoolClass">
            <summary>
            Класс в школе.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UserSearchParams.School">
            <summary>
            Идентификатор школы, которую закончили пользователи.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UserSearchParams.SchoolYear">
            <summary>
            Год окончания школы.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UserSearchParams.Religion">
            <summary>
            Религиозные взгляды.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UserSearchParams.Interests">
            <summary>
            Интересы.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UserSearchParams.Company">
            <summary>
            Название компании, в которой работают пользователи.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UserSearchParams.Position">
            <summary>
            Название должности.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UserSearchParams.GroupId">
            <summary>
            Идентификатор группы, среди пользователей которой необходимо проводить поиск.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UserSearchParams.FromList">
            <summary>
            Разделы среди которых нужно осуществить поиск.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.UserSearchParams.ToVkParameters(VkNet.Model.RequestParams.UserSearchParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.UsersGetNearbyParams">
            <summary>
            Параметры метода users.getNearby
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UsersGetNearbyParams.Latitude">
            <summary>
            Географическая широта точки, в которой в данный момент находится пользователь,
            заданная в градусах (от -90 до 90).
            дробное число, обязательный параметр.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UsersGetNearbyParams.Longitude">
            <summary>
            Географическая долгота точки, в которой в данный момент находится пользователь,
            заданная в градусах (от -180 до
            180). дробное число, обязательный параметр.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UsersGetNearbyParams.Accuracy">
            <summary>
            Точность текущего местоположения пользователя в метрах. положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UsersGetNearbyParams.Timeout">
            <summary>
            Время в секундах через которое пользователь должен перестать находиться через
            поиск по местоположению.
            положительное число, по умолчанию 7200.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UsersGetNearbyParams.Radius">
            <summary>
            Тип радиуса зоны поиска (от 1 до 4)
            1 — 300 метров;
            2 — 2400 метров;
            3 — 18 километров;
            4 — 150 километров.
            положительное число, по умолчанию 1.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UsersGetNearbyParams.Fields">
            <summary>
            Список дополнительных полей профилей, которые необходимо вернуть. См. подробное
            описание.
            Доступные значения: photo_id, verified, sex, bdate, city, country, home_town,
            has_photo, photo_50, photo_100,
            photo_200_orig, photo_200, photo_400_orig, photo_max, photo_max_orig, online,
            lists, domain, has_mobile, contacts,
            site, education, universities, schools, status, last_seen, followers_count,
            common_count, occupation, nickname,
            relatives, relation, personal, connections, exports, wall_comments, activities,
            interests, music, movies, tv,
            books, games, about, quotes, can_post, can_see_all_posts, can_see_audio,
            can_write_private_message,
            can_send_friend_request, is_favorite, is_hidden_from_feed, timezone,
            screen_name, maiden_name, crop_photo,
            is_friend, friend_status, career, military, blacklisted, blacklisted_by_me.
            список строк, разделенных через
            запятую.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UsersGetNearbyParams.NameCase">
            <summary>
            Падеж для склонения имени и фамилии пользователя. Возможные значения:
            именительный – nom, родительный – gen,
            дательный – dat, винительный – acc, творительный – ins, предложный – abl. По
            умолчанию nom. строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.UsersGetNearbyParams.NeedDescription">
            <summary>
            флаг, может принимать значения 1 или 0, по умолчанию
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.UsersGetNearbyParams.ToVkParameters(VkNet.Model.RequestParams.UsersGetNearbyParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.VideoCreateCommentParams">
            <summary>
            Параметры метода video.createComment
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoCreateCommentParams.OwnerId">
            <summary>
            Идентификатор пользователя или сообщества, которому принадлежит видеозапись.
            Обратите внимание, идентификатор
            сообщества в параметре owner_id необходимо указывать со знаком "-" — например,
            owner_id=-1 соответствует
            идентификатору сообщества ВКонтакте API (club1)  целое число, по умолчанию
            идентификатор текущего пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoCreateCommentParams.VideoId">
            <summary>
            Идентификатор видеозаписи. целое число, обязательный параметр.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoCreateCommentParams.Message">
            <summary>
            Текст комментария (является обязательным, если не задан параметр attachments).
            строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoCreateCommentParams.Attachments">
            <summary>
            Список объектов, приложенных к комментарию и разделённых символом ",". Поле
            attachments представляется в формате:
            &lt;type&gt;&lt;owner_id&gt;_&lt;media_id&gt;,&lt;type&gt;&lt;owner_id&gt;_&lt;
            media_id&gt;
            &lt;type&gt; — тип медиа-вложения:
            photo — фотография
            video — видеозапись
            audio — аудиозапись
            doc — документ
            &lt;owner_id&gt; — идентификатор владельца медиа-вложения
            &lt;media_id&gt; — идентификатор медиа-вложения.
            Например:
            photo100172_166443618,photo66748_265827614
            Параметр является обязательным, если не задан параметр message. список строк,
            разделенных через запятую.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoCreateCommentParams.FromGroup">
            <summary>
            Данный параметр учитывается, если oid &lt; 0 (комментарий к видеозаписи
            группы). 1 — комментарий будет опубликован
            от имени группы, 0 — комментарий будет опубликован от имени пользователя (по
            умолчанию). флаг, может принимать
            значения 1 или 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoCreateCommentParams.ReplyToComment">
            <summary>
            Положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoCreateCommentParams.StickerId">
            <summary>
            Положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoCreateCommentParams.Guid">
            <summary>
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.VideoCreateCommentParams.ToVkParameters(VkNet.Model.RequestParams.VideoCreateCommentParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.VideoEditParams">
            <summary>
            Параметры метода video.edit
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoEditParams.OwnerId">
            <summary>
            Идентификатор пользователя или сообщества, которому принадлежит видеозапись.
            Обратите внимание, идентификатор
            сообщества в параметре owner_id необходимо указывать со знаком "-" — например,
            owner_id=-1 соответствует
            идентификатору сообщества ВКонтакте API (club1)  целое число, по умолчанию
            идентификатор текущего пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoEditParams.VideoId">
            <summary>
            Идентификатор видеозаписи. целое число, обязательный параметр.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoEditParams.Name">
            <summary>
            Новое название для видеозаписи. строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoEditParams.Desc">
            <summary>
            Новое описание для видеозаписи. строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoEditParams.PrivacyView">
            <summary>
            Настройки приватности просмотра видеозаписи в специальном формате. Приватность
            доступна для видеозаписей, которые
            пользователь загрузил в профиль. список строк, разделенных через запятую.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoEditParams.PrivacyComment">
            <summary>
            Настройки приватности комментирования видеозаписи в специальном формате.
            Приватность доступна для видеозаписей, которые пользователь загрузил в профиль.
            список строк, разделенных через
            запятую.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoEditParams.NoComments">
            <summary>
            Закрыть комментарии (для видео из сообществ). флаг, может принимать значения 1
            или 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoEditParams.Repeat">
            <summary>
            Зацикливание воспроизведения видеозаписи. флаг, может принимать значения 1 или
            0.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.VideoEditParams.ToVkParameters(VkNet.Model.RequestParams.VideoEditParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.VideoGetCatalogParams">
            <summary>
            Параметры запроса Video.GetCatalog
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoGetCatalogParams.Count">
            <summary>
            Число блоков каталога, информацию о которых необходимо вернуть.
            Обратите внимание, параметр распространяется только на блоки other.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoGetCatalogParams.ItemsCount">
            <summary>
            Число видеозаписей в каждом блоке.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoGetCatalogParams.From">
            <summary>
            Параметр для получения следующей страницы результатов.
            Значение, необходимое для передачи в этом параметре, возвращается в поле ответа
            next.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoGetCatalogParams.Extended">
            <summary>
            1 — в ответе будут возвращены дополнительные поля profiles и groups,
            содержащие информацию о пользователях и сообществах.
            По умолчанию: 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoGetCatalogParams.Filters">
            <summary>
            id блоков, которые необходимо вернуть в ответе.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.VideoGetCatalogParams.ToVkParameters(VkNet.Model.RequestParams.VideoGetCatalogParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.VideoGetCommentsParams">
            <summary>
            Параметры метода video.getComments
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoGetCommentsParams.OwnerId">
            <summary>
            Идентификатор пользователя или сообщества, которому принадлежит видеозапись.
            Обратите внимание, идентификатор
            сообщества в параметре owner_id необходимо указывать со знаком "-" — например,
            owner_id=-1 соответствует
            идентификатору сообщества ВКонтакте API (club1)  целое число, по умолчанию
            идентификатор текущего пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoGetCommentsParams.VideoId">
            <summary>
            Идентификатор видеозаписи. положительное число, обязательный параметр.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoGetCommentsParams.NeedLikes">
            <summary>
            1 — будет возвращено дополнительное поле likes. По умолчанию поле likes не
            возвращается. флаг, может принимать
            значения 1 или 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoGetCommentsParams.StartCommentId">
            <summary>
            Идентификатор комментария, начиная с которого нужно вернуть список (подробности
            см. ниже). положительное число,
            доступен начиная с версии 5.33.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoGetCommentsParams.Offset">
            <summary>
            Смещение, необходимое для выборки определенного подмножества комментариев. По
            умолчанию — 0. целое число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoGetCommentsParams.Count">
            <summary>
            Количество комментариев, информацию о которых необходимо вернуть. положительное
            число, по умолчанию 20,
            максимальное значение 100.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoGetCommentsParams.Sort">
            <summary>
            Порядок сортировки комментариев (asc — от старых к новым, desc — от новых к
            старым) строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoGetCommentsParams.Extended">
            <summary>
            1 — комментарии в ответе будут возвращены в виде пронумерованных объектов,
            дополнительно будут возвращены списки
            объектов profiles, groups. флаг, может принимать значения 1 или 0, доступен
            начиная с версии 5.0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoGetCommentsParams.Fields">
            <summary>
            Дополнительные поля для пользователя
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.VideoGetCommentsParams.ToVkParameters(VkNet.Model.RequestParams.VideoGetCommentsParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.VideoGetParams">
            <summary>
            Параметры метода video.get
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoGetParams.OwnerId">
            <summary>
            Идентификатор пользователя или сообщества, которому принадлежат видеозаписи.
            Обратите внимание, идентификатор
            сообщества в параметре owner_id необходимо указывать со знаком "-" — например,
            owner_id=-1 соответствует
            идентификатору сообщества ВКонтакте API (club1)  целое число, по умолчанию
            идентификатор текущего пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoGetParams.Videos">
            <summary>
            Перечисленные через запятую идентификаторы — идущие через знак подчеркивания id
            пользователей, которым принадлежат
            видеозаписи, и id самих видеозаписей. Если видеозапись принадлежит сообществу,
            то в качестве первого параметра
            используется -id сообщества.
            Пример значения videos:
            -4363_136089719,13245770_137352259
            Некоторые видеозаписи, идентификаторы которых могут быть получены через API,
            закрыты приватностью, и не будут
            получены. В этом случае следует использовать ключ доступа access_key в её
            идентификаторе. Пример значения videos:
            1_129207899_220df2876123d3542f, 6492_135055734_e0a9bcc31144f67fbd
            Поле access_key будет возвращено вместе с остальными данными видеозаписи в
            методах, которые возвращают видеозаписи,
            закрытые приватностью, но доступные в данном контексте. Например данное поле
            имеют видеозаписи, возвращаемые
            методом newsfeed.get. список строк, разделенных через запятую.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoGetParams.AlbumId">
            <summary>
            Идентификатор альбома, видеозаписи из которого нужно вернуть. целое число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoGetParams.Count">
            <summary>
            Количество возвращаемых видеозаписей. положительное число, максимальное
            значение 200, по умолчанию 100.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoGetParams.Offset">
            <summary>
            Смещение относительно первой найденной видеозаписи для выборки определенного
            подмножества. положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoGetParams.Extended">
            <summary>
            Определяет, возвращать ли информацию о настройках приватности видео для
            текущего пользователя. флаг, может
            принимать значения 1 или 0.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.VideoGetParams.ToVkParameters(VkNet.Model.RequestParams.VideoGetParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.VideoReorderVideosParams">
            <summary>
            Параметры метода video.reorderVideos
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoReorderVideosParams.TargetId">
            <summary>
            Идентификатор пользователя или сообщества, в чьем альбоме нужно переместить
            видео. Обратите внимание, идентификатор
            сообщества в параметре owner_id необходимо указывать со знаком "-" — например,
            owner_id=-1 соответствует
            идентификатору сообщества ВКонтакте API (club1)  целое число, по умолчанию
            идентификатор текущего пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoReorderVideosParams.AlbumId">
            <summary>
            Идентификатор альбома с видеозаписью, которую нужно переместить. целое число,
            обязательный параметр.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoReorderVideosParams.OwnerId">
            <summary>
            Идентификатор владельца видеозаписи, которую нужно переместить (пользователь
            или сообщество). целое число,
            обязательный параметр.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoReorderVideosParams.VideoId">
            <summary>
            Идентификатор видеозаписи, которую нужно переместить. положительное число,
            обязательный параметр.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoReorderVideosParams.BeforeOwnerId">
            <summary>
            Идентификатор владельца видеозаписи, перед которой следует поместить текущую
            (пользователь или сообщество). целое
            число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoReorderVideosParams.BeforeVideoId">
            <summary>
            Идентификатор видеозаписи, перед которой следует поместить текущую.
            положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoReorderVideosParams.AfterOwnerId">
            <summary>
            Идентификатор владельца видеозаписи, после которой следует поместить текущую
            (пользователь или сообщество). целое
            число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoReorderVideosParams.AfterVideoId">
            <summary>
            Идентификатор видеозаписи, после которой следует поместить текущую.
            положительное число.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.VideoReorderVideosParams.ToVkParameters(VkNet.Model.RequestParams.VideoReorderVideosParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.VideoSaveParams">
            <summary>
            Параметры метода video.save
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoSaveParams.Name">
            <summary>
            Название видеофайла. строка, по умолчанию No name.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoSaveParams.Description">
            <summary>
            Описание видеофайла. строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoSaveParams.IsPrivate">
            <summary>
            Указывается 1 в случае последующей отправки видеозаписи личным сообщением.
            После загрузки с этим параметром
            видеозапись не будет отображаться в списке видеозаписей пользователя и не будет
            доступна другим пользователям по
            id. По умолчанию 0. флаг, может принимать значения 1 или 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoSaveParams.Wallpost">
            <summary>
            Требуется ли после сохранения опубликовать запись с видео на стене (1 —
            требуется, 0 — не требуется). флаг, может
            принимать значения 1 или 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoSaveParams.Link">
            <summary>
            Uri для встраивания видео с внешнего сайта, например, с youtube. В этом случае
            нужно вызвать полученный upload_url
            не прикрепляя файл, достаточно просто обратиться по этому адресу. строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoSaveParams.GroupId">
            <summary>
            Идентификатор сообщества, в которое будет сохранен видеофайл. По умолчанию файл
            сохраняется на страницу текущего
            пользователя. положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoSaveParams.AlbumId">
            <summary>
            Идентификатор альбома, в который будет загружен видео файл. положительное
            число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoSaveParams.PrivacyView">
            <summary>
            Настройки приватности просмотра видеозаписи в специальном формате. Приватность
            доступна для видеозаписей, которые
            пользователь загрузил в профиль. список строк, разделенных через запятую.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoSaveParams.PrivacyComment">
            <summary>
            Настройки приватности комментирования видеозаписи в специальном формате.
            Приватность доступна для видеозаписей, которые пользователь загрузил в профиль.
            список строк, разделенных через
            запятую.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoSaveParams.NoComments">
            <summary>
            Закрыть комментарии (для видео из сообществ). флаг, может принимать значения 1
            или 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoSaveParams.Repeat">
            <summary>
            Зацикливание воспроизведения видеозаписи. флаг, может принимать значения 1 или
            0.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.VideoSaveParams.ToVkParameters(VkNet.Model.RequestParams.VideoSaveParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.VideoSearchParams">
            <summary>
            Параметры метода video.search
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoSearchParams.Query">
            <summary>
            Строка поискового запроса. Например, The Beatles. строка, обязательный
            параметр.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoSearchParams.Sort">
            <summary>
            Вид сортировки. 0 — по дате добавления видеозаписи, 1 — по длительности, 2 — по
            релевантности. целое число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoSearchParams.Hd">
            <summary>
            Если не равен нулю, то поиск производится только по видеозаписям высокого
            качества. целое число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoSearchParams.Adult">
            <summary>
            Фильтр «Безопасный поиск» (1 — выключен, 0 — включен). флаг, может принимать
            значения 1 или 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoSearchParams.Filters">
            <summary>
            Список критериев, по которым требуется отфильтровать видео:
            mp4 — искать только видео в формате mp4 (воспроиводимое на iOS);
            youtube — возвращать только youtube видео;
            vimeo — возвращать только vimeo видео;
            short — возвращать только короткие видеозаписи;
            long — возвращать только длинные видеозаписи.
            список строк, разделенных через запятую.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoSearchParams.SearchOwn">
            <summary>
            1 – искать по видеозаписям пользователя, 0 – не искать по видеозаписям
            пользователя (по умолчанию). флаг, может
            принимать значения 1 или 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoSearchParams.Offset">
            <summary>
            Смещение относительно первой найденной видеозаписи для выборки определенного
            подмножества. положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoSearchParams.Longer">
            <summary>
            Количество секунд, видеозаписи длиннее которого необходимо вернуть.
            положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoSearchParams.Shorter">
            <summary>
            Количество секунд, видеозаписи короче которого необходимо вернуть.
            положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoSearchParams.Count">
            <summary>
            Количество возвращаемых видеозаписей. Обратите внимание — даже при
            использовании параметра offset для получения
            информации доступны только первые 1000 результатов.
            положительное число, по умолчанию 20, максимальное значение 200.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.VideoSearchParams.Extended">
            <summary>
            1 — возвращать дополнительные объекты profiles и groups, которые содержат id и
            имя/название владельцев видео. флаг,
            может принимать значения 1 или 0, по умолчанию 0.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.VideoSearchParams.ToVkParameters(VkNet.Model.RequestParams.VideoSearchParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.EditAdsStealthParams">
            <summary>
            TODO: Description
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.EditAdsStealthParams.OwnerId">
            <summary>
            идентификатор владельца стены (идентификатор сообщества нужно указывать со
            знаком «минус»).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.EditAdsStealthParams.PostId">
            <summary>
            идентификатор записи.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.EditAdsStealthParams.Message">
            <summary>
            текст записи.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.EditAdsStealthParams.Attachments">
            <summary>
            список объектов, приложенных к записи и разделённых символом ",".
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.EditAdsStealthParams.Signed">
            <summary>
            1 — у записи, размещенной от имени сообщества, будет добавлена подпись (имя
            пользователя, разместившего запись),
            0 — без подписи.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.EditAdsStealthParams.Lat">
            <summary>
            географическая широта отметки, заданная в градусах (от -90 до 90).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.EditAdsStealthParams.Long">
            <summary>
            географическая долгота отметки, заданная в градусах (от -180 до 180).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.EditAdsStealthParams.PlaceId">
            <summary>
            идентификатор места.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.EditAdsStealthParams.LinkTitle">
            <summary>
            Заголовок, который должен быть использован для сниппета.
            Если не указан, будет автоматически получен с целевой ссылки.
            Обязательно указывать в случае, если ссылка является номером телефона.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.EditAdsStealthParams.LinkImage">
            <summary>
            Ссылка на изображение, которое должно быть использовано для сниппета.
            Минимальное разрешение: 537x240.
            Если не указана, будет автоматически загружена с целевой ссылки.
            Обязательно указывать в случае, если ссылка является номером телефона.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.EditAdsStealthParams.ToVkParameters(VkNet.Model.RequestParams.EditAdsStealthParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.PostAdsStealthParams">
            <summary>
            параметры запроса wall.PostAdsStealth
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PostAdsStealthParams.OwnerId">
            <summary>
            идентификатор владельца стены (идентификатор сообщества нужно указывать со
            знаком «минус»).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PostAdsStealthParams.Message">
            <summary>
            текст записи
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PostAdsStealthParams.Attachments">
            <summary>
            список объектов, приложенных к записи и разделённых символом ",".
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PostAdsStealthParams.Signed">
            <summary>
            1 — у записи, размещенной от имени сообщества, будет добавлена подпись (имя
            пользователя, разместившего запись),
            0 — без подписи.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PostAdsStealthParams.Lat">
            <summary>
            географическая широта отметки, заданная в градусах (от -90 до 90)
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PostAdsStealthParams.Long">
            <summary>
            географическая долгота отметки, заданная в градусах (от -180 до 180).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PostAdsStealthParams.PlaceId">
            <summary>
            идентификатор места.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PostAdsStealthParams.Guid">
            <summary>
            уникальный идентификатор, предназначенный для предотвращения повторной отправки
            одинаковой записи.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PostAdsStealthParams.LinkButton">
            <summary>
            идентификатор кнопки, которую необходимо добавить к сниппету для ссылки.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PostAdsStealthParams.LinkTitle">
            <summary>
            заголовок, который должен быть использован для сниппета.
            Если не указан, будет автоматически получен с целевой ссылки.
            Обязательно указывать в случае, если ссылка является номером телефона.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.PostAdsStealthParams.LinkImage">
            <summary>
            ссылка на изображение, которое должно быть использовано для сниппета.
            Минимальное разрешение: 537x240.
            Если не указана, будет автоматически загружена с целевой ссылки.
            Обязательно указывать в случае, если ссылка является номером телефона.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.PostAdsStealthParams.ToVkParameters(VkNet.Model.RequestParams.PostAdsStealthParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.WallAddCommentParams">
            <summary>
            Параметры метода wall.addComment
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallAddCommentParams.OwnerId">
            <summary>
            Идентификатор пользователя или сообщества, на чьей стене находится запись, к
            которой необходимо добавить
            комментарий. Обратите внимание, идентификатор сообщества в параметре owner_id
            необходимо указывать со знаком "-" —
            например, owner_id=-1 соответствует идентификатору сообщества ВКонтакте API
            (club1)  целое число, по умолчанию
            идентификатор текущего пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallAddCommentParams.PostId">
            <summary>
            Идентификатор записи на стене пользователя или сообщества. положительное число,
            обязательный параметр.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallAddCommentParams.FromGroup">
            <summary>
            Данный параметр учитывается, если owner_id &lt; 0 (комментарий публикуется на
            стене группы). 1 — комментарий будет
            опубликован от имени группы, 0 — комментарий будет опубликован от имени
            пользователя (по умолчанию). флаг, может
            принимать значения 1 или 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallAddCommentParams.Text">
            <summary>
            Текст комментария к записи. строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallAddCommentParams.ReplyToComment">
            <summary>
            Идентификатор комментария, в ответ на который должен быть добавлен новый
            комментарий. целое число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallAddCommentParams.Attachments">
            <summary>
            Список объектов, приложенных к комментарию и разделённых символом ",". Поле
            attachments представляется в формате:
            &lt;type&gt;&lt;owner_id&gt;_&lt;media_id&gt;,&lt;type&gt;&lt;owner_id&gt;_&lt;
            media_id&gt;
            &lt;type&gt; — тип медиа-вложения:
            photo — фотография
            video — видеозапись
            audio — аудиозапись
            doc — документ
            &lt;owner_id&gt; — идентификатор владельца медиа-вложения
            &lt;media_id&gt; — идентификатор медиа-вложения.
            Например:
            photo100172_166443618,photo66748_265827614
            Параметр является обязательным, если не задан параметр text. список строк,
            разделенных через запятую.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallAddCommentParams.StickerId">
            <summary>
            Идентификатор стикера. положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallAddCommentParams.Ref">
            <summary>
            Строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallAddCommentParams.CaptchaSid">
            <summary>
            Идентификатор капчи
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallAddCommentParams.CaptchaKey">
            <summary>
            текст, который ввел пользователь
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.WallAddCommentParams.ToVkParameters(VkNet.Model.RequestParams.WallAddCommentParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.WallCreateCommentParams">
            <summary>
            Параметры метода wall.addComment
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallCreateCommentParams.OwnerId">
            <summary>
            Идентификатор пользователя или сообщества, на чьей стене находится запись, к
            которой необходимо добавить
            комментарий. Обратите внимание, идентификатор сообщества в параметре owner_id
            необходимо указывать со знаком "-" —
            например, owner_id=-1 соответствует идентификатору сообщества ВКонтакте API
            (club1)  целое число, по умолчанию
            идентификатор текущего пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallCreateCommentParams.PostId">
            <summary>
            Идентификатор записи на стене пользователя или сообщества. положительное число,
            обязательный параметр.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallCreateCommentParams.FromGroup">
            <summary>
            Идентификатор сообщества, от имени которого публикуется комментарий. По
            умолчанию: 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallCreateCommentParams.Message">
            <summary>
            Текст комментария. Обязательный параметр, если не передан параметр attachments
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallCreateCommentParams.ReplyToComment">
            <summary>
            Идентификатор комментария, в ответ на который должен быть добавлен новый
            комментарий. целое число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallCreateCommentParams.Attachments">
            <summary>
            Список объектов, приложенных к комментарию и разделённых символом ",". Поле
            attachments представляется в формате:
            &lt;type&gt;&lt;owner_id&gt;_&lt;media_id&gt;,&lt;type&gt;&lt;owner_id&gt;_&lt;
            media_id&gt;
            &lt;type&gt; — тип медиа-вложения:
            photo — фотография
            video — видеозапись
            audio — аудиозапись
            doc — документ
            &lt;owner_id&gt; — идентификатор владельца медиа-вложения
            &lt;media_id&gt; — идентификатор медиа-вложения.
            Например:
            photo100172_166443618,photo66748_265827614
            Параметр является обязательным, если не задан параметр text. список строк,
            разделенных через запятую.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallCreateCommentParams.StickerId">
            <summary>
            Идентификатор стикера. положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallCreateCommentParams.Guid">
            <summary>
            Уникальный идентификатор, предназначенный для предотвращения повторной отправки
            одинакового комментария. .
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallCreateCommentParams.CaptchaSid">
            <summary>
            Идентификатор капчи
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallCreateCommentParams.CaptchaKey">
            <summary>
            текст, который ввел пользователь
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.WallCreateCommentParams.ToVkParameters(VkNet.Model.RequestParams.WallCreateCommentParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.WallEditParams">
            <summary>
            Параметры метода wall.edit
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallEditParams.OwnerId">
            <summary>
            Идентификатор пользователя или сообщества, на стене которого находится запись.
            Обратите внимание, идентификатор
            сообщества в параметре owner_id необходимо указывать со знаком "-" — например,
            owner_id=-1 соответствует
            идентификатору сообщества ВКонтакте API (club1)  целое число, по умолчанию
            идентификатор текущего пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallEditParams.PostId">
            <summary>
            Идентификатор записи на стене. положительное число, обязательный параметр.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallEditParams.FriendsOnly">
            <summary>
            1 — запись будет доступна только друзьям, 0 — всем пользователям.
            Параметр учитывается только при редактировании отложенной записи. флаг, может
            принимать значения 1 или 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallEditParams.Message">
            <summary>
            Текст сообщения (является обязательным, если не задан параметр attachments)
            строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallEditParams.Attachments">
            <summary>
            Список объектов, приложенных к записи и разделённых символом ",". Поле
            attachments представляется в формате:
            &lt;type&gt;&lt;owner_id&gt;_&lt;media_id&gt;,&lt;type&gt;&lt;owner_id&gt;_&lt;
            media_id&gt;
            &lt;type&gt; — тип медиа-приложения:
            photo — фотография
            video — видеозапись
            audio — аудиозапись
            doc — документ
            graffiti — граффити
            page — wiki-страница
            note — заметка
            poll — опрос
            album — альбом.
            &lt;owner_id&gt; — идентификатор владельца медиа-приложения;
            &lt;media_id&gt; — идентификатор медиа-приложения.
            Например:
            photo100172_166443618,photo66748_265827614
            Также в поле attachments может быть указана ссылка на внешнюю страницу, которую
            Вы хотите разместить в статусе,
            например:
            photo66748_265827614,http://habrahabr.ru
            При попытке приложить больше одной ссылки будет возвращена ошибка.
            Параметр является обязательным, если не задан параметр message. список строк,
            разделенных через запятую.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallEditParams.Services">
            <summary>
            Список сервисов или сайтов, на которые необходимо экспортировать запись, в
            случае если пользователь настроил
            соответствующую опцию. Например, twitter, facebook.
            Параметр учитывается только при редактировании отложенной записи. строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallEditParams.Signed">
            <summary>
            1 — у записи, размещенной от имени сообщества будет добавлена подпись (имя
            пользователя, разместившего запись), 0 —
            подписи добавлено не будет.
            Параметр учитывается только при редактировании записи на стене сообщества,
            опубликованной от имени группы. флаг,
            может принимать значения 1 или 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallEditParams.PublishDate">
            <summary>
            Дата публикации записи в формате unixtime. Если параметр не указан, отложенная
            запись будет опубликована.
            Параметр учитывается только при редактировании отложенной записи. положительное
            число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallEditParams.Lat">
            <summary>
            Географическая широта отметки, заданная в градусах (от -90 до 90). дробное
            число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallEditParams.Long">
            <summary>
            Географическая долгота отметки, заданная в градусах (от -180 до 180). дробное
            число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallEditParams.PlaceId">
            <summary>
            Идентификатор места, в котором отмечен пользователь. положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallEditParams.CaptchaSid">
            <summary>
            Идентификатор капчи
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallEditParams.CaptchaKey">
            <summary>
            текст, который ввел пользователь
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallEditParams.MarkAsAds">
            <summary>
            1 — у записи, размещенной от имени сообщества, будет добавлена метка "это
            реклама",
            0 — метки добавлено не будет/снять установленную метку.
            Метка может быть снята в течение пяти минут после её установки.
            В сутки может быть опубликовано не более пяти рекламных записей, из которых не
            более трёх — вне Биржи ВКонтакте.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallEditParams.CloseComments">
            <summary>
            Флаг, может принимать значения 1 или 0
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallEditParams.PosterBackgroundId">
            <summary>
            No description.
            Положительное число
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.WallEditParams.ToVkParameters(VkNet.Model.RequestParams.WallEditParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.WallGetCommentsParams">
            <summary>
            Параметры метода wall.getComments
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallGetCommentsParams.OwnerId">
            <summary>
            Идентификатор владельца страницы (пользователь или сообщество). Обратите
            внимание, идентификатор сообщества в
            параметре owner_id необходимо указывать со знаком "-" — например, owner_id=-1
            соответствует идентификатору
            сообщества ВКонтакте API (club1)  целое число, по умолчанию идентификатор
            текущего пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallGetCommentsParams.PostId">
            <summary>
            Идентификатор записи на стене. положительное число, обязательный параметр.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallGetCommentsParams.NeedLikes">
            <summary>
            1 — возвращать информацию о лайках. флаг, может принимать значения 1 или 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallGetCommentsParams.StartCommentId">
            <summary>
            Идентификатор комментария, начиная с которого нужно вернуть список (подробности
            см. ниже). положительное число,
            доступен начиная с версии 5.33.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallGetCommentsParams.Offset">
            <summary>
            Сдвиг, необходимый для получения конкретной выборки результатов. целое число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallGetCommentsParams.Count">
            <summary>
            Число комментариев, которые необходимо получить. По умолчанию — 10,
            максимальное значение — 100. положительное
            число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallGetCommentsParams.Sort">
            <summary>
            Порядок сортировки комментариев (asc — от старых к новым, desc - от новых к
            старым) строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallGetCommentsParams.PreviewLength">
            <summary>
            Количество символов, по которому нужно обрезать текст комментария. Укажите 0,
            если Вы не хотите обрезатьтекст.
            положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallGetCommentsParams.Extended">
            <summary>
            1 — комментарии в ответе будут возвращены в виде пронумерованных объектов,
            дополнительно будут возвращены списки
            объектов profiles, groups. флаг, может принимать значения 1 или 0, доступен
            начиная с версии 5.0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallGetCommentsParams.Fields">
            <summary>
            Дополнительные поля для пользователя
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallGetCommentsParams.CommentId">
            <summary>
            Дополнительные поля для пользователя
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallGetCommentsParams.ThreadItemsCount">
            <summary>
            Дополнительные поля для пользователя
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.WallGetCommentsParams.ToVkParameters(VkNet.Model.RequestParams.WallGetCommentsParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.WallGetParams">
            <summary>
            Список параметров для метода Wall.Get
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallGetParams.OwnerId">
            <summary>
            Идентификатор пользователя или сообщества, со стены которого необходимо
            получить записи (по умолчанию — текущий
            пользователь).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallGetParams.Domain">
            <summary>
            Короткий адрес пользователя или сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallGetParams.Offset">
            <summary>
            Смещение, необходимое для выборки определенного подмножества записей.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallGetParams.Count">
            <summary>
            Количество записей, которое необходимо получить (но не более 100).
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallGetParams.Filter">
            <summary>
            Определяет, какие типы записей на стене необходимо получить. Возможны следующие
            значения параметра: Если параметр
            не задан, то считается, что он равен all.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallGetParams.Extended">
            <summary>
            <c> true </c> — будут возвращены три массива wall, profiles и groups. По
            умолчанию дополнительные поля не
            возвращаются.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallGetParams.Fields">
            <summary>
            Список дополнительных полей для профилей и групп, которые необходимо вернуть.
            См. описание полей объекта user и
            описание полей объекта group. Обратите внимание, этот параметр учитывается
            только при extended=1.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallGetParams.CaptchaSid">
            <summary>
            Идентификатор капчи
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallGetParams.CaptchaKey">
            <summary>
            Текст капчи, который ввел пользователь
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.WallGetParams.ToVkParameters(VkNet.Model.RequestParams.WallGetParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.WallPostParams">
            <summary>
            Параметры метода wall.post
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallPostParams.OwnerId">
            <summary>
            Идентификатор пользователя или сообщества, на стене которого должна быть
            опубликована запись. Обратите внимание,
            идентификатор сообщества в параметре owner_id необходимо указывать со знаком
            "-" — например, owner_id=-1
            соответствует идентификатору сообщества ВКонтакте API (club1)  целое число, по
            умолчанию идентификатор текущего
            пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallPostParams.FriendsOnly">
            <summary>
            1 — запись будет доступна только друзьям, 0 — всем пользователям. По умолчанию
            публикуемые записи доступны всем
            пользователям. флаг, может принимать значения 1 или 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallPostParams.FromGroup">
            <summary>
            Данный параметр учитывается, если owner_id &lt; 0 (запись публикуется на стене
            группы). 1 — запись будет
            опубликована от имени группы, 0 — запись будет опубликована от имени
            пользователя (по умолчанию). флаг, может
            принимать значения 1 или 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallPostParams.Message">
            <summary>
            Текст сообщения (является обязательным, если не задан параметр attachments)
            строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallPostParams.Attachments">
            <summary>
            Список объектов, приложенных к записи и разделённых символом ",". Поле
            attachments представляется в формате:
            &lt;type&gt;&lt;owner_id&gt;_&lt;media_id&gt;,&lt;type&gt;&lt;owner_id&gt;_&lt;
            media_id&gt;
            &lt;type&gt; — тип медиа-приложения:
            photo — фотография;
            video — видеозапись ;
            audio — аудиозапись;
            doc — документ;
            page — wiki-страница;
            note — заметка;
            poll — опрос.
            album — альбом.
            &lt;owner_id&gt; — идентификатор владельца медиа-приложения (обратите внимание,
            если объект находится в сообществе,
            этот параметр должен быть отрицательным).
            &lt;media_id&gt; — идентификатор медиа-приложения.
            Например:
            photo100172_166443618,photo66748_265827614
            Также в поле attachments может быть указана ссылка на внешнюю страницу, которую
            Вы хотите разместить в записи,
            например:
            photo66748_265827614,http://habrahabr.ru
            При попытке приложить больше одной ссылки будет возвращена ошибка.
            Параметр является обязательным, если не задан параметр message. список строк,
            разделенных через запятую.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallPostParams.Services">
            <summary>
            Список сервисов или сайтов, на которые необходимо экспортировать запись, в
            случае если пользователь настроил
            соответствующую опцию. Например, twitter, facebook. строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallPostParams.Signed">
            <summary>
            1 — у записи, размещенной от имени сообщества, будет добавлена подпись (имя
            пользователя, разместившего запись), 0
            — подписи добавлено не будет. Параметр учитывается только при публикации на
            стене сообщества и указании параметра
            from_group. По умолчанию подпись не добавляется. флаг, может принимать значения
            1 или 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallPostParams.PublishDate">
            <summary>
            Дата публикации записи в формате unixtime. Если параметр указан, публикация
            записи будет отложена до указанного
            времени. положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallPostParams.Lat">
            <summary>
            Географическая широта отметки, заданная в градусах (от -90 до 90). дробное
            число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallPostParams.Long">
            <summary>
            Географическая долгота отметки, заданная в градусах (от -180 до 180). дробное
            число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallPostParams.PlaceId">
            <summary>
            Идентификатор места, в котором отмечен пользователь. положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallPostParams.PostId">
            <summary>
            Идентификатор записи, которую необходимо опубликовать. Данный параметр
            используется для публикации отложенных
            записей и предложенных новостей. положительное число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallPostParams.CaptchaSid">
            <summary>
            Идентификатор капчи
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallPostParams.CaptchaKey">
            <summary>
            Текст капчи, который ввел пользователь
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallPostParams.Guid">
            <summary>
            уникальный идентификатор, предназначенный для предотвращения повторной отправки
            одинаковой записи.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallPostParams.MarkAsAds">
            <summary>
            1 — у записи, размещенной от имени сообщества, будет добавлена метка "это
            реклама",
            0 — метки добавлено не будет.
            В сутки может быть опубликовано не более пяти рекламных записей, из которых не
            более трёх — вне Биржи ВКонтакте.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallPostParams.CloseComments">
            <summary>
            Включать закртыте комментарии
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.WallPostParams.ToVkParameters(VkNet.Model.RequestParams.WallPostParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.RequestParams.WallSearchParams">
            <summary>
            Параметры метода wall.search
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallSearchParams.OwnerId">
            <summary>
            Идентификатор пользователя или сообщества. Обратите внимание, идентификатор
            сообщества в параметре owner_id
            необходимо указывать со знаком "-" — например, owner_id=-1 соответствует
            идентификатору сообщества ВКонтакте API
            (club1)  целое число.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallSearchParams.Domain">
            <summary>
            Короткий адрес пользователя или сообщества. строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallSearchParams.Query">
            <summary>
            Поисковой запрос. строка.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallSearchParams.OwnersOnly">
            <summary>
            1 — возвращать только записи от имени владельца стены. флаг, может принимать
            значения 1 или 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallSearchParams.Count">
            <summary>
            Количество записей, которые необходимо вернуть. положительное число, по
            умолчанию 20, максимальное значение 100.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallSearchParams.Offset">
            <summary>
            Смещение. положительное число, по умолчанию 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallSearchParams.Extended">
            <summary>
            Возвращать ли расширенную информацию о записях. флаг, может принимать значения
            1 или 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.RequestParams.WallSearchParams.Fields">
            <summary>
            Список дополнительных полей для групп, которые необходимо вернуть. Возможные
            значения: city, country, place,
            description, wiki_page, members_count, counters, start_date, finish_date,
            can_post, can_see_all_posts, activity,
            status, contacts, links, fixed_post, verified, site, can_create_topic.
            Обратите внимание, этот параметр учитывается только при extended=1. список
            строк, разделенных через запятую.
            </summary>
        </member>
        <member name="M:VkNet.Model.RequestParams.WallSearchParams.ToVkParameters(VkNet.Model.RequestParams.WallSearchParams)">
            <summary>
            Привести к типу VkParameters.
            </summary>
            <param name="p"> Параметры. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.School">
            <summary>
            Школа, в которой учился пользователь.
            См. описание http://vk.com/dev/fields
            </summary>
        </member>
        <member name="P:VkNet.Model.School.Id">
            <summary>
            Идентификатор школы.
            </summary>
        </member>
        <member name="P:VkNet.Model.School.Country">
            <summary>
            Идентификатор страны, в которой расположена школа.
            </summary>
        </member>
        <member name="P:VkNet.Model.School.City">
            <summary>
            Идентификатор города, в котором расположена школа.
            </summary>
        </member>
        <member name="P:VkNet.Model.School.Name">
            <summary>
            Наименование школы.
            </summary>
        </member>
        <member name="P:VkNet.Model.School.YearFrom">
            <summary>
            Год начала обучения.
            </summary>
        </member>
        <member name="P:VkNet.Model.School.YearTo">
            <summary>
            Год окончания обучения.
            </summary>
        </member>
        <member name="P:VkNet.Model.School.YearGraduated">
            <summary>
            Год выпуска.
            </summary>
        </member>
        <member name="P:VkNet.Model.School.Class">
            <summary>
            Буква класса.
            </summary>
        </member>
        <member name="P:VkNet.Model.School.Speciality">
            <summary>
            Специализация класса.
            </summary>
        </member>
        <member name="P:VkNet.Model.School.Type">
            <summary>
            Идентификатор типа школы.
            </summary>
        </member>
        <member name="P:VkNet.Model.School.TypeStr">
            <summary>
            Название типа школы.
            </summary>
        </member>
        <member name="M:VkNet.Model.School.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.SchoolClass">
            <summary>
            ����� � �����
            </summary>
        </member>
        <member name="P:VkNet.Model.SchoolClass.Class">
            <summary>
            ����� �������������, ������� ����������� ������.
            </summary>
        </member>
        <member name="P:VkNet.Model.SchoolClass.Text">
            <summary>
            ������� ����������� �� ������ �������� ������������.
            </summary>
        </member>
        <member name="M:VkNet.Model.SchoolClass.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            ��������� �� json.
            </summary>
            <param name="response"> ����� �������. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.SearchConversationsResult">
            <summary>
            Результат запроса messages.searchConversations
            </summary>
        </member>
        <member name="P:VkNet.Model.SearchConversationsResult.Count">
            <summary>
            Число результатов
            </summary>
        </member>
        <member name="P:VkNet.Model.SearchConversationsResult.Items">
            <summary>
            Массив объектов диалогов
            </summary>
        </member>
        <member name="P:VkNet.Model.SearchConversationsResult.Profiles">
            <summary>
            Массив объектов пользователей.
            </summary>
        </member>
        <member name="T:VkNet.Model.SearchDialogsResponse">
            <summary>
            Ответ при поиске диалогов по строке поиска.
            См. описание http://vk.com/dev/messages.searchDialogs
            </summary>
        </member>
        <member name="P:VkNet.Model.SearchDialogsResponse.Users">
            <summary>
            Список найденных пользователей.
            </summary>
        </member>
        <member name="P:VkNet.Model.SearchDialogsResponse.Chats">
            <summary>
            Список найденных бесед.
            </summary>
        </member>
        <member name="P:VkNet.Model.SearchDialogsResponse.Groups">
            <summary>
            Список найденных сообществ.
            </summary>
        </member>
        <member name="M:VkNet.Model.SearchDialogsResponse.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.SearchGroup">
            <summary>
            данные о сообществе.
            </summary>
        </member>
        <member name="P:VkNet.Model.SearchGroup.Id">
            <summary>
            идентификатор сообщества
            </summary>
        </member>
        <member name="P:VkNet.Model.SearchGroup.Name">
            <summary>
            название сообщества
            </summary>
        </member>
        <member name="P:VkNet.Model.SearchGroup.ScreenName">
            <summary>
            короткий адрес
            </summary>
        </member>
        <member name="P:VkNet.Model.SearchGroup.IsClosed">
            <summary>
            информация о том, является ли группа/встреча закрытой (0 — открытая, 1 —
            закрытая, 2 — частная)
            </summary>
        </member>
        <member name="P:VkNet.Model.SearchGroup.IsAdmin">
            <summary>
            информация о том, является ли текущий пользователь администратором сообщества
            (1 — является, 0 — не является);
            </summary>
        </member>
        <member name="P:VkNet.Model.SearchGroup.IsMember">
            <summary>
            информация о том, является ли текущий пользователь участником сообщества (1 —
            является, 0 — не является)
            </summary>
        </member>
        <member name="P:VkNet.Model.SearchGroup.Type">
            <summary>
            тип сообщества
            </summary>
        </member>
        <member name="P:VkNet.Model.SearchGroup.Photo">
            <summary>
            URL квадратной фотографии сообщества с размером 50х50px
            </summary>
        </member>
        <member name="P:VkNet.Model.SearchGroup.Photo50">
            <summary>
            URL квадратной фотографии сообщества с размером 50х50px
            </summary>
        </member>
        <member name="P:VkNet.Model.SearchGroup.PhotoMedium">
            <summary>
            URL квадратной фотографии сообщества с размером 100х100px
            </summary>
        </member>
        <member name="P:VkNet.Model.SearchGroup.Photo100">
            <summary>
            URL квадратной фотографии сообщества с размером 100х100px
            </summary>
        </member>
        <member name="P:VkNet.Model.SearchGroup.PhotoBig">
            <summary>
            URL фотографии сообщества в максимальном доступном размере.
            </summary>
        </member>
        <member name="P:VkNet.Model.SearchGroup.Photo200">
            <summary>
            URL фотографии сообщества в максимальном доступном размере.
            </summary>
        </member>
        <member name="T:VkNet.Model.SearchHintsItem">
            <summary>
            </summary>
        </member>
        <member name="P:VkNet.Model.SearchHintsItem.Type">
            <summary>
            тип объекта
            </summary>
        </member>
        <member name="P:VkNet.Model.SearchHintsItem.Group">
            <summary>
            данные о сообществе.
            </summary>
        </member>
        <member name="P:VkNet.Model.SearchHintsItem.Profile">
            <summary>
            данные о профиле.
            </summary>
        </member>
        <member name="P:VkNet.Model.SearchHintsItem.Section">
            <summary>
            тип объекта
            </summary>
        </member>
        <member name="P:VkNet.Model.SearchHintsItem.Description">
            <summary>
            описание объекта (для сообществ — тип и число участников, например, Group,
            269,136 members,
            для профилей друзей или пользователями, которые не являются возможными друзьями
            — название университета или город,
            для профиля текущего пользователя — That's you, для профилей возможных друзей —
            N mutual friends).
            </summary>
        </member>
        <member name="P:VkNet.Model.SearchHintsItem.Global">
            <summary>
            поле возвращается, если объект был найден в глобальном поиске, всегда содержит
            1.
            </summary>
        </member>
        <member name="T:VkNet.Model.SearchProfile">
            <summary>
            данные о профиле.
            </summary>
        </member>
        <member name="P:VkNet.Model.SearchProfile.Id">
            <summary>
            идентификатор пользователя
            </summary>
        </member>
        <member name="P:VkNet.Model.SearchProfile.FirstName">
            <summary>
            имя пользователя;
            </summary>
        </member>
        <member name="P:VkNet.Model.SearchProfile.LastName">
            <summary>
            фамилия пользователя
            </summary>
        </member>
        <member name="T:VkNet.Model.SearchResult">
            <summary>
            Search Result
            </summary>
        </member>
        <member name="T:VkNet.Model.SecureLevel">
            <summary>
            API Level object.
            </summary>
        </member>
        <member name="P:VkNet.Model.SecureLevel.LevelCode">
            <summary>
            Level
            </summary>
        </member>
        <member name="P:VkNet.Model.SecureLevel.Uid">
            <summary>
            User ID
            </summary>
        </member>
        <member name="T:VkNet.Model.SexAge">
            <summary>
            </summary>
        </member>
        <member name="P:VkNet.Model.SexAge.AgeRange">
            <summary>
            обозначение возраста
            </summary>
        </member>
        <member name="P:VkNet.Model.SexAge.Female">
            <summary>
            число переходов пользователей женского пола
            </summary>
        </member>
        <member name="P:VkNet.Model.SexAge.Male">
            <summary>
            число переходов пользователей мужского пола
            </summary>
        </member>
        <member name="T:VkNet.Model.ShortLink">
            <summary>
            URL, сокращенный с помощью vk.cc.
            </summary>
        </member>
        <member name="P:VkNet.Model.ShortLink.Timestamp">
            <summary>
            Время создания ссылки в Unixtime
            </summary>
        </member>
        <member name="P:VkNet.Model.ShortLink.ShortUrl">
            <summary>
            Сокращенный URL.
            </summary>
        </member>
        <member name="P:VkNet.Model.ShortLink.Url">
            <summary>
            Оригинальный URL.
            </summary>
        </member>
        <member name="P:VkNet.Model.ShortLink.Key">
            <summary>
            Содержательная часть ссылки (после "vk.cc");
            </summary>
        </member>
        <member name="P:VkNet.Model.ShortLink.AccessKey">
            <summary>
            Ключ для доступа к приватной статистике ссылки;
            </summary>
        </member>
        <member name="P:VkNet.Model.ShortLink.Views">
            <summary>
            Число переходов
            </summary>
        </member>
        <member name="M:VkNet.Model.ShortLink.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.SmsHistoryItem">
            <summary>
            Элемент истории смс
            </summary>
        </member>
        <member name="P:VkNet.Model.SmsHistoryItem.Id">
            <summary>
            Идентификатор
            </summary>
        </member>
        <member name="P:VkNet.Model.SmsHistoryItem.AppId">
            <summary>
            Идентификатор приложения
            </summary>
        </member>
        <member name="P:VkNet.Model.SmsHistoryItem.UserId">
            <summary>
            Идентификатор пользователя
            </summary>
        </member>
        <member name="P:VkNet.Model.SmsHistoryItem.Date">
            <summary>
            Дата
            </summary>
        </member>
        <member name="P:VkNet.Model.SmsHistoryItem.Message">
            <summary>
            Сообщение
            </summary>
        </member>
        <member name="T:VkNet.Model.SmsNotification">
            <summary>
            API SmsNotification object.
            </summary>
        </member>
        <member name="P:VkNet.Model.SmsNotification.UserId">
            <summary>
            User ID
            </summary>
        </member>
        <member name="P:VkNet.Model.SmsNotification.Date">
            <summary>
            Date when message has been sent in Unixtime
            </summary>
        </member>
        <member name="P:VkNet.Model.SmsNotification.AppId">
            <summary>
            Application ID
            </summary>
        </member>
        <member name="P:VkNet.Model.SmsNotification.Id">
            <summary>
            Notification ID
            </summary>
        </member>
        <member name="P:VkNet.Model.SmsNotification.Message">
            <summary>
            Messsage text
            </summary>
        </member>
        <member name="T:VkNet.Model.StandInLife">
            <summary>
            Жизненная позиция (Personal).
            Данная информация не документирована в официальном API ВКонтакте и
            восстановлена по ответам.
            </summary>
        </member>
        <member name="P:VkNet.Model.StandInLife.Political">
            <summary>
            Политические предпочтения пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.StandInLife.Languages">
            <summary>
            Языки, на которых говорит пользователь.
            </summary>
        </member>
        <member name="P:VkNet.Model.StandInLife.Religion">
            <summary>
            Мировоззрение пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.StandInLife.InspiredBy">
            <summary>
            Источники вдохновения пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.StandInLife.PeopleMain">
            <summary>
            Главное в людях для пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.StandInLife.LifeMain">
            <summary>
            Главное в жизни для пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.StandInLife.Smoking">
            <summary>
            Отношение к курению.
            </summary>
        </member>
        <member name="P:VkNet.Model.StandInLife.Alcohol">
            <summary>
            Отношение к алкоголю.
            </summary>
        </member>
        <member name="M:VkNet.Model.StandInLife.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.Start">
            <summary>
            При успешном старте рекламной акции
            </summary>
        </member>
        <member name="P:VkNet.Model.Start.VkSid">
            <summary>
            Сессия рекламной акции.
            </summary>
        </member>
        <member name="P:VkNet.Model.Start.TestMode">
            <summary>
            Режим транзакции (1 — тестовый, 0 — реальный);
            </summary>
        </member>
        <member name="T:VkNet.Model.StatsGetParams">
            <summary>
            Параметры метода Stats.Get
            </summary>
        </member>
        <member name="P:VkNet.Model.StatsGetParams.GroupId">
            <summary>
            Идентификатор сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.StatsGetParams.AppId">
            <summary>
            Идентификатор приложения.
            </summary>
        </member>
        <member name="P:VkNet.Model.StatsGetParams.TimestampFrom">
            <summary>
            Начало периода статистики в Unixtime.
            </summary>
            <remarks>
            Положительное число, доступен начиная с версии 5.86
            </remarks>
        </member>
        <member name="P:VkNet.Model.StatsGetParams.TimestampTo">
            <summary>
            Окончание периода статистики в Unixtime.
            </summary>
            <remarks>
            Положительное число, доступен начиная с версии 5.86
            </remarks>
        </member>
        <member name="P:VkNet.Model.StatsGetParams.Interval">
            <summary>
            Временные интервалы.
            </summary>
        </member>
        <member name="P:VkNet.Model.StatsGetParams.IntervalsCount">
            <summary>
            Количество интервалов времени.
            </summary>
        </member>
        <member name="P:VkNet.Model.StatsGetParams.Filters">
             <summary>
            
             </summary>
        </member>
        <member name="P:VkNet.Model.StatsGetParams.StatsGroups">
            <summary>
            Фильтр для получения данных по конкретному блоку статистики сообщества.
            </summary>
        </member>
        <member name="P:VkNet.Model.StatsGetParams.Extended">
            <summary>
            1 — возвращать дополнительно агрегированные данные в результатах.
            </summary>
        </member>
        <member name="P:VkNet.Model.StatsGetParams.DateFrom">
            <summary>
            Начальная дата выводимой статистики в формате YYYY-MM-DD.
            </summary>
        </member>
        <member name="P:VkNet.Model.StatsGetParams.DateTo">
            <summary>
            Конечная дата выводимой статистики в формате YYYY-MM-DD.
            </summary>
        </member>
        <member name="T:VkNet.Model.StatsPeriod">
            <summary>
            Статистика сообщества или приложения.
            </summary>
        </member>
        <member name="P:VkNet.Model.StatsPeriod.PeriodFrom">
            <summary>
            Период начала отсчёта.
            </summary>
        </member>
        <member name="P:VkNet.Model.StatsPeriod.PeriodTo">
            <summary>
            Период окончания отсчёта.
            </summary>
        </member>
        <member name="P:VkNet.Model.StatsPeriod.Visitors">
            <summary>
            Данные о посетителях и просмотрах.
            </summary>
        </member>
        <member name="P:VkNet.Model.StatsPeriod.Reach">
            <summary>
            Данные об охвате.
            </summary>
        </member>
        <member name="P:VkNet.Model.StatsPeriod.Activity">
            <summary>
            Activity
            </summary>
        </member>
        <member name="T:VkNet.Model.StatsStruct">
            <summary>
            Структура статистики
            </summary>
        </member>
        <member name="P:VkNet.Model.StatsStruct.Visitors">
            <summary>
            Аудитория для показателя value;.
            </summary>
        </member>
        <member name="P:VkNet.Model.StatsStruct.Value">
            <summary>
            Значение демографического показателя, имеет разные возможные значения для
            разных показателей.
            </summary>
        </member>
        <member name="P:VkNet.Model.StatsStruct.Code">
            <summary>
            Код страны.
            </summary>
        </member>
        <member name="P:VkNet.Model.StatsStruct.Name">
            <summary>
            Наглядное название значения указанного в value (только для городов).
            </summary>
        </member>
        <member name="M:VkNet.Model.StatsStruct.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.Status">
            <summary>
            Информация о статусе пользователя.
            См. описание http://vk.com/dev/status.get
            </summary>
        </member>
        <member name="P:VkNet.Model.Status.Text">
            <summary>
            Текст статуса.
            </summary>
        </member>
        <member name="P:VkNet.Model.Status.Audio">
            <summary>
            Информация об играющей в текущей момент у пользователя аудиокомпозиции.
            </summary>
        </member>
        <member name="M:VkNet.Model.Status.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.StorageObject">
            <summary>
            Ответ метода Storage.Get
            </summary>
        </member>
        <member name="P:VkNet.Model.StorageObject.Key">
            <summary>
            Ключ
            </summary>
        </member>
        <member name="P:VkNet.Model.StorageObject.Value">
            <summary>
            Значение
            </summary>
        </member>
        <member name="T:VkNet.Model.Store">
            <summary>
            Магазин.
            </summary>
        </member>
        <member name="P:VkNet.Model.Store.Id">
            <summary>
            Идентификатор магазина;.
            </summary>
        </member>
        <member name="P:VkNet.Model.Store.Name">
            <summary>
            Название магазина;.
            </summary>
        </member>
        <member name="M:VkNet.Model.Store.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.StoryLink">
            <summary>
            Cсылка для перехода из истории
            </summary>
        </member>
        <member name="P:VkNet.Model.StoryLink.Text">
            <summary>
            Текст ссылки
            </summary>
        </member>
        <member name="P:VkNet.Model.StoryLink.Url">
            <summary>
            URL для перехода.
            </summary>
        </member>
        <member name="M:VkNet.Model.StoryLink.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.StoryLink.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.StoryLink">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="T:VkNet.Model.StoryReplies">
            <summary>
            Информация об ответах на текущую историю.
            </summary>
        </member>
        <member name="P:VkNet.Model.StoryReplies.Count">
            <summary>
            Число ответов
            </summary>
        </member>
        <member name="P:VkNet.Model.StoryReplies.New">
            <summary>
            Число новых ответов.
            </summary>
        </member>
        <member name="M:VkNet.Model.StoryReplies.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.StoryReplies.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.StoryReplies">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="T:VkNet.Model.StoryResult`1">
            <summary>
            Ответ на методы stories
            </summary>
        </member>
        <member name="P:VkNet.Model.StoryResult`1.Count">
            <summary>
            Число подборок
            </summary>
        </member>
        <member name="P:VkNet.Model.StoryResult`1.Items">
            <summary>
            Массив данных
            </summary>
        </member>
        <member name="P:VkNet.Model.StoryResult`1.Profiles">
            <summary>
            Профили пользователей
            </summary>
        </member>
        <member name="P:VkNet.Model.StoryResult`1.Groups">
            <summary>
            Сообщества
            </summary>
        </member>
        <member name="T:VkNet.Model.StoryServerUrl">
            <summary>
            Данные для загрузки фотографии/видео в историю.
            </summary>
        </member>
        <member name="P:VkNet.Model.StoryServerUrl.UploadUrl">
            <summary>
            Адрес сервера для загрузки файла.
            </summary>
        </member>
        <member name="P:VkNet.Model.StoryServerUrl.UsersIds">
            <summary>
            Идентификаторы пользователей, которые могут видеть историю.
            </summary>
        </member>
        <member name="T:VkNet.Model.StoryStatsObject">
            <summary>
            Модель обьекта статистики истории.
            </summary>
        </member>
        <member name="P:VkNet.Model.StoryStatsObject.State">
            <summary>
            Доступность значения.
            </summary>
        </member>
        <member name="P:VkNet.Model.StoryStatsObject.Count">
            <summary>
            Значение счётчика.
            </summary>
        </member>
        <member name="T:VkNet.Model.StoryStatsResult">
            <summary>
            Объект статистики истории.
            </summary>
        </member>
        <member name="P:VkNet.Model.StoryStatsResult.Views">
            <summary>
            Просмотры.
            </summary>
        </member>
        <member name="P:VkNet.Model.StoryStatsResult.Replies">
            <summary>
            Ответы на историю.
            </summary>
        </member>
        <member name="P:VkNet.Model.StoryStatsResult.Answer">
            <summary>
            Число. (?)
            </summary>
        </member>
        <member name="P:VkNet.Model.StoryStatsResult.Shares">
            <summary>
            Расшаривания истории.
            </summary>
        </member>
        <member name="P:VkNet.Model.StoryStatsResult.Subscribers">
            <summary>
            Новые подписчики.
            </summary>
        </member>
        <member name="P:VkNet.Model.StoryStatsResult.Bans">
            <summary>
            Скрытия истории.
            </summary>
        </member>
        <member name="P:VkNet.Model.StoryStatsResult.OpenLink">
            <summary>
            Переходы по ссылке.
            </summary>
        </member>
        <member name="T:VkNet.Model.StreamingServerUrl">
            <summary>
            Данные для подключения к Streaming API.
            </summary>
        </member>
        <member name="P:VkNet.Model.StreamingServerUrl.Endpoint">
            <summary>
            Хост для подключения к серверу;
            </summary>
        </member>
        <member name="P:VkNet.Model.StreamingServerUrl.Key">
            <summary>
            Ключ доступа. Ключ бессрочный и прекращает действовать только после получения
            нового ключа.
            </summary>
        </member>
        <member name="T:VkNet.Model.StreamingSettings">
            <summary>
            Streaming Settings.
            </summary>
        </member>
        <member name="P:VkNet.Model.StreamingSettings.MonthlyLimit">
            <summary>
            Месячные ограничения
            </summary>
        </member>
        <member name="T:VkNet.Model.StreamingStats">
            <summary>
            Streaming Stats
            </summary>
        </member>
        <member name="P:VkNet.Model.StreamingStats.EventType">
            <summary>
            Тип событий
            </summary>
        </member>
        <member name="P:VkNet.Model.StreamingStats.Stats">
            <summary>
            Значения статистики
            </summary>
        </member>
        <member name="T:VkNet.Model.StreamingStatsItem">
            <summary>
            Элемент статистики для стрима
            </summary>
        </member>
        <member name="P:VkNet.Model.StreamingStatsItem.Timestamp">
            <summary>
            Время, соответствующее значению;
            </summary>
        </member>
        <member name="P:VkNet.Model.StreamingStatsItem.Value">
            <summary>
            Значение
            </summary>
        </member>
        <member name="T:VkNet.Model.Street">
            <summary>
            Улица
            </summary>
        </member>
        <member name="P:VkNet.Model.Street.Id">
            <summary>
            Идентификатор улицы
            </summary>
        </member>
        <member name="P:VkNet.Model.Street.Title">
            <summary>
            Название улицы
            </summary>
        </member>
        <member name="M:VkNet.Model.Street.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.SubscriptionItem">
            <summary>
            Элемент подписки
            </summary>
        </member>
        <member name="P:VkNet.Model.SubscriptionItem.Id">
            <summary>
            Идентификатор подписки
            </summary>
        </member>
        <member name="P:VkNet.Model.SubscriptionItem.ItemId">
            <summary>
            Идентификатор товара в приложении
            </summary>
        </member>
        <member name="P:VkNet.Model.SubscriptionItem.Status">
            <summary>
             Статус подписки. Возможные значения:
             active — подписка активна.
            </summary>
        </member>
        <member name="P:VkNet.Model.SubscriptionItem.Price">
            <summary>
            Стоимость подписки
            </summary>
        </member>
        <member name="P:VkNet.Model.SubscriptionItem.Period">
            <summary>
            Период подписки
            </summary>
        </member>
        <member name="P:VkNet.Model.SubscriptionItem.CreateTime">
            <summary>
            Дата создания в Unixtime
            </summary>
        </member>
        <member name="P:VkNet.Model.SubscriptionItem.UpdateTime">
            <summary>
            Дата обновления в Unixtime
            </summary>
        </member>
        <member name="P:VkNet.Model.SubscriptionItem.PeriodStartTime">
            <summary>
            Дата начала периода в Unixtime
            </summary>
        </member>
        <member name="P:VkNet.Model.SubscriptionItem.NextBillTime">
            <summary>
            Дата следующего платежа в Unixtime (если status = active)
            </summary>
        </member>
        <member name="P:VkNet.Model.SubscriptionItem.TrialExpireTime">
            <summary>
            Дата истечения триал-периода (если есть)
            </summary>
        </member>
        <member name="P:VkNet.Model.SubscriptionItem.PendingCancel">
            <summary>
            true, если подписка ожидает отмены.
            </summary>
        </member>
        <member name="P:VkNet.Model.SubscriptionItem.CancelReason">
            <summary>
            Причина отмены (если есть). Возможные значения:
            user_decision — по инициативе пользователя;
            app_decision — по инициативе приложения;
            payment_fail — из-за проблемы с платежом;
            unknown — причина неизвестна.
            </summary>
        </member>
        <member name="P:VkNet.Model.SubscriptionItem.TestMode">
            <summary>
            true, если используется тестовый режим.
            </summary>
        </member>
        <member name="T:VkNet.Model.Tag">
            <summary>
            ������� � �����������.
            </summary>
        </member>
        <member name="P:VkNet.Model.Tag.Id">
            <summary>
            ������������� �������.
            </summary>
        </member>
        <member name="P:VkNet.Model.Tag.TaggedName">
            <summary>
            �������� �������.
            </summary>
        </member>
        <member name="P:VkNet.Model.Tag.UserId">
            <summary>
            ������������� ������������, �������� ������������� �������.
            </summary>
        </member>
        <member name="P:VkNet.Model.Tag.PlacerId">
            <summary>
            ������������� ������������, ���������� �������.
            </summary>
        </member>
        <member name="P:VkNet.Model.Tag.Date">
            <summary>
            ���� ���������� �������.
            </summary>
        </member>
        <member name="P:VkNet.Model.Tag.IsViewed">
            <summary>
            ������ �������: true - ��������������, false - �� ��������������.
            </summary>
        </member>
        <member name="P:VkNet.Model.Tag.X">
            <summary>
            ���������� ������������� �������, �� ������� ������� ������� (������� �����
            ���� � ������ ������ ����) � ���������.
            </summary>
        </member>
        <member name="P:VkNet.Model.Tag.Y">
            <summary>
            ���������� ������������� �������, �� ������� ������� ������� (������� �����
            ���� � ������ ������ ����) � ���������.
            </summary>
        </member>
        <member name="P:VkNet.Model.Tag.X2">
            <summary>
            ���������� ������������� �������, �� ������� ������� ������� (������� �����
            ���� � ������ ������ ����) � ���������.
            </summary>
        </member>
        <member name="P:VkNet.Model.Tag.Y2">
            <summary>
            ���������� ������������� �������, �� ������� ������� ������� (������� �����
            ���� � ������ ������ ����) � ���������.
            </summary>
        </member>
        <member name="M:VkNet.Model.Tag.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            ��������� �� json.
            </summary>
            <param name="response"> ����� �������. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.Tags">
            <summary>
            Теги.
            </summary>
        </member>
        <member name="P:VkNet.Model.Tags.Count">
            <summary>
            Количество.
            </summary>
        </member>
        <member name="M:VkNet.Model.Tags.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.Timetable">
            <summary>
            Расписание
            </summary>
        </member>
        <member name="P:VkNet.Model.Timetable.Monday">
            <summary>
            Понедельник
            </summary>
        </member>
        <member name="P:VkNet.Model.Timetable.Tuesday">
            <summary>
            Вторник
            </summary>
        </member>
        <member name="P:VkNet.Model.Timetable.Wednesday">
            <summary>
            Среда
            </summary>
        </member>
        <member name="P:VkNet.Model.Timetable.Thursday">
            <summary>
            Четверг
            </summary>
        </member>
        <member name="P:VkNet.Model.Timetable.Friday">
            <summary>
            Пятница
            </summary>
        </member>
        <member name="P:VkNet.Model.Timetable.Saturday">
            <summary>
            Суббота
            </summary>
        </member>
        <member name="P:VkNet.Model.Timetable.Sunday">
            <summary>
            Воскресенье
            </summary>
        </member>
        <member name="T:VkNet.Model.TimetableItem">
            <summary>
            Элемент расписания
            </summary>
            <remarks>
            Время передается в минутах от 0 часов.
            </remarks>
        </member>
        <member name="P:VkNet.Model.TimetableItem.OpenTime">
            <summary>
            Время начала работы
            </summary>
        </member>
        <member name="P:VkNet.Model.TimetableItem.CloseTime">
            <summary>
            Время окончания работы
            </summary>
        </member>
        <member name="P:VkNet.Model.TimetableItem.BreakOpenTime">
            <summary>
            Время начала перерыва
            </summary>
        </member>
        <member name="P:VkNet.Model.TimetableItem.BreakCloseTime">
            <summary>
            Время окончания перерыва
            </summary>
        </member>
        <member name="T:VkNet.Model.TokenPermission">
            <summary>
            Настройка
            </summary>
        </member>
        <member name="P:VkNet.Model.TokenPermission.Setting">
            <summary>
            Битовая маска права доступа
            </summary>
        </member>
        <member name="P:VkNet.Model.TokenPermission.Name">
            <summary>
            Название права доступа.
            </summary>
        </member>
        <member name="T:VkNet.Model.TokenPermissionsResult">
            <summary>
            Права токена
            </summary>
        </member>
        <member name="P:VkNet.Model.TokenPermissionsResult.Mask">
            <summary>
            Битовая масска
            </summary>
        </member>
        <member name="P:VkNet.Model.TokenPermissionsResult.Permissions">
            <summary>
            Права доступа
            </summary>
        </member>
        <member name="T:VkNet.Model.Topic">
            <summary>
            Элемент коллекции тем.
            </summary>
        </member>
        <member name="P:VkNet.Model.Topic.Id">
            <summary>
            Идентификатор темы.
            </summary>
        </member>
        <member name="P:VkNet.Model.Topic.Title">
            <summary>
            Заголовок.
            </summary>
        </member>
        <member name="P:VkNet.Model.Topic.Сreated">
            <summary>
            Дата создания (в формате unixtime).
            </summary>
        </member>
        <member name="P:VkNet.Model.Topic.СreatedBy">
            <summary>
            Идентификатор пользователя, создавшего тему.
            </summary>
        </member>
        <member name="P:VkNet.Model.Topic.Updated">
            <summary>
            Дата последнего сообщения (в формате unixtime).
            </summary>
        </member>
        <member name="P:VkNet.Model.Topic.UpdatedBy">
            <summary>
            Идентификатор автора последнего комментария в обсуждении (может содержать id
            сообщества со знаком минус).
            </summary>
        </member>
        <member name="P:VkNet.Model.Topic.IsClosed">
            <summary>
            Eсли тема является закрытой (в ней нельзя оставлять сообщения).
            </summary>
        </member>
        <member name="P:VkNet.Model.Topic.IsFixed">
            <summary>
            Если тема является закрепленной (находится в начале списка тем).
            </summary>
        </member>
        <member name="P:VkNet.Model.Topic.Comments">
            <summary>
            Число сообщений в теме.
            </summary>
        </member>
        <member name="P:VkNet.Model.Topic.FirstComment">
            <summary>
            (только если в поле preview указан флаг 1) — текст первого сообщения.
            </summary>
        </member>
        <member name="P:VkNet.Model.Topic.LastComment">
            <summary>
            (только если в поле preview указан флаг 2) — текст последнего сообщения.
            </summary>
        </member>
        <member name="M:VkNet.Model.Topic.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.TopicsFeed">
            <summary>
            Новости
            </summary>
        </member>
        <member name="P:VkNet.Model.TopicsFeed.Count">
            <summary>
            Количество.
            </summary>
        </member>
        <member name="P:VkNet.Model.TopicsFeed.Items">
            <summary>
            Массив комментариев.
            </summary>
        </member>
        <member name="P:VkNet.Model.TopicsFeed.Profiles">
            <summary>
            Информация о пользователях, которые находятся в списке комментариев.
            </summary>
        </member>
        <member name="P:VkNet.Model.TopicsFeed.Groups">
            <summary>
            Информация о группах, которые находятся в списке комментариев.
            </summary>
        </member>
        <member name="T:VkNet.Model.Transaction">
            <summary>
            API Transaction object.
            </summary>
        </member>
        <member name="P:VkNet.Model.Transaction.UidFrom">
            <summary>
            From ID
            </summary>
        </member>
        <member name="P:VkNet.Model.Transaction.Date">
            <summary>
            Transaction date in Unixtime
            </summary>
        </member>
        <member name="P:VkNet.Model.Transaction.Votes">
            <summary>
            Votes number
            </summary>
        </member>
        <member name="P:VkNet.Model.Transaction.Id">
            <summary>
            Transaction ID
            </summary>
        </member>
        <member name="P:VkNet.Model.Transaction.UidTo">
            <summary>
            To ID
            </summary>
        </member>
        <member name="T:VkNet.Model.University">
            <summary>
            Высшее учебное заведение, в котором учился пользователь.
            См. описание http://vk.com/dev/fields
            </summary>
        </member>
        <member name="P:VkNet.Model.University.Id">
            <summary>
            Идентификатор университета.
            </summary>
        </member>
        <member name="P:VkNet.Model.University.Country">
            <summary>
            Идентификатор страны, в которой расположен университет.
            </summary>
        </member>
        <member name="P:VkNet.Model.University.City">
            <summary>
            Идентификатор города, в котором расположен университет.
            </summary>
        </member>
        <member name="P:VkNet.Model.University.Name">
            <summary>
            Наименование университета.
            </summary>
        </member>
        <member name="P:VkNet.Model.University.Faculty">
            <summary>
            Идентификатор факультета.
            </summary>
        </member>
        <member name="P:VkNet.Model.University.FacultyName">
            <summary>
            Название факультета.
            </summary>
        </member>
        <member name="P:VkNet.Model.University.Chair">
            <summary>
            Идентификатор кафедры.
            </summary>
        </member>
        <member name="P:VkNet.Model.University.ChairName">
            <summary>
            Наименование кафедры.
            </summary>
        </member>
        <member name="P:VkNet.Model.University.Graduation">
            <summary>
            Год окончания обучения.
            </summary>
        </member>
        <member name="M:VkNet.Model.University.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="P:VkNet.Model.University.EducationForm">
            <summary>
            Форма обучения.
            </summary>
        </member>
        <member name="P:VkNet.Model.University.EducationStatus">
            <summary>
            Статус пользователя в университете.
            </summary>
        </member>
        <member name="T:VkNet.Model.UploadServerInfo">
            <summary>
            Адрес сервера для загрузки фотографий
            </summary>
        </member>
        <member name="P:VkNet.Model.UploadServerInfo.UploadUrl">
            <summary>
            Адрес для загрузки фотографий
            </summary>
        </member>
        <member name="P:VkNet.Model.UploadServerInfo.AlbumId">
            <summary>
            Идентификатор альбома, в который будет загружена фотография
            </summary>
        </member>
        <member name="P:VkNet.Model.UploadServerInfo.UserId">
            <summary>
            Идентификатор пользователя, от чьего имени будет загружено фото
            </summary>
        </member>
        <member name="M:VkNet.Model.UploadServerInfo.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.User">
            <summary>
            Информация о пользователя.
            См. описание https://vk.com/dev/objects/user
            </summary>
        </member>
        <member name="M:VkNet.Model.User.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            </summary>
            <param name="response"> </param>
            <returns> </returns>
        </member>
        <member name="P:VkNet.Model.User.Id">
            <summary>
            Идентификатор пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.FirstName">
            <summary>
            Имя пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.LastName">
            <summary>
            Фамилия пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Hidden">
            <summary>
            Возвращается при вызове без access_token, если пользователь установил настройку
            «Кому в интернете видна моя
            страница» — «Только пользователям ВКонтакте».
            Обратите внимание, в этом случае дополнительные поля fields не возвращаются.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.IsClosed">
            <summary>
            Скрыт ли профиль пользователя настройками приватности.
            </summary>
            <remarks>
            Начиная с версии 5.89 обязательное поле
            </remarks>
        </member>
        <member name="P:VkNet.Model.User.CanAccessClosed">
            <summary>
            Может ли текущий пользователь видеть профиль при is_closed = 1 (например, если он есть в друзьях).
            </summary>
            <remarks>
            Начиная с версии 5.89 обязательное поле
            </remarks>
        </member>
        <member name="P:VkNet.Model.User.Deactivated">
            <summary>
            Причина блокирования аккаунта
            </summary>
        </member>
        <member name="P:VkNet.Model.User.About">
            <summary>
            Информация пользователя о себе.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Activities">
            <summary>
            Чем занимается пользователь.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.BirthDate">
            <summary>
            Дата рождения пользователя. Возвращается в формате DD.MM.YYYY или DD.MM (если
            год рождения скрыт).
            Если дата рождения скрыта целиком, поле отсутствует в ответе.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Blacklisted">
            <summary>
            Возвращается 1, если текущий пользователь находится в черном списке у
            запрашиваемого пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.BlacklistedByMe">
            <summary>
            Возвращается 1, если запрашиваемый пользователь находится в черном списке у
            текущего пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Books">
            <summary>
            Любимые книги пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.CanPost">
            <summary>
            Признак разрешено ли оставлять записи на стене у пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.CanSeeAllPosts">
            <summary>
            Признак разрешено ли видеть чужие записи на стене пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.CanSeeAudio">
            <summary>
            Признак разрешено ли видеть чужие аудиозаписи на стене пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.CanSendFriendRequest">
            <summary>
            Информация о том, будет ли отправлено уведомление пользователю о заявке в
            друзья.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.CanWritePrivateMessage">
            <summary>
            Признак разрешено ли написание личных сообщений данному пользователю.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Career">
            <summary>
            Информация о карьере пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.City">
            <summary>
            Идентификатор города, указанного на странице пользователя в разделе «Контакты».
            Если город не указан, или основная информация страницы скрыта настройками
            приватности, то 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.CommonCount">
            <summary>
            Общее количество друзей с текущим пользователем.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Connections">
            <summary>
            Данные о подключенных сервисах пользователя, таких как: skype, facebook,
            twitter, instagram.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Contacts">
            <summary>
            Информация о телефонных номерах пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Counters">
            <summary>
            Различные счетчики пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Country">
            <summary>
            Идентификатор страны, указанной на странице пользователя в разделе «Контакты».
            Если страна не указана или основная информация страницы скрыта настройками
            приватности, то 0.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.CropPhoto">
            <summary>
            Возвращает данные о точках, по которым вырезаны профильная и миниатюрная
            фотографии пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Domain">
            <summary>
            Короткий адрес страницы пользователя. Возвращается строка, содержащая короткий
            адрес страницы (возвращается только
            сам поддомен, например, andrew). Если он не назначен, то "id"+uid, например,
            id35828305.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Education">
            <summary>
            Сведения об образовании пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Exports">
            <summary>
            Внешние сервисы, в которые настроен экспорт из ВК.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.FirstNameNom">
            <summary>
            Имя в именительном падеже
            </summary>
        </member>
        <member name="P:VkNet.Model.User.FirstNameGen">
            <summary>
            Имя в родительном падеже
            </summary>
        </member>
        <member name="P:VkNet.Model.User.FirstNameDat">
            <summary>
            Имя в дательном падеже
            </summary>
        </member>
        <member name="P:VkNet.Model.User.FirstNameAcc">
            <summary>
            Имя в винительном падеже
            </summary>
        </member>
        <member name="P:VkNet.Model.User.FirstNameIns">
            <summary>
            Имя в творительном падеже
            </summary>
        </member>
        <member name="P:VkNet.Model.User.FirstNameAbl">
            <summary>
            Имя в предложном падеже
            </summary>
        </member>
        <member name="P:VkNet.Model.User.FollowersCount">
            <summary>
            Количество подписчиков пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.FriendStatus">
            <summary>
            Состояние дружбы с пользователями.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Games">
            <summary>
            Любимые игры пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.HasMobile">
            <summary>
            Информация о том, известен ли номер мобильного телефона пользователя (true -
            известен, false - не известен).
            </summary>
        </member>
        <member name="P:VkNet.Model.User.HasPhoto">
            <summary>
            Возвращается 1, если текущий пользователь установил фотографию для профиля.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.HomeTown">
            <summary>
            Родной город пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Interests">
            <summary>
            Интересы пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.IsFavorite">
            <summary>
            Возвращается 1, если пользователь находится в закладках у текущего
            пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.IsFriend">
            <summary>
            1 – пользователь друг, 2 – пользователь не в друзьях.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.IsHiddenFromFeed">
            <summary>
            Возвращается 1, если пользователь скрыт в новостях у текущего пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.LastNameNom">
            <summary>
            Фамилия в именительном падеже
            </summary>
        </member>
        <member name="P:VkNet.Model.User.LastNameGen">
            <summary>
            Фамилия в родительном падеже
            </summary>
        </member>
        <member name="P:VkNet.Model.User.LastNameDat">
            <summary>
            Фамилия в дательном падеже
            </summary>
        </member>
        <member name="P:VkNet.Model.User.LastNameAcc">
            <summary>
            Фамилия в винительном падеже
            </summary>
        </member>
        <member name="P:VkNet.Model.User.LastNameIns">
            <summary>
            Фамилия в творительном падеже
            </summary>
        </member>
        <member name="P:VkNet.Model.User.LastNameAbl">
            <summary>
            Фамилия в предложном падеже
            </summary>
        </member>
        <member name="P:VkNet.Model.User.LastSeen">
            <summary>
            Время последнего посещения сайта.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.FriendLists">
            <summary>
            Идентификаторы списков друзей, в которых состоит пользователь. Поле доступно
            только для метода
            FriendsCategory.Get. Получить информацию об идентификаторах и названиях списков
            друзей можно с
            помощью метода FriendsCategory.GetLists. Если пользователь не состоит ни в
            одном списке друзей, данное
            поле принимает значение null.
            </summary>
            <remarks>
            поле lists
            </remarks>
        </member>
        <member name="P:VkNet.Model.User.MaidenName">
            <summary>
            Девичья фамилия (только для женского пола)
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Military">
            <summary>
            Информация о военной службе пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Movies">
            <summary>
            Любимые фильмы пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Music">
            <summary>
            Любимая музыка пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Nickname">
            <summary>
            Прозвище (ник) пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Occupation">
            <summary>
            Информация о текущем роде занятия пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Online">
            <summary>
            Признак находится ли пользователь сейчас на сайте.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.StandInLife">
            <summary>
            Жизненная позиция.
            </summary>
            <remarks>
            поле <c> personal </c>
            </remarks>
        </member>
        <member name="P:VkNet.Model.User.Photo50">
            <summary>
            url квадратной фотографии пользователя, имеющей ширину 50 пикселей. В случае
            отсутствия у пользователя фотографии
            возвращается http://vk.com/images/camera_c.gif
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Photo100">
            <summary>
            url квадратной фотографии пользователя, имеющей ширину 100 пикселей. В случае
            отсутствия у пользователя фотографии
            возвращается http://vk.com/images/camera_b.gif.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Photo200Orig">
            <summary>
            url фотографии пользователя, имеющей ширину 200 пикселей. В случае отсутствия у
            пользователя фотографии
            возвращается http://vk.com/images/camera_a.gif.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Photo200">
            <summary>
            url квадратной фотографии пользователя, имеющей ширину 200 пикселей. Если
            фотография была загружена давно,
            изображения с такими размерами может не быть, в этом случае ответ не будет
            содержать этого поля.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Photo400Orig">
            <summary>
            url фотографии пользователя, имеющей ширину 400 пикселей.
            Если у пользователя отсутствует фотография такого размера, ответ не будет
            содержать этого поля.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.PhotoId">
            <summary>
            id главной фотографии профиля пользователя в формате user_id+photo_id,
            например, 6492_192164258.
            В некоторых случаях (если фотография была установлена очень давно) это поле не
            возвращается.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.PhotoMax">
            <summary>
            url квадратной фотографии пользователя с максимальной шириной.
            Может быть возвращена фотография, имеющая ширину как 200, так и 100 пикселей.
            В случае отсутствия у пользователя фотографии возвращается
            http://vk.com/images/camera_b.gif.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.PhotoMaxOrig">
            <summary>
            url фотографии пользователя максимального размера.
            Может быть возвращена фотография, имеющая ширину как 400, так и 200 пикселей.
            В случае отсутствия у пользователя фотографии возвращается
            http://vk.com/images/camera_a.gif.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Quotes">
            <summary>
            Избранные пользователем цитаты.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Relatives">
            <summary>
            Родственники пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Relation">
            <summary>
            Семейное положение.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Schools">
            <summary>
            Школы, в которых учился пользователь.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.ScreenName">
            <summary>
            Короткое имя (поддомен) страницы пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Sex">
            <summary>
            Пол пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Site">
            <summary>
            Возвращает указанный в профиле сайт пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Status">
            <summary>
            Строка со статусом пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.StatusAudio">
            <summary>
            Объект аудиозаписи, установленной в статус (если аудиозапись транслируется в текущей момент).
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Timezone">
            <summary>
            Часовой пояс пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Trending">
            <summary>
            Возвращается 1, если запрашиваемый пользователь находится в черном списке у
            текущего пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Tv">
            <summary>
            Любимые телешоу пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Universities">
            <summary>
            Список высших учебных заведений, в которых учился пользователь.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Verified">
            <summary>
            Возвращается 1, если страница пользователя верифицирована, 0 — если не
            верифицирована.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.WallComments">
            <summary>
            Доступно ли комментирование стены (1 — доступно, 0 — недоступно).
            </summary>
        </member>
        <member name="P:VkNet.Model.User.PhotoPreviews">
            <summary>
            Информация о ссылках на предпросмотр фотографий пользователя.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.MobilePhone">
            <summary>
            Номер мобильного телефона (если нет записи или скрыт, то null).
            </summary>
        </member>
        <member name="P:VkNet.Model.User.HomePhone">
            <summary>
            Номер домашнего телефона (если нет записи или скрыт, то null).
            </summary>
        </member>
        <member name="P:VkNet.Model.User.BanInfo">
            <summary>
            Информация о блокировке пользователя
            </summary>
        </member>
        <member name="P:VkNet.Model.User.IsDeactivated">
            <summary>
            Является ли пользователь заблокированным
            </summary>
        </member>
        <member name="P:VkNet.Model.User.Language">
            <summary>
            Идентификатор языка, установленный в настройках.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.OnlineMobile">
            <summary>
            Признак использует ли пользователь мобильное приложение либо мобильную версию
            сайта.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.OnlineApp">
            <summary>
            Если пользователь зашёл через приложение, то Id приложения иначе null.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.RelationPartner">
            <summary>
            Партнер в семейных отношениях.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.InvitedBy">
            <summary>
            Идентификатор пользователя, пригласившего пользователя в беседу (для
            GetChatUsers).
            </summary>
        </member>
        <member name="P:VkNet.Model.User.BirthdayVisibility">
            <summary>
            Видимость даты рождения.
            </summary>
        </member>
        <member name="P:VkNet.Model.User.ChangeNameRequest">
            <summary>
            Информация о заявке на смену имени.
            </summary>
        </member>
        <member name="T:VkNet.Model.UserOrGroup">
            <summary>
            Расширенная информация о пользователях или сообществах.
            </summary>
        </member>
        <member name="P:VkNet.Model.UserOrGroup.TotalCount">
            <summary>
            Общее количество элементов.
            </summary>
        </member>
        <member name="P:VkNet.Model.UserOrGroup.Users">
            <summary>
            Список пользователей.
            </summary>
        </member>
        <member name="P:VkNet.Model.UserOrGroup.Groups">
            <summary>
            Список групп.
            </summary>
        </member>
        <member name="M:VkNet.Model.UserOrGroup.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
            <exception cref="T:System.Exception">
            "Типа '{0}' не существует. Пожалуйста заведите задачу на сайте проекта:
            https://github.com/vknet/vk/issues"
            </exception>
        </member>
        <member name="T:VkNet.Model.VideoAlbum">
            <summary>
            Видеоальбом.
            </summary>
            <remarks>
            Страница документации ВКонтакте http://vk.com/dev/video.getAlbums
            </remarks>
        </member>
        <member name="P:VkNet.Model.VideoAlbum.Id">
            <summary>
            Идентификатор альбома.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoAlbum.OwnerId">
            <summary>
            Идентификатор владельца альбома.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoAlbum.Title">
            <summary>
            Название альбома.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoAlbum.Count">
            <summary>
            Количество видеозаписей в альбоме.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoAlbum.Photo160">
            <summary>
            URL изображения предпросмотра альбома шириной в 160 пикселов.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoAlbum.Photo320">
            <summary>
            URL изображения предпросмотра альбома шириной в 320 пикселов.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoAlbum.Image">
            <summary>
            Список изображений обложки альбома.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoAlbum.UpdatedTime">
            <summary>
            время последнего обновления в формате unixtime
            </summary>
        </member>
        <member name="M:VkNet.Model.VideoAlbum.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="M:VkNet.Model.VideoAlbum.op_Implicit(VkNet.Utils.VkResponse)~VkNet.Model.VideoAlbum">
            <summary>
            Преобразовать из VkResponse
            </summary>
            <param name="response"> Ответ. </param>
            <returns>
            Результат преобразования.
            </returns>
        </member>
        <member name="T:VkNet.Model.VideoCatalog">
            <summary>
            Данные для отображения блока видеокаталога
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoCatalog.Items">
            <summary>
            Список элементов блока видеокаталога
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoCatalog.Id">
            <summary>
            Идентификатор блока. Возвращается строка для предопределенных блоков. Для
            других возвращается число.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoCatalog.Name">
            <summary>
            Заголовок блока.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoCatalog.Next">
            <summary>
            Параметр для получения следующей страницы результатов. Необходимо передать его
            значение в from в следующем вызове,
            чтобы получить содержимое каталога, следующее за полученным в текущем вызове.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoCatalog.View">
            <summary>
            предпочтительный способ отображения контента
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoCatalog.CanHide">
            <summary>
            Наличие возможности скрыть блок.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoCatalog.Type">
            <summary>
            Тип блока.
            </summary>
        </member>
        <member name="M:VkNet.Model.VideoCatalog.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.VideoCatalogItem">
            <summary>
            Объект, описывающий элемент видеокаталога
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoCatalogItem.Id">
            <summary>
            идентификатор элемента.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoCatalogItem.OwnerId">
            <summary>
            идентификатор владельца элемента.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoCatalogItem.Title">
            <summary>
            название элемента.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoCatalogItem.Type">
            <summary>
            тип элемента.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoCatalogItem.Description">
            <summary>
            текст описания.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoCatalogItem.Duration">
            <summary>
            длительность ролика в секундах.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoCatalogItem.Photo130">
            <summary>
            URL изображения-обложки ролика шириной 130px.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoCatalogItem.Photo320">
            <summary>
            URL изображения-обложки ролика шириной 320px.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoCatalogItem.Photo640">
            <summary>
            URL изображения-обложки ролика шириной 640px (если размер есть).
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoCatalogItem.Photo800">
            <summary>
            URL изображения-обложки ролика шириной 800px (если размер есть).
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoCatalogItem.Date">
            <summary>
            дата создания видеозаписи в формате Unixtime.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoCatalogItem.AddingDate">
            <summary>
            дата добавления видеозаписи пользователем или группой в формате Unixtime.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoCatalogItem.Views">
            <summary>
            количество просмотров видеозаписи.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoCatalogItem.Comments">
            <summary>
            количество комментариев к видеозаписи.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoCatalogItem.CanAdd">
            <summary>
            наличие возможности добавить ролик в свой список.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoCatalogItem.CanEdit">
            <summary>
            наличие возможности редактировать видео.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoCatalogItem.IsPrivate">
            <summary>
            приватность ролика (0 — нет, 1 — есть).
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoCatalogItem.Count">
            <summary>
            число видеозаписей в альбоме.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoCatalogItem.Photo160">
            <summary>
            URL изображения-обложки альбома с размером 272x150px.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoCatalogItem.UpdatedTime">
            <summary>
            время последнего обновления альбома в формате unixtime.
            </summary>
        </member>
        <member name="M:VkNet.Model.VideoCatalogItem.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            ��������� �� json.
            </summary>
            <param name="response"> ����� �������. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.VideoFiles">
            <summary>
            Видео файлы
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoFiles.Mp4_240">
            <summary>
            Uri ролика с размером 320x240px.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoFiles.Mp4_360">
            <summary>
            Uri ролика с размером 640x360px.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoFiles.Mp4_480">
            <summary>
            Uri ролика с размером 640x480px.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoFiles.Mp4_720">
            <summary>
            Uri ролика с размером 1280x720px.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoFiles.Mp4_1080">
            <summary>
            Uri ролика с размером 1920х1080px.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoFiles.External">
            <summary>
            Внешняя ссылка
            </summary>
        </member>
        <member name="M:VkNet.Model.VideoFiles.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.VideoImage">
            <summary>
            Объект, описывающий размер обложки видео.
            См. описание https://vk.com/dev/objects/video_image
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoImage.Url">
            <summary>
            URL-адрес изображения.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoImage.Width">
            <summary>
            Ширина изображения.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoImage.Height">
            <summary>
            Высота изображения.
            </summary>
        </member>
        <member name="P:VkNet.Model.VideoImage.WithPadding">
            <summary>
            <c>true</c>, если изображение имеет черные поля.
            </summary>
        </member>
        <member name="T:VkNet.Model.Views">
            <summary>
            Просмотры
            </summary>
        </member>
        <member name="P:VkNet.Model.Views.Count">
            <summary>
            Количество
            </summary>
        </member>
        <member name="T:VkNet.Model.VisitorStats">
            <summary>
            Статистика посещений
            </summary>
        </member>
        <member name="P:VkNet.Model.VisitorStats.Views">
            <summary>
            Число просмотров.
            </summary>
        </member>
        <member name="P:VkNet.Model.VisitorStats.Visitors">
            <summary>
            Число посетителей;
            </summary>
        </member>
        <member name="P:VkNet.Model.VisitorStats.MobileViews">
            <summary>
            Число просмотров с мобильных устройств.
            </summary>
        </member>
        <member name="P:VkNet.Model.VisitorStats.Sex">
            <summary>
            Статистика по полу.
            </summary>
        </member>
        <member name="P:VkNet.Model.VisitorStats.Age">
            <summary>
            Статистика по возрасту.
            </summary>
        </member>
        <member name="P:VkNet.Model.VisitorStats.SexAge">
            <summary>
            Статистика по полу и возрасту.
            </summary>
        </member>
        <member name="P:VkNet.Model.VisitorStats.Countries">
            <summary>
            Статистика по странам.
            </summary>
        </member>
        <member name="P:VkNet.Model.VisitorStats.Cities">
            <summary>
            Статистика по городам.
            </summary>
        </member>
        <member name="T:VkNet.Model.VkError">
            <summary>
            Ошибка при вызове метода exeute
            </summary>
        </member>
        <member name="P:VkNet.Model.VkError.Method">
            <summary>
            Метод в котором произошла ошибка
            </summary>
        </member>
        <member name="P:VkNet.Model.VkError.ErrorCode">
            <summary>
            Код ошибки
            </summary>
        </member>
        <member name="P:VkNet.Model.VkError.ErrorMessage">
            <summary>
            Сообщение об ошибке
            </summary>
        </member>
        <member name="P:VkNet.Model.VkError.RequestParams">
            <summary>
            Параметры запроса
            </summary>
        </member>
        <member name="P:VkNet.Model.VkError.CaptchaSid">
            <summary>
            Идентификатор капчи
            </summary>
        </member>
        <member name="P:VkNet.Model.VkError.CaptchaImg">
            <summary>
            Ссылка на изображение капчи
            </summary>
        </member>
        <member name="P:VkNet.Model.VkError.RedirectUri">
            <summary>
            Адрес который необходимо открыть в браузере для подтверждения валидации.
            </summary>
        </member>
        <member name="T:VkNet.Model.VkObject">
            <summary>
            Определяет тип объекта
            </summary>
        </member>
        <member name="P:VkNet.Model.VkObject.Id">
            <summary>
            Идентификатор объекта
            </summary>
        </member>
        <member name="P:VkNet.Model.VkObject.Type">
            <summary>
            Тип объекта
            </summary>
        </member>
        <member name="M:VkNet.Model.VkObject.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.VotesAmount">
            <summary>
            Количество голосов
            </summary>
        </member>
        <member name="P:VkNet.Model.VotesAmount.Votes">
            <summary>
            Количество голосов
            </summary>
        </member>
        <member name="P:VkNet.Model.VotesAmount.Amount">
            <summary>
            Общая сумма голосов, переведённая в валюту
            </summary>
        </member>
        <member name="P:VkNet.Model.VotesAmount.Description">
            <summary>
            Описание общей суммы с наименованием валюты
            </summary>
        </member>
        <member name="P:VkNet.Model.VotesAmount.Currency">
            <summary>
            Название валюты
            </summary>
        </member>
        <member name="T:VkNet.Model.WallGetCommentsResult">
            <summary>
            Ответ на запрос wall.getComments
            </summary>
        </member>
        <member name="P:VkNet.Model.WallGetCommentsResult.Count">
            <summary>
            Количество комментариев
            </summary>
        </member>
        <member name="P:VkNet.Model.WallGetCommentsResult.Items">
            <summary>
            Массив объектов комментариев
            </summary>
        </member>
        <member name="P:VkNet.Model.WallGetCommentsResult.Profiles">
            <summary>
            Массив пользователей
            </summary>
        </member>
        <member name="P:VkNet.Model.WallGetCommentsResult.Groups">
            <summary>
            Массив групп
            </summary>
        </member>
        <member name="P:VkNet.Model.WallGetCommentsResult.CurrentLevelCount">
            <summary>
            Массив групп
            </summary>
        </member>
        <member name="P:VkNet.Model.WallGetCommentsResult.CanPost">
            <summary>
            Массив групп
            </summary>
        </member>
        <member name="P:VkNet.Model.WallGetCommentsResult.ShowReplyButton">
            <summary>
            Массив групп
            </summary>
        </member>
        <member name="P:VkNet.Model.WallGetCommentsResult.GroupsCanPost">
            <summary>
            Массив групп
            </summary>
        </member>
        <member name="P:VkNet.Model.WallGetCommentsResult.UserLikes">
            <summary>
            Массив групп
            </summary>
        </member>
        <member name="P:VkNet.Model.WallGetCommentsResult.CanLike">
            <summary>
            Массив групп
            </summary>
        </member>
        <member name="T:VkNet.Model.WallGetObject">
            <summary>
            Результат выполнения запроса получения записей со стены
            </summary>
        </member>
        <member name="P:VkNet.Model.WallGetObject.TotalCount">
            <summary>
            Общее количество записей на стене.
            </summary>
        </member>
        <member name="P:VkNet.Model.WallGetObject.WallPosts">
            <summary>
            Посты.
            </summary>
        </member>
        <member name="P:VkNet.Model.WallGetObject.Profiles">
            <summary>
            Профили.
            </summary>
        </member>
        <member name="P:VkNet.Model.WallGetObject.Groups">
            <summary>
            Группы.
            </summary>
        </member>
        <member name="M:VkNet.Model.WallGetObject.FromJson(VkNet.Utils.VkResponse)">
            <summary>
            Разобрать из json.
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> </returns>
        </member>
        <member name="T:VkNet.Model.WidgetPage">
            <summary>
            Объект-страница для виджета
            </summary>
        </member>
        <member name="P:VkNet.Model.WidgetPage.Id">
            <summary>
            Идентификатор страницы в системе;
            </summary>
        </member>
        <member name="P:VkNet.Model.WidgetPage.Title">
            <summary>
            Заголовок страницы (берется из мета-тегов на странице или задается параметром
            pageTitle при инициализации)
            </summary>
        </member>
        <member name="P:VkNet.Model.WidgetPage.Description">
            <summary>
            Краткое описание страницы (берется из мета-тегов на странице или задается
            параметром pageDescription при
            инициализации);
            </summary>
        </member>
        <member name="P:VkNet.Model.WidgetPage.Url">
            <summary>
            Абсолютный адрес страницы;
            </summary>
        </member>
        <member name="P:VkNet.Model.WidgetPage.Likes">
            <summary>
            Объект, содержащий поле count — количество отметок «Мне нравится» к странице.
            </summary>
        </member>
        <member name="P:VkNet.Model.WidgetPage.Comments">
            <summary>
            Объект, содержащий поле count — количество комментариев к странице внутри
            виджета.
            </summary>
        </member>
        <member name="P:VkNet.Model.WidgetPage.Date">
            <summary>
            Дата первого обращения к виджетам на странице
            </summary>
        </member>
        <member name="P:VkNet.Model.WidgetPage.Photo">
            <summary>
            Объект, содержащий фотографию-миниатюру страницы (берется из мета-тегов на
            странице или задается параметром
            pageImage при инициализации)
            </summary>
        </member>
        <member name="P:VkNet.Model.WidgetPage.PageId">
            <summary>
            Внутренний идентификатор страницы в приложении/на сайте (в случае, если при
            инициализации виджетов использовался
            параметр page_id);
            </summary>
        </member>
        <member name="T:VkNet.UWP.Model.Attachments.PhotosList">
            <inheritdoc />
            <summary>
            Список фото
            </summary>
        </member>
        <member name="P:VkNet.UWP.Model.Attachments.PhotosList.Alias">
            <inheritdoc />
        </member>
        <member name="M:VkNet.UWP.Model.Attachments.PhotosList.op_Implicit(VkNet.Utils.VkResponse)~VkNet.UWP.Model.Attachments.PhotosList">
            <summary>
            Преобразование класса <see cref="T:VkNet.UWP.Model.Attachments.PhotosList" /> в <see cref="T:VkNet.Utils.VkParameters" />
            </summary>
            <param name="response"> Ответ сервера. </param>
            <returns> Результат преобразования в <see cref="T:VkNet.UWP.Model.Attachments.PhotosList" /> </returns>
        </member>
        <member name="T:VkNet.VkApiDelegate">
            <summary>
            Служит для оповещения об истечении токена
            </summary>
            <param name="sender">
            Экземпляр API у которого истекло время токена
            </param>
        </member>
        <member name="T:VkNet.VkApi">
            <inheritdoc />
            <summary>
            API для работы с ВКонтакте.
            Выступает в качестве фабрики для различных категорий API (например, для работы
            с пользователями, группами и т.п.)
            </summary>
        </member>
        <member name="F:VkNet.VkApi._ap">
            <summary>
            Параметры авторизации.
            </summary>
        </member>
        <member name="F:VkNet.VkApi._expireTimer">
            <summary>
            Таймер.
            </summary>
        </member>
        <member name="F:VkNet.VkApi._language">
            <summary>
            Сервис управления языком
            </summary>
        </member>
        <member name="F:VkNet.VkApi._logger">
            <summary>
            Логгер
            </summary>
        </member>
        <member name="F:VkNet.VkApi.RestClient">
            <summary>
            Rest Client
            </summary>
        </member>
        <member name="M:VkNet.VkApi.#ctor(Microsoft.Extensions.Logging.ILogger{VkNet.VkApi},VkNet.Utils.AntiCaptcha.ICaptchaSolver,VkNet.Abstractions.Authorization.IAuthorizationFlow)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.VkApi.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.AccessToken">
            <summary>
            Токен для доступа к методам API
            </summary>
        </member>
        <member name="P:VkNet.VkApi.VkApiVersion">
            <inheritdoc />
        </member>
        <member name="E:VkNet.VkApi.OnTokenExpires">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.Browser">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.AuthorizationFlow">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.NeedValidationHandler">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.IsAuthorized">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.Token">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.UserId">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.CaptchaSolver">
            <inheritdoc />
        </member>
        <member name="M:VkNet.VkApi.SetLanguage(VkNet.Enums.Language)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.VkApi.GetLanguage">
            <inheritdoc />
        </member>
        <member name="M:VkNet.VkApi.Authorize(VkNet.Model.IApiAuthParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.VkApi.Authorize(VkNet.Model.ApiAuthParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.VkApi.AuthorizeAsync(VkNet.Model.IApiAuthParams)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.VkApi.RefreshToken(System.Func{System.String})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.VkApi.LogOut">
            <inheritdoc />
        </member>
        <member name="M:VkNet.VkApi.RefreshTokenAsync(System.Func{System.String})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.VkApi.LogOutAsync">
            <inheritdoc />
        </member>
        <member name="M:VkNet.VkApi.Call(System.String,VkNet.Utils.VkParameters,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.VkApi.CallAsync(System.String,VkNet.Utils.VkParameters,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.VkApi.CallAsync``1(System.String,VkNet.Utils.VkParameters,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.VkApi.Call``1(System.String,VkNet.Utils.VkParameters,System.Boolean,Newtonsoft.Json.JsonConverter[])">
            <inheritdoc />
        </member>
        <member name="M:VkNet.VkApi.Invoke(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.VkApi.InvokeAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.VkApi.CallLongPoll(System.String,VkNet.Utils.VkParameters)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.VkApi.CallLongPollAsync(System.String,VkNet.Utils.VkParameters)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.VkApi.InvokeLongPoll(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.VkApi.InvokeLongPollAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="M:VkNet.VkApi.Dispose">
            <inheritdoc cref="T:System.IDisposable" />
        </member>
        <member name="M:VkNet.VkApi.Validate(System.String)">
            <inheritdoc />
        </member>
        <member name="M:VkNet.VkApi.Validate(System.String,System.String)">
            <inheritdoc cref="M:VkNet.Abstractions.IVkApi.Validate(System.String)" />
        </member>
        <member name="M:VkNet.VkApi.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
            <c> true </c> to release both managed and unmanaged resources; <c> false </c>
            to release only unmanaged resources.
            </param>
        </member>
        <member name="F:VkNet.VkApi._rateLimiter">
            <summary>
            The <see cref="T:VkNet.Abstractions.Core.IRateLimiter" />.
            </summary>
        </member>
        <member name="F:VkNet.VkApi._requestsPerSecond">
            <summary>
            Запросов в секунду.
            </summary>
        </member>
        <member name="P:VkNet.VkApi.LastInvokeTime">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.LastInvokeTimeSpan">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.RequestsPerSecond">
            <inheritdoc />
        </member>
        <member name="F:VkNet.VkApi._captchaHandler">
            <summary>
            Обработчик ошибки капчи
            </summary>
        </member>
        <member name="P:VkNet.VkApi.MaxCaptchaRecognitionCount">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.Users">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.Friends">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.Status">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.Messages">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.Groups">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.Audio">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.Database">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.Utils">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.Wall">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.Board">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.Fave">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.Video">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.Account">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.Photo">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.Docs">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.Likes">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.Pages">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.Apps">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.NewsFeed">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.Stats">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.Gifts">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.Markets">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.Auth">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.Execute">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.PollsCategory">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.Search">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.Storage">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.Ads">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.Notifications">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.Widgets">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.Leads">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.Streaming">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.Places">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.Notes">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.AppWidgets">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.Orders">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.Secure">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.Stories">
            <inheritdoc />
        </member>
        <member name="P:VkNet.VkApi.LeadForms">
            <inheritdoc />
        </member>
        <member name="M:VkNet.VkApi.CallBase(System.String,VkNet.Utils.VkParameters,System.Boolean)">
            <summary>
            Базовое обращение к vk.com
            </summary>
            <param name="methodName"> Наименование метода </param>
            <param name="parameters"> Параметры запроса </param>
            <param name="skipAuthorization"> Пропустить авторизацию </param>
            <returns> Ответ от vk.com в формате json </returns>
            <exception cref="T:VkNet.Exception.CaptchaNeededException"> Требуется ввести капчу </exception>
        </member>
        <member name="M:VkNet.VkApi.AuthorizeWithAntiCaptcha(VkNet.Model.IApiAuthParams)">
            <summary>
            Авторизация и получение токена
            </summary>
            <param name="authParams"> Параметры авторизации </param>
            <exception cref="T:VkNet.Exception.VkApiAuthorizationException"> </exception>
        </member>
        <member name="M:VkNet.VkApi.TokenAuth(System.String,System.Nullable{System.Int64},System.Int32)">
            <summary>
            Авторизация через установку токена
            </summary>
            <param name="accessToken"> Токен </param>
            <param name="userId"> Идентификатор пользователя </param>
            <param name="expireTime"> Время истечения токена </param>
            <exception cref="T:System.ArgumentNullException"> </exception>
        </member>
        <member name="M:VkNet.VkApi.SetTokenProperties(VkNet.Model.AuthorizationResult)">
            <summary>
            Sets the token properties.
            </summary>
            <param name="authorization"> The authorization. </param>
        </member>
        <member name="M:VkNet.VkApi.SetApiPropertiesAfterAuth(System.Int32,System.String,System.Nullable{System.Int64})">
            <summary>
            Установить свойства api после авторизации
            </summary>
            <param name="expireTime"> </param>
            <param name="accessToken"> </param>
            <param name="userId"> </param>
        </member>
        <member name="M:VkNet.VkApi.SetTimer(System.Int32)">
            <summary>
            Установить значение таймера
            </summary>
            <param name="expireTime"> Значение таймера </param>
        </member>
        <member name="M:VkNet.VkApi.StopTimer">
            <summary>
            Прекращает работу таймера оповещения
            </summary>
        </member>
        <member name="M:VkNet.VkApi.AlertExpires(System.Object)">
            <summary>
            Создает событие оповещения об окончании времени токена
            </summary>
            <param name="state"> </param>
        </member>
        <member name="M:VkNet.VkApi.BaseAuthorize(VkNet.Model.IApiAuthParams)">
            <summary>
            Авторизация и получение токена
            </summary>
            <param name="authParams"> Параметры авторизации </param>
            <exception cref="T:VkNet.Exception.VkApiAuthorizationException"> </exception>
        </member>
    </members>
</doc>
